/*!
 * @maptalks/vt v0.79.1
 * LICENSE : undefined
 * (c) 2016-2023 maptalks.org
 */
!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports, require("maptalks"), require("@maptalks/gl")) : "function" == typeof define && define.amd ? define([ "exports", "maptalks", "@maptalks/gl" ], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).maptalks = t.maptalks || {}, t.maptalks, t.maptalksgl);
}(this, (function(t, e, n) {
    function i(t) {
        if (t && t.t) return t;
        var e = Object.create(null);
        return t && Object.keys(t).forEach((function(n) {
            if ("default" !== n) {
                var i = Object.getOwnPropertyDescriptor(t, n);
                Object.defineProperty(e, n, i.get ? i : {
                    enumerable: !0,
                    get: function() {
                        return t[n];
                    }
                });
            }
        })), e.default = t, Object.freeze(e);
    }
    var r = i(e), o = i(n);
    const s = 'function(t){let e;const n={width:100,height:10};function i(){if(!e){const{width:t,height:i}=n;OffscreenCanvas?e=new OffscreenCanvas(t,i):(e=document.createElement("canvas"),e.width=t,e.height=i)}return e}class r{constructor(t,e={}){if(!Array.isArray(t))return void console.error("colors is not array");if(t.length<2)return void console.error("colors.length should >1");this.colors=t;let i=1/0,r=-1/0;for(let e=0,n=t.length;e<n;e++){const n=t[e][0];i=Math.min(n,i),r=Math.max(n,r)}this.min=i,this.max=r,this.valueOffset=this.max-this.min,this.options=Object.assign({},n,e),this.t()}getImageData(){return this.imgData}t(){const t=i(),{width:e,height:n}=this.options;t.width=e,t.height=n;const r=t.getContext("2d");r.clearRect(0,0,t.width,t.height);const o=r.createLinearGradient(0,0,t.width,0),{colors:s,valueOffset:a}=this;for(let t=0,e=s.length;t<e;t++){const[e,n]=s[t],i=(e-this.min)/a;o.addColorStop(i,n)}r.fillStyle=o,r.fillRect(0,0,t.width,t.height),this.imgData=r.getImageData(0,0,t.width,t.height)}getColor(t){t=Math.max(this.min,t);const e=((t=Math.min(t,this.max))-this.min)/this.valueOffset;let n=Math.round(e*this.imgData.width);n=Math.min(n,this.imgData.width-1);const i=4*n;return[this.imgData.data[i],this.imgData.data[i+1],this.imgData.data[i+2],this.imgData.data[i+3]]}}var o;function s(t,e){for(let n=0;n<t.stops.length;n++)if(e===t.stops[n][0])return t.stops[n][1];return t.default}function a(t,e){for(var n=0;n<t.stops.length&&!(e<t.stops[n][0]);n++);return t.stops[Math.max(n-1,0)][1]}function l(t,e){for(var n=void 0!==t.base?t.base:1,i=0;!(i>=t.stops.length||e<=t.stops[i][0]);)i++;return 0===i?t.stops[i][1]:i===t.stops.length?t.stops[i-1][1]:function t(e,n,i,r,o,s){return"function"==typeof o?function(){var a=o.apply(void 0,arguments),l=s.apply(void 0,arguments);return t(e,n,i,r,a,l)}:o.length?function(t,e,n,i,r,o){var s=[];for(let a=0;a<r.length;a++)s[a]=d(t,e,n,i,r[a],o[a]);return s}(e,n,i,r,o,s):d(e,n,i,r,o,s)}(e,n,t.stops[i-1][0],t.stops[i][0],t.stops[i-1][1],t.stops[i][1])}"function"==typeof Map&&(o=new Map);const u={width:100,height:1};function c(t,e){const n=t.stops;if(n&&n.length>1){let t;if(o){const e=JSON.stringify(n);if(!o.has(e)){const t=new r(n,u);o.set(e,t)}t=o.get(e)}else t=new r(n,u);const[i,s,a,l]=t.getColor(e);return[i/255,s/255,a/255,l/255]}return n&&1===n.length?n[0][1]:null}function h(t,e){return function(t,e,n){return void 0!==t?t:void 0!==e?e:void 0!==n?n:null}(e,t.default)}function d(t,e,n,i,r,o){var s,a=i-n,l=t-n;return r*(1-(s=1===e?l/a:(Math.pow(e,l)-1)/(Math.pow(e,a)-1)))+o*s}function f(t){return t&&"object"==typeof t&&(t.stops||t.property&&"identity"===t.type)}function p(t){return g(t,"exponential")}function m(t){return g(t,"interval")}function y(t,e){if(!t)return null;var n=!1;if(Array.isArray(t)){var i,r=[];for(let o=0;o<t.length;o++)(i=y(t[o],e))?(r.push(i),n=!0):r.push(t[o]);return n?r:t}var o,s={__fn_types_loaded:!0},a=[];for(o in t)t.hasOwnProperty(o)&&a.push(o);const l=function(t){Object.defineProperty(s,t,{get:function(){return this["__fn_"+t]||(this["__fn_"+t]=p(this["_"+t])),this["__fn_"+t].apply(this,e())},set:function(e){this["_"+t]=e},configurable:!0,enumerable:!0})};for(let e=0,i=a.length;e<i;e++)f(t[o=a[e]])?(n=!0,s["_"+o]=t[o],l(o)):s[o]=t[o];return n?s:t}function g(t,e){if(!f(t))return function(){return t};let n=!0,i=!0;const r=(t=JSON.parse(JSON.stringify(t))).stops;if(r)for(let t=0;t<r.length;t++)if(f(r[t][1])){const o=g(r[t][1],e);n=n&&o.isZoomConstant,i=i&&o.isFeatureConstant,r[t]=[r[t][0],o]}const o=function t(e,n){var i,r,o;if(f(e)){var u,d=e.stops&&"object"==typeof e.stops[0][0],p=d||void 0!==e.property,m=d||!p,y=e.type||n||"exponential";if("exponential"===y)u=l;else if("interval"===y)u=a;else if("categorical"===y)u=s;else if("identity"===y)u=h;else{if("color-interpolate"!==y)throw new Error(\'Unknown function type "\'+y+\'"\');u=c}if(d){var g={},b=[];for(let t=0;t<e.stops.length;t++){var v=e.stops[t];void 0===g[v[0].zoom]&&(g[v[0].zoom]={zoom:v[0].zoom,type:e.type,property:e.property,default:e.default,stops:[]}),g[v[0].zoom].stops.push([v[0].value,v[1]])}for(let e in g)b.push([g[e].zoom,t(g[e])]);i=function(t,n){const i=l({stops:b,base:e.base},t)(t,n);return"function"==typeof i?i(t,n):i},r=!1,o=!1}else m?(i=function(t){const n=u(e,t);return"function"==typeof n?n(t):n},r=!0,o=!1):(i=function(t,n){const i=u(e,n?n[e.property]:null);return"function"==typeof i?i(t,n):i},r=!1,o=!0)}else i=function(){return e},r=!0,o=!0;return i.isZoomConstant=o,i.isFeatureConstant=r,i}(t,e);return o.isZoomConstant=n&&o.isZoomConstant,o.isFeatureConstant=i&&o.isFeatureConstant,o}let b=0;const v="function"==typeof Object.assign;function w(t,...e){if(v)return Object.assign(t,...e),t;for(let n=0;n<e.length;n++){const i=e[n];for(const e in i)t[e]=i[e]}return t}function x(t){return!A(t)&&("string"==typeof t||null!==t.constructor&&t.constructor===String)}function k(t){return"number"==typeof t&&!isNaN(t)}function M(t){return!A(t)&&("function"==typeof t||null!==t.constructor&&t.constructor===Function)}function j(t){return!Array.isArray(t)&&"object"==typeof t&&!!t}function A(t){return null==t}function F(t){for(let e=1;e<arguments.length;e++){const n=arguments[e];if(n)for(let e=0,i=n.length;e<i;e++)t.push(n[e])}return t.length}function T(t){return f(t)&&t.property}const z="function"==typeof fetch&&"function"==typeof AbortController,S={jsonp:function(t,e){const n="_maptalks_jsonp_"+b++;t.match(/\\?/)?t+="&callback="+n:t+="?callback="+n;let i=document.createElement("script");return i.type="text/javascript",i.src=t,window[n]=function(t){e(null,t),document.getElementsByTagName("head")[0].removeChild(i),i=null,delete window[n]},document.getElementsByTagName("head")[0].appendChild(i),this},get:function(t,e,n){if(M(e)){const t=n;n=e,e=t}(e=e||{}).method&&(e.method=e.method.toUpperCase());const i="POST"===e.method;if(z){const i=new AbortController,r=e;return r.signal=i.signal,r.referrerPolicy=r.referrerPolicy||"origin",r.method=r.method||"GET",fetch(t,r).then(i=>{const r=this.o(i,e.returnJSON,e.responseType);r.message?(r.url=t,n(r)):r.then(t=>{"arraybuffer"===e.responseType?n(null,{data:t,cacheControl:i.headers.get("Cache-Control"),expires:i.headers.get("Expires"),contentType:i.headers.get("Content-Type")}):n(null,t)}).catch(t=>{t.code&&t.code===DOMException.ABORT_ERR||(console.error(t),n(t))})}).catch(t=>{t.code&&t.code===DOMException.ABORT_ERR||(console.error(t),n(t))}),i}{const r=S.s(n);if(r.open(e.method||"GET",t,!0),e){for(const t in e.headers)r.setRequestHeader(t,e.headers[t]);r.withCredentials="include"===e.credentials,e.responseType&&(r.responseType=e.responseType)}return r.send(i?e.body:null),r}},o:(t,e,n)=>200!==t.status?{status:t.status,statusText:t.statusText,message:`incorrect http request with status code(${t.status}): ${t.statusText}`}:"arraybuffer"===n?t.arrayBuffer():e?t.json():t.text(),u:function(t,e){return function(){if(4===t.readyState)if(200===t.status)if("arraybuffer"===t.responseType){0===t.response.byteLength?e({status:200,statusText:t.statusText,message:"http status 200 returned without content."}):e(null,{data:t.response,cacheControl:t.getResponseHeader("Cache-Control"),expires:t.getResponseHeader("Expires"),contentType:t.getResponseHeader("Content-Type")})}else e(null,t.responseText);else e({status:t.status,statusText:t.statusText,message:`incorrect http request with status code(${t.status}): ${t.statusText}`})}},s:function(t){let e;try{e=new XMLHttpRequest}catch(t){try{e=new ActiveXObject("Msxml2.XMLHTTP")}catch(t){try{e=new ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}}return e.onreadystatechange=S.u(e,t),e},getArrayBuffer(t,e,n){if(M(e)){const t=n;n=e,e=t}return e||(e={}),e.responseType="arraybuffer",S.get(t,e,n)}};function _(t,e,n,i,r,o){let s=r-n,a=o-i;if(0!==s||0!==a){const l=((t-n)*s+(e-i)*a)/(s*s+a*a);l>1?(n=r,i=o):l>0&&(n+=s*l,i+=a*l)}return s=t-n,a=e-i,s*s+a*a}function P(t,e,n,i,r,o){const s={id:null==t?null:t,type:e,geometry:n,tags:i,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0};r&&(s.layer=r);return function(t,e){const n=t.geometry,i=t.type;if("Point"===i||"MultiPoint"===i||"LineString"===i)I(t,n,e);else if("Polygon"===i)I(t,n[0],e);else if("MultiLineString"===i)for(const i of n)I(t,i,e);else if("MultiPolygon"===i)for(const i of n)I(t,i[0],e)}(s,o?4:3),s}function I(t,e,n){for(let i=0;i<e.length;i+=n)t.minX=Math.min(t.minX,e[i]),t.minY=Math.min(t.minY,e[i+1]),t.maxX=Math.max(t.maxX,e[i]),t.maxY=Math.max(t.maxY,e[i+1])}function O(t,e,n,i){if(i.layer=e,"FeatureCollection"===n.type)for(let e=0;e<n.features.length;e++)q(t,n.features[e],i,e);else"Feature"===n.type?q(t,n,i):q(t,{geometry:n},i)}function q(t,e,n,i){if(!e.geometry)return;const r=e.geometry.coordinates,o=e.geometry.type,s=Math.pow(n.tolerance/((1<<n.maxZoom)*n.extent),2);let a=[],l=e.id;if(n.promoteId?l=e.properties[n.promoteId]:n.generateId&&(l=i||0),"Point"===o)C(r,a,n);else if("MultiPoint"===o)for(const t of r)C(t,a,n);else if("LineString"===o)N(r,a,s,!1,n);else if("MultiLineString"===o){if(n.lineMetrics){for(const i of r)a=[],N(i,a,s,!1,n),t.push(P(l,"LineString",a,e.properties,n.layer,n.hasAltitude));return}E(r,a,s,!1,n)}else if("Polygon"===o)E(r,a,s,!0,n);else{if("MultiPolygon"!==o){if("GeometryCollection"===o){for(const r of e.geometry.geometries)q(t,{id:l,geometry:r,properties:e.properties},n,i);return}throw new Error("Input data is not a valid GeoJSON object.")}for(const t of r){const e=[];E(t,e,s,!0,n),a.push(e)}}t.push(P(l,o,a,e.properties,n.layer,n.hasAltitude))}function C(t,e,n){e.push(R(t[0]),D(t[1],n.projection),0),n.hasAltitude&&(t.length>2?e.push(t[2]):e.push(0))}function N(t,e,n,i,r){let o,s,a=0;for(let n=0;n<t.length;n++){const l=R(t[n][0]),u=D(t[n][1],r.projection);e.push(l,u,0),r.hasAltitude&&(t[n].length>2?e.push(t[n][2]):e.push(0)),n>0&&(a+=i?(o*u-l*s)/2:Math.sqrt(Math.pow(l-o,2)+Math.pow(u-s,2))),o=l,s=u}const l=r.hasAltitude?4:3,u=e.length-l;e[2]=1,function t(e,n,i,r,o=3){let s=r;const a=i-n>>1;let l,u=i-n;const c=e[n],h=e[n+1],d=e[i],f=e[i+1];for(let t=n+o;t<i;t+=o){const n=_(e[t],e[t+1],c,h,d,f);if(n>s)l=t,s=n;else if(n===s){const e=Math.abs(t-a);e<u&&(l=t,u=e)}}s>r&&(l-n>o&&t(e,n,l,r,o),e[l+2]=s,i-l>o&&t(e,l,i,r,o))}(e,0,u,n,l),e[u+2]=1,e.size=Math.abs(a),e.start=0,e.end=e.size}function E(t,e,n,i,r){for(let o=0;o<t.length;o++){const s=[];N(t[o],s,n,i,r),e.push(s)}}function R(t){return t/360+.5}function D(t,e){switch(e){case"EPSG:4326":return(90-t)/360}const n=Math.sin(t*Math.PI/180),i=.5-.25*Math.log((1+n)/(1-n))/Math.PI;return i<0?0:i>1?1:i}function L(t,e,n,i,r,o,s,a){if(i/=e,o>=(n/=e)&&s<i)return t;if(s<n||o>=i)return null;const l=[];for(const e of t){const t=e.geometry;let o=e.type;const s=0===r?e.minX:e.minY,u=0===r?e.maxX:e.maxY;if(s>=n&&u<i){l.push(e);continue}if(u<n||s>=i)continue;let c=[];if("Point"===o||"MultiPoint"===o)$(t,c,n,i,r,a.hasAltitude);else if("LineString"===o)U(t,c,n,i,r,!1,a.lineMetrics,a.hasAltitude);else if("MultiLineString"===o)J(t,c,n,i,r,!1,a.hasAltitude);else if("Polygon"===o)J(t,c,n,i,r,!0,a.hasAltitude);else if("MultiPolygon"===o)for(const e of t){const t=[];J(e,t,n,i,r,!0,a.hasAltitude),t.length&&c.push(t)}if(c.length){if(a.lineMetrics&&"LineString"===o){for(const t of c)l.push(P(e.id,o,t,e.tags,e.layer,a.hasAltitude));continue}"LineString"!==o&&"MultiLineString"!==o||(1===c.length?(o="LineString",c=c[0]):o="MultiLineString"),"Point"!==o&&"MultiPoint"!==o||(o=3===c.length?"Point":"MultiPoint"),l.push(P(e.id,o,c,e.tags,e.layer,a.hasAltitude))}}return l.length?l:null}function $(t,e,n,i,r,o){const s=o?4:3;for(let a=0;a<t.length;a+=s){const s=t[a+r];s>=n&&s<=i&&(H(e,t[a],t[a+1],t[a+2]),o&&e.push(t[a+3]))}}function U(t,e,n,i,r,o,s,a){let l=W(t);const u=0===r?G:V;let c,h,d=t.start;const f=a?4:3,p=o?t.length:t.length-f;for(let m=0;m<p;m+=f){const y=t[m],g=t[m+1],b=t[m+2];let v,w,x,k;o&&m===p-f?(v=t[0],w=t[1]):(v=t[m+f],w=t[m+f+1]),a&&(x=t[m+3],k=o&&m===p-f?t[3]:t[m+f+3]);const M=0===r?y:g,j=0===r?v:w;let A=!1;s&&(c=Math.sqrt(Math.pow(y-v,2)+Math.pow(g-w,2))),M<n?j>n&&(h=u(l,y,g,v,w,n),a&&l.push(B(x,k,h)),s&&(l.start=d+c*h)):M>i?j<i&&(h=u(l,y,g,v,w,i),a&&l.push(B(x,k,h)),s&&(l.start=d+c*h)):(H(l,y,g,b),a&&l.push(x)),j<n&&M>=n&&(h=u(l,y,g,v,w,n),a&&l.push(B(x,k,h)),A=!0),j>i&&M<=i&&(h=u(l,y,g,v,w,i),a&&l.push(B(x,k,h)),A=!0),!o&&A&&(s&&(l.end=d+c*h),e.push(l),l=W(t)),s&&(d+=c)}let m=t.length-f;if(!o){const e=t[m],o=t[m+1],s=t[m+2],u=0===r?e:o;if(u>=n&&u<=i&&H(l,e,o,s),u>=n&&u<=i&&a){const e=t[m+3];l.push(e)}}m=l.length-f,o&&m>=f&&(l[m]!==l[0]||l[m+1]!==l[1])&&(H(l,l[0],l[1],l[2]),a&&l.push(l[3])),l.length&&e.push(l)}function W(t){const e=[];return e.size=t.size,e.start=t.start,e.end=t.end,e}function J(t,e,n,i,r,o,s){for(const a of t)U(a,e,n,i,r,o,!1,s)}function H(t,e,n,i){t.push(e,n,i)}function G(t,e,n,i,r,o){const s=(o-e)/(i-e);return H(t,o,n+(r-n)*s,1),s}function V(t,e,n,i,r,o){const s=(o-n)/(r-n);return H(t,e+(i-e)*s,o,1),s}function B(t,e,n){return t+(e-t)*n}function Z(t,e,n){const i=[];for(let r=0;r<t.length;r++){const o=t[r],s=o.type;let a;if("Point"===s||"MultiPoint"===s||"LineString"===s)a=X(o.geometry,e,n);else if("MultiLineString"===s||"Polygon"===s){a=[];for(const t of o.geometry)a.push(X(t,e,n))}else if("MultiPolygon"===s){a=[];for(const t of o.geometry){const i=[];for(const r of t)i.push(X(r,e,n));a.push(i)}}i.push(P(o.id,s,a,o.tags,o.layer,n))}return i}function X(t,e,n){const i=[];i.size=t.size,void 0!==t.start&&(i.start=t.start,i.end=t.end);const r=n?4:3;for(let o=0;o<t.length;o+=r)i.push(t[o]+e,t[o+1],t[o+2]),n&&i.push(t[o+3]);return i}function Y(t,e,n){if(t.transformed)return t;const i=1<<t.z,r=t.x,o=t.y,s=n?3:2;for(const a of t.features){const t=a.geometry,l=a.type;if(a.geometry=[],1===l)for(let l=0;l<t.length;l+=s)a.geometry.push(K(t[l],t[l+1],e,i,r,o)),n&&a.geometry[a.geometry.length-1].push(t[l+2]);else for(let l=0;l<t.length;l++){const u=[];for(let a=0;a<t[l].length;a+=s)u.push(K(t[l][a],t[l][a+1],e,i,r,o)),n&&u[u.length-1].push(t[l][a+2]);a.geometry.push(u)}}return t.transformed=!0,t}function K(t,e,n,i,r,o){return[Math.round(n*(t*i-r)),Math.round(n*(e*i-o))]}function Q(t,e,n,i,r){const o=e===r.maxZoom?0:r.tolerance/((1<<e)*r.extent),s={features:[],numPoints:0,numSimplified:0,numFeatures:t.length,source:null,x:n,y:i,z:e,transformed:!1,minX:2,minY:1,maxX:-1,maxY:0};for(const e of t)tt(s,e,o,r);return s}function tt(t,e,n,i){const r=e.geometry,o=e.type,s=[],a=i.hasAltitude?4:3;if(t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),"Point"===o||"MultiPoint"===o)for(let e=0;e<r.length;e+=a)s.push(r[e],r[e+1]),i.hasAltitude&&s.push(r[e+3]),t.numPoints++,t.numSimplified++;else if("LineString"===o)nt(s,r,t,n,!1,!1,i);else if("MultiLineString"===o||"Polygon"===o)for(let e=0;e<r.length;e++)nt(s,r[e],t,n,"Polygon"===o,0===e,i);else if("MultiPolygon"===o)for(let e=0;e<r.length;e++){const o=r[e];for(let e=0;e<o.length;e++)nt(s,o[e],t,n,!0,0===e,i)}if(s.length){let n=e.tags||null;if("LineString"===o&&i.lineMetrics){n={};for(const t in e.tags)n[t]=e.tags[t];n.mapbox_clip_start=r.start/r.size,n.mapbox_clip_end=r.end/r.size}const a={geometry:s,type:"Polygon"===o||"MultiPolygon"===o?3:"LineString"===o||"MultiLineString"===o?2:1,tags:n};e.layer&&(a.layer=e.layer),null!==e.id&&(a.id=e.id),t.features.push(a)}}function et(t,e,n){return 0===t[e+2]&&t[e+3]>0&&n}function nt(t,e,n,i,r,o,s){const a=i*i,{hasAltitude:l,disableFilter:u}=s,c=l?4:3;if(!u&&i>0&&e.size<(r?a:i))return void(n.numPoints+=e.length/c);const h=[];for(let t=0;t<e.length;t+=c)(0===i||e[t+2]>a||et(e,t,l))&&(n.numSimplified++,h.push(e[t],e[t+1]),l&&h.push(e[t+3])),n.numPoints++;r&&function(t,e,n){const i=n?3:2;let r=0;for(let e=0,n=t.length,o=n-i;e<n;o=e,e+=i)r+=(t[e]-t[o])*(t[e+1]+t[o+1]);if(r>0===e){const e=i,r=i-1,o=i-2;for(let s=0,a=t.length;s<a/2;s+=i){const i=t[s],l=t[s+1];let u;n&&(u=t[s+2]),t[s]=t[a-e-s],t[s+1]=t[a-r-s],n&&(t[s+2]=t[a-o-s]),t[a-e-s]=i,t[a-r-s]=l,n&&(t[a-o-s]=u)}}}(h,o,l),t.push(h)}S.getJSON=function(t,e,n){if(M(e)){const t=n;n=e,e=t}const i=function(t,e){const i="string"==typeof e?JSON.parse(e):e||null;n(t,i)};return e&&e.jsonp?S.jsonp(t,i):((e=e||{}).returnJSON=!0,S.get(t,e,i))};const it={maxZoom:14,indexMaxZoom:5,indexMaxPoints:1e5,tolerance:3,extent:4096,buffer:64,lineMetrics:!1,promoteId:null,generateId:!1,hasAltitude:!1,disableFilter:!1,debug:0};class rt{constructor(t,e){const n=(e=this.options=function(t,e){for(const n in e)t[n]=e[n];return t}(Object.create(it),e)).debug;if(n&&console.time("preprocess data"),e.maxZoom<0||e.maxZoom>24)throw new Error("maxZoom should be in the 0-24 range");if(e.promoteId&&e.generateId)throw new Error("promoteId and generateId cannot be used together.");let i=function(t,e){const n=[];if(Array.isArray(t)){for(let i=0;i<t.length;i++)O(n,t[i].layer,t[i].data,e);return n}if("FeatureCollection"===t.type)for(let i=0;i<t.features.length;i++)q(n,t.features[i],e,i);else"Feature"===t.type?q(n,t,e):q(n,{geometry:t},e);return n}(t,e);this.tiles={},this.tileCoords=[],n&&(console.timeEnd("preprocess data"),console.log("index: maxZoom: %d, maxPoints: %d",e.indexMaxZoom,e.indexMaxPoints),console.time("generate tiles"),this.stats={},this.total=0),i=function(t,e){const n=e.buffer/e.extent;let i=t;const r=L(t,1,-1-n,n,0,-1,2,e),o=L(t,1,1-n,2+n,0,-1,2,e);return(r||o)&&(i=L(t,1,-n,1+n,0,-1,2,e)||[],r&&(i=Z(r,1,e.hasAltitude).concat(i)),o&&(i=i.concat(Z(o,-1,e.hasAltitude)))),i}(i,e),i.length&&this.splitTile(i,0,0,0),n&&(i.length&&console.log("features: %d, points: %d",this.tiles[0].numFeatures,this.tiles[0].numPoints),console.timeEnd("generate tiles"),console.log("tiles generated:",this.total,JSON.stringify(this.stats)))}splitTile(t,e,n,i,r,o,s){const a=[t,e,n,i],l=this.options,u=l.debug;for(;a.length;){i=a.pop(),n=a.pop(),e=a.pop(),t=a.pop();const c=1<<e,h=ot(e,n,i);let d=this.tiles[h];if(!d&&(u>1&&console.time("creation"),d=this.tiles[h]=Q(t,e,n,i,l),this.tileCoords.push({z:e,x:n,y:i}),u)){u>1&&(console.log("tile z%d-%d-%d (features: %d, points: %d, simplified: %d)",e,n,i,d.numFeatures,d.numPoints,d.numSimplified),console.timeEnd("creation"));const t="z"+e;this.stats[t]=(this.stats[t]||0)+1,this.total++}if(d.source=t,null==r){if(e===l.indexMaxZoom||d.numPoints<=l.indexMaxPoints)continue}else{if(e===l.maxZoom||e===r)continue;if(null!=r){const t=r-e;if(n!==o>>t||i!==s>>t)continue}}if(d.source=null,0===t.length)continue;u>1&&console.time("clipping");const f=.5*l.buffer/l.extent,p=.5-f,m=.5+f,y=1+f;let g=null,b=null,v=null,w=null,x=L(t,c,n-f,n+m,0,d.minX,d.maxX,l),k=L(t,c,n+p,n+y,0,d.minX,d.maxX,l);t=null,x&&(g=L(x,c,i-f,i+m,1,d.minY,d.maxY,l),b=L(x,c,i+p,i+y,1,d.minY,d.maxY,l),x=null),k&&(v=L(k,c,i-f,i+m,1,d.minY,d.maxY,l),w=L(k,c,i+p,i+y,1,d.minY,d.maxY,l),k=null),u>1&&console.timeEnd("clipping"),a.push(g||[],e+1,2*n,2*i),a.push(b||[],e+1,2*n,2*i+1),a.push(v||[],e+1,2*n+1,2*i),a.push(w||[],e+1,2*n+1,2*i+1)}}getTile(t,e,n){t=+t,e=+e,n=+n;const i=this.options,{extent:r,debug:o}=i,{hasAltitude:s}=i;if(t<0||t>24)return null;const a=1<<t,l=ot(t,e=e+a&a-1,n);if(this.tiles[l])return Y(this.tiles[l],r,s);o>1&&console.log("drilling down to z%d-%d-%d",t,e,n);let u,c=t,h=e,d=n;for(;!u&&c>0;)c--,h>>=1,d>>=1,u=this.tiles[ot(c,h,d)];return u&&u.source?(o>1&&(console.log("found parent tile z%d-%d-%d",c,h,d),console.time("drilling down")),this.splitTile(u.source,c,h,d,t,e,n),o>1&&console.timeEnd("drilling down"),this.tiles[l]?Y(this.tiles[l],r,s):null):null}}function ot(t,e,n){return 32*((1<<t)*n+e)+t}function st(t,e,n,i,r,o){const s=n&&Array.isArray(n[0]);for(let a=0,l=n.length;a<l;a++){t[e]=Math.round((s?n[a][0]:n[a].x)*i),t[e+1]=Math.round((s?n[a][1]:n[a].y)*i);let u=r||0;Array.isArray(r)&&(u=r[a]),u=u?Math.round(i*u):0,t[e+2]=u,e+=3,o&&0!==a&&a!==l-1&&(t[e]=t[e-3],t[e+1]=t[e-2],t[e+2]=t[e-1],e+=3)}return e}function at(t,e,n,i){const r=t[3*e],o=t[3*e+1],s=t[3*n],a=t[3*n+1];return r===s&&(r<0||r>i)||o===a&&(o<0||o>i)}class lt{constructor(t,e){this.x=t,this.y=e}clone(){return new lt(this.x,this.y)}normalize(){const t=this.length();this.x/=t,this.y/=t}negate(){this.x=-this.x,this.y=-this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}diff(t){return new lt(this.x-t.x,this.y-t.y)}distance(t){const e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)}dot(t){return this.x*t.x+this.y*t.y}equals(t){return this.x===t.x&&this.y===t.y}orthogonal(){return new lt(this.y,-this.x)}}function ut(t,e,n){const i=(e.x-t.x)*(n.y-t.y)-(e.y-t.y)*(n.x-t.x);return i>1e-5?1:i<-1e-5?2:0}function ct(t,e,n,i){const r=e.x*i.y-e.y*i.x,o=n.x-t.x,s=n.y-t.y,a=(o*i.y-s*i.x)/r;return new lt(t.x+a*e.x,t.y+a*e.y)}const ht=[];function dt(t,e,n){let i=0;const r=[];for(let o=e;o<n;o+=3)ht[i]?(ht[i].x=t[o],ht[i].y=t[o+1]):ht[i]=new lt(t[o],t[o+1]),r.push(ht[i]),i++;const o=function(t){let e;this.UpdateOmbb=function(t,n,i,r,o,s,a,l){const u=ct(t,n,o,s),c=ct(i,r,o,s),h=ct(a,l,t,n),d=ct(a,l,i,r),f=u.distance(c)*u.distance(h);f<this.BestObbArea&&(e=[u,h,d,c],this.BestObbArea=f)},this.BestObbArea=Number.MAX_VALUE;const n=[];for(let e=0;e<t.length;e++)n.push(t[(e+1)%t.length].diff(t[e])),n[e].normalize();const i=new lt(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),r=new lt(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY);let o,s,a,l;for(let e=0;e<t.length;e++){const n=t[e];n.x<i.x&&(i.x=n.x,o=e),n.x>r.x&&(r.x=n.x,s=e),n.y<i.y&&(i.y=n.y,l=e),n.y>r.y&&(r.y=n.y,a=e)}let u=new lt(0,-1),c=new lt(0,1),h=new lt(-1,0),d=new lt(1,0);for(let e=0;e<t.length;e++){const e=[Math.acos(u.dot(n[o])),Math.acos(c.dot(n[s])),Math.acos(h.dot(n[a])),Math.acos(d.dot(n[l]))];switch(e.indexOf(Math.min.apply(Math,e))){case 0:u=n[o].clone(),c=u.clone(),c.negate(),h=u.orthogonal(),d=h.clone(),d.negate(),o=(o+1)%t.length;break;case 1:c=n[s].clone(),u=c.clone(),u.negate(),h=u.orthogonal(),d=h.clone(),d.negate(),s=(s+1)%t.length;break;case 2:h=n[a].clone(),d=h.clone(),d.negate(),u=d.orthogonal(),c=u.clone(),c.negate(),a=(a+1)%t.length;break;case 3:d=n[l].clone(),h=d.clone(),h.negate(),u=d.orthogonal(),c=u.clone(),c.negate(),l=(l+1)%t.length}this.UpdateOmbb(t[o],u,t[s],c,t[a],h,t[l],d)}return e}(function(t){if(t.length<3)return t;let e=t[0];const n=[];for(let n=1;n<t.length;n++)(t[n].x<e.x||Math.abs(t[n].x-e.x)<1e-5&&t[n].y<e.y)&&(e=t[n]);let i=t[0];do{n.unshift(e.clone());for(let n=1;n<t.length;n++){const r=ut(e,i,t[n]);(i.equals(e)||1===r||0===r&&e.distance(t[n])>e.distance(i))&&(i=t[n])}e=i}while(!i.equals(n[n.length-1]));return n}(r)),s=o[0].distance(o[1]),a=o[1].distance(o[2]),l=o.map(t=>[t.x,t.y]);return l.push(+(a>s)),l}var ft="undefined"!=typeof Float32Array?Float32Array:Array;function pt(){var t=new ft(3);return ft!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function mt(t,e,n){var i=new ft(3);return i[0]=t,i[1]=e,i[2]=n,i}function yt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function gt(t,e,n,i){return t[0]=e,t[1]=n,t[2]=i,t}function bt(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function vt(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function wt(t,e){var n=e[0],i=e[1],r=e[2],o=n*n+i*i+r*r;return o>0&&(o=1/Math.sqrt(o),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o),t}function xt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function kt(t,e,n){var i=e[0],r=e[1],o=e[2],s=n[0],a=n[1],l=n[2];return t[0]=r*l-o*a,t[1]=o*s-i*l,t[2]=i*a-r*s,t}var Mt=function(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t};function jt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function At(t,e,n,i,r){return t[0]=e,t[1]=n,t[2]=i,t[3]=r,t}function Ft(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t}function Tt(){var t=new ft(4);return ft!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function zt(t,e){var n=e[0]+e[4]+e[8],i=void 0;if(n>0)i=Math.sqrt(n+1),t[3]=.5*i,i=.5/i,t[0]=(e[5]-e[7])*i,t[1]=(e[6]-e[2])*i,t[2]=(e[1]-e[3])*i;else{var r=0;e[4]>e[0]&&(r=1),e[8]>e[3*r+r]&&(r=2);var o=(r+1)%3,s=(r+2)%3;i=Math.sqrt(e[3*r+r]-e[3*o+o]-e[3*s+s]+1),t[r]=.5*i,i=.5/i,t[3]=(e[3*o+s]-e[3*s+o])*i,t[o]=(e[3*o+r]+e[3*r+o])*i,t[s]=(e[3*s+r]+e[3*r+s])*i}return t}pt(),function(){var t,e=(t=new ft(4),ft!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t)}();var St,_t=Ft,Pt=function(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],s=n*n+i*i+r*r+o*o;return s>0&&(s=1/Math.sqrt(s),t[0]=n*s,t[1]=i*s,t[2]=r*s,t[3]=o*s),t};function It(t,e){var n=e[0]-t[0],i=e[1]-t[1];return Math.sqrt(n*n+i*i)}pt(),mt(1,0,0),mt(0,1,0),Tt(),Tt(),St=new ft(9),ft!=Float32Array&&(St[1]=0,St[2]=0,St[3]=0,St[5]=0,St[6]=0,St[7]=0),St[0]=1,St[4]=1,St[8]=1;var Ot=function(t){var e=t[0],n=t[1];return Math.sqrt(e*e+n*n)};function qt(t,e,n,i,r,o,s,a,l,u){0===t?function(t,e,n,i,r,o,s,a,l){const u=[0,0];for(let r=t;r<e;r+=3){const t=r/3*2,e=i[r],c=i[r+1];n[t]=u[0]+e*o*s/a,n[t+1]=u[1]-c*o*s/l}}(e,n,i,r,0,s,a,l,u):1===t&&function(t,e,n,i){const r=dt(i,t,e),o=r[4],s=r[o],a=r[o+1],l=r[o+2],u=(a[1]-s[1])/(a[0]-s[0]),c=(l[1]-a[1])/(l[0]-a[0]),h=It(s,a),d=It(a,l);for(let r=t;r<e;r+=3){const t=r/3*2,e=i[r],o=i[r+1];n[t]=Nt(e,o,s,u,h),n[t+1]=-Nt(e,o,a,c,d)}}(e,n,i,r)}!function(){var t=function(){var t=new ft(2);return ft!=Float32Array&&(t[0]=0,t[1]=0),t}()}();const Ct=[];function Nt(t,e,n,i,r){return Ct[0]=(i*i*n[0]+i*(e-n[1])+t)/(i*i+1),Ct[1]=i*(Ct[0]-n[0])+n[1],It(n,Ct)/r}function Et(t,e,n,i,r){const o=3*e[n-1],s=3*e[n-1]+1,a=t[o],l=t[s];return u=i,c=r,h=a,d=l,Math.sqrt((h-u)*(h-u)+(d-c)*(d-c));var u,c,h,d}"undefined"!=typeof undefinedThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof undefined?global:"undefined"!=typeof self&&self;var Rt=Dt;function Dt(t,e){this.x=t,this.y=e}function Lt(t,e,n){n=n||{},this.w=t||64,this.h=e||64,this.autoResize=!!n.autoResize,this.shelves=[],this.freebins=[],this.stats={},this.bins={},this.maxId=0}function $t(t,e,n){this.x=0,this.y=t,this.w=this.free=e,this.h=n}function Ut(t,e,n,i,r,o,s){this.id=t,this.x=e,this.y=n,this.w=i,this.h=r,this.maxw=o||i,this.maxh=s||r,this.refcount=0}Dt.prototype={clone:function(){return new Dt(this.x,this.y)},add:function(t){return this.clone().m(t)},sub:function(t){return this.clone().v(t)},multByPoint:function(t){return this.clone().k(t)},divByPoint:function(t){return this.clone().M(t)},mult:function(t){return this.clone().j(t)},div:function(t){return this.clone().A(t)},rotate:function(t){return this.clone().F(t)},rotateAround:function(t,e){return this.clone().T(t,e)},matMult:function(t){return this.clone().S(t)},unit:function(){return this.clone()._()},perp:function(){return this.clone().P()},round:function(){return this.clone().I()},mag:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals:function(t){return this.x===t.x&&this.y===t.y},dist:function(t){return Math.sqrt(this.distSqr(t))},distSqr:function(t){var e=t.x-this.x,n=t.y-this.y;return e*e+n*n},angle:function(){return Math.atan2(this.y,this.x)},angleTo:function(t){return Math.atan2(this.y-t.y,this.x-t.x)},angleWith:function(t){return this.angleWithSep(t.x,t.y)},angleWithSep:function(t,e){return Math.atan2(this.x*e-this.y*t,this.x*t+this.y*e)},S:function(t){var e=t[0]*this.x+t[1]*this.y,n=t[2]*this.x+t[3]*this.y;return this.x=e,this.y=n,this},m:function(t){return this.x+=t.x,this.y+=t.y,this},v:function(t){return this.x-=t.x,this.y-=t.y,this},j:function(t){return this.x*=t,this.y*=t,this},A:function(t){return this.x/=t,this.y/=t,this},k:function(t){return this.x*=t.x,this.y*=t.y,this},M:function(t){return this.x/=t.x,this.y/=t.y,this},_:function(){return this.A(this.mag()),this},P:function(){var t=this.y;return this.y=this.x,this.x=-t,this},F:function(t){var e=Math.cos(t),n=Math.sin(t),i=e*this.x-n*this.y,r=n*this.x+e*this.y;return this.x=i,this.y=r,this},T:function(t,e){var n=Math.cos(t),i=Math.sin(t),r=e.x+n*(this.x-e.x)-i*(this.y-e.y),o=e.y+i*(this.x-e.x)+n*(this.y-e.y);return this.x=r,this.y=o,this},I:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}},Dt.convert=function(t){return t instanceof Dt?t:Array.isArray(t)?new Dt(t[0],t[1]):t},Lt.prototype.pack=function(t,e){t=[].concat(t),e=e||{};for(var n,i,r,o,s=[],a=0;a<t.length;a++)if(n=t[a].w||t[a].width,i=t[a].h||t[a].height,r=t[a].id,n&&i){if(!(o=this.packOne(n,i,r)))continue;e.inPlace&&(t[a].x=o.x,t[a].y=o.y,t[a].id=o.id),s.push(o)}return this.shrink(),s},Lt.prototype.packOne=function(t,e,n){var i,r,o,s,a,l,u,c,h={freebin:-1,shelf:-1,waste:1/0},d=0;if("string"==typeof n||"number"==typeof n){if(i=this.getBin(n))return this.ref(i),i;"number"==typeof n&&(this.maxId=Math.max(n,this.maxId))}else n=++this.maxId;for(s=0;s<this.freebins.length;s++){if(e===(i=this.freebins[s]).maxh&&t===i.maxw)return this.allocFreebin(s,t,e,n);e>i.maxh||t>i.maxw||e<=i.maxh&&t<=i.maxw&&(o=i.maxw*i.maxh-t*e)<h.waste&&(h.waste=o,h.freebin=s)}for(s=0;s<this.shelves.length;s++)if(d+=(r=this.shelves[s]).h,!(t>r.free)){if(e===r.h)return this.allocShelf(s,t,e,n);e>r.h||e<r.h&&(o=(r.h-e)*t)<h.waste&&(h.freebin=-1,h.waste=o,h.shelf=s)}return-1!==h.freebin?this.allocFreebin(h.freebin,t,e,n):-1!==h.shelf?this.allocShelf(h.shelf,t,e,n):e<=this.h-d&&t<=this.w?(r=new $t(d,this.w,e),this.allocShelf(this.shelves.push(r)-1,t,e,n)):this.autoResize?(a=l=this.h,((u=c=this.w)<=a||t>u)&&(c=2*Math.max(t,u)),(a<u||e>a)&&(l=2*Math.max(e,a)),this.resize(c,l),this.packOne(t,e,n)):null},Lt.prototype.allocFreebin=function(t,e,n,i){var r=this.freebins.splice(t,1)[0];return r.id=i,r.w=e,r.h=n,r.refcount=0,this.bins[i]=r,this.ref(r),r},Lt.prototype.allocShelf=function(t,e,n,i){var r=this.shelves[t].alloc(e,n,i);return this.bins[i]=r,this.ref(r),r},Lt.prototype.shrink=function(){if(this.shelves.length>0){for(var t=0,e=0,n=0;n<this.shelves.length;n++){var i=this.shelves[n];e+=i.h,t=Math.max(i.w-i.free,t)}this.resize(t,e)}},Lt.prototype.getBin=function(t){return this.bins[t]},Lt.prototype.ref=function(t){if(1==++t.refcount){var e=t.h;this.stats[e]=1+(0|this.stats[e])}return t.refcount},Lt.prototype.unref=function(t){return 0===t.refcount?0:(0==--t.refcount&&(this.stats[t.h]--,delete this.bins[t.id],this.freebins.push(t)),t.refcount)},Lt.prototype.clear=function(){this.shelves=[],this.freebins=[],this.stats={},this.bins={},this.maxId=0},Lt.prototype.resize=function(t,e){this.w=t,this.h=e;for(var n=0;n<this.shelves.length;n++)this.shelves[n].resize(t);return!0},$t.prototype.alloc=function(t,e,n){if(t>this.free||e>this.h)return null;var i=this.x;return this.x+=t,this.free-=t,new Ut(n,i,this.y,t,e,t,this.h)},$t.prototype.resize=function(t){return this.free+=t-this.w,this.w=t,!0};var Wt={exports:{}},Jt={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},Ht={exports:{}},Gt=function(t){return!(!t||"string"==typeof t)&&(t instanceof Array||Array.isArray(t)||t.length>=0&&(t.splice instanceof Function||Object.getOwnPropertyDescriptor(t,t.length-1)&&"String"!==t.constructor.name))},Vt=Array.prototype.concat,Bt=Array.prototype.slice,Zt=Ht.exports=function(t){for(var e=[],n=0,i=t.length;n<i;n++){var r=t[n];Gt(r)?e=Vt.call(e,Bt.call(r)):e.push(r)}return e};Zt.wrap=function(t){return function(){return t(Zt(arguments))}};var Xt=Jt,Yt=Ht.exports,Kt=Object.hasOwnProperty,Qt=Object.create(null);for(var te in Xt)Kt.call(Xt,te)&&(Qt[Xt[te]]=te);var ee=Wt.exports={to:{},get:{}};function ne(t,e,n){return Math.min(Math.max(e,t),n)}function ie(t){var e=Math.round(t).toString(16).toUpperCase();return e.length<2?"0"+e:e}ee.get=function(t){var e,n;switch(t.substring(0,3).toLowerCase()){case"hsl":e=ee.get.hsl(t),n="hsl";break;case"hwb":e=ee.get.hwb(t),n="hwb";break;default:e=ee.get.rgb(t),n="rgb"}return e?{model:n,value:e}:null},ee.get.rgb=function(t){if(!t)return null;var e,n,i,r=[0,0,0,1];if(e=t.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)){for(i=e[2],e=e[1],n=0;n<3;n++){var o=2*n;r[n]=parseInt(e.slice(o,o+2),16)}i&&(r[3]=parseInt(i,16)/255)}else if(e=t.match(/^#([a-f0-9]{3,4})$/i)){for(i=(e=e[1])[3],n=0;n<3;n++)r[n]=parseInt(e[n]+e[n],16);i&&(r[3]=parseInt(i+i,16)/255)}else if(e=t.match(/^rgba?\\(\\s*([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/)){for(n=0;n<3;n++)r[n]=parseInt(e[n+1],0);e[4]&&(e[5]?r[3]=.01*parseFloat(e[4]):r[3]=parseFloat(e[4]))}else{if(!(e=t.match(/^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/)))return(e=t.match(/^(\\w+)$/))?"transparent"===e[1]?[0,0,0,0]:Kt.call(Xt,e[1])?((r=Xt[e[1]])[3]=1,r):null:null;for(n=0;n<3;n++)r[n]=Math.round(2.55*parseFloat(e[n+1]));e[4]&&(e[5]?r[3]=.01*parseFloat(e[4]):r[3]=parseFloat(e[4]))}for(n=0;n<3;n++)r[n]=ne(r[n],0,255);return r[3]=ne(r[3],0,1),r},ee.get.hsl=function(t){if(!t)return null;var e=t.match(/^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*(?:[,|\\/]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/);if(e){var n=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,ne(parseFloat(e[2]),0,100),ne(parseFloat(e[3]),0,100),ne(isNaN(n)?1:n,0,1)]}return null},ee.get.hwb=function(t){if(!t)return null;var e=t.match(/^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/);if(e){var n=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,ne(parseFloat(e[2]),0,100),ne(parseFloat(e[3]),0,100),ne(isNaN(n)?1:n,0,1)]}return null},ee.to.hex=function(){var t=Yt(arguments);return"#"+ie(t[0])+ie(t[1])+ie(t[2])+(t[3]<1?ie(Math.round(255*t[3])):"")},ee.to.rgb=function(){var t=Yt(arguments);return t.length<4||1===t[3]?"rgb("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+")":"rgba("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+", "+t[3]+")"},ee.to.rgb.percent=function(){var t=Yt(arguments),e=Math.round(t[0]/255*100),n=Math.round(t[1]/255*100),i=Math.round(t[2]/255*100);return t.length<4||1===t[3]?"rgb("+e+"%, "+n+"%, "+i+"%)":"rgba("+e+"%, "+n+"%, "+i+"%, "+t[3]+")"},ee.to.hsl=function(){var t=Yt(arguments);return t.length<4||1===t[3]?"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)":"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+t[3]+")"},ee.to.hwb=function(){var t=Yt(arguments),e="";return t.length>=4&&1!==t[3]&&(e=", "+t[3]),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+e+")"},ee.to.keyword=function(t){return Qt[t.slice(0,3)]};var re={exports:{}},oe=Jt,se={};for(var ae in oe)oe.hasOwnProperty(ae)&&(se[oe[ae]]=ae);var le=re.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var ue in le)if(le.hasOwnProperty(ue)){if(!("channels"in le[ue]))throw new Error("missing channels property: "+ue);if(!("labels"in le[ue]))throw new Error("missing channel labels property: "+ue);if(le[ue].labels.length!==le[ue].channels)throw new Error("channel and label counts mismatch: "+ue);var ce=le[ue].channels,he=le[ue].labels;delete le[ue].channels,delete le[ue].labels,Object.defineProperty(le[ue],"channels",{value:ce}),Object.defineProperty(le[ue],"labels",{value:he})}function de(t,e){return Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2)}le.rgb.hsl=function(t){var e,n,i=t[0]/255,r=t[1]/255,o=t[2]/255,s=Math.min(i,r,o),a=Math.max(i,r,o),l=a-s;return a===s?e=0:i===a?e=(r-o)/l:r===a?e=2+(o-i)/l:o===a&&(e=4+(i-r)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(s+a)/2,[e,100*(a===s?0:n<=.5?l/(a+s):l/(2-a-s)),100*n]},le.rgb.hsv=function(t){var e,n,i,r,o,s=t[0]/255,a=t[1]/255,l=t[2]/255,u=Math.max(s,a,l),c=u-Math.min(s,a,l),h=function(t){return(u-t)/6/c+.5};return 0===c?r=o=0:(o=c/u,e=h(s),n=h(a),i=h(l),s===u?r=i-n:a===u?r=1/3+e-i:l===u&&(r=2/3+n-e),r<0?r+=1:r>1&&(r-=1)),[360*r,100*o,100*u]},le.rgb.hwb=function(t){var e=t[0],n=t[1],i=t[2];return[le.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(n,i))),100*(i=1-1/255*Math.max(e,Math.max(n,i)))]},le.rgb.cmyk=function(t){var e,n=t[0]/255,i=t[1]/255,r=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-i,1-r)))/(1-e)||0),100*((1-i-e)/(1-e)||0),100*((1-r-e)/(1-e)||0),100*e]},le.rgb.keyword=function(t){var e=se[t];if(e)return e;var n,i=1/0;for(var r in oe)if(oe.hasOwnProperty(r)){var o=de(t,oe[r]);o<i&&(i=o,n=r)}return n},le.keyword.rgb=function(t){return oe[t]},le.rgb.xyz=function(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255;return[100*(.4124*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(i=i>.04045?Math.pow((i+.055)/1.055,2.4):i/12.92)),100*(.2126*e+.7152*n+.0722*i),100*(.0193*e+.1192*n+.9505*i)]},le.rgb.lab=function(t){var e=le.rgb.xyz(t),n=e[0],i=e[1],r=e[2];return i/=100,r/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116)-16,500*(n-i),200*(i-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},le.hsl.rgb=function(t){var e,n,i,r,o,s=t[0]/360,a=t[1]/100,l=t[2]/100;if(0===a)return[o=255*l,o,o];e=2*l-(n=l<.5?l*(1+a):l+a-l*a),r=[0,0,0];for(var u=0;u<3;u++)(i=s+1/3*-(u-1))<0&&i++,i>1&&i--,o=6*i<1?e+6*(n-e)*i:2*i<1?n:3*i<2?e+(n-e)*(2/3-i)*6:e,r[u]=255*o;return r},le.hsl.hsv=function(t){var e=t[0],n=t[1]/100,i=t[2]/100,r=n,o=Math.max(i,.01);return n*=(i*=2)<=1?i:2-i,r*=o<=1?o:2-o,[e,100*(0===i?2*r/(o+r):2*n/(i+n)),100*((i+n)/2)]},le.hsv.rgb=function(t){var e=t[0]/60,n=t[1]/100,i=t[2]/100,r=Math.floor(e)%6,o=e-Math.floor(e),s=255*i*(1-n),a=255*i*(1-n*o),l=255*i*(1-n*(1-o));switch(i*=255,r){case 0:return[i,l,s];case 1:return[a,i,s];case 2:return[s,i,l];case 3:return[s,a,i];case 4:return[l,s,i];case 5:return[i,s,a]}},le.hsv.hsl=function(t){var e,n,i,r=t[0],o=t[1]/100,s=t[2]/100,a=Math.max(s,.01);return i=(2-o)*s,n=o*a,[r,100*(n=(n/=(e=(2-o)*a)<=1?e:2-e)||0),100*(i/=2)]},le.hwb.rgb=function(t){var e,n,i,r,o,s,a,l=t[0]/360,u=t[1]/100,c=t[2]/100,h=u+c;switch(h>1&&(u/=h,c/=h),i=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(i=1-i),r=u+i*((n=1-c)-u),e){default:case 6:case 0:o=n,s=r,a=u;break;case 1:o=r,s=n,a=u;break;case 2:o=u,s=n,a=r;break;case 3:o=u,s=r,a=n;break;case 4:o=r,s=u,a=n;break;case 5:o=n,s=u,a=r}return[255*o,255*s,255*a]},le.cmyk.rgb=function(t){var e=t[0]/100,n=t[1]/100,i=t[2]/100,r=t[3]/100;return[255*(1-Math.min(1,e*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r)),255*(1-Math.min(1,i*(1-r)+r))]},le.xyz.rgb=function(t){var e,n,i,r=t[0]/100,o=t[1]/100,s=t[2]/100;return n=-.9689*r+1.8758*o+.0415*s,i=.0557*r+-.204*o+1.057*s,e=(e=3.2406*r+-1.5372*o+-.4986*s)>.0031308?1.055*Math.pow(e,1/2.4)-.055:12.92*e,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,i=i>.0031308?1.055*Math.pow(i,1/2.4)-.055:12.92*i,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(i=Math.min(Math.max(0,i),1))]},le.xyz.lab=function(t){var e=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]},le.lab.xyz=function(t){var e,n,i,r=t[0];e=t[1]/500+(n=(r+16)/116),i=n-t[2]/200;var o=Math.pow(n,3),s=Math.pow(e,3),a=Math.pow(i,3);return n=o>.008856?o:(n-16/116)/7.787,e=s>.008856?s:(e-16/116)/7.787,i=a>.008856?a:(i-16/116)/7.787,[e*=95.047,n*=100,i*=108.883]},le.lab.lch=function(t){var e,n=t[0],i=t[1],r=t[2];return(e=360*Math.atan2(r,i)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(i*i+r*r),e]},le.lch.lab=function(t){var e,n=t[0],i=t[1];return e=t[2]/360*2*Math.PI,[n,i*Math.cos(e),i*Math.sin(e)]},le.rgb.ansi16=function(t){var e=t[0],n=t[1],i=t[2],r=1 in arguments?arguments[1]:le.rgb.hsv(t)[2];if(0===(r=Math.round(r/50)))return 30;var o=30+(Math.round(i/255)<<2|Math.round(n/255)<<1|Math.round(e/255));return 2===r&&(o+=60),o},le.hsv.ansi16=function(t){return le.rgb.ansi16(le.hsv.rgb(t),t[2])},le.rgb.ansi256=function(t){var e=t[0],n=t[1],i=t[2];return e===n&&n===i?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(n/255*5)+Math.round(i/255*5)},le.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return t>50&&(e+=3.5),[e=e/10.5*255,e,e];var n=.5*(1+~~(t>50));return[(1&e)*n*255,(e>>1&1)*n*255,(e>>2&1)*n*255]},le.ansi256.rgb=function(t){if(t>=232){var e=10*(t-232)+8;return[e,e,e]}var n;return t-=16,[Math.floor(t/36)/5*255,Math.floor((n=t%36)/6)/5*255,n%6/5*255]},le.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},le.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var n=e[0];3===e[0].length&&(n=n.split("").map((function(t){return t+t})).join(""));var i=parseInt(n,16);return[i>>16&255,i>>8&255,255&i]},le.rgb.hcg=function(t){var e,n=t[0]/255,i=t[1]/255,r=t[2]/255,o=Math.max(Math.max(n,i),r),s=Math.min(Math.min(n,i),r),a=o-s;return e=a<=0?0:o===n?(i-r)/a%6:o===i?2+(r-n)/a:4+(n-i)/a+4,e/=6,[360*(e%=1),100*a,100*(a<1?s/(1-a):0)]},le.hsl.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=1,r=0;return(i=n<.5?2*e*n:2*e*(1-n))<1&&(r=(n-.5*i)/(1-i)),[t[0],100*i,100*r]},le.hsv.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=e*n,r=0;return i<1&&(r=(n-i)/(1-i)),[t[0],100*i,100*r]},le.hcg.rgb=function(t){var e=t[0]/360,n=t[1]/100,i=t[2]/100;if(0===n)return[255*i,255*i,255*i];var r,o=[0,0,0],s=e%1*6,a=s%1,l=1-a;switch(Math.floor(s)){case 0:o[0]=1,o[1]=a,o[2]=0;break;case 1:o[0]=l,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=a;break;case 3:o[0]=0,o[1]=l,o[2]=1;break;case 4:o[0]=a,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=l}return r=(1-n)*i,[255*(n*o[0]+r),255*(n*o[1]+r),255*(n*o[2]+r)]},le.hcg.hsv=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e),i=0;return n>0&&(i=e/n),[t[0],100*i,100*n]},le.hcg.hsl=function(t){var e=t[1]/100,n=t[2]/100*(1-e)+.5*e,i=0;return n>0&&n<.5?i=e/(2*n):n>=.5&&n<1&&(i=e/(2*(1-n))),[t[0],100*i,100*n]},le.hcg.hwb=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e);return[t[0],100*(n-e),100*(1-n)]},le.hwb.hcg=function(t){var e=t[1]/100,n=1-t[2]/100,i=n-e,r=0;return i<1&&(r=(n-i)/(1-i)),[t[0],100*i,100*r]},le.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},le.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},le.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},le.gray.hsl=le.gray.hsv=function(t){return[0,0,t[0]]},le.gray.hwb=function(t){return[0,100,t[0]]},le.gray.cmyk=function(t){return[0,0,0,t[0]]},le.gray.lab=function(t){return[t[0],0,0]},le.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),n=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(n.length)+n},le.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]};var fe=re.exports;function pe(t){var e=function(){for(var t={},e=Object.keys(fe),n=e.length,i=0;i<n;i++)t[e[i]]={distance:-1,parent:null};return t}(),n=[t];for(e[t].distance=0;n.length;)for(var i=n.pop(),r=Object.keys(fe[i]),o=r.length,s=0;s<o;s++){var a=r[s],l=e[a];-1===l.distance&&(l.distance=e[i].distance+1,l.parent=i,n.unshift(a))}return e}function me(t,e){return function(n){return e(t(n))}}function ye(t,e){for(var n=[e[t].parent,t],i=fe[e[t].parent][t],r=e[t].parent;e[r].parent;)n.unshift(e[r].parent),i=me(fe[e[r].parent][r],i),r=e[r].parent;return i.conversion=n,i}var ge=re.exports,be=function(t){for(var e=pe(t),n={},i=Object.keys(e),r=i.length,o=0;o<r;o++){var s=i[o];null!==e[s].parent&&(n[s]=ye(s,e))}return n},ve={};Object.keys(ge).forEach((function(t){ve[t]={},Object.defineProperty(ve[t],"channels",{value:ge[t].channels}),Object.defineProperty(ve[t],"labels",{value:ge[t].labels});var e=be(t);Object.keys(e).forEach((function(n){var i=e[n];ve[t][n]=function(t){var e=function(e){if(null==e)return e;arguments.length>1&&(e=Array.prototype.slice.call(arguments));var n=t(e);if("object"==typeof n)for(var i=n.length,r=0;r<i;r++)n[r]=Math.round(n[r]);return n};return"conversion"in t&&(e.conversion=t.conversion),e}(i),ve[t][n].raw=function(t){var e=function(e){return null==e?e:(arguments.length>1&&(e=Array.prototype.slice.call(arguments)),t(e))};return"conversion"in t&&(e.conversion=t.conversion),e}(i)}))}));var we=ve,xe=Wt.exports,ke=we,Me=[].slice,je=["keyword","gray","hex"],Ae={};Object.keys(ke).forEach((function(t){Ae[Me.call(ke[t].labels).sort().join("")]=t}));var Fe={};function Te(t,e){if(!(this instanceof Te))return new Te(t,e);if(e&&e in je&&(e=null),e&&!(e in ke))throw new Error("Unknown model: "+e);var n,i;if(null==t)this.model="rgb",this.color=[0,0,0],this.valpha=1;else if(t instanceof Te)this.model=t.model,this.color=t.color.slice(),this.valpha=t.valpha;else if("string"==typeof t){var r=xe.get(t);if(null===r)throw new Error("Unable to parse color from string: "+t);this.model=r.model,i=ke[this.model].channels,this.color=r.value.slice(0,i),this.valpha="number"==typeof r.value[i]?r.value[i]:1}else if(t.length){this.model=e||"rgb",i=ke[this.model].channels;var o=Me.call(t,0,i);this.color=Pe(o,i),this.valpha="number"==typeof t[i]?t[i]:1}else if("number"==typeof t)t&=16777215,this.model="rgb",this.color=[t>>16&255,t>>8&255,255&t],this.valpha=1;else{this.valpha=1;var s=Object.keys(t);"alpha"in t&&(s.splice(s.indexOf("alpha"),1),this.valpha="number"==typeof t.alpha?t.alpha:0);var a=s.sort().join("");if(!(a in Ae))throw new Error("Unable to parse color from object: "+JSON.stringify(t));this.model=Ae[a];var l=ke[this.model].labels,u=[];for(n=0;n<l.length;n++)u.push(t[l[n]]);this.color=Pe(u)}if(Fe[this.model])for(i=ke[this.model].channels,n=0;n<i;n++){var c=Fe[this.model][n];c&&(this.color[n]=c(this.color[n]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}function ze(t,e,n){return(t=Array.isArray(t)?t:[t]).forEach((function(t){(Fe[t]||(Fe[t]=[]))[e]=n})),t=t[0],function(i){var r;return arguments.length?(n&&(i=n(i)),(r=this[t]()).color[e]=i,r):(r=this[t]().color[e],n&&(r=n(r)),r)}}function Se(t){return function(e){return Math.max(0,Math.min(t,e))}}function _e(t){return Array.isArray(t)?t:[t]}function Pe(t,e){for(var n=0;n<e;n++)"number"!=typeof t[n]&&(t[n]=0);return t}Te.prototype={toString:function(){return this.string()},toJSON:function(){return this[this.model]()},string:function(t){var e=this.model in xe.to?this:this.rgb(),n=1===(e=e.round("number"==typeof t?t:1)).valpha?e.color:e.color.concat(this.valpha);return xe.to[e.model](n)},percentString:function(t){var e=this.rgb().round("number"==typeof t?t:1),n=1===e.valpha?e.color:e.color.concat(this.valpha);return xe.to.rgb.percent(n)},array:function(){return 1===this.valpha?this.color.slice():this.color.concat(this.valpha)},object:function(){for(var t={},e=ke[this.model].channels,n=ke[this.model].labels,i=0;i<e;i++)t[n[i]]=this.color[i];return 1!==this.valpha&&(t.alpha=this.valpha),t},unitArray:function(){var t=this.rgb().color;return t[0]/=255,t[1]/=255,t[2]/=255,1!==this.valpha&&t.push(this.valpha),t},unitObject:function(){var t=this.rgb().object();return t.r/=255,t.g/=255,t.b/=255,1!==this.valpha&&(t.alpha=this.valpha),t},round:function(t){return t=Math.max(t||0,0),new Te(this.color.map(function(t){return function(e){return function(t,e){return Number(t.toFixed(e))}(e,t)}}(t)).concat(this.valpha),this.model)},alpha:function(t){return arguments.length?new Te(this.color.concat(Math.max(0,Math.min(1,t))),this.model):this.valpha},red:ze("rgb",0,Se(255)),green:ze("rgb",1,Se(255)),blue:ze("rgb",2,Se(255)),hue:ze(["hsl","hsv","hsl","hwb","hcg"],0,(function(t){return(t%360+360)%360})),saturationl:ze("hsl",1,Se(100)),lightness:ze("hsl",2,Se(100)),saturationv:ze("hsv",1,Se(100)),value:ze("hsv",2,Se(100)),chroma:ze("hcg",1,Se(100)),gray:ze("hcg",2,Se(100)),white:ze("hwb",1,Se(100)),wblack:ze("hwb",2,Se(100)),cyan:ze("cmyk",0,Se(100)),magenta:ze("cmyk",1,Se(100)),yellow:ze("cmyk",2,Se(100)),black:ze("cmyk",3,Se(100)),x:ze("xyz",0,Se(100)),y:ze("xyz",1,Se(100)),z:ze("xyz",2,Se(100)),l:ze("lab",0,Se(100)),a:ze("lab",1),b:ze("lab",2),keyword:function(t){return arguments.length?new Te(t):ke[this.model].keyword(this.color)},hex:function(t){return arguments.length?new Te(t):xe.to.hex(this.rgb().round().color)},rgbNumber:function(){var t=this.rgb().color;return(255&t[0])<<16|(255&t[1])<<8|255&t[2]},luminosity:function(){for(var t=this.rgb().color,e=[],n=0;n<t.length;n++){var i=t[n]/255;e[n]=i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},isDark:function(){var t=this.rgb().color;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},isLight:function(){return!this.isDark()},negate:function(){for(var t=this.rgb(),e=0;e<3;e++)t.color[e]=255-t.color[e];return t},lighten:function(t){var e=this.hsl();return e.color[2]+=e.color[2]*t,e},darken:function(t){var e=this.hsl();return e.color[2]-=e.color[2]*t,e},saturate:function(t){var e=this.hsl();return e.color[1]+=e.color[1]*t,e},desaturate:function(t){var e=this.hsl();return e.color[1]-=e.color[1]*t,e},whiten:function(t){var e=this.hwb();return e.color[1]+=e.color[1]*t,e},blacken:function(t){var e=this.hwb();return e.color[2]+=e.color[2]*t,e},grayscale:function(){var t=this.rgb().color,e=.3*t[0]+.59*t[1]+.11*t[2];return Te.rgb(e,e,e)},fade:function(t){return this.alpha(this.valpha-this.valpha*t)},opaquer:function(t){return this.alpha(this.valpha+this.valpha*t)},rotate:function(t){var e=this.hsl(),n=e.color[0];return n=(n=(n+t)%360)<0?360+n:n,e.color[0]=n,e},mix:function(t,e){if(!t||!t.rgb)throw new Error(\'Argument to "mix" was not a Color instance, but rather an instance of \'+typeof t);var n=t.rgb(),i=this.rgb(),r=void 0===e?.5:e,o=2*r-1,s=n.alpha()-i.alpha(),a=((o*s==-1?o:(o+s)/(1+o*s))+1)/2,l=1-a;return Te.rgb(a*n.red()+l*i.red(),a*n.green()+l*i.green(),a*n.blue()+l*i.blue(),n.alpha()*r+i.alpha()*(1-r))}},Object.keys(ke).forEach((function(t){if(-1===je.indexOf(t)){var e=ke[t].channels;Te.prototype[t]=function(){if(this.model===t)return new Te(this);if(arguments.length)return new Te(arguments,t);var n="number"==typeof arguments[e]?e:this.valpha;return new Te(_e(ke[this.model][t].raw(this.color)).concat(n),t)},Te[t]=function(n){return"number"==typeof n&&(n=Pe(Me.call(arguments),e)),new Te(n,t)}}}));var Ie=Te;\n/*!\n        Feature Filter by\n\n        (c) mapbox 2016 and maptalks 2018\n        www.mapbox.com | www.maptalks.org\n        License: MIT, header required.\n    */const Oe=["Unknown","Point","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon","GeometryCollection"];function qe(t){if(!t)return"true";const e=t[0];if(t.length<=1)return"any"===e?"false":"true";return`(${"=="===e?Ne(t[1],t[2],"===",!1):"!="===e?Ne(t[1],t[2],"!==",!1):"<"===e||">"===e||"<="===e||">="===e?Ne(t[1],t[2],e,!0):"any"===e?Re(t.slice(1),"||"):"all"===e?Re(t.slice(1),"&&"):"none"===e?$e(Re(t.slice(1),"||")):"in"===e?De(t[1],t.slice(2)):"!in"===e?$e(De(t[1],t.slice(2))):"has"===e?Le(t[1]):"!has"===e?$e(Le(t[1])):"contains"===e?function(t,e,n){const i=Ce(t);return void 0!==n?`(${i} + \'\').indexOf("${e}") === ${n}`:`(${i} + \'\').indexOf("${e}") >= 0`}(t[1],t[2],t[3]):"true"})`}function Ce(t){return"$"===t[0]?"f."+t.substring(1):"p["+JSON.stringify(t)+"]"}function Ne(t,e,n,i){if("object"==typeof(r=t)&&r&&t.op)return function(t,e,n,i){const r=t.property,o=t.op;let s=Ce(r);return"length"!==o?(console.error(`not support ${o} op`),"false"):(s=`((${s}+=\'\').length)`,Ee(s,r,e,n,i))}(t,e,n,i);var r;return Ee(Ce(t),t,e,n,i)}function Ee(t,e,n,i,r){const o="$type"===e?Oe.indexOf(n):JSON.stringify(n);return(r?`typeof ${t}=== typeof ${o}&&`:"")+t+i+o}function Re(t,e){return t.map(qe).join(e)}function De(t,e){"$type"===t&&(e=e.map(t=>Oe.indexOf(t)));const n=JSON.stringify(e.sort(Ue)),i=Ce(t);return e.length<=200?`${n}.indexOf(${i}) !== -1`:`function(v, a, i, j) {\\n        while (i <= j) { var m = (i + j) >> 1;\\n            if (a[m] === v) return true; if (a[m] > v) j = m - 1; else i = m + 1;\\n        }\\n    return false; }(${i}, ${n},0,${e.length-1})`}function Le(t){return"$id"===t?\'"id" in f\':JSON.stringify(t)+" in p"}function $e(t){return`!(${t})`}function Ue(t,e){return t<e?-1:t>e?1:0}var We={exports:{}};We.exports=function(){function t(t,e,n){var i=t[e];t[e]=t[n],t[n]=i}function e(t,e){return t<e?-1:t>e?1:0}return function(n,i,r,o,s){!function e(n,i,r,o,s){for(;o>r;){if(o-r>600){var a=o-r+1,l=i-r+1,u=Math.log(a),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(a-c)/a)*(l-a/2<0?-1:1),d=Math.max(r,Math.floor(i-l*c/a+h)),f=Math.min(o,Math.floor(i+(a-l)*c/a+h));e(n,i,d,f,s)}var p=n[i],m=r,y=o;for(t(n,r,i),s(n[o],p)>0&&t(n,r,o);m<y;){for(t(n,m,y),m++,y--;s(n[m],p)<0;)m++;for(;s(n[y],p)>0;)y--}0===s(n[r],p)?t(n,r,y):(y++,t(n,y,o)),y<=i&&(r=y+1),i<=y&&(o=y-1)}}(n,i,r||0,o||n.length-1,s||e)}}();var Je=We.exports,He={exports:{}};function Ge(t,e){if(!(this instanceof Ge))return new Ge(t,e);if(this.data=t||[],this.length=this.data.length,this.compare=e||Ve,this.length>0)for(var n=(this.length>>1)-1;n>=0;n--)this.O(n)}function Ve(t,e){return t<e?-1:t>e?1:0}He.exports=Ge,He.exports.default=Ge,Ge.prototype={push:function(t){this.data.push(t),this.length++,this.q(this.length-1)},pop:function(){if(0!==this.length){var t=this.data[0];return this.length--,this.length>0&&(this.data[0]=this.data[this.length],this.O(0)),this.data.pop(),t}},peek:function(){return this.data[0]},q:function(t){for(var e=this.data,n=this.compare,i=e[t];t>0;){var r=t-1>>1,o=e[r];if(n(i,o)>=0)break;e[t]=o,t=r}e[t]=i},O:function(t){for(var e=this.data,n=this.compare,i=this.length>>1,r=e[t];t<i;){var o=1+(t<<1),s=o+1,a=e[o];if(s<this.length&&n(e[s],a)<0&&(o=s,a=e[s]),n(a,r)>=0)break;e[t]=a,t=o}e[t]=r}};var Be=He.exports;class Ze{constructor(t,e){this.position=t,this.index=e,this.faces=[],this.neighbors=[]}addUniqueNeighbor(t){-1===this.neighbors.indexOf(t)&&this.neighbors.push(t)}}class Xe{constructor(t,e,n,i){this.a=i.a,this.b=i.b,this.c=i.c,this.v1=t,this.v2=e,this.v3=n,this.normal=[],this.computeNormal(),t.faces.push(this),t.addUniqueNeighbor(e),t.addUniqueNeighbor(n),e.faces.push(this),e.addUniqueNeighbor(t),e.addUniqueNeighbor(n),n.faces.push(this),n.addUniqueNeighbor(t),n.addUniqueNeighbor(e)}computeNormal(){const t=this.v1.position,e=this.v2.position,n=this.v3.position,i=kt([],Mt([],n,e),Mt([],t,e));wt(this.normal,i)}hasVertex(t){return t===this.v1||t===this.v2||t===this.v3}}\n/*!\n     * Contains code from google filament\n     * https://github.com/google/filament/\n     * License Apache-2.0\n     */const Ye=[],Ke=[],Qe=[],tn=[];function en(t,e,n){const i=kt(Ke,e,n);t=zt(t,function(t,e,n,i,r,o,s,a,l,u){return t[0]=e,t[1]=n,t[2]=i,t[3]=r,t[4]=o,t[5]=s,t[6]=a,t[7]=l,t[8]=u,t}(Ye,n[0],n[1],n[2],...i,...e));if((t=function(t){return t[3]<0?_t(t,t,-1):t}(t=Pt(t,t)))[3]<1/32767){t[3]=1/32767;const e=Math.sqrt(.9999999990686206);t[0]*=e,t[1]*=e,t[2]*=e}const r=n[3]>0?kt(Qe,n,e):kt(Qe,e,n);return xt(kt(tn,n,e),r)<0&&_t(t,t,-1),t}function nn(t,e){const n=[],i=[];let r=0;for(r=0;r<t.length;r+=3){const e=new Ze([t[r],t[r+1],t[r+2]],r/3);n.push(e)}if(!e.length){const t=e;e=[];for(let n=0;n<t;n++)e.push(n)}for(r=0;r<e.length/3;r++){const t={a:e[3*r],b:e[3*r+1],c:e[3*r+2]};new Xe(n[t.a],n[t.b],n[t.c],t)}const o=[],s=[0,0,0];for(r=0;r<n.length;r++){const t=n[r],e=t.index;gt(s,0,0,0);let a=t.faces.length;for(let e=0;e<a;e++)bt(s,s,t.faces[e].normal);a=a||1,gt(o,a,a,a),vt(s,s,o),i[3*e]=s[0],i[3*e+1]=s[1],i[3*e+2]=s[2]}return i}\n/*!\n     * Contains code from THREE.JS\n     * https://github.com/mrdoob/three.js/\n     * License MIT\n     * \n     * Generate tangents per vertex.\n     */function rn(t,e,n){return t[0]=e[n],t[1]=e[n+1],t[2]=e[n+2],t}function on(t,e,n){return t[0]=e[n],t[1]=e[n+1],t}var sn={exports:{}};function an(t,e,n){n=n||2;var i,r,o,s,a,l,u,c=e&&e.length,h=c?e[0]*n:t.length,d=ln(t,0,h,n,!0),f=[];if(!d||d.next===d.prev)return f;if(c&&(d=function(t,e,n,i){var r,o,s,a,l,u=[];for(r=0,o=e.length;r<o;r++)s=e[r]*i,a=r<o-1?e[r+1]*i:t.length,(l=ln(t,s,a,i,!1))===l.next&&(l.steiner=!0),u.push(vn(l));for(u.sort(mn),r=0;r<u.length;r++)n=yn(u[r],n);return n}(t,e,d,n)),t.length>80*n){i=o=t[0],r=s=t[1];for(var p=n;p<h;p+=n)(a=t[p])<i&&(i=a),(l=t[p+1])<r&&(r=l),a>o&&(o=a),l>s&&(s=l);u=0!==(u=Math.max(o-i,s-r))?32767/u:0}return cn(d,f,n,i,r,u,0),f}function ln(t,e,n,i,r){var o,s;if(r===In(t,e,n,i)>0)for(o=e;o<n;o+=i)s=Sn(o,t[o],t[o+1],s);else for(o=n-i;o>=e;o-=i)s=Sn(o,t[o],t[o+1],s);return s&&Mn(s,s.next)&&(_n(s),s=s.next),s}function un(t,e){if(!t)return t;e||(e=t);var n,i=t;do{if(n=!1,i.steiner||!Mn(i,i.next)&&0!==kn(i.prev,i,i.next))i=i.next;else{if(_n(i),(i=e=i.prev)===i.next)break;n=!0}}while(n||i!==e);return e}function cn(t,e,n,i,r,o,s){if(t){!s&&o&&function(t,e,n,i){var r=t;do{0===r.z&&(r.z=bn(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){var e,n,i,r,o,s,a,l,u=1;do{for(n=t,t=null,o=null,s=0;n;){for(s++,i=n,a=0,e=0;e<u&&(a++,i=i.nextZ);e++);for(l=u;a>0||l>0&&i;)0!==a&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,a--):(r=i,i=i.nextZ,l--),o?o.nextZ=r:t=r,r.prevZ=o,o=r;n=i}o.nextZ=null,u*=2}while(s>1)}(r)}(t,i,r,o);for(var a,l,u=t;t.prev!==t.next;)if(a=t.prev,l=t.next,o?dn(t,i,r,o):hn(t))e.push(a.i/n|0),e.push(t.i/n|0),e.push(l.i/n|0),_n(t),t=l.next,u=l.next;else if((t=l)===u){s?1===s?cn(t=fn(un(t),e,n),e,n,i,r,o,2):2===s&&pn(t,e,n,i,r,o):cn(un(t),e,n,i,r,o,1);break}}}function hn(t){var e=t.prev,n=t,i=t.next;if(kn(e,n,i)>=0)return!1;for(var r=e.x,o=n.x,s=i.x,a=e.y,l=n.y,u=i.y,c=r<o?r<s?r:s:o<s?o:s,h=a<l?a<u?a:u:l<u?l:u,d=r>o?r>s?r:s:o>s?o:s,f=a>l?a>u?a:u:l>u?l:u,p=i.next;p!==e;){if(p.x>=c&&p.x<=d&&p.y>=h&&p.y<=f&&wn(r,a,o,l,s,u,p.x,p.y)&&kn(p.prev,p,p.next)>=0)return!1;p=p.next}return!0}function dn(t,e,n,i){var r=t.prev,o=t,s=t.next;if(kn(r,o,s)>=0)return!1;for(var a=r.x,l=o.x,u=s.x,c=r.y,h=o.y,d=s.y,f=a<l?a<u?a:u:l<u?l:u,p=c<h?c<d?c:d:h<d?h:d,m=a>l?a>u?a:u:l>u?l:u,y=c>h?c>d?c:d:h>d?h:d,g=bn(f,p,e,n,i),b=bn(m,y,e,n,i),v=t.prevZ,w=t.nextZ;v&&v.z>=g&&w&&w.z<=b;){if(v.x>=f&&v.x<=m&&v.y>=p&&v.y<=y&&v!==r&&v!==s&&wn(a,c,l,h,u,d,v.x,v.y)&&kn(v.prev,v,v.next)>=0)return!1;if(v=v.prevZ,w.x>=f&&w.x<=m&&w.y>=p&&w.y<=y&&w!==r&&w!==s&&wn(a,c,l,h,u,d,w.x,w.y)&&kn(w.prev,w,w.next)>=0)return!1;w=w.nextZ}for(;v&&v.z>=g;){if(v.x>=f&&v.x<=m&&v.y>=p&&v.y<=y&&v!==r&&v!==s&&wn(a,c,l,h,u,d,v.x,v.y)&&kn(v.prev,v,v.next)>=0)return!1;v=v.prevZ}for(;w&&w.z<=b;){if(w.x>=f&&w.x<=m&&w.y>=p&&w.y<=y&&w!==r&&w!==s&&wn(a,c,l,h,u,d,w.x,w.y)&&kn(w.prev,w,w.next)>=0)return!1;w=w.nextZ}return!0}function fn(t,e,n){var i=t;do{var r=i.prev,o=i.next.next;!Mn(r,o)&&jn(r,i,i.next,o)&&Tn(r,o)&&Tn(o,r)&&(e.push(r.i/n|0),e.push(i.i/n|0),e.push(o.i/n|0),_n(i),_n(i.next),i=t=o),i=i.next}while(i!==t);return un(i)}function pn(t,e,n,i,r,o){var s=t;do{for(var a=s.next.next;a!==s.prev;){if(s.i!==a.i&&xn(s,a)){var l=zn(s,a);return s=un(s,s.next),l=un(l,l.next),cn(s,e,n,i,r,o,0),void cn(l,e,n,i,r,o,0)}a=a.next}s=s.next}while(s!==t)}function mn(t,e){return t.x-e.x}function yn(t,e){var n=function(t,e){var n,i=e,r=t.x,o=t.y,s=-1/0;do{if(o<=i.y&&o>=i.next.y&&i.next.y!==i.y){var a=i.x+(o-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(a<=r&&a>s&&(s=a,n=i.x<i.next.x?i:i.next,a===r))return n}i=i.next}while(i!==e);if(!n)return null;var l,u=n,c=n.x,h=n.y,d=1/0;i=n;do{r>=i.x&&i.x>=c&&r!==i.x&&wn(o<h?r:s,o,c,h,o<h?s:r,o,i.x,i.y)&&(l=Math.abs(o-i.y)/(r-i.x),Tn(i,t)&&(l<d||l===d&&(i.x>n.x||i.x===n.x&&gn(n,i)))&&(n=i,d=l)),i=i.next}while(i!==u);return n}(t,e);if(!n)return e;var i=zn(n,t);return un(i,i.next),un(n,n.next)}function gn(t,e){return kn(t.prev,t,e.prev)<0&&kn(e.next,t,t.next)<0}function bn(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-n)*r|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-i)*r|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function vn(t){var e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function wn(t,e,n,i,r,o,s,a){return(r-s)*(e-a)>=(t-s)*(o-a)&&(t-s)*(i-a)>=(n-s)*(e-a)&&(n-s)*(o-a)>=(r-s)*(i-a)}function xn(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&jn(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(Tn(t,e)&&Tn(e,t)&&function(t,e){var n=t,i=!1,r=(t.x+e.x)/2,o=(t.y+e.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&r<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i}(t,e)&&(kn(t.prev,t,e.prev)||kn(t,e.prev,e))||Mn(t,e)&&kn(t.prev,t,t.next)>0&&kn(e.prev,e,e.next)>0)}function kn(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function Mn(t,e){return t.x===e.x&&t.y===e.y}function jn(t,e,n,i){var r=Fn(kn(t,e,n)),o=Fn(kn(t,e,i)),s=Fn(kn(n,i,t)),a=Fn(kn(n,i,e));return r!==o&&s!==a||(!(0!==r||!An(t,n,e))||(!(0!==o||!An(t,i,e))||(!(0!==s||!An(n,t,i))||!(0!==a||!An(n,e,i)))))}function An(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function Fn(t){return t>0?1:t<0?-1:0}function Tn(t,e){return kn(t.prev,t,t.next)<0?kn(t,e,t.next)>=0&&kn(t,t.prev,e)>=0:kn(t,e,t.prev)<0||kn(t,t.next,e)<0}function zn(t,e){var n=new Pn(t.i,t.x,t.y),i=new Pn(e.i,e.x,e.y),r=t.next,o=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,o.next=i,i.prev=o,i}function Sn(t,e,n,i){var r=new Pn(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function _n(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Pn(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function In(t,e,n,i){for(var r=0,o=e,s=n-i;o<n;o+=i)r+=(t[s]-t[o])*(t[o+1]+t[s+1]),s=o;return r}sn.exports=an,sn.exports.default=an,an.deviation=function(t,e,n,i){var r=e&&e.length,o=r?e[0]*n:t.length,s=Math.abs(In(t,0,o,n));if(r)for(var a=0,l=e.length;a<l;a++){var u=e[a]*n,c=a<l-1?e[a+1]*n:t.length;s-=Math.abs(In(t,u,c,n))}var h=0;for(a=0;a<i.length;a+=3){var d=i[a]*n,f=i[a+1]*n,p=i[a+2]*n;h+=Math.abs((t[d]-t[p])*(t[f+1]-t[d+1])-(t[d]-t[f])*(t[p+1]-t[d+1]))}return 0===s&&0===h?0:Math.abs((h-s)/s)},an.flatten=function(t){for(var e=t[0][0].length,n={vertices:[],holes:[],dimensions:e},i=0,r=0;r<t.length;r++){for(var o=0;o<t[r].length;o++)for(var s=0;s<e;s++)n.vertices.push(t[r][o][s]);r>0&&(i+=t[r-1].length,n.holes.push(i))}return n};var On=sn.exports;\n/*!\n     * @maptalks/vector-packer v0.79.1\n     * LICENSE : UNLICENSED\n     * (c) 2016-2023 maptalks.com\n     */const qn={Point:1,LineString:2,Polygon:3,MultiPoint:4,MultiLineString:5,MultiPolygon:6};function Cn(t,e={}){var n=[];if("FeatureCollection"===t.type)for(var i=0;i<t.features.length;i++)Nn(n,t.features[i],e,i);else Nn(n,"Feature"===t.type?t:{geometry:t},e);return n}function Nn(t,e,n,i){if(e.geometry&&e.geometry.geometry){var r=e.geometry.coordinates,o=e.geometry.type,s=[],a=e.id;if(n.promoteId?a=e.properties[n.promoteId]:n.generateId&&(a=i||0),"Point"===o)En(r,s);else if("MultiPoint"===o)for(var l=0;l<r.length;l++)En(r[l],s);else if("LineString"===o)Dn([r],s);else if("MultiLineString"===o){if(n.lineMetrics){for(l=0;l<r.length;l++)Rn(r[l],s=[]),t.push(Ln(a,"LineString",s,e.properties));return}Dn(r,s)}else if("Polygon"===o)Dn(r,s);else{if("MultiPolygon"!==o){if("GeometryCollection"===o){for(l=0;l<e.geometry.geometries.length;l++)Nn(t,{id:a,geometry:e.geometry.geometries[l],properties:e.properties},n,i);return}return void console.warn(`Input data type(${o}) is not a valid GeoJSON geometry type.`)}for(l=0;l<r.length;l++){var u=[];Dn(r[l],u),s.push(u)}}t.push(Ln(a,o,s,e.properties))}}function En(t,e){const n=new Rt(t[0],t[1]);n.z=100*(t[2]||0),e.push([n])}function Rn(t,e){for(let n=0;n<t.length;n++){const i=new Rt(t[n][0],t[n][1]);i.z=100*(t[n][2]||0),e.push(i)}}function Dn(t,e,n,i){for(var r=0;r<t.length;r++){var o=[];Rn(t[r],o),e.push(o)}}function Ln(t,e,n,i){return{id:void 0===t?null:t,type:qn[e],geometry:n,properties:i}}\n/*!\n     * Codes from mapbox-gl-js\n     * github.com/mapbox/mapbox-gl-js\n     * MIT License\n     */function $n(t,{width:e,height:n},i,r){if(r){if(r.length!==e*n*i)throw new RangeError("mismatched image size")}else r=new Uint8Array(e*n*i);return t.width=e,t.height=n,t.data=r,t}function Un(t,{width:e,height:n},i){if(e===t.width&&n===t.height)return;const r=$n({},{width:e,height:n},i);Wn(t,r,{x:0,y:0},{x:0,y:0},{width:Math.min(t.width,e),height:Math.min(t.height,n)},i),t.width=e,t.height=n,t.data=r.data}function Wn(t,e,n,i,r,o){if(0===r.width||0===r.height)return e;if(r.width>t.width||r.height>t.height||n.x>t.width-r.width||n.y>t.height-r.height)throw new RangeError("out of range source coordinates for image copy");if(r.width>e.width||r.height>e.height||i.x>e.width-r.width||i.y>e.height-r.height)throw new RangeError("out of range destination coordinates for image copy");const s=t.data,a=e.data;if(s===a)return e;for(let l=0;l<r.height;l++){const u=((n.y+l)*t.width+n.x)*o,c=((i.y+l)*e.width+i.x)*o;for(let t=0;t<r.width*o;t++)a[c+t]=s[u+t]}return e}class Jn{constructor(t,e){$n(this,t,1,e)}resize(t){Un(this,t,1)}clone(){return new Jn({width:this.width,height:this.height},new Uint8Array(this.data))}static copy(t,e,n,i,r){Wn(t,e,n,i,r,1)}}class Hn{constructor(t,e){$n(this,t,4,e)}resize(t){Un(this,t,4)}clone(){return new Hn({width:this.width,height:this.height},new Uint8Array(this.data))}static copy(t,e,n,i,r){Wn(t,e,n,i,r,4)}}\n/*!\n     * Codes from mapbox-gl-js\n     * github.com/mapbox/mapbox-gl-js\n     * MIT License\n     */class Gn{constructor(t,{pixelRatio:e}){this.paddedRect=t,this.pixelRatio=e||1}get tl(){return[this.paddedRect.x+1,this.paddedRect.y+1]}get br(){return[this.paddedRect.x+this.paddedRect.w-1,this.paddedRect.y+this.paddedRect.h-1]}get displaySize(){return[(this.paddedRect.w-2)/this.pixelRatio,(this.paddedRect.h-2)/this.pixelRatio]}}class Vn{constructor(t){this.glyphMap=t,this.build()}build(){const t=this.glyphMap,e={},n=new Lt(0,0,{autoResize:!0}),i=[];for(const n in t){const r=t[n],o={x:0,y:0,w:r.data.width+2,h:r.data.height+2};i.push(o),e[n]=new Gn(o,r)}if(n.pack(i,{inPlace:!0}),!Bn(n.w)||!Bn(n.h)){const t=Zn(n.w),e=Zn(n.h);n.resize(t,e)}const r=new Hn({width:n.w,height:n.h});for(const n in t){const i=t[n],o=e[n].paddedRect;Hn.copy(i.data,r,{x:0,y:0},{x:o.x+1,y:o.y+1},i.data)}this.image=r,this.positions=e}}function Bn(t){return 0==(t&t-1)&&0!==t}function Zn(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}\n/*!\n     * Codes from mapbox-gl-js\n     * github.com/mapbox/mapbox-gl-js\n     * MIT License\n     * TODO 升级为potpack\n     */class Xn{constructor(t){this.glyphMap=t,this.build()}build(){const t=this.glyphMap,e={},n=new Lt(0,0,{autoResize:!0}),i=[];for(const n in t){const r=t[n],o=e[n]={};for(const t in r){const e=r[+t];if(!e||0===e.bitmap.width||0===e.bitmap.height)continue;const n={x:0,y:0,w:e.bitmap.width+2,h:e.bitmap.height+2};i.push(n),o[t]={rect:n,metrics:e.metrics}}}n.pack(i,{inPlace:!0});const r=new Jn({width:n.w,height:n.h});for(const n in t){const i=t[n];for(const t in i){const o=i[+t];if(!o||0===o.bitmap.width||0===o.bitmap.height)continue;const s=e[n][t].rect;Jn.copy(o.bitmap,r,{x:0,y:0},{x:s.x+1,y:s.y+1},o.bitmap)}}this.image=r,this.positions=e}}function Yn(t){return t<65536?Uint16Array:Uint32Array}function Kn(t){return(t=Math.abs(t))<128?Int8Array:t<32768?Int16Array:Float32Array}function Qn(t){return t<256?Uint8Array:t<65536?Uint16Array:t<Math.pow(2,32)?Uint32Array:Float64Array}function ti(t){const e=t.type,n=[];if(1===e||4===e)for(let e=0;e<t.geometry.length;e++)En(t.geometry[e],n);else if(2===e)Dn(t.geometry,n);else if(3===e)Dn(t.geometry,n);else if(5===e)Dn(t.geometry,n);else if(6===e)for(let e=0;e<t.geometry.length;e++){const i=[];Dn(t.geometry[e],i),n.push(i)}return t.geometry=n,t}function ei(t){for(let e=1;e<arguments.length;e++){const n=arguments[e];for(const e in n)t[e]=n[e]}return t}function ni(t){return null==t}function ii(t){return"number"==typeof t&&!isNaN(t)}function ri(t){return"object"==typeof t&&!!t}function oi(t){return!ni(t)&&("string"==typeof t||null!==t.constructor&&t.constructor===String)}function si(t){return!ni(t)&&("function"==typeof t||null!==t.constructor&&t.constructor===Function)}const ai=Object.prototype.hasOwnProperty;function li(t,e){return ai.call(t,e)}const ui=Math.PI/180;function ci(t){return t&&f(t)&&t.property}function hi(t){const{pointAtTileRes:e,tileRatio:n}=t;return e*n}function di(t){return"centimeter"===t||"cm"===t?1:"millimeter"===t||"mm"===t?.1:100}const fi={};function pi(t,e){if(!Array.isArray(e)){if(e&&void 0!==e.r&&void 0!==e.g&&void 0!==e.b)return t[0]=255*e.r,t[1]=255*e.g,t[2]=255*e.b,t[3]=void 0!==e.a?255*e.a:255,t;e=fi[e]=fi[e]||Ie(e).unitArray()}for(let n=0;n<e.length;n++)t[n]=255*e[n];return 3===t.length&&t.push(255),t}const mi={textFill:1,textSize:1,textOpacity:1,markerWidth:1,markerHeight:1,markerOpacity:1,markerDx:1,markerDy:1,lineWidth:1,lineColor:1,lineOpacity:1,polygonFill:1,polygonOpacity:1},yi={textName:1,markerTextFitPadding:1,markerTextFit:1,lineGradientProperty:1};var gi=Object.freeze({__proto__:null,now:function(){return Date.now()},extend:ei,isNil:ni,isNumber:ii,isInteger:function(t){return(0|t)===t},isObject:ri,isString:oi,isFunction:si,hasOwn:li,join:function(t,e){return t.join?t.join(e||","):Array.prototype.join.call(t,e||",")},toRadian:function(t){return t*ui},toDegree:function(t){return t/ui},evaluate:function(t,e,n){return si(t)?t(void 0!==n?n:null,e):t},isFnTypeSymbol:ci,getAltitudeToLocal:hi,getTubeSizeScale:di,normalizeColor:pi,checkIfIdentityZoomDependent:function(t,e,n){if(Array.isArray(n)||(n=Object.values(n)),!n||!n.length)return!1;if(!mi[t])return!1;for(let t=0;t<n.length;t++){const i=n[t]&&(n[t].feature||n[t]);if(!i)continue;const r=i.properties&&i.properties[e];if(r&&f(r)&&!p(r).isZoomConstant)return!0}return!1},checkIfZoomFnTypeSymbol:function(t){return!!mi[t]||!!yi[t]}});function bi(t){let e=0;for(let n,i,r=0,o=t.length,s=o-1;r<o;s=r++)n=t[r],i=t[s],e+=void 0!==n.x?(i.x-n.x)*(n.y+i.y):(i[0]-n[0])*(n[1]+i[1]);return e}function vi(t,e,n,i,r){const o=t[e*i],s=t[e*i+1],a=t[n*i],l=t[n*i+1];return o===a&&(o<0||o>r)&&s!==l||s===l&&(s<0||s>r)&&o!==a}function wi(t,e,n){let i=n;return e&&t&&(i=+t[e]),isNaN(i)&&(i=n||0),100*i}function xi(t,e,n,i,r,o,s){e||0===e||(e=1);const a=wi(t.properties,n,i),l=a*e;let u=(o?100*o:0)||a;return r?u=wi(t.properties,r,o):s&&(u=a-wi(t.properties,s,o)),u*=e,{altitude:l,height:u}}function ki(t,e){return e<1/0&&(t.x<0||t.x>e||t.y<0||t.y>e)}function Mi(t){return null==t}function ji(t,e,n){if(t===n||t===e)return t;const i=n-e;return((t-e)%i+i)%i+e}function Ai(t,e){if(!e)return null;const n=new Map;for(let i=0;i<e.length;i++){const r=e[i],o=t[r];let s=n.get(o);s||(s=[],n.set(o,s)),s.push(r)}return n}class Fi{constructor(t,e,n,i){this.feature=t,this.symbol=e,this.fnTypes=n,this.options=i}getPolygonResource(){let t=this.symbol.polygonPatternFile;const{polygonPatternFileFn:e}=this.fnTypes;return this.C(t,e)}getLineResource(){let t=this.symbol.linePatternFile;const{linePatternFileFn:e}=this.fnTypes;return this.C(t,e)}C(t,e){return e&&(t=e(this.options.zoom,this.feature.properties)),t}}function Ti(t,e,n,i){const r=Math.abs(i)>>15,o=r>>1,s=r%2;let a=i%Math.pow(2,15);const l=e+(o<<14)*Math.sign(e),u=n+(s<<14)*Math.sign(n);return t[0]=l,t[1]=u,a=Math.round(a),t[2]=0===a?i<0?-1:0:a,t}const zi=Math.pow(2,14),Si=Math.pow(2,15);var _i,Pi,Ii={$version:8,$root:{version:{required:!0,type:"enum",values:[8],doc:"Style specification version number. Must be 8.",example:8},name:{type:"string",doc:"A human-readable name for the style.",example:"Bright"},metadata:{type:"*",doc:"Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like \'mapbox:\'."},center:{type:"array",value:"number",doc:"Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:[-73.9749,40.7736]},zoom:{type:"number",doc:"Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:12.5},bearing:{type:"number",default:0,period:360,units:"degrees",doc:\'Default bearing, in degrees. The bearing is the compass direction that is "up"; for example, a bearing of 90° orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).\',example:29},pitch:{type:"number",default:0,units:"degrees",doc:"Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:50},light:{type:"light",doc:"The global light source.",example:{anchor:"viewport",color:"white",intensity:.4}},terrain:{type:"terrain",doc:"A global modifier that elevates layers and markers based on a DEM data source."},fog:{type:"fog",doc:"A global effect that fades layers and markers based on their distance to the camera. The fog can be used to approximate the effect of atmosphere on distant objects and enhance the depth perception of the map when used with terrain or 3D features. Note: fog is renamed to atmosphere in the Android and iOS SDKs and planned to be changed in GL-JS v.3.0.0."},sources:{required:!0,type:"sources",doc:"Data source specifications.",example:{"mapbox-streets":{type:"vector",url:"mapbox://mapbox.mapbox-streets-v6"}}},sprite:{type:"string",doc:"A base URL for retrieving the sprite image and metadata. The extensions `.png`, `.json` and scale factor `@2x.png` will be automatically appended. This property is required if any layer uses the `background-pattern`, `fill-pattern`, `line-pattern`, `fill-extrusion-pattern`, or `icon-image` properties. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",example:"mapbox://sprites/mapbox/bright-v8"},glyphs:{type:"string",doc:"A URL template for loading signed-distance-field glyph sets in PBF format. The URL must include `{fontstack}` and `{range}` tokens. This property is required if any layer uses the `text-field` layout property. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",example:"mapbox://fonts/mapbox/{fontstack}/{range}.pbf"},transition:{type:"transition",doc:"A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style\'s `transition` property.",example:{duration:300,delay:0}},projection:{type:"projection",doc:"The projection the map should be rendered in. Supported projections are Mercator, Globe, Albers, Equal Earth, Equirectangular (WGS84), Lambert conformal conic, Natural Earth, and Winkel Tripel. Terrain, sky and fog are supported by only Mercator and globe. CustomLayerInterface is not supported outside of Mercator.",example:{name:"albers",center:[-154,50],parallels:[55,65]}},layers:{required:!0,type:"array",value:"layer",doc:"Layers will be drawn in the order of this array.",example:[{id:"water",source:"mapbox-streets","source-layer":"water",type:"fill",paint:{"fill-color":"#00ffff"}}]}},sources:{"*":{type:"source",doc:"Specification of a data source. For vector and raster sources, either TileJSON or a URL to a TileJSON must be provided. For image and video sources, a URL must be provided. For GeoJSON sources, a URL or inline GeoJSON must be provided."}},source:["source_vector","source_raster","source_raster_dem","source_geojson","source_video","source_image"],source_vector:{type:{required:!0,type:"enum",values:{vector:{doc:"A vector tile source."}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source\'s bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},scheme:{type:"enum",values:{xyz:{doc:"Slippy map tilenames scheme."},tms:{doc:"OSGeo spec scheme."}},default:"xyz",doc:"Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},promoteId:{type:"promoteId",doc:"A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`. If specified as a string for a vector tile source, the same property is used across all its source layers. If specified as an object only specified source layers will have id overriden, others will fallback to original feature id"},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source\'s tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_raster:{type:{required:!0,type:"enum",values:{raster:{doc:"A raster tile source."}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source\'s bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},tileSize:{type:"number",default:512,units:"pixels",doc:"The minimum visual size to display tiles for this layer. Only configurable for raster layers."},scheme:{type:"enum",values:{xyz:{doc:"Slippy map tilenames scheme."},tms:{doc:"OSGeo spec scheme."}},default:"xyz",doc:"Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source\'s tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_raster_dem:{type:{required:!0,type:"enum",values:{"raster-dem":{doc:"A RGB-encoded raster DEM source"}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source\'s bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},tileSize:{type:"number",default:512,units:"pixels",doc:"The minimum visual size to display tiles for this layer. Only configurable for raster layers."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},encoding:{type:"enum",values:{terrarium:{doc:"Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info."},mapbox:{doc:"Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info."}},default:"mapbox",doc:"The encoding used by this source. Mapbox Terrain RGB is used by default"},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source\'s tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_geojson:{type:{required:!0,type:"enum",values:{geojson:{doc:"A GeoJSON data source."}},doc:"The data type of the GeoJSON source."},data:{type:"*",doc:"A URL to a GeoJSON file, or inline GeoJSON."},maxzoom:{type:"number",default:18,doc:"Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels)."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},buffer:{type:"number",default:128,maximum:512,minimum:0,doc:"Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance."},filter:{type:"*",doc:"An expression for filtering features prior to processing them for rendering."},tolerance:{type:"number",default:.375,doc:"Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance)."},cluster:{type:"boolean",default:!1,doc:"If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:\\n * `cluster` Is `true` if the point is a cluster \\n * `cluster_id` A unqiue id for the cluster to be used in conjunction with the [cluster inspection methods](https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)\\n * `point_count` Number of original points grouped into this cluster\\n * `point_count_abbreviated` An abbreviated point count"},clusterRadius:{type:"number",default:50,minimum:0,doc:"Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile."},clusterMaxZoom:{type:"number",doc:"Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15."},clusterMinPoints:{type:"number",doc:"Minimum number of points necessary to form a cluster if clustering is enabled. Defaults to `2`."},clusterProperties:{type:"*",doc:\'An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form `{"property_name": [operator, map_expression]}`. `operator` is any expression function that accepts at least 2 operands (e.g. `"+"` or `"max"`) — it accumulates the property value from clusters/points the cluster contains; `map_expression` produces the value of a single point.\\n\\nExample: `{"sum": ["+", ["get", "scalerank"]]}`.\\n\\nFor more advanced use cases, in place of `operator`, you can use a custom reduce expression that references a special `["accumulated"]` value, e.g.:\\n`{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}`\'},lineMetrics:{type:"boolean",default:!1,doc:"Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values."},generateId:{type:"boolean",default:!1,doc:"Whether to generate ids for the geojson features. When enabled, the `feature.id` property will be auto assigned based on its index in the `features` array, over-writing any previous values."},promoteId:{type:"promoteId",doc:"A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`."}},source_video:{type:{required:!0,type:"enum",values:{video:{doc:"A video data source."}},doc:"The data type of the video source."},urls:{required:!0,type:"array",value:"string",doc:"URLs to video content in order of preferred format."},coordinates:{required:!0,doc:"Corners of video specified in longitude, latitude pairs.",type:"array",length:4,value:{type:"array",length:2,value:"number",doc:"A single longitude, latitude pair."}}},source_image:{type:{required:!0,type:"enum",values:{image:{doc:"An image data source."}},doc:"The data type of the image source."},url:{required:!0,type:"string",doc:"URL that points to an image."},coordinates:{required:!0,doc:"Corners of image specified in longitude, latitude pairs.",type:"array",length:4,value:{type:"array",length:2,value:"number",doc:"A single longitude, latitude pair."}}},layer:{id:{type:"string",doc:"Unique layer name.",required:!0},type:{type:"enum",values:{fill:{doc:"A filled polygon with an optional stroked border.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},line:{doc:"A stroked line.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},symbol:{doc:"An icon or a text label.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},circle:{doc:"A filled circle.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},heatmap:{doc:"A heatmap.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"fill-extrusion":{doc:"An extruded (3D) polygon.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},raster:{doc:"Raster map textures such as satellite imagery.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},hillshade:{doc:"Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},background:{doc:"The background color or pattern of the map.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},sky:{doc:"A spherical dome around the map that is always rendered behind all other layers.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}}}},doc:"Rendering type of this layer.",required:!0},metadata:{type:"*",doc:"Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like \'mapbox:\'."},source:{type:"string",doc:"Name of a source description to be used for this layer. Required for all layer types except `background`."},"source-layer":{type:"string",doc:"Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources."},minzoom:{type:"number",minimum:0,maximum:24,doc:"The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden."},maxzoom:{type:"number",minimum:0,maximum:24,doc:"The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden."},filter:{type:"filter",doc:\'An expression specifying conditions on source features. Only features that match the filter are displayed. Zoom expressions in filters are only evaluated at integer zoom levels. The `["feature-state", ...]` expression is not supported in filter expressions.  The `["pitch"]` and `["distance-from-center"]` expressions are supported only for filter expressions on the symbol layer.\'},layout:{type:"layout",doc:"Layout properties for the layer."},paint:{type:"paint",doc:"Default paint properties for this layer."}},layout:["layout_fill","layout_line","layout_circle","layout_heatmap","layout_fill-extrusion","layout_symbol","layout_raster","layout_hillshade","layout_background","layout_sky"],layout_background:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_sky:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},"property-type":"constant"}},layout_fill:{"fill-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"},"data-driven styling":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_circle:{"circle-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.2.0",ios:"5.9.0",macos:"0.16.0"},"data-driven styling":{js:"1.2.0",android:"9.2.0",ios:"5.9.0",macos:"0.16.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_heatmap:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},"property-type":"constant"}},"layout_fill-extrusion":{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},"property-type":"constant"},"fill-extrusion-edge-radius":{type:"number",private:!0,default:0,minimum:0,maximum:1,doc:"Radius of a fill extrusion edge in meters. If not zero, rounds extrusion edges for a smoother appearance.","sdk-support":{"basic functionality":{js:"v2.10.0",android:"10.7.0",ios:"10.7.0"}},"property-type":"constant"}},layout_line:{"line-cap":{type:"enum",values:{butt:{doc:"A cap with a squared-off end which is drawn to the exact endpoint of the line."},round:{doc:"A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line\'s width and centered on the endpoint of the line."},square:{doc:"A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line\'s width."}},default:"butt",doc:"The display of line endings.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"2.3.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"line-join":{type:"enum",values:{bevel:{doc:"A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line\'s width."},round:{doc:"A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line\'s width and centered on the endpoint of the line."},miter:{doc:"A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."}},default:"miter",doc:"The display of lines when joining.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"line-miter-limit":{type:"number",default:2,doc:"Used to automatically convert miter joins to bevel joins for sharp angles.",requires:[{"line-join":"miter"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-round-limit":{type:"number",default:1.05,doc:"Used to automatically convert round joins to miter joins for shallow angles.",requires:[{"line-join":"round"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"},"data-driven styling":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_symbol:{"symbol-placement":{type:"enum",values:{point:{doc:"The label is placed at the point where the geometry is located."},line:{doc:"The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."},"line-center":{doc:"The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."}},default:"point",doc:"Label placement relative to its geometry.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`line-center` value":{js:"0.47.0",android:"6.4.0",ios:"4.3.0",macos:"0.10.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"symbol-spacing":{type:"number",default:250,minimum:1,units:"pixels",doc:"Distance between two symbol anchors.",requires:[{"symbol-placement":"line"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"symbol-avoid-edges":{type:"boolean",default:!1,doc:"If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don\'t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"symbol-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `icon-allow-overlap` or `text-allow-overlap` is `false`, features with a lower sort key will have priority during placement. When `icon-allow-overlap` or `text-allow-overlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.","sdk-support":{"basic functionality":{js:"0.53.0",android:"7.4.0",ios:"4.11.0",macos:"0.14.0"},"data-driven styling":{js:"0.53.0",android:"7.4.0",ios:"4.11.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"symbol-z-order":{type:"enum",values:{auto:{doc:"Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."},"viewport-y":{doc:"Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."},source:{doc:"Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data."}},default:"auto",doc:"Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbol-sort-key`.","sdk-support":{"basic functionality":{js:"0.49.0",android:"6.6.0",ios:"4.5.0",macos:"0.12.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-allow-overlap":{type:"boolean",default:!1,doc:"If true, the icon will be visible even if it collides with other previously drawn symbols.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-ignore-placement":{type:"boolean",default:!1,doc:"If true, other symbols can be visible even if they collide with the icon.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-optional":{type:"boolean",default:!1,doc:"If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",requires:["icon-image","text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-rotation-alignment":{type:"enum",values:{map:{doc:"When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."},viewport:{doc:"Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."},auto:{doc:"When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."}},default:"auto",doc:"In combination with `symbol-placement`, determines the rotation behavior of icons.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-size":{type:"number",default:1,minimum:0,units:"factor of the original icon size",doc:"Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-text-fit":{type:"enum",values:{none:{doc:"The icon is displayed at its intrinsic aspect ratio."},width:{doc:"The icon is scaled in the x-dimension to fit the width of the text."},height:{doc:"The icon is scaled in the y-dimension to fit the height of the text."},both:{doc:"The icon is scaled in both x- and y-dimensions."}},default:"none",doc:"Scales the icon to fit around the associated text.",requires:["icon-image","text-field"],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"},"stretchable icons":{js:"1.6.0",android:"9.2.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-text-fit-padding":{type:"array",value:"number",length:4,default:[0,0,0,0],units:"pixels",doc:"Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",requires:["icon-image","text-field",{"icon-text-fit":["both","width","height"]}],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-image":{type:"resolvedImage",doc:"Name of image in sprite to use for drawing an image background.",tokens:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-rotate":{type:"number",default:0,period:360,units:"degrees",doc:"Rotates the icon clockwise.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.21.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-padding":{type:"number",default:2,minimum:0,units:"pixels",doc:"Size of the additional area around the icon bounding box used for detecting symbol collisions.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-keep-upright":{type:"boolean",default:!1,doc:"If true, the icon may be flipped to prevent it from being rendered upside-down.",requires:["icon-image",{"icon-rotation-alignment":"map"},{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-offset":{type:"array",value:"number",length:2,default:[0,0],doc:"Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-anchor":{type:"enum",values:{center:{doc:"The center of the icon is placed closest to the anchor."},left:{doc:"The left side of the icon is placed closest to the anchor."},right:{doc:"The right side of the icon is placed closest to the anchor."},top:{doc:"The top of the icon is placed closest to the anchor."},bottom:{doc:"The bottom of the icon is placed closest to the anchor."},"top-left":{doc:"The top left corner of the icon is placed closest to the anchor."},"top-right":{doc:"The top right corner of the icon is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the icon is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the icon is placed closest to the anchor."}},default:"center",doc:"Part of the icon placed closest to the anchor.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-pitch-alignment":{type:"enum",values:{map:{doc:"The icon is aligned to the plane of the map."},viewport:{doc:"The icon is aligned to the plane of the viewport."},auto:{doc:"Automatically matches the value of `icon-rotation-alignment`."}},default:"auto",doc:"Orientation of icon when map is pitched.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-pitch-alignment":{type:"enum",values:{map:{doc:"The text is aligned to the plane of the map."},viewport:{doc:"The text is aligned to the plane of the viewport."},auto:{doc:"Automatically matches the value of `text-rotation-alignment`."}},default:"auto",doc:"Orientation of text when map is pitched.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-rotation-alignment":{type:"enum",values:{map:{doc:"When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."},viewport:{doc:"Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."},auto:{doc:"When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."}},default:"auto",doc:"In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-field":{type:"formatted",default:"",tokens:!0,doc:"Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-font":{type:"array",value:"string",default:["Open Sans Regular","Arial Unicode MS Regular"],doc:"Font stack to use for displaying text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-size":{type:"number",default:16,minimum:0,units:"pixels",doc:"Font size.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-max-width":{type:"number",default:10,minimum:0,units:"ems",doc:"The maximum line width for text wrapping.",requires:["text-field",{"symbol-placement":["point"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-line-height":{type:"number",default:1.2,units:"ems",doc:"Text leading value for multi-line text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"2.3.0",android:"10.0.0",ios:"10.0.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-letter-spacing":{type:"number",default:0,units:"ems",doc:"Text tracking amount.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-justify":{type:"enum",values:{auto:{doc:"The text is aligned towards the anchor position."},left:{doc:"The text is aligned to the left."},center:{doc:"The text is centered."},right:{doc:"The text is aligned to the right."}},default:"center",doc:"Text justification options.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"},auto:{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-radial-offset":{type:"number",units:"ems",default:0,doc:"Radial offset of text, in the direction of the symbol\'s anchor. Useful in combination with `text-variable-anchor`, which defaults to using the two-dimensional `text-offset` if present.","sdk-support":{"basic functionality":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"},"data-driven styling":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},requires:["text-field"],"property-type":"data-driven",expression:{interpolated:!0,parameters:["zoom","feature"]}},"text-variable-anchor":{type:"array",value:"enum",values:{center:{doc:"The center of the text is placed closest to the anchor."},left:{doc:"The left side of the text is placed closest to the anchor."},right:{doc:"The right side of the text is placed closest to the anchor."},top:{doc:"The top of the text is placed closest to the anchor."},bottom:{doc:"The bottom of the text is placed closest to the anchor."},"top-left":{doc:"The top left corner of the text is placed closest to the anchor."},"top-right":{doc:"The top right corner of the text is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the text is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the text is placed closest to the anchor."}},requires:["text-field",{"symbol-placement":["point"]}],doc:"To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.","sdk-support":{"basic functionality":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-anchor":{type:"enum",values:{center:{doc:"The center of the text is placed closest to the anchor."},left:{doc:"The left side of the text is placed closest to the anchor."},right:{doc:"The right side of the text is placed closest to the anchor."},top:{doc:"The top of the text is placed closest to the anchor."},bottom:{doc:"The bottom of the text is placed closest to the anchor."},"top-left":{doc:"The top left corner of the text is placed closest to the anchor."},"top-right":{doc:"The top right corner of the text is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the text is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the text is placed closest to the anchor."}},default:"center",doc:"Part of the text placed closest to the anchor.",requires:["text-field",{"!":"text-variable-anchor"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-max-angle":{type:"number",default:45,units:"degrees",doc:"Maximum angle change between adjacent characters.",requires:["text-field",{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-writing-mode":{type:"array",value:"enum",values:{horizontal:{doc:"If a text\'s language supports horizontal writing mode, symbols would be laid out horizontally."},vertical:{doc:"If a text\'s language supports vertical writing mode, symbols would be laid out vertically."}},doc:"The property allows control over a symbol\'s orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single \'vertical\' enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either [\'horizontal\', \'vertical\'] or [\'vertical\', \'horizontal\'], the order doesn\'t affect the placement.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"1.3.0",android:"8.3.0",ios:"5.3.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-rotate":{type:"number",default:0,period:360,units:"degrees",doc:"Rotates the text clockwise.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-padding":{type:"number",default:2,minimum:0,units:"pixels",doc:"Size of the additional area around the text bounding box used for detecting symbol collisions.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-keep-upright":{type:"boolean",default:!0,doc:"If true, the text may be flipped vertically to prevent it from being rendered upside-down.",requires:["text-field",{"text-rotation-alignment":"map"},{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-transform":{type:"enum",values:{none:{doc:"The text is not altered."},uppercase:{doc:"Forces all letters to be displayed in uppercase."},lowercase:{doc:"Forces all letters to be displayed in lowercase."}},default:"none",doc:"Specifies how to capitalize text, similar to the CSS `text-transform` property.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-offset":{type:"array",doc:"Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.",value:"number",units:"ems",length:2,default:[0,0],requires:["text-field",{"!":"text-radial-offset"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-allow-overlap":{type:"boolean",default:!1,doc:"If true, the text will be visible even if it collides with other previously drawn symbols.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-ignore-placement":{type:"boolean",default:!1,doc:"If true, other symbols can be visible even if they collide with the text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-optional":{type:"boolean",default:!1,doc:"If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",requires:["text-field","icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_raster:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_hillshade:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},"property-type":"constant"}},filter:{type:"array",value:"*",doc:"A filter selects specific features from a layer."},filter_symbol:{type:"boolean",doc:\'Expression which determines whether or not to display a symbol. Symbols support dynamic filtering, meaning this expression can use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.\',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature","pitch","distance-from-center"]}},filter_fill:{type:"boolean",doc:\'Expression which determines whether or not to display a polygon. Fill layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.\',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},filter_line:{type:"boolean",doc:\'Expression which determines whether or not to display a Polygon or LineString. Line layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.\',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},filter_circle:{type:"boolean",doc:\'Expression which determines whether or not to display a circle. Circle layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.\',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},"filter_fill-extrusion":{type:"boolean",doc:\'Expression which determines whether or not to display a Polygon. Fill-extrusion layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.\',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},filter_heatmap:{type:"boolean",doc:\'Expression used to determine whether a point is being displayed or not. Heatmap layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.\',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},filter_operator:{type:"enum",values:{"==":{doc:\'`["==", key, value]` equality: `feature[key] = value`\'},"!=":{doc:\'`["!=", key, value]` inequality: `feature[key] ≠ value`\'},">":{doc:\'`[">", key, value]` greater than: `feature[key] > value`\'},">=":{doc:\'`[">=", key, value]` greater than or equal: `feature[key] ≥ value`\'},"<":{doc:\'`["<", key, value]` less than: `feature[key] < value`\'},"<=":{doc:\'`["<=", key, value]` less than or equal: `feature[key] ≤ value`\'},in:{doc:\'`["in", key, v0, ..., vn]` set inclusion: `feature[key] ∈ {v0, ..., vn}`\'},"!in":{doc:\'`["!in", key, v0, ..., vn]` set exclusion: `feature[key] ∉ {v0, ..., vn}`\'},all:{doc:\'`["all", f0, ..., fn]` logical `AND`: `f0 ∧ ... ∧ fn`\'},any:{doc:\'`["any", f0, ..., fn]` logical `OR`: `f0 ∨ ... ∨ fn`\'},none:{doc:\'`["none", f0, ..., fn]` logical `NOR`: `¬f0 ∧ ... ∧ ¬fn`\'},has:{doc:\'`["has", key]` `feature[key]` exists\'},"!has":{doc:\'`["!has", key]` `feature[key]` does not exist\'},within:{doc:\'`["within", object]` feature geometry is within object geometry\'}},doc:"The filter operator."},geometry_type:{type:"enum",values:{Point:{doc:"Filter to point geometries."},LineString:{doc:"Filter to line geometries."},Polygon:{doc:"Filter to polygon geometries."}},doc:"The geometry type for the filter to select."},function:{expression:{type:"expression",doc:"An expression."},stops:{type:"array",doc:"An array of stops.",value:"function_stop"},base:{type:"number",default:1,minimum:0,doc:"The exponential base of the interpolation curve. It controls the rate at which the result increases. Higher values make the result increase more towards the high end of the range. With `1` the stops are interpolated linearly."},property:{type:"string",doc:"The name of a feature property to use as the function input.",default:"$zoom"},type:{type:"enum",values:{identity:{doc:"Return the input value as the output value."},exponential:{doc:"Generate an output by interpolating between stops just less than and just greater than the function input."},interval:{doc:"Return the output value of the stop just less than the function input."},categorical:{doc:"Return the output value of the stop equal to the function input."}},doc:"The interpolation strategy to use in function evaluation.",default:"exponential"},colorSpace:{type:"enum",values:{rgb:{doc:"Use the RGB color space to interpolate color values"},lab:{doc:"Use the LAB color space to interpolate color values."},hcl:{doc:"Use the HCL color space to interpolate color values, interpolating the Hue, Chroma, and Luminance channels individually."}},doc:"The color space in which colors interpolated. Interpolating colors in perceptual color spaces like LAB and HCL tend to produce color ramps that look more consistent and produce colors that can be differentiated more easily than those interpolated in RGB space.",default:"rgb"},default:{type:"*",required:!1,doc:"A value to serve as a fallback function result when a value isn\'t otherwise available. It is used in the following circumstances:\\n* In categorical functions, when the feature value does not match any of the stop domain values.\\n* In property and zoom-and-property functions, when a feature does not contain a value for the specified property.\\n* In identity functions, when the feature value is not valid for the style property (for example, if the function is being used for a `circle-color` property but the feature property value is not a string or not a valid color).\\n* In interval or exponential property and zoom-and-property functions, when the feature value is not numeric.\\nIf no default is provided, the style property\'s default is used in these circumstances."}},function_stop:{type:"array",minimum:0,maximum:24,value:["number","color"],length:2,doc:"Zoom level and value pair."},expression:{type:"array",value:"*",minimum:1,doc:"An expression defines a function that can be used for data-driven style properties or feature filters."},expression_name:{doc:"",type:"enum",values:{let:{doc:\'Binds expressions to named variables, which can then be referenced in the result expression using ["var", "variable_name"].\',group:"Variable binding","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},var:{doc:\'References variable bound using "let".\',group:"Variable binding","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},literal:{doc:"Provides a literal array or object value.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},array:{doc:"Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},at:{doc:"Retrieves an item from an array.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},in:{doc:"Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a [`literal`](#types-literal) expression to hint correct interpretation to the [type system](#type-system).",group:"Lookup","sdk-support":{"basic functionality":{js:"1.6.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}}},"index-of":{doc:"Returns the first position at which an item can be found in an array or a substring can be found in a string, or `-1` if the input cannot be found. Accepts an optional index from where to begin the search.",group:"Lookup","sdk-support":{"basic functionality":{js:"1.10.0",android:"10.0.0",ios:"10.0.0"}}},slice:{doc:"Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.",group:"Lookup","sdk-support":{"basic functionality":{js:"1.10.0",android:"10.0.0",ios:"10.0.0"}}},case:{doc:"Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},match:{doc:\'Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, `["get", "building_type"]`). Each label must be unique, and must be either:\\n - a single literal value; or\\n - an array of literal values, the values of which must be all strings or all numbers (for example `[100, 101]` or `["c", "b"]`).\\n\\nThe input matches if any of the values in the array matches using strict equality, similar to the `"in"` operator.\\nIf the input type does not match the type of the labels, the result will be the fallback value.\',group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},coalesce:{doc:"Evaluates each expression in turn until the first valid value is obtained. Invalid values are `null` and [`\'image\'`](#types-image) expressions that are unavailable in the style. If all values are invalid, `coalesce` returns the first value listed.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},step:{doc:\'Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.\',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},interpolate:{doc:\'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array<number>`, or `color`.\\n\\nInterpolation types:\\n- `["linear"]`: Interpolates linearly between the pair of stops just less than and just greater than the input.\\n- `["exponential", base]`: Interpolates exponentially between the stops just less than and just greater than the input. `base` controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.\\n- `["cubic-bezier", x1, y1, x2, y2]`: Interpolates using the cubic bezier curve defined by the given control points.\',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"interpolate-hcl":{doc:\'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the Hue-Chroma-Luminance color space.\',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.49.0"}}},"interpolate-lab":{doc:\'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the CIELAB color space.\',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.49.0"}}},ln2:{doc:"Returns mathematical constant ln(2).",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},pi:{doc:"Returns the mathematical constant pi.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},e:{doc:"Returns the mathematical constant e.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},typeof:{doc:"Returns a string describing the type of the given value.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},string:{doc:"Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},number:{doc:"Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},boolean:{doc:"Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},object:{doc:"Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},collator:{doc:"Returns a `collator` for use in locale-dependent comparison operations. The `case-sensitive` and `diacritic-sensitive` options default to `false`. The `locale` argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the `collator` will use a system-defined fallback locale. Use `resolved-locale` to test the results of locale fallback behavior.",group:"Types","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},format:{doc:\'Returns a `formatted` string for displaying mixed-format text in the `text-field` property. The input may contain a string literal or expression, including an [`\\\'image\\\'`](#types-image) expression. Strings may be followed by a style override object that supports the following properties:\\n- `"text-font"`: Overrides the font stack specified by the root layout property.\\n- `"text-color"`: Overrides the color specified by the root paint property.\\n- `"font-scale"`: Applies a scaling factor on `text-size` as specified by the root layout property.\',group:"Types","sdk-support":{"basic functionality":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"text-font":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"font-scale":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"text-color":{js:"1.3.0",android:"7.3.0",ios:"4.10.0",macos:"0.14.0"},image:{js:"1.6.0",android:"8.6.0",ios:"5.7.0",macos:"0.15.0"}}},image:{doc:"Returns a [`ResolvedImage`](/mapbox-gl-js/style-spec/types/#resolvedimage) for use in [`icon-image`](/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image), `*-pattern` entries, and as a section in the [`\'format\'`](#types-format) expression. A [`\'coalesce\'`](#coalesce) expression containing `image` expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the `\'image\'` argument.",group:"Types","sdk-support":{"basic functionality":{js:"1.4.0",android:"8.6.0",ios:"5.7.0",macos:"0.15.0"}}},"number-format":{doc:"Converts the input number into a string representation using the providing formatting rules. If set, the `locale` argument specifies the locale to use, as a BCP 47 language tag. If set, the `currency` argument specifies an ISO 4217 code to use for currency-style formatting. If set, the `unit` argument specifies a [simple ECMAScript unit](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier) to use for unit-style formatting. If set, the `min-fraction-digits` and `max-fraction-digits` arguments specify the minimum and maximum number of fractional digits to include.",group:"Types","sdk-support":{"basic functionality":{js:"0.54.0",android:"8.4.0",ios:"5.4.0",macos:"0.15.0"}}},"to-string":{doc:\'Converts the input value to a string. If the input is `null`, the result is `""`. If the input is a [`boolean`](#types-boolean), the result is `"true"` or `"false"`. If the input is a number, it is converted to a string as specified by the ["NumberToString" algorithm](https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type) of the ECMAScript Language Specification. If the input is a [`color`](#color), it is converted to a string of the form `"rgba(r,g,b,a)"`, where `r`, `g`, and `b` are numerals ranging from 0 to 255, and `a` ranges from 0 to 1. If the input is an [`\\\'image\\\'`](#types-image) expression, `\\\'to-string\\\'` returns the image name. Otherwise, the input is converted to a string in the format specified by the [`JSON.stringify`](https://tc39.github.io/ecma262/#sec-json.stringify) function of the ECMAScript Language Specification.\',group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-number":{doc:\'Converts the input value to a number, if possible. If the input is `null` or `false`, the result is 0. If the input is `true`, the result is 1. If the input is a string, it is converted to a number as specified by the ["ToNumber Applied to the String Type" algorithm](https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type) of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.\',group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-boolean":{doc:"Converts the input value to a boolean. The result is `false` when then input is an empty string, 0, `false`, `null`, or `NaN`; otherwise it is `true`.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-rgba":{doc:"Returns a four-element array containing the input color\'s red, green, blue, and alpha components, in that order.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-color":{doc:"Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},rgb:{doc:"Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},rgba:{doc:"Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},get:{doc:"Retrieves a property value from the current feature\'s properties, or from another object if a second argument is provided. Returns `null` if the requested property is missing.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},has:{doc:"Tests for the presence of an property value in the current feature\'s properties, or from another object if a second argument is provided.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},length:{doc:"Returns the length of an array or string.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},properties:{doc:\'Returns the feature properties object.  Note that in some cases, it may be more efficient to use `["get", "property_name"]` directly.\',group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"feature-state":{doc:"Retrieves a property value from the current feature\'s state. Returns `null` if the requested property is not present on the feature\'s state. A feature\'s state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their `id` attribute, which must be an integer or a string that can be cast to an integer. Note that [\\"feature-state\\"] can only be used with paint properties that support data-driven styling.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.46.0",android:"10.0.0",ios:"10.0.0"}}},"geometry-type":{doc:"Returns the feature\'s geometry type: `Point`, `LineString` or `Polygon`. `Multi*` feature types return the singular forms.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},id:{doc:"Returns the feature\'s id, if it has one.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},zoom:{doc:\'Returns the current zoom level.  Note that in style layout and paint properties, ["zoom"] may only appear as the input to a top-level "step" or "interpolate" expression.\',group:"Camera","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},pitch:{doc:\'Returns the current pitch in degrees. `["pitch"]` may only be used in the `filter` expression for a `symbol` layer.\',group:"Camera","sdk-support":{"basic functionality":{js:"2.6.0",android:"10.9.0",ios:"10.9.0"}}},"distance-from-center":{doc:\'Returns the distance of a `symbol` instance from the center of the map. The distance is measured in pixels divided by the height of the map container. It measures 0 at the center, decreases towards the camera and increase away from the camera. For example, if the height of the map is 1000px, a value of -1 means 1000px away from the center towards the camera, and a value of 1 means a distance of 1000px away from the camera from the center. `["distance-from-center"]` may only be used in the `filter` expression for a `symbol` layer.\',group:"Camera","sdk-support":{"basic functionality":{js:"2.6.0",android:"10.9.0",ios:"10.9.0"}}},"heatmap-density":{doc:"Returns the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the `heatmap-color` property.",group:"Heatmap","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"line-progress":{doc:"Returns the progress along a gradient line. Can only be used in the `line-gradient` property.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.6.0",macos:"0.12.0"}}},"sky-radial-progress":{doc:"Returns the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches `sky-gradient-radius`. Can only be used in the `sky-gradient` property.",group:"sky","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}}},accumulated:{doc:"Returns the value of a cluster property accumulated so far. Can only be used in the `clusterProperties` option of a clustered GeoJSON source.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.53.0",android:"8.4.0",ios:"5.5.0",macos:"0.15.0"}}},"+":{doc:"Returns the sum of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"*":{doc:"Returns the product of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"-":{doc:"For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"/":{doc:"Returns the result of floating point division of the first input by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"%":{doc:"Returns the remainder after integer division of the first input by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"^":{doc:"Returns the result of raising the first input to the power specified by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},sqrt:{doc:"Returns the square root of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},log10:{doc:"Returns the base-ten logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},ln:{doc:"Returns the natural logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},log2:{doc:"Returns the base-two logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},sin:{doc:"Returns the sine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},cos:{doc:"Returns the cosine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},tan:{doc:"Returns the tangent of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},asin:{doc:"Returns the arcsine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},acos:{doc:"Returns the arccosine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},atan:{doc:"Returns the arctangent of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},min:{doc:"Returns the minimum value of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},max:{doc:"Returns the maximum value of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},round:{doc:\'Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, `["round", -1.5]` evaluates to -2.\',group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},abs:{doc:"Returns the absolute value of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},ceil:{doc:"Returns the smallest integer that is greater than or equal to the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},floor:{doc:"Returns the largest integer that is less than or equal to the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},distance:{doc:"Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.",group:"Math","sdk-support":{"basic functionality":{android:"9.2.0",ios:"5.9.0",macos:"0.16.0"}}},"==":{doc:"Returns `true` if the input values are equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"!=":{doc:"Returns `true` if the input values are not equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},">":{doc:"Returns `true` if the first input is strictly greater than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"<":{doc:"Returns `true` if the first input is strictly less than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},">=":{doc:"Returns `true` if the first input is greater than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"<=":{doc:"Returns `true` if the first input is less than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},all:{doc:"Returns `true` if all the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},any:{doc:"Returns `true` if any of the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"!":{doc:"Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},within:{doc:"Returns `true` if the evaluated feature is fully contained inside a boundary of the input geometry, `false` otherwise. The input value can be a valid GeoJSON of type `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Supported features for evaluation:\\n- `Point`: Returns `false` if a point is on the boundary or falls outside the boundary.\\n- `LineString`: Returns `false` if any part of a line falls outside the boundary, the line intersects the boundary, or a line\'s endpoint is on the boundary.",group:"Decision","sdk-support":{"basic functionality":{js:"1.9.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}}},"is-supported-script":{doc:"Returns `true` if the input string is expected to render legibly. Returns `false` if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the `mapbox-gl-rtl-text` plugin is not in use in Mapbox GL JS).",group:"String","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.6.0",ios:"4.1.0",macos:"0.8.0"}}},upcase:{doc:"Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},downcase:{doc:"Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},concat:{doc:"Returns a `string` consisting of the concatenation of the inputs. Each input is converted to a string as if by `to-string`.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"resolved-locale":{doc:"Returns the IETF language tag of the locale being used by the provided `collator`. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.",group:"String","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}}}},fog:{range:{type:"array",default:[.5,10],minimum:-20,maximum:20,length:2,value:"number","property-type":"data-constant",transition:!0,expression:{interpolated:!0,parameters:["zoom"]},doc:"The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.",example:[.5,10],"sdk-support":{"basic functionality":{js:"2.3.0",android:"10.6.0",ios:"10.6.0"}}},color:{type:"color","property-type":"data-constant",default:"#ffffff",expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"The color of the atmosphere region immediately below the horizon and within the `range` and above the horizon and within `horizon-blend`. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.","sdk-support":{"basic functionality":{js:"2.3.0",android:"10.6.0",ios:"10.6.0"}}},"high-color":{type:"color","property-type":"data-constant",default:"#245cdf",expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"The color of the atmosphere region above the horizon, `high-color` extends further above the horizon than the `color` property and its spread can be controlled with `horizon-blend`. The opacity can be set to `0` to remove the high atmosphere color contribution.","sdk-support":{"basic functionality":{js:"2.9.0",android:"10.6.0",ios:"10.6.0"}}},"space-color":{type:"color","property-type":"data-constant",default:["interpolate",["linear"],["zoom"],4,"#010b19",7,"#367ab9"],expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"The color of the region above the horizon and after the end of the `horizon-blend` contribution. The opacity can be set to `0` to have a transparent background.","sdk-support":{"basic functionality":{js:"2.9.0",android:"10.6.0",ios:"10.6.0"}}},"horizon-blend":{type:"number","property-type":"data-constant",default:["interpolate",["linear"],["zoom"],4,.2,7,.1],minimum:0,maximum:1,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Horizon blend applies a smooth fade from the color of the atmosphere to the color of space. A value of zero leaves a sharp transition from atmosphere to space. Increasing the value blends the color of atmosphere into increasingly high angles of the sky.","sdk-support":{"basic functionality":{js:"2.3.0",android:"10.6.0",ios:"10.6.0"}}},"star-intensity":{type:"number","property-type":"data-constant",default:["interpolate",["linear"],["zoom"],5,.35,6,0],minimum:0,maximum:1,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"A value controlling the star intensity where `0` will show no stars and `1` will show stars at their maximum intensity.","sdk-support":{"basic functionality":{js:"2.9.0",android:"10.6.0",ios:"10.6.0"}}}},light:{anchor:{type:"enum",default:"viewport",values:{map:{doc:"The position of the light source is aligned to the rotation of the map."},viewport:{doc:"The position of the light source is aligned to the rotation of the viewport."}},"property-type":"data-constant",transition:!1,expression:{interpolated:!1,parameters:["zoom"]},doc:"Whether extruded geometries are lit relative to the map or viewport.",example:"map","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},position:{type:"array",default:[1.15,210,30],length:3,value:"number","property-type":"data-constant",transition:!0,expression:{interpolated:!0,parameters:["zoom"]},doc:"Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0° (0° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0°, directly above, to 180°, directly below).",example:[1.5,90,80],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},color:{type:"color","property-type":"data-constant",default:"#ffffff",expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Color tint for lighting extruded geometries.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},intensity:{type:"number","property-type":"data-constant",default:.5,minimum:0,maximum:1,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}}},projection:{name:{type:"enum",values:{albers:{doc:"An Albers equal-area projection centered on the continental United States. You can configure the projection for a different region by setting `center` and `parallels` properties. You may want to set max bounds to constrain the map to the relevant region."},equalEarth:{doc:"An Equal Earth projection."},equirectangular:{doc:"An Equirectangular projection. This projection is very similar to the Plate Carrée projection."},lambertConformalConic:{doc:"A Lambert conformal conic projection. You can configure the projection for a region by setting `center` and `parallels` properties. You may want to set max bounds to constrain the map to the relevant region."},mercator:{doc:"The Mercator projection is the default projection."},naturalEarth:{doc:"A Natural Earth projection."},winkelTripel:{doc:"A Winkel Tripel projection."},globe:{doc:"A globe projection."}},default:"mercator",doc:"The name of the projection to be used for rendering the map.",required:!0,"sdk-support":{"basic functionality":{js:"2.6.0"}}},center:{type:"array",length:2,value:"number","property-type":"data-constant",minimum:[-180,-90],maximum:[180,90],transition:!1,doc:"The reference longitude and latitude of the projection. `center` takes the form of [lng, lat]. This property is only configurable for conic projections (Albers and Lambert Conformal Conic). All other projections are centered on [0, 0].",example:[-96,37.5],requires:[{name:["albers","lambertConformalConic"]}],"sdk-support":{"basic functionality":{js:"2.6.0"}}},parallels:{type:"array",length:2,value:"number","property-type":"data-constant",minimum:[-90,-90],maximum:[90,90],transition:!1,doc:"The standard parallels of the projection, denoting the desired latitude range with minimal distortion. `parallels` takes the form of [lat0, lat1]. This property is only configurable for conic projections (Albers and Lambert Conformal Conic).",example:[29.5,45.5],requires:[{name:["albers","lambertConformalConic"]}],"sdk-support":{"basic functionality":{js:"2.6.0"}}}},terrain:{source:{type:"string",doc:"Name of a source of `raster_dem` type to be used for terrain elevation.",required:!0,"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}}},exaggeration:{type:"number","property-type":"data-constant",default:1,minimum:0,maximum:1e3,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.",requires:["source"],"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}}}},paint:["paint_fill","paint_line","paint_circle","paint_heatmap","paint_fill-extrusion","paint_symbol","paint_raster","paint_hillshade","paint_background","paint_sky"],paint_fill:{"fill-antialias":{type:"boolean",default:!0,doc:"Whether or not the fill should be antialiased.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.21.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-color":{type:"color",default:"#000000",doc:"The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color\'s opacity will not affect the opacity of the 1px stroke, if it is used.",transition:!0,requires:[{"!":"fill-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.19.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-outline-color":{type:"color",doc:"The outline color of the fill. Matches the value of `fill-color` if unspecified.",transition:!0,requires:[{"!":"fill-pattern"},{"fill-antialias":!0}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.19.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry\'s offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-translate-anchor":{type:"enum",values:{map:{doc:"The fill is translated relative to the map."},viewport:{doc:"The fill is translated relative to the viewport."}},doc:"Controls the frame of reference for `fill-translate`.",default:"map",requires:["fill-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-pattern":{type:"resolvedImage",transition:!1,doc:"Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"}},"paint_fill-extrusion":{"fill-extrusion-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",transition:!0,"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-color":{type:"color",default:"#000000",doc:"The base color of the extruded fill. The extrusion\'s surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",transition:!0,requires:[{"!":"fill-extrusion-pattern"}],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry\'s offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-translate-anchor":{type:"enum",values:{map:{doc:"The fill extrusion is translated relative to the map."},viewport:{doc:"The fill extrusion is translated relative to the viewport."}},doc:"Controls the frame of reference for `fill-extrusion-translate`.",default:"map",requires:["fill-extrusion-translate"],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-pattern":{type:"resolvedImage",transition:!1,doc:"Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"fill-extrusion-height":{type:"number",default:0,minimum:0,units:"meters",doc:"The height with which to extrude this layer.",transition:!0,"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-base":{type:"number",default:0,minimum:0,units:"meters",doc:"The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",transition:!0,requires:["fill-extrusion-height"],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-vertical-gradient":{type:"boolean",default:!0,doc:"Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.",transition:!1,"sdk-support":{"basic functionality":{js:"0.50.0",android:"7.0.0",ios:"4.7.0",macos:"0.13.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-ambient-occlusion-intensity":{"property-type":"data-constant",type:"number",private:!0,default:0,minimum:0,maximum:1,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Controls the intensity of shading near ground and concave angles between walls. Default value 0.0 disables ambient occlusion and values around 0.3 provide the most plausible results for buildings.","sdk-support":{"basic functionality":{js:"2.10.0",android:"10.7.0",ios:"10.7.0"}}},"fill-extrusion-ambient-occlusion-radius":{"property-type":"data-constant",type:"number",private:!0,default:3,minimum:0,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Shades area near ground and concave angles between walls where the radius defines only vertical impact. Default value 3.0 corresponds to height of one floor and brings the most plausible results for buildings.",requires:["fill-extrusion-edge-radius"],"sdk-support":{"basic functionality":{js:"2.10.0",android:"10.7.0",ios:"10.7.0"}}}},paint_line:{"line-opacity":{type:"number",doc:"The opacity at which the line will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-color":{type:"color",doc:"The color with which the line will be drawn.",default:"#000000",transition:!0,requires:[{"!":"line-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.23.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry\'s offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-translate-anchor":{type:"enum",values:{map:{doc:"The line is translated relative to the map."},viewport:{doc:"The line is translated relative to the viewport."}},doc:"Controls the frame of reference for `line-translate`.",default:"map",requires:["line-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"line-width":{type:"number",default:1,minimum:0,transition:!0,units:"pixels",doc:"Stroke thickness.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-gap-width":{type:"number",default:0,minimum:0,doc:"Draws a line casing outside of a line\'s actual path. Value indicates the width of the inner gap.",transition:!0,units:"pixels","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-offset":{type:"number",default:0,doc:"The line\'s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",transition:!0,units:"pixels","sdk-support":{"basic functionality":{js:"0.12.1",android:"3.0.0",ios:"3.1.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Blur applied to the line, in pixels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-dasharray":{type:"array",value:"number",doc:"Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won\'t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.",minimum:0,transition:!1,units:"line widths",requires:[{"!":"line-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"2.3.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"line-pattern":{type:"resolvedImage",transition:!1,doc:"Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"line-gradient":{type:"color",doc:\'Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `"lineMetrics": true`.\',transition:!1,requires:[{"!":"line-pattern"},{source:"geojson",has:{lineMetrics:!0}}],"sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.4.0",macos:"0.11.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["line-progress"]},"property-type":"color-ramp"},"line-trim-offset":{type:"array",value:"number",doc:"The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].",length:2,default:[0,0],minimum:[0,0],maximum:[1,1],transition:!1,requires:[{source:"geojson",has:{lineMetrics:!0}}],"sdk-support":{"basic functionality":{js:"2.9.0",android:"10.5.0",ios:"10.5.0",macos:"10.5.0"}},"property-type":"constant"}},paint_circle:{"circle-radius":{type:"number",default:5,minimum:0,transition:!0,units:"pixels",doc:"Circle radius.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.18.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-color":{type:"color",default:"#000000",doc:"The fill color of the circle.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.18.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-blur":{type:"number",default:0,doc:"Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.20.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-opacity":{type:"number",doc:"The opacity at which the circle will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.20.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry\'s offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"circle-translate-anchor":{type:"enum",values:{map:{doc:"The circle is translated relative to the map."},viewport:{doc:"The circle is translated relative to the viewport."}},doc:"Controls the frame of reference for `circle-translate`.",default:"map",requires:["circle-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-pitch-scale":{type:"enum",values:{map:{doc:"Circles are scaled according to their apparent distance to the camera."},viewport:{doc:"Circles are not scaled."}},default:"map",doc:"Controls the scaling behavior of the circle when the map is pitched.","sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-pitch-alignment":{type:"enum",values:{map:{doc:"The circle is aligned to the plane of the map."},viewport:{doc:"The circle is aligned to the plane of the viewport."}},default:"viewport",doc:"Orientation of circle when map is pitched.","sdk-support":{"basic functionality":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-stroke-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"The width of the circle\'s stroke. Strokes are placed outside of the `circle-radius`.","sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-stroke-color":{type:"color",default:"#000000",doc:"The stroke color of the circle.",transition:!0,"sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-stroke-opacity":{type:"number",doc:"The opacity of the circle\'s stroke.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"}},paint_heatmap:{"heatmap-radius":{type:"number",default:30,minimum:1,transition:!0,units:"pixels",doc:"Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. `queryRenderedFeatures` on heatmap layers will return points within this radius.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"heatmap-weight":{type:"number",default:1,minimum:0,transition:!1,doc:"A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"heatmap-intensity":{type:"number",default:1,minimum:0,transition:!0,doc:"Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"heatmap-color":{type:"color",default:["interpolate",["linear"],["heatmap-density"],0,"rgba(0, 0, 255, 0)",.1,"royalblue",.3,"cyan",.5,"lime",.7,"yellow",1,"red"],doc:\'Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `["heatmap-density"]` as input.\',transition:!1,"sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["heatmap-density"]},"property-type":"color-ramp"},"heatmap-opacity":{type:"number",doc:"The global opacity at which the heatmap layer will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_symbol:{"icon-opacity":{doc:"The opacity at which the icon will be drawn.",type:"number",default:1,minimum:0,maximum:1,transition:!0,requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-color":{type:"color",default:"#000000",transition:!0,doc:"The color of the icon. This can only be used with [SDF icons](/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-color":{type:"color",default:"rgba(0, 0, 0, 0)",transition:!0,doc:"The color of the icon\'s halo. Icon halos can only be used with [SDF icons](/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Distance of halo to the icon outline.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Fade out the halo towards the outside.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"Distance that the icon\'s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-translate-anchor":{type:"enum",values:{map:{doc:"Icons are translated relative to the map."},viewport:{doc:"Icons are translated relative to the viewport."}},doc:"Controls the frame of reference for `icon-translate`.",default:"map",requires:["icon-image","icon-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-opacity":{type:"number",doc:"The opacity at which the text will be drawn.",default:1,minimum:0,maximum:1,transition:!0,requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-color":{type:"color",doc:"The color with which the text will be drawn.",default:"#000000",transition:!0,overridable:!0,requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-color":{type:"color",default:"rgba(0, 0, 0, 0)",transition:!0,doc:"The color of the text\'s halo, which helps it stand out from backgrounds.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"The halo\'s fadeout distance towards the outside.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"Distance that the text\'s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-translate-anchor":{type:"enum",values:{map:{doc:"The text is translated relative to the map."},viewport:{doc:"The text is translated relative to the viewport."}},doc:"Controls the frame of reference for `text-translate`.",default:"map",requires:["text-field","text-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"}},paint_raster:{"raster-opacity":{type:"number",doc:"The opacity at which the image will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-hue-rotate":{type:"number",default:0,period:360,transition:!0,units:"degrees",doc:"Rotates hues around the color wheel.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-brightness-min":{type:"number",doc:"Increase or reduce the brightness of the image. The value is the minimum brightness.",default:0,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-brightness-max":{type:"number",doc:"Increase or reduce the brightness of the image. The value is the maximum brightness.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-saturation":{type:"number",doc:"Increase or reduce the saturation of the image.",default:0,minimum:-1,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-contrast":{type:"number",doc:"Increase or reduce the contrast of the image.",default:0,minimum:-1,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-resampling":{type:"enum",doc:"The resampling/interpolation method to use for overscaling, also known as texture magnification filter",values:{linear:{doc:"(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"},nearest:{doc:"Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"}},default:"linear","sdk-support":{"basic functionality":{js:"0.47.0",android:"6.3.0",ios:"4.2.0",macos:"0.9.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"raster-fade-duration":{type:"number",default:300,minimum:0,transition:!1,units:"milliseconds",doc:"Fade duration when a new tile is added.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_hillshade:{"hillshade-illumination-direction":{type:"number",default:335,minimum:0,maximum:359,doc:"The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.",transition:!1,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-illumination-anchor":{type:"enum",values:{map:{doc:"The hillshade illumination is relative to the north direction."},viewport:{doc:"The hillshade illumination is relative to the top of the viewport."}},default:"viewport",doc:"Direction of light source when map is rotated.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-exaggeration":{type:"number",doc:"Intensity of the hillshade",default:.5,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-shadow-color":{type:"color",default:"#000000",doc:"The shading color of areas that face away from the light source.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-highlight-color":{type:"color",default:"#FFFFFF",doc:"The shading color of areas that faces towards the light source.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-accent-color":{type:"color",default:"#000000",doc:"The shading color used to accentuate rugged terrain like sharp cliffs and gorges.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_background:{"background-color":{type:"color",default:"#000000",doc:"The color with which the background will be drawn.",transition:!0,requires:[{"!":"background-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"background-pattern":{type:"resolvedImage",transition:!1,doc:"Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"background-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity at which the background will be drawn.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_sky:{"sky-type":{type:"enum",values:{gradient:{doc:"Renders the sky with a gradient that can be configured with `sky-gradient-radius` and `sky-gradient`."},atmosphere:{doc:"Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through `sky-atmosphere-sun`."}},default:"atmosphere",doc:"The type of the sky","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-atmosphere-sun":{type:"array",value:"number",length:2,units:"degrees",minimum:[0,0],maximum:[360,180],transition:!1,doc:"Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0° north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0° is directly above, at zenith, and 90° at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},requires:[{"sky-type":"atmosphere"}],expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-atmosphere-sun-intensity":{type:"number",requires:[{"sky-type":"atmosphere"}],default:10,minimum:0,maximum:100,transition:!1,doc:"Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},"property-type":"data-constant"},"sky-gradient-center":{type:"array",requires:[{"sky-type":"gradient"}],value:"number",default:[0,0],length:2,units:"degrees",minimum:[0,0],maximum:[360,180],transition:!1,doc:"Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0° north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0° is directly above, at zenith, and 90° at the horizon.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-gradient-radius":{type:"number",requires:[{"sky-type":"gradient"}],default:90,minimum:0,maximum:180,transition:!1,doc:"The angular distance (measured in degrees) from `sky-gradient-center` up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from `sky-gradient-center`.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-gradient":{type:"color",default:["interpolate",["linear"],["sky-radial-progress"],.8,"#87ceeb",1,"white"],doc:"Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using `sky-radial-progress`. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, `sky-gradient-radius`] centered at the position specified by `sky-gradient-center`.",transition:!1,requires:[{"sky-type":"gradient"}],"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["sky-radial-progress"]},"property-type":"color-ramp"},"sky-atmosphere-halo-color":{type:"color",default:"white",doc:"A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.",transition:!1,requires:[{"sky-type":"atmosphere"}],"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},"property-type":"data-constant"},"sky-atmosphere-color":{type:"color",default:"white",doc:"A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.",transition:!1,requires:[{"sky-type":"atmosphere"}],"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},"property-type":"data-constant"},"sky-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire sky layer.",transition:!0,"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},transition:{duration:{type:"number",default:300,minimum:0,units:"milliseconds",doc:"Time allotted for transitions to complete."},delay:{type:"number",default:0,minimum:0,units:"milliseconds",doc:"Length of time before a transition begins."}},"property-type":{"data-driven":{type:"property-type",doc:"Property is interpolable and can be represented using a property expression."},"color-ramp":{type:"property-type",doc:"Property should be specified using a color ramp from which the output color can be sampled based on a property calculation."},"data-constant":{type:"property-type",doc:"Property is interpolable but cannot be represented using a property expression."},constant:{type:"property-type",doc:"Property is constant across all zoom levels and property values."}},promoteId:{"*":{type:"string",doc:"A name of a feature property to use as ID for feature state."}}},Oi="undefined"!=typeof undefinedThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof undefined?global:"undefined"!=typeof self?self:{},qi={exports:{}};\n/*! https://mths.be/punycode v1.3.2 by @mathias */function Ci(t,...e){for(const n of e)for(const e in n)t[e]=n[e];return t}_i=qi,Pi=qi.exports,function(t){var e=Pi&&!Pi.nodeType&&Pi,n=_i&&!_i.nodeType&&_i,i="object"==typeof Oi&&Oi;i.global!==i&&i.window!==i&&i.self!==i||(t=i);var r,o,s=2147483647,a=/^xn--/,l=/[^\\x20-\\x7E]/,u=/[\\x2E\\u3002\\uFF0E\\uFF61]/g,c={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},h=Math.floor,d=String.fromCharCode;function f(t){throw RangeError(c[t])}function p(t,e){for(var n=t.length,i=[];n--;)i[n]=e(t[n]);return i}function m(t,e){var n=t.split("@"),i="";return n.length>1&&(i=n[0]+"@",t=n[1]),i+p((t=t.replace(u,".")).split("."),e).join(".")}function y(t){for(var e,n,i=[],r=0,o=t.length;r<o;)(e=t.charCodeAt(r++))>=55296&&e<=56319&&r<o?56320==(64512&(n=t.charCodeAt(r++)))?i.push(((1023&e)<<10)+(1023&n)+65536):(i.push(e),r--):i.push(e);return i}function g(t){return p(t,(function(t){var e="";return t>65535&&(e+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+d(t)})).join("")}function b(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function v(t,e,n){var i=0;for(t=n?h(t/700):t>>1,t+=h(t/e);t>455;i+=36)t=h(t/35);return h(i+36*t/(t+38))}function w(t){var e,n,i,r,o,a,l,u,c,d,p,m=[],y=t.length,b=0,w=128,x=72;for((n=t.lastIndexOf("-"))<0&&(n=0),i=0;i<n;++i)t.charCodeAt(i)>=128&&f("not-basic"),m.push(t.charCodeAt(i));for(r=n>0?n+1:0;r<y;){for(o=b,a=1,l=36;r>=y&&f("invalid-input"),((u=(p=t.charCodeAt(r++))-48<10?p-22:p-65<26?p-65:p-97<26?p-97:36)>=36||u>h((s-b)/a))&&f("overflow"),b+=u*a,!(u<(c=l<=x?1:l>=x+26?26:l-x));l+=36)a>h(s/(d=36-c))&&f("overflow"),a*=d;x=v(b-o,e=m.length+1,0==o),h(b/e)>s-w&&f("overflow"),w+=h(b/e),b%=e,m.splice(b++,0,w)}return g(m)}function x(t){var e,n,i,r,o,a,l,u,c,p,m,g,w,x,k,M=[];for(g=(t=y(t)).length,e=128,n=0,o=72,a=0;a<g;++a)(m=t[a])<128&&M.push(d(m));for(i=r=M.length,r&&M.push("-");i<g;){for(l=s,a=0;a<g;++a)(m=t[a])>=e&&m<l&&(l=m);for(l-e>h((s-n)/(w=i+1))&&f("overflow"),n+=(l-e)*w,e=l,a=0;a<g;++a)if((m=t[a])<e&&++n>s&&f("overflow"),m==e){for(u=n,c=36;!(u<(p=c<=o?1:c>=o+26?26:c-o));c+=36)M.push(d(b(p+(k=u-p)%(x=36-p),0))),u=h(k/x);M.push(d(b(u,0))),o=v(n,w,i==r),n=0,++i}++n,++e}return M.join("")}if(r={version:"1.3.2",ucs2:{decode:y,encode:g},decode:w,encode:x,toASCII:function(t){return m(t,(function(t){return l.test(t)?"xn--"+x(t):t}))},toUnicode:function(t){return m(t,(function(t){return a.test(t)?w(t.slice(4).toLowerCase()):t}))}},e&&n)if(_i.exports==e)n.exports=r;else for(o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);else t.punycode=r}(Oi);class Ni extends Error{constructor(t,e){super(e),this.message=e,this.key=t}}var Ei=Ni;class Ri{constructor(t,e=[]){this.parent=t,this.bindings={};for(const[t,n]of e)this.bindings[t]=n}concat(t){return new Ri(this,t)}get(t){if(this.bindings[t])return this.bindings[t];if(this.parent)return this.parent.get(t);throw new Error(t+" not found in scope.")}has(t){return!!this.bindings[t]||!!this.parent&&this.parent.has(t)}}var Di=Ri;const Li={kind:"null"},$i={kind:"number"},Ui={kind:"string"},Wi={kind:"boolean"},Ji={kind:"color"},Hi={kind:"object"},Gi={kind:"value"},Vi={kind:"collator"},Bi={kind:"formatted"},Zi={kind:"resolvedImage"};function Xi(t,e){return{kind:"array",itemType:t,N:e}}function Yi(t){if("array"===t.kind){const e=Yi(t.itemType);return"number"==typeof t.N?`array<${e}, ${t.N}>`:"value"===t.itemType.kind?"array":`array<${e}>`}return t.kind}const Ki=[Li,$i,Ui,Wi,Ji,Bi,Hi,Xi(Gi),Zi];function Qi(t,e){if("error"===e.kind)return null;if("array"===t.kind){if("array"===e.kind&&(0===e.N&&"value"===e.itemType.kind||!Qi(t.itemType,e.itemType))&&("number"!=typeof t.N||t.N===e.N))return null}else{if(t.kind===e.kind)return null;if("value"===t.kind)for(const t of Ki)if(!Qi(t,e))return null}return`Expected ${Yi(t)} but found ${Yi(e)} instead.`}function tr(t,e){return e.some(e=>e.kind===t.kind)}function er(t,e){return e.some(e=>"null"===e?null===t:"array"===e?Array.isArray(t):"object"===e?t&&!Array.isArray(t)&&"object"==typeof t:e===typeof t)}var nr,ir={transparent:[0,0,0,0],aliceblue:[240,248,255,1],antiquewhite:[250,235,215,1],aqua:[0,255,255,1],aquamarine:[127,255,212,1],azure:[240,255,255,1],beige:[245,245,220,1],bisque:[255,228,196,1],black:[0,0,0,1],blanchedalmond:[255,235,205,1],blue:[0,0,255,1],blueviolet:[138,43,226,1],brown:[165,42,42,1],burlywood:[222,184,135,1],cadetblue:[95,158,160,1],chartreuse:[127,255,0,1],chocolate:[210,105,30,1],coral:[255,127,80,1],cornflowerblue:[100,149,237,1],cornsilk:[255,248,220,1],crimson:[220,20,60,1],cyan:[0,255,255,1],darkblue:[0,0,139,1],darkcyan:[0,139,139,1],darkgoldenrod:[184,134,11,1],darkgray:[169,169,169,1],darkgreen:[0,100,0,1],darkgrey:[169,169,169,1],darkkhaki:[189,183,107,1],darkmagenta:[139,0,139,1],darkolivegreen:[85,107,47,1],darkorange:[255,140,0,1],darkorchid:[153,50,204,1],darkred:[139,0,0,1],darksalmon:[233,150,122,1],darkseagreen:[143,188,143,1],darkslateblue:[72,61,139,1],darkslategray:[47,79,79,1],darkslategrey:[47,79,79,1],darkturquoise:[0,206,209,1],darkviolet:[148,0,211,1],deeppink:[255,20,147,1],deepskyblue:[0,191,255,1],dimgray:[105,105,105,1],dimgrey:[105,105,105,1],dodgerblue:[30,144,255,1],firebrick:[178,34,34,1],floralwhite:[255,250,240,1],forestgreen:[34,139,34,1],fuchsia:[255,0,255,1],gainsboro:[220,220,220,1],ghostwhite:[248,248,255,1],gold:[255,215,0,1],goldenrod:[218,165,32,1],gray:[128,128,128,1],green:[0,128,0,1],greenyellow:[173,255,47,1],grey:[128,128,128,1],honeydew:[240,255,240,1],hotpink:[255,105,180,1],indianred:[205,92,92,1],indigo:[75,0,130,1],ivory:[255,255,240,1],khaki:[240,230,140,1],lavender:[230,230,250,1],lavenderblush:[255,240,245,1],lawngreen:[124,252,0,1],lemonchiffon:[255,250,205,1],lightblue:[173,216,230,1],lightcoral:[240,128,128,1],lightcyan:[224,255,255,1],lightgoldenrodyellow:[250,250,210,1],lightgray:[211,211,211,1],lightgreen:[144,238,144,1],lightgrey:[211,211,211,1],lightpink:[255,182,193,1],lightsalmon:[255,160,122,1],lightseagreen:[32,178,170,1],lightskyblue:[135,206,250,1],lightslategray:[119,136,153,1],lightslategrey:[119,136,153,1],lightsteelblue:[176,196,222,1],lightyellow:[255,255,224,1],lime:[0,255,0,1],limegreen:[50,205,50,1],linen:[250,240,230,1],magenta:[255,0,255,1],maroon:[128,0,0,1],mediumaquamarine:[102,205,170,1],mediumblue:[0,0,205,1],mediumorchid:[186,85,211,1],mediumpurple:[147,112,219,1],mediumseagreen:[60,179,113,1],mediumslateblue:[123,104,238,1],mediumspringgreen:[0,250,154,1],mediumturquoise:[72,209,204,1],mediumvioletred:[199,21,133,1],midnightblue:[25,25,112,1],mintcream:[245,255,250,1],mistyrose:[255,228,225,1],moccasin:[255,228,181,1],navajowhite:[255,222,173,1],navy:[0,0,128,1],oldlace:[253,245,230,1],olive:[128,128,0,1],olivedrab:[107,142,35,1],orange:[255,165,0,1],orangered:[255,69,0,1],orchid:[218,112,214,1],palegoldenrod:[238,232,170,1],palegreen:[152,251,152,1],paleturquoise:[175,238,238,1],palevioletred:[219,112,147,1],papayawhip:[255,239,213,1],peachpuff:[255,218,185,1],peru:[205,133,63,1],pink:[255,192,203,1],plum:[221,160,221,1],powderblue:[176,224,230,1],purple:[128,0,128,1],rebeccapurple:[102,51,153,1],red:[255,0,0,1],rosybrown:[188,143,143,1],royalblue:[65,105,225,1],saddlebrown:[139,69,19,1],salmon:[250,128,114,1],sandybrown:[244,164,96,1],seagreen:[46,139,87,1],seashell:[255,245,238,1],sienna:[160,82,45,1],silver:[192,192,192,1],skyblue:[135,206,235,1],slateblue:[106,90,205,1],slategray:[112,128,144,1],slategrey:[112,128,144,1],snow:[255,250,250,1],springgreen:[0,255,127,1],steelblue:[70,130,180,1],tan:[210,180,140,1],teal:[0,128,128,1],thistle:[216,191,216,1],tomato:[255,99,71,1],turquoise:[64,224,208,1],violet:[238,130,238,1],wheat:[245,222,179,1],white:[255,255,255,1],whitesmoke:[245,245,245,1],yellow:[255,255,0,1],yellowgreen:[154,205,50,1]};function rr(t){return(t=Math.round(t))<0?0:t>255?255:t}function or(t){return rr("%"===t[t.length-1]?parseFloat(t)/100*255:parseInt(t))}function sr(t){return function(t){return t<0?0:t>1?1:t}("%"===t[t.length-1]?parseFloat(t)/100:parseFloat(t))}function ar(t,e,n){return n<0?n+=1:n>1&&(n-=1),6*n<1?t+(e-t)*n*6:2*n<1?e:3*n<2?t+(e-t)*(2/3-n)*6:t}try{nr={}.parseCSSColor=function(t){var e,n=t.replace(/ /g,"").toLowerCase();if(n in ir)return ir[n].slice();if("#"===n[0])return 4===n.length?(e=parseInt(n.substr(1),16))>=0&&e<=4095?[(3840&e)>>4|(3840&e)>>8,240&e|(240&e)>>4,15&e|(15&e)<<4,1]:null:7===n.length&&(e=parseInt(n.substr(1),16))>=0&&e<=16777215?[(16711680&e)>>16,(65280&e)>>8,255&e,1]:null;var i=n.indexOf("("),r=n.indexOf(")");if(-1!==i&&r+1===n.length){var o=n.substr(0,i),s=n.substr(i+1,r-(i+1)).split(","),a=1;switch(o){case"rgba":if(4!==s.length)return null;a=sr(s.pop());case"rgb":return 3!==s.length?null:[or(s[0]),or(s[1]),or(s[2]),a];case"hsla":if(4!==s.length)return null;a=sr(s.pop());case"hsl":if(3!==s.length)return null;var l=(parseFloat(s[0])%360+360)%360/360,u=sr(s[1]),c=sr(s[2]),h=c<=.5?c*(u+1):c+u-c*u,d=2*c-h;return[rr(255*ar(d,h,l+1/3)),rr(255*ar(d,h,l)),rr(255*ar(d,h,l-1/3)),a];default:return null}}return null}}catch(Cs){}class lr{constructor(t,e,n,i=1){this.r=t,this.g=e,this.b=n,this.a=i}static parse(t){if(!t)return;if(t instanceof lr)return t;if("string"!=typeof t)return;const e=nr(t);return e?new lr(e[0]/255*e[3],e[1]/255*e[3],e[2]/255*e[3],e[3]):void 0}toString(){const[t,e,n,i]=this.toArray();return`rgba(${Math.round(t)},${Math.round(e)},${Math.round(n)},${i})`}toArray(){const{r:t,g:e,b:n,a:i}=this;return 0===i?[0,0,0,0]:[255*t/i,255*e/i,255*n/i,i]}toArray01(){const{r:t,g:e,b:n,a:i}=this;return 0===i?[0,0,0,0]:[t/i,e/i,n/i,i]}toArray01PremultipliedAlpha(){const{r:t,g:e,b:n,a:i}=this;return[t,e,n,i]}}lr.black=new lr(0,0,0,1),lr.white=new lr(1,1,1,1),lr.transparent=new lr(0,0,0,0),lr.red=new lr(1,0,0,1),lr.blue=new lr(0,0,1,1);var ur=lr;class cr{constructor(t,e,n){this.sensitivity=t?e?"variant":"case":e?"accent":"base",this.locale=n,this.collator=new Intl.Collator(this.locale?this.locale:[],{sensitivity:this.sensitivity,usage:"search"})}compare(t,e){return this.collator.compare(t,e)}resolvedLocale(){return new Intl.Collator(this.locale?this.locale:[]).resolvedOptions().locale}}class hr{constructor(t,e,n,i,r){this.text=t.normalize?t.normalize():t,this.image=e,this.scale=n,this.fontStack=i,this.textColor=r}}class dr{constructor(t){this.sections=t}static fromString(t){return new dr([new hr(t,null,null,null,null)])}isEmpty(){return 0===this.sections.length||!this.sections.some(t=>0!==t.text.length||t.image&&0!==t.image.name.length)}static factory(t){return t instanceof dr?t:dr.fromString(t)}toString(){return 0===this.sections.length?"":this.sections.map(t=>t.text).join("")}serialize(){const t=["format"];for(const e of this.sections){if(e.image){t.push(["image",e.image.name]);continue}t.push(e.text);const n={};e.fontStack&&(n["text-font"]=["literal",e.fontStack.split(",")]),e.scale&&(n["font-scale"]=e.scale),e.textColor&&(n["text-color"]=["rgba"].concat(e.textColor.toArray())),t.push(n)}return t}}class fr{constructor(t){this.name=t.name,this.available=t.available}toString(){return this.name}static fromString(t){return t?new fr({name:t,available:!1}):null}serialize(){return["image",this.name]}}function pr(t,e,n,i){return"number"==typeof t&&t>=0&&t<=255&&"number"==typeof e&&e>=0&&e<=255&&"number"==typeof n&&n>=0&&n<=255?void 0===i||"number"==typeof i&&i>=0&&i<=1?null:`Invalid rgba value [${[t,e,n,i].join(", ")}]: \'a\' must be between 0 and 1.`:`Invalid rgba value [${("number"==typeof i?[t,e,n,i]:[t,e,n]).join(", ")}]: \'r\', \'g\', and \'b\' must be between 0 and 255.`}function mr(t){if(null===t)return!0;if("string"==typeof t)return!0;if("boolean"==typeof t)return!0;if("number"==typeof t)return!0;if(t instanceof ur)return!0;if(t instanceof cr)return!0;if(t instanceof dr)return!0;if(t instanceof fr)return!0;if(Array.isArray(t)){for(const e of t)if(!mr(e))return!1;return!0}if("object"==typeof t){for(const e in t)if(!mr(t[e]))return!1;return!0}return!1}function yr(t){if(null===t)return Li;if("string"==typeof t)return Ui;if("boolean"==typeof t)return Wi;if("number"==typeof t)return $i;if(t instanceof ur)return Ji;if(t instanceof cr)return Vi;if(t instanceof dr)return Bi;if(t instanceof fr)return Zi;if(Array.isArray(t)){const e=t.length;let n;for(const e of t){const t=yr(e);if(n){if(n===t)continue;n=Gi;break}n=t}return Xi(n||Gi,e)}return Hi}function gr(t){const e=typeof t;return null===t?"":"string"===e||"number"===e||"boolean"===e?String(t):t instanceof ur||t instanceof dr||t instanceof fr?t.toString():JSON.stringify(t)}class br{constructor(t,e){this.type=t,this.value=e}static parse(t,e){if(2!==t.length)return e.error(`\'literal\' expression requires exactly one argument, but found ${t.length-1} instead.`);if(!mr(t[1]))return e.error("invalid value");const n=t[1];let i=yr(n);const r=e.expectedType;return"array"!==i.kind||0!==i.N||!r||"array"!==r.kind||"number"==typeof r.N&&0!==r.N||(i=r),new br(i,n)}evaluate(){return this.value}eachChild(){}outputDefined(){return!0}serialize(){return"array"===this.type.kind||"object"===this.type.kind?["literal",this.value]:this.value instanceof ur?["rgba"].concat(this.value.toArray()):this.value instanceof dr?this.value.serialize():this.value}}var vr=br,wr=class{constructor(t){this.name="ExpressionEvaluationError",this.message=t}toJSON(){return this.message}};const xr={string:Ui,number:$i,boolean:Wi,object:Hi};class kr{constructor(t,e){this.type=t,this.args=e}static parse(t,e){if(t.length<2)return e.error("Expected at least one argument.");let n,i=1;const r=t[0];if("array"===r){let r,o;if(t.length>2){const n=t[1];if("string"!=typeof n||!(n in xr)||"object"===n)return e.error(\'The item type argument of "array" must be one of string, number, boolean\',1);r=xr[n],i++}else r=Gi;if(t.length>3){if(null!==t[2]&&("number"!=typeof t[2]||t[2]<0||t[2]!==Math.floor(t[2])))return e.error(\'The length argument to "array" must be a positive integer literal\',2);o=t[2],i++}n=Xi(r,o)}else n=xr[r];const o=[];for(;i<t.length;i++){const n=e.parse(t[i],i,Gi);if(!n)return null;o.push(n)}return new kr(n,o)}evaluate(t){for(let e=0;e<this.args.length;e++){const n=this.args[e].evaluate(t);if(!Qi(this.type,yr(n)))return n;if(e===this.args.length-1)throw new wr(`Expected value to be of type ${Yi(this.type)}, but found ${Yi(yr(n))} instead.`)}return null}eachChild(t){this.args.forEach(t)}outputDefined(){return this.args.every(t=>t.outputDefined())}serialize(){const t=this.type,e=[t.kind];if("array"===t.kind){const n=t.itemType;if("string"===n.kind||"number"===n.kind||"boolean"===n.kind){e.push(n.kind);const i=t.N;("number"==typeof i||this.args.length>1)&&e.push(i)}}return e.concat(this.args.map(t=>t.serialize()))}}var Mr=kr;class jr{constructor(t){this.type=Bi,this.sections=t}static parse(t,e){if(t.length<2)return e.error("Expected at least one argument.");const n=t[1];if(!Array.isArray(n)&&"object"==typeof n)return e.error("First argument must be an image or text section.");const i=[];let r=!1;for(let n=1;n<=t.length-1;++n){const o=t[n];if(r&&"object"==typeof o&&!Array.isArray(o)){r=!1;let t=null;if(o["font-scale"]&&(t=e.parse(o["font-scale"],1,$i),!t))return null;let n=null;if(o["text-font"]&&(n=e.parse(o["text-font"],1,Xi(Ui)),!n))return null;let s=null;if(o["text-color"]&&(s=e.parse(o["text-color"],1,Ji),!s))return null;const a=i[i.length-1];a.scale=t,a.font=n,a.textColor=s}else{const o=e.parse(t[n],1,Gi);if(!o)return null;const s=o.type.kind;if("string"!==s&&"value"!==s&&"null"!==s&&"resolvedImage"!==s)return e.error("Formatted text type must be \'string\', \'value\', \'image\' or \'null\'.");r=!0,i.push({content:o,scale:null,font:null,textColor:null})}}return new jr(i)}evaluate(t){return new dr(this.sections.map(e=>{const n=e.content.evaluate(t);return yr(n)===Zi?new hr("",n,null,null,null):new hr(gr(n),null,e.scale?e.scale.evaluate(t):null,e.font?e.font.evaluate(t).join(","):null,e.textColor?e.textColor.evaluate(t):null)}))}eachChild(t){for(const e of this.sections)t(e.content),e.scale&&t(e.scale),e.font&&t(e.font),e.textColor&&t(e.textColor)}outputDefined(){return!1}serialize(){const t=["format"];for(const e of this.sections){t.push(e.content.serialize());const n={};e.scale&&(n["font-scale"]=e.scale.serialize()),e.font&&(n["text-font"]=e.font.serialize()),e.textColor&&(n["text-color"]=e.textColor.serialize()),t.push(n)}return t}}class Ar{constructor(t){this.type=Zi,this.input=t}static parse(t,e){if(2!==t.length)return e.error("Expected two arguments.");const n=e.parse(t[1],1,Ui);return n?new Ar(n):e.error("No image name provided.")}evaluate(t){const e=this.input.evaluate(t),n=fr.fromString(e);return n&&t.availableImages&&(n.available=t.availableImages.indexOf(e)>-1),n}eachChild(t){t(this.input)}outputDefined(){return!1}serialize(){return["image",this.input.serialize()]}}const Fr={"to-boolean":Wi,"to-color":Ji,"to-number":$i,"to-string":Ui};class Tr{constructor(t,e){this.type=t,this.args=e}static parse(t,e){if(t.length<2)return e.error("Expected at least one argument.");const n=t[0];if(("to-boolean"===n||"to-string"===n)&&2!==t.length)return e.error("Expected one argument.");const i=Fr[n],r=[];for(let n=1;n<t.length;n++){const i=e.parse(t[n],n,Gi);if(!i)return null;r.push(i)}return new Tr(i,r)}evaluate(t){if("boolean"===this.type.kind)return Boolean(this.args[0].evaluate(t));if("color"===this.type.kind){let e,n;for(const i of this.args){if(e=i.evaluate(t),n=null,e instanceof ur)return e;if("string"==typeof e){const n=t.parseColor(e);if(n)return n}else if(Array.isArray(e)&&(n=e.length<3||e.length>4?`Invalid rbga value ${JSON.stringify(e)}: expected an array containing either three or four numeric values.`:pr(e[0],e[1],e[2],e[3]),!n))return new ur(e[0]/255,e[1]/255,e[2]/255,e[3])}throw new wr(n||`Could not parse color from value \'${"string"==typeof e?e:String(JSON.stringify(e))}\'`)}if("number"===this.type.kind){let e=null;for(const n of this.args){if(e=n.evaluate(t),null===e)return 0;const i=Number(e);if(!isNaN(i))return i}throw new wr(`Could not convert ${JSON.stringify(e)} to number.`)}return"formatted"===this.type.kind?dr.fromString(gr(this.args[0].evaluate(t))):"resolvedImage"===this.type.kind?fr.fromString(gr(this.args[0].evaluate(t))):gr(this.args[0].evaluate(t))}eachChild(t){this.args.forEach(t)}outputDefined(){return this.args.every(t=>t.outputDefined())}serialize(){if("formatted"===this.type.kind)return new jr([{content:this.args[0],scale:null,font:null,textColor:null}]).serialize();if("resolvedImage"===this.type.kind)return new Ar(this.args[0]).serialize();const t=["to-"+this.type.kind];return this.eachChild(e=>{t.push(e.serialize())}),t}}var zr=Tr;const Sr=["Unknown","Point","LineString","Polygon"];var _r=class{constructor(){this.globals=null,this.feature=null,this.featureState=null,this.formattedSection=null,this.R={},this.availableImages=null,this.canonical=null,this.featureTileCoord=null,this.featureDistanceData=null}id(){return this.feature&&void 0!==this.feature.id?this.feature.id:null}geometryType(){return this.feature?"number"==typeof this.feature.type?Sr[this.feature.type]:this.feature.type:null}geometry(){return this.feature&&"geometry"in this.feature?this.feature.geometry:null}canonicalID(){return this.canonical}properties(){return this.feature&&this.feature.properties||{}}distanceFromCenter(){if(this.featureTileCoord&&this.featureDistanceData){const t=this.featureDistanceData.center,e=this.featureDistanceData.scale,{x:n,y:i}=this.featureTileCoord;return this.featureDistanceData.bearing[0]*(n*e-t[0])+this.featureDistanceData.bearing[1]*(i*e-t[1])}return 0}parseColor(t){let e=this.R[t];return e||(e=this.R[t]=ur.parse(t)),e}};class Pr{constructor(t,e,n,i){this.name=t,this.type=e,this.D=n,this.args=i}evaluate(t){return this.D(t,this.args)}eachChild(t){this.args.forEach(t)}outputDefined(){return!1}serialize(){return[this.name].concat(this.args.map(t=>t.serialize()))}static parse(t,e){const n=t[0],i=Pr.definitions[n];if(!i)return e.error(`Unknown expression "${n}". If you wanted a literal array, use ["literal", [...]].`,0);const r=Array.isArray(i)?i[0]:i.type,o=Array.isArray(i)?[[i[1],i[2]]]:i.overloads,s=o.filter(([e])=>!Array.isArray(e)||e.length===t.length-1);let a=null;for(const[i,o]of s){a=new io(e.registry,e.path,null,e.scope);const s=[];let l=!1;for(let e=1;e<t.length;e++){const n=t[e],r=Array.isArray(i)?i[e-1]:i.type,o=a.parse(n,1+s.length,r);if(!o){l=!0;break}s.push(o)}if(!l)if(Array.isArray(i)&&i.length!==s.length)a.error(`Expected ${i.length} arguments, but found ${s.length} instead.`);else{for(let t=0;t<s.length;t++){const e=Array.isArray(i)?i[t]:i.type,n=s[t];a.concat(t+1).checkSubtype(e,n.type)}if(0===a.errors.length)return new Pr(n,r,o,s)}}if(1===s.length)e.errors.push(...a.errors);else{const n=(s.length?s:o).map(([t])=>{return e=t,Array.isArray(e)?`(${e.map(Yi).join(", ")})`:`(${Yi(e.type)}...)`;var e}).join(" | "),i=[];for(let n=1;n<t.length;n++){const r=e.parse(t[n],1+i.length);if(!r)return null;i.push(Yi(r.type))}e.error(`Expected arguments of type ${n}, but found (${i.join(", ")}) instead.`)}return null}static register(t,e){Pr.definitions=e;for(const n in e)t[n]=Pr}}var Ir=Pr;class Or{constructor(t,e,n){this.type=Vi,this.locale=n,this.caseSensitive=t,this.diacriticSensitive=e}static parse(t,e){if(2!==t.length)return e.error("Expected one argument.");const n=t[1];if("object"!=typeof n||Array.isArray(n))return e.error("Collator options argument must be an object.");const i=e.parse(void 0!==n["case-sensitive"]&&n["case-sensitive"],1,Wi);if(!i)return null;const r=e.parse(void 0!==n["diacritic-sensitive"]&&n["diacritic-sensitive"],1,Wi);if(!r)return null;let o=null;return n.locale&&(o=e.parse(n.locale,1,Ui),!o)?null:new Or(i,r,o)}evaluate(t){return new cr(this.caseSensitive.evaluate(t),this.diacriticSensitive.evaluate(t),this.locale?this.locale.evaluate(t):null)}eachChild(t){t(this.caseSensitive),t(this.diacriticSensitive),this.locale&&t(this.locale)}outputDefined(){return!1}serialize(){const t={};return t["case-sensitive"]=this.caseSensitive.serialize(),t["diacritic-sensitive"]=this.diacriticSensitive.serialize(),this.locale&&(t.locale=this.locale.serialize()),["collator",t]}}function qr(t,e){t[0]=Math.min(t[0],e[0]),t[1]=Math.min(t[1],e[1]),t[2]=Math.max(t[2],e[0]),t[3]=Math.max(t[3],e[1])}function Cr(t,e){return!(t[0]<=e[0]||t[2]>=e[2]||t[1]<=e[1]||t[3]>=e[3])}function Nr(t,e){const n=(180+t[0])/360,i=(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+t[1]*Math.PI/360)))/360,r=Math.pow(2,e.z);return[Math.round(n*r*8192),Math.round(i*r*8192)]}function Er(t,e,n){const i=t[0]-e[0],r=t[1]-e[1],o=t[0]-n[0],s=t[1]-n[1];return i*s-o*r==0&&i*o<=0&&r*s<=0}function Rr(t,e){let n=!1;for(let s=0,a=e.length;s<a;s++){const a=e[s];for(let e=0,s=a.length;e<s-1;e++){if(Er(t,a[e],a[e+1]))return!1;(r=a[e])[1]>(i=t)[1]!=(o=a[e+1])[1]>i[1]&&i[0]<(o[0]-r[0])*(i[1]-r[1])/(o[1]-r[1])+r[0]&&(n=!n)}}var i,r,o;return n}function Dr(t,e){for(let n=0;n<e.length;n++)if(Rr(t,e[n]))return!0;return!1}function Lr(t,e,n,i){const r=i[0]-n[0],o=i[1]-n[1],s=(t[0]-n[0])*o-r*(t[1]-n[1]),a=(e[0]-n[0])*o-r*(e[1]-n[1]);return s>0&&a<0||s<0&&a>0}function $r(t,e,n){for(const u of n)for(let n=0;n<u.length-1;++n)if(void 0,void 0,0!=(a=[(s=u[n+1])[0]-(o=u[n])[0],s[1]-o[1]])[0]*(l=[(r=e)[0]-(i=t)[0],r[1]-i[1]])[1]-a[1]*l[0]&&Lr(i,r,o,s)&&Lr(o,s,i,r))return!0;var i,r,o,s,a,l;return!1}function Ur(t,e){for(let n=0;n<t.length;++n)if(!Rr(t[n],e))return!1;for(let n=0;n<t.length-1;++n)if($r(t[n],t[n+1],e))return!1;return!0}function Wr(t,e){for(let n=0;n<e.length;n++)if(Ur(t,e[n]))return!0;return!1}function Jr(t,e,n){const i=[];for(let r=0;r<t.length;r++){const o=[];for(let i=0;i<t[r].length;i++){const s=Nr(t[r][i],n);qr(e,s),o.push(s)}i.push(o)}return i}function Hr(t,e,n){const i=[];for(let r=0;r<t.length;r++){const o=Jr(t[r],e,n);i.push(o)}return i}function Gr(t,e,n,i){if(t[0]<n[0]||t[0]>n[2]){const e=.5*i;let r=t[0]-n[0]>e?-i:n[0]-t[0]>e?i:0;0===r&&(r=t[0]-n[2]>e?-i:n[2]-t[0]>e?i:0),t[0]+=r}qr(e,t)}function Vr(t,e,n,i){const r=8192*Math.pow(2,i.z),o=[8192*i.x,8192*i.y],s=[];if(!t)return s;for(const i of t)for(const t of i){const i=[t.x+o[0],t.y+o[1]];Gr(i,e,n,r),s.push(i)}return s}function Br(t,e,n,i){const r=8192*Math.pow(2,i.z),o=[8192*i.x,8192*i.y],s=[];if(!t)return s;for(const n of t){const t=[];for(const i of n){const n=[i.x+o[0],i.y+o[1]];qr(e,n),t.push(n)}s.push(t)}if(e[2]-e[0]<=r/2){(a=e)[0]=a[1]=1/0,a[2]=a[3]=-1/0;for(const t of s)for(const i of t)Gr(i,e,n,r)}var a;return s}class Zr{constructor(t,e){this.type=Wi,this.geojson=t,this.geometries=e}static parse(t,e){if(2!==t.length)return e.error(`\'within\' expression requires exactly one argument, but found ${t.length-1} instead.`);if(mr(t[1])){const e=t[1];if("FeatureCollection"===e.type)for(let t=0;t<e.features.length;++t){const n=e.features[t].geometry.type;if("Polygon"===n||"MultiPolygon"===n)return new Zr(e,e.features[t].geometry)}else if("Feature"===e.type){const t=e.geometry.type;if("Polygon"===t||"MultiPolygon"===t)return new Zr(e,e.geometry)}else if("Polygon"===e.type||"MultiPolygon"===e.type)return new Zr(e,e)}return e.error("\'within\' expression requires valid geojson object that contains polygon geometry type.")}evaluate(t){if(null!=t.geometry()&&null!=t.canonicalID()){if("Point"===t.geometryType())return function(t,e){const n=[1/0,1/0,-1/0,-1/0],i=[1/0,1/0,-1/0,-1/0],r=t.canonicalID();if(!r)return!1;if("Polygon"===e.type){const o=Jr(e.coordinates,i,r),s=Vr(t.geometry(),n,i,r);if(!Cr(n,i))return!1;for(const t of s)if(!Rr(t,o))return!1}if("MultiPolygon"===e.type){const o=Hr(e.coordinates,i,r),s=Vr(t.geometry(),n,i,r);if(!Cr(n,i))return!1;for(const t of s)if(!Dr(t,o))return!1}return!0}(t,this.geometries);if("LineString"===t.geometryType())return function(t,e){const n=[1/0,1/0,-1/0,-1/0],i=[1/0,1/0,-1/0,-1/0],r=t.canonicalID();if(!r)return!1;if("Polygon"===e.type){const o=Jr(e.coordinates,i,r),s=Br(t.geometry(),n,i,r);if(!Cr(n,i))return!1;for(const t of s)if(!Ur(t,o))return!1}if("MultiPolygon"===e.type){const o=Hr(e.coordinates,i,r),s=Br(t.geometry(),n,i,r);if(!Cr(n,i))return!1;for(const t of s)if(!Wr(t,o))return!1}return!0}(t,this.geometries)}return!1}eachChild(){}outputDefined(){return!0}serialize(){return["within",this.geojson]}}var Xr=Zr;function Yr(t){if(t instanceof Ir){if("get"===t.name&&1===t.args.length)return!1;if("feature-state"===t.name)return!1;if("has"===t.name&&1===t.args.length)return!1;if("properties"===t.name||"geometry-type"===t.name||"id"===t.name)return!1;if(/^filter-/.test(t.name))return!1}if(t instanceof Xr)return!1;let e=!0;return t.eachChild(t=>{e&&!Yr(t)&&(e=!1)}),e}function Kr(t){if(t instanceof Ir&&"feature-state"===t.name)return!1;let e=!0;return t.eachChild(t=>{e&&!Kr(t)&&(e=!1)}),e}function Qr(t,e){if(t instanceof Ir&&e.indexOf(t.name)>=0)return!1;let n=!0;return t.eachChild(t=>{n&&!Qr(t,e)&&(n=!1)}),n}class to{constructor(t,e){this.type=e.type,this.name=t,this.boundExpression=e}static parse(t,e){if(2!==t.length||"string"!=typeof t[1])return e.error("\'var\' expression requires exactly one string literal argument.");const n=t[1];return e.scope.has(n)?new to(n,e.scope.get(n)):e.error(`Unknown variable "${n}". Make sure "${n}" has been bound in an enclosing "let" expression before using it.`,1)}evaluate(t){return this.boundExpression.evaluate(t)}eachChild(){}outputDefined(){return!1}serialize(){return["var",this.name]}}var eo=to;class no{constructor(t,e=[],n,i=new Di,r=[]){this.registry=t,this.path=e,this.key=e.map(t=>`[${t}]`).join(""),this.scope=i,this.errors=r,this.expectedType=n}parse(t,e,n,i,r={}){return e?this.concat(e,n,i).L(t,r):this.L(t,r)}L(t,e){function n(t,e,n){return"assert"===n?new Mr(e,[t]):"coerce"===n?new zr(e,[t]):t}if(null!==t&&"string"!=typeof t&&"boolean"!=typeof t&&"number"!=typeof t||(t=["literal",t]),Array.isArray(t)){if(0===t.length)return this.error(\'Expected an array with at least one element. If you wanted a literal array, use ["literal", []].\');const i=t[0];if("string"!=typeof i)return this.error(`Expression name must be a string, but found ${typeof i} instead. If you wanted a literal array, use ["literal", [...]].`,0),null;const r=this.registry[i];if(r){let i=r.parse(t,this);if(!i)return null;if(this.expectedType){const t=this.expectedType,r=i.type;if("string"!==t.kind&&"number"!==t.kind&&"boolean"!==t.kind&&"object"!==t.kind&&"array"!==t.kind||"value"!==r.kind)if("color"!==t.kind&&"formatted"!==t.kind&&"resolvedImage"!==t.kind||"value"!==r.kind&&"string"!==r.kind){if(this.checkSubtype(t,r))return null}else i=n(i,t,e.typeAnnotation||"coerce");else i=n(i,t,e.typeAnnotation||"assert")}if(!(i instanceof vr)&&"resolvedImage"!==i.type.kind&&function t(e){if(e instanceof eo)return t(e.boundExpression);if(e instanceof Ir&&"error"===e.name)return!1;if(e instanceof Or)return!1;if(e instanceof Xr)return!1;const n=e instanceof zr||e instanceof Mr;let i=!0;return e.eachChild(e=>{i=n?i&&t(e):i&&e instanceof vr}),!!i&&(Yr(e)&&Qr(e,["zoom","heatmap-density","line-progress","sky-radial-progress","accumulated","is-supported-script","pitch","distance-from-center"]))}(i)){const e=new _r;try{i=new vr(i.type,i.evaluate(e))}catch(t){return this.error(t.message),null}}return i}return this.error(`Unknown expression "${i}". If you wanted a literal array, use ["literal", [...]].`,0)}return this.error(void 0===t?"\'undefined\' value invalid. Use null instead.":"object"==typeof t?\'Bare objects invalid. Use ["literal", {...}] instead.\':`Expected an array, but found ${typeof t} instead.`)}concat(t,e,n){const i="number"==typeof t?this.path.concat(t):this.path,r=n?this.scope.concat(n):this.scope;return new no(this.registry,i,e||null,r,this.errors)}error(t,...e){const n=`${this.key}${e.map(t=>`[${t}]`).join("")}`;this.errors.push(new Ei(n,t))}checkSubtype(t,e){const n=Qi(t,e);return n&&this.error(n),n}}var io=no;function ro(t,e){const n=t.length-1;let i,r,o=0,s=n,a=0;for(;o<=s;)if(a=Math.floor((o+s)/2),i=t[a],r=t[a+1],i<=e){if(a===n||e<r)return a;o=a+1}else{if(!(i>e))throw new wr("Input is not a number.");s=a-1}return 0}class oo{constructor(t,e,n){this.type=t,this.input=e,this.labels=[],this.outputs=[];for(const[t,e]of n)this.labels.push(t),this.outputs.push(e)}static parse(t,e){if(t.length-1<4)return e.error(`Expected at least 4 arguments, but found only ${t.length-1}.`);if((t.length-1)%2!=0)return e.error("Expected an even number of arguments.");const n=e.parse(t[1],1,$i);if(!n)return null;const i=[];let r=null;e.expectedType&&"value"!==e.expectedType.kind&&(r=e.expectedType);for(let n=1;n<t.length;n+=2){const o=1===n?-1/0:t[n],s=t[n+1],a=n,l=n+1;if("number"!=typeof o)return e.error(\'Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.\',a);if(i.length&&i[i.length-1][0]>=o)return e.error(\'Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.\',a);const u=e.parse(s,l,r);if(!u)return null;r=r||u.type,i.push([o,u])}return new oo(r,n,i)}evaluate(t){const e=this.labels,n=this.outputs;if(1===e.length)return n[0].evaluate(t);const i=this.input.evaluate(t);if(i<=e[0])return n[0].evaluate(t);const r=e.length;return i>=e[r-1]?n[r-1].evaluate(t):n[ro(e,i)].evaluate(t)}eachChild(t){t(this.input);for(const e of this.outputs)t(e)}outputDefined(){return this.outputs.every(t=>t.outputDefined())}serialize(){const t=["step",this.input.serialize()];for(let e=0;e<this.labels.length;e++)e>0&&t.push(this.labels[e]),t.push(this.outputs[e].serialize());return t}}var so=oo,ao=lo;function lo(t,e,n,i){this.cx=3*t,this.bx=3*(n-t)-this.cx,this.ax=1-this.cx-this.bx,this.cy=3*e,this.by=3*(i-e)-this.cy,this.ay=1-this.cy-this.by,this.p1x=t,this.p1y=e,this.p2x=n,this.p2y=i}function uo(t,e,n){return t*(1-n)+e*n}lo.prototype={sampleCurveX:function(t){return((this.ax*t+this.bx)*t+this.cx)*t},sampleCurveY:function(t){return((this.ay*t+this.by)*t+this.cy)*t},sampleCurveDerivativeX:function(t){return(3*this.ax*t+2*this.bx)*t+this.cx},solveCurveX:function(t,e){if(void 0===e&&(e=1e-6),t<0)return 0;if(t>1)return 1;for(var n=t,i=0;i<8;i++){var r=this.sampleCurveX(n)-t;if(Math.abs(r)<e)return n;var o=this.sampleCurveDerivativeX(n);if(Math.abs(o)<1e-6)break;n-=r/o}var s=0,a=1;for(n=t,i=0;i<20&&(r=this.sampleCurveX(n),!(Math.abs(r-t)<e));i++)t>r?s=n:a=n,n=.5*(a-s)+s;return n},solve:function(t,e){return this.sampleCurveY(this.solveCurveX(t,e))}};var co=Object.freeze({__proto__:null,number:uo,color:function(t,e,n){return new ur(uo(t.r,e.r,n),uo(t.g,e.g,n),uo(t.b,e.b,n),uo(t.a,e.a,n))},array:function(t,e,n){return t.map((t,i)=>uo(t,e[i],n))}});const ho=6/29*3*(6/29),fo=Math.PI/180,po=180/Math.PI;function mo(t){return t>.008856451679035631?Math.pow(t,1/3):t/ho+4/29}function yo(t){return t>6/29?t*t*t:ho*(t-4/29)}function go(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function bo(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function vo(t){const e=bo(t.r),n=bo(t.g),i=bo(t.b),r=mo((.4124564*e+.3575761*n+.1804375*i)/.95047),o=mo((.2126729*e+.7151522*n+.072175*i)/1);return{l:116*o-16,a:500*(r-o),b:200*(o-mo((.0193339*e+.119192*n+.9503041*i)/1.08883)),alpha:t.a}}function wo(t){let e=(t.l+16)/116,n=isNaN(t.a)?e:e+t.a/500,i=isNaN(t.b)?e:e-t.b/200;return e=1*yo(e),n=.95047*yo(n),i=1.08883*yo(i),new ur(go(3.2404542*n-1.5371385*e-.4985314*i),go(-.969266*n+1.8760108*e+.041556*i),go(.0556434*n-.2040259*e+1.0572252*i),t.alpha)}function xo(t,e,n){const i=e-t;return t+n*(i>180||i<-180?i-360*Math.round(i/360):i)}const ko={forward:vo,reverse:wo,interpolate:function(t,e,n){return{l:uo(t.l,e.l,n),a:uo(t.a,e.a,n),b:uo(t.b,e.b,n),alpha:uo(t.alpha,e.alpha,n)}}},Mo={forward:function(t){const{l:e,a:n,b:i}=vo(t),r=Math.atan2(i,n)*po;return{h:r<0?r+360:r,c:Math.sqrt(n*n+i*i),l:e,alpha:t.a}},reverse:function(t){const e=t.h*fo,n=t.c;return wo({l:t.l,a:Math.cos(e)*n,b:Math.sin(e)*n,alpha:t.alpha})},interpolate:function(t,e,n){return{h:xo(t.h,e.h,n),c:uo(t.c,e.c,n),l:uo(t.l,e.l,n),alpha:uo(t.alpha,e.alpha,n)}}};var jo=Object.freeze({__proto__:null,lab:ko,hcl:Mo});class Ao{constructor(t,e,n,i,r){this.type=t,this.operator=e,this.interpolation=n,this.input=i,this.labels=[],this.outputs=[];for(const[t,e]of r)this.labels.push(t),this.outputs.push(e)}static interpolationFactor(t,e,n,i){let r=0;if("exponential"===t.name)r=Fo(e,t.base,n,i);else if("linear"===t.name)r=Fo(e,1,n,i);else if("cubic-bezier"===t.name){const o=t.controlPoints;r=new ao(o[0],o[1],o[2],o[3]).solve(Fo(e,1,n,i))}return r}static parse(t,e){let[n,i,r,...o]=t;if(!Array.isArray(i)||0===i.length)return e.error("Expected an interpolation type expression.",1);if("linear"===i[0])i={name:"linear"};else if("exponential"===i[0]){const t=i[1];if("number"!=typeof t)return e.error("Exponential interpolation requires a numeric base.",1,1);i={name:"exponential",base:t}}else{if("cubic-bezier"!==i[0])return e.error("Unknown interpolation type "+String(i[0]),1,0);{const t=i.slice(1);if(4!==t.length||t.some(t=>"number"!=typeof t||t<0||t>1))return e.error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.",1);i={name:"cubic-bezier",controlPoints:t}}}if(t.length-1<4)return e.error(`Expected at least 4 arguments, but found only ${t.length-1}.`);if((t.length-1)%2!=0)return e.error("Expected an even number of arguments.");if(r=e.parse(r,2,$i),!r)return null;const s=[];let a=null;"interpolate-hcl"===n||"interpolate-lab"===n?a=Ji:e.expectedType&&"value"!==e.expectedType.kind&&(a=e.expectedType);for(let t=0;t<o.length;t+=2){const n=o[t],i=o[t+1],r=t+3,l=t+4;if("number"!=typeof n)return e.error(\'Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.\',r);if(s.length&&s[s.length-1][0]>=n)return e.error(\'Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.\',r);const u=e.parse(i,l,a);if(!u)return null;a=a||u.type,s.push([n,u])}return"number"===a.kind||"color"===a.kind||"array"===a.kind&&"number"===a.itemType.kind&&"number"==typeof a.N?new Ao(a,n,i,r,s):e.error(`Type ${Yi(a)} is not interpolatable.`)}evaluate(t){const e=this.labels,n=this.outputs;if(1===e.length)return n[0].evaluate(t);const i=this.input.evaluate(t);if(i<=e[0])return n[0].evaluate(t);const r=e.length;if(i>=e[r-1])return n[r-1].evaluate(t);const o=ro(e,i),s=Ao.interpolationFactor(this.interpolation,i,e[o],e[o+1]),a=n[o].evaluate(t),l=n[o+1].evaluate(t);return"interpolate"===this.operator?co[this.type.kind.toLowerCase()](a,l,s):"interpolate-hcl"===this.operator?Mo.reverse(Mo.interpolate(Mo.forward(a),Mo.forward(l),s)):ko.reverse(ko.interpolate(ko.forward(a),ko.forward(l),s))}eachChild(t){t(this.input);for(const e of this.outputs)t(e)}outputDefined(){return this.outputs.every(t=>t.outputDefined())}serialize(){let t;t="linear"===this.interpolation.name?["linear"]:"exponential"===this.interpolation.name?1===this.interpolation.base?["linear"]:["exponential",this.interpolation.base]:["cubic-bezier"].concat(this.interpolation.controlPoints);const e=[this.operator,t,this.input.serialize()];for(let t=0;t<this.labels.length;t++)e.push(this.labels[t],this.outputs[t].serialize());return e}}function Fo(t,e,n,i){const r=i-n,o=t-n;return 0===r?0:1===e?o/r:(Math.pow(e,o)-1)/(Math.pow(e,r)-1)}var To=Ao;class zo{constructor(t,e){this.type=t,this.args=e}static parse(t,e){if(t.length<2)return e.error("Expectected at least one argument.");let n=null;const i=e.expectedType;i&&"value"!==i.kind&&(n=i);const r=[];for(const i of t.slice(1)){const t=e.parse(i,1+r.length,n,void 0,{typeAnnotation:"omit"});if(!t)return null;n=n||t.type,r.push(t)}const o=i&&r.some(t=>Qi(i,t.type));return new zo(o?Gi:n,r)}evaluate(t){let e,n=null,i=0;for(const r of this.args){if(i++,n=r.evaluate(t),n&&n instanceof fr&&!n.available&&(e||(e=n),n=null,i===this.args.length))return e;if(null!==n)break}return n}eachChild(t){this.args.forEach(t)}outputDefined(){return this.args.every(t=>t.outputDefined())}serialize(){const t=["coalesce"];return this.eachChild(e=>{t.push(e.serialize())}),t}}var So=zo;class _o{constructor(t,e){this.type=e.type,this.bindings=[].concat(t),this.result=e}evaluate(t){return this.result.evaluate(t)}eachChild(t){for(const e of this.bindings)t(e[1]);t(this.result)}static parse(t,e){if(t.length<4)return e.error(`Expected at least 3 arguments, but found ${t.length-1} instead.`);const n=[];for(let i=1;i<t.length-1;i+=2){const r=t[i];if("string"!=typeof r)return e.error(`Expected string, but found ${typeof r} instead.`,i);if(/[^a-zA-Z0-9_]/.test(r))return e.error("Variable names must contain only alphanumeric characters or \'_\'.",i);const o=e.parse(t[i+1],i+1);if(!o)return null;n.push([r,o])}const i=e.parse(t[t.length-1],t.length-1,e.expectedType,n);return i?new _o(n,i):null}outputDefined(){return this.result.outputDefined()}serialize(){const t=["let"];for(const[e,n]of this.bindings)t.push(e,n.serialize());return t.push(this.result.serialize()),t}}var Po=_o;class Io{constructor(t,e,n){this.type=t,this.index=e,this.input=n}static parse(t,e){if(3!==t.length)return e.error(`Expected 2 arguments, but found ${t.length-1} instead.`);const n=e.parse(t[1],1,$i),i=e.parse(t[2],2,Xi(e.expectedType||Gi));return n&&i?new Io(i.type.itemType,n,i):null}evaluate(t){const e=this.index.evaluate(t),n=this.input.evaluate(t);if(e<0)throw new wr(`Array index out of bounds: ${e} < 0.`);if(e>=n.length)throw new wr(`Array index out of bounds: ${e} > ${n.length-1}.`);if(e!==Math.floor(e))throw new wr(`Array index must be an integer, but found ${e} instead.`);return n[e]}eachChild(t){t(this.index),t(this.input)}outputDefined(){return!1}serialize(){return["at",this.index.serialize(),this.input.serialize()]}}var Oo=Io;class qo{constructor(t,e){this.type=Wi,this.needle=t,this.haystack=e}static parse(t,e){if(3!==t.length)return e.error(`Expected 2 arguments, but found ${t.length-1} instead.`);const n=e.parse(t[1],1,Gi),i=e.parse(t[2],2,Gi);return n&&i?tr(n.type,[Wi,Ui,$i,Li,Gi])?new qo(n,i):e.error(`Expected first argument to be of type boolean, string, number or null, but found ${Yi(n.type)} instead`):null}evaluate(t){const e=this.needle.evaluate(t),n=this.haystack.evaluate(t);if(null==n)return!1;if(!er(e,["boolean","string","number","null"]))throw new wr(`Expected first argument to be of type boolean, string, number or null, but found ${Yi(yr(e))} instead.`);if(!er(n,["string","array"]))throw new wr(`Expected second argument to be of type array or string, but found ${Yi(yr(n))} instead.`);return n.indexOf(e)>=0}eachChild(t){t(this.needle),t(this.haystack)}outputDefined(){return!0}serialize(){return["in",this.needle.serialize(),this.haystack.serialize()]}}var Co=qo;class No{constructor(t,e,n){this.type=$i,this.needle=t,this.haystack=e,this.fromIndex=n}static parse(t,e){if(t.length<=2||t.length>=5)return e.error(`Expected 3 or 4 arguments, but found ${t.length-1} instead.`);const n=e.parse(t[1],1,Gi),i=e.parse(t[2],2,Gi);if(!n||!i)return null;if(!tr(n.type,[Wi,Ui,$i,Li,Gi]))return e.error(`Expected first argument to be of type boolean, string, number or null, but found ${Yi(n.type)} instead`);if(4===t.length){const r=e.parse(t[3],3,$i);return r?new No(n,i,r):null}return new No(n,i)}evaluate(t){const e=this.needle.evaluate(t),n=this.haystack.evaluate(t);if(!er(e,["boolean","string","number","null"]))throw new wr(`Expected first argument to be of type boolean, string, number or null, but found ${Yi(yr(e))} instead.`);if(!er(n,["string","array"]))throw new wr(`Expected second argument to be of type array or string, but found ${Yi(yr(n))} instead.`);if(this.fromIndex){const i=this.fromIndex.evaluate(t);return n.indexOf(e,i)}return n.indexOf(e)}eachChild(t){t(this.needle),t(this.haystack),this.fromIndex&&t(this.fromIndex)}outputDefined(){return!1}serialize(){if(null!=this.fromIndex&&void 0!==this.fromIndex){const t=this.fromIndex.serialize();return["index-of",this.needle.serialize(),this.haystack.serialize(),t]}return["index-of",this.needle.serialize(),this.haystack.serialize()]}}var Eo=No;class Ro{constructor(t,e,n,i,r,o){this.inputType=t,this.type=e,this.input=n,this.cases=i,this.outputs=r,this.otherwise=o}static parse(t,e){if(t.length<5)return e.error(`Expected at least 4 arguments, but found only ${t.length-1}.`);if(t.length%2!=1)return e.error("Expected an even number of arguments.");let n,i;e.expectedType&&"value"!==e.expectedType.kind&&(i=e.expectedType);const r={},o=[];for(let s=2;s<t.length-1;s+=2){let a=t[s];const l=t[s+1];Array.isArray(a)||(a=[a]);const u=e.concat(s);if(0===a.length)return u.error("Expected at least one branch label.");for(const t of a){if("number"!=typeof t&&"string"!=typeof t)return u.error("Branch labels must be numbers or strings.");if("number"==typeof t&&Math.abs(t)>Number.MAX_SAFE_INTEGER)return u.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);if("number"==typeof t&&Math.floor(t)!==t)return u.error("Numeric branch labels must be integer values.");if(n){if(u.checkSubtype(n,yr(t)))return null}else n=yr(t);if(void 0!==r[String(t)])return u.error("Branch labels must be unique.");r[String(t)]=o.length}const c=e.parse(l,s,i);if(!c)return null;i=i||c.type,o.push(c)}const s=e.parse(t[1],1,Gi);if(!s)return null;const a=e.parse(t[t.length-1],t.length-1,i);return a?"value"!==s.type.kind&&e.concat(1).checkSubtype(n,s.type)?null:new Ro(n,i,s,r,o,a):null}evaluate(t){const e=this.input.evaluate(t);return(yr(e)===this.inputType&&this.outputs[this.cases[e]]||this.otherwise).evaluate(t)}eachChild(t){t(this.input),this.outputs.forEach(t),t(this.otherwise)}outputDefined(){return this.outputs.every(t=>t.outputDefined())&&this.otherwise.outputDefined()}serialize(){const t=["match",this.input.serialize()],e=Object.keys(this.cases).sort(),n=[],i={};for(const t of e){const e=i[this.cases[t]];void 0===e?(i[this.cases[t]]=n.length,n.push([this.cases[t],[t]])):n[e][1].push(t)}const r=t=>"number"===this.inputType.kind?Number(t):t;for(const[e,i]of n)t.push(1===i.length?r(i[0]):i.map(r)),t.push(this.outputs[e].serialize());return t.push(this.otherwise.serialize()),t}}var Do=Ro;class Lo{constructor(t,e,n){this.type=t,this.branches=e,this.otherwise=n}static parse(t,e){if(t.length<4)return e.error(`Expected at least 3 arguments, but found only ${t.length-1}.`);if(t.length%2!=0)return e.error("Expected an odd number of arguments.");let n;e.expectedType&&"value"!==e.expectedType.kind&&(n=e.expectedType);const i=[];for(let r=1;r<t.length-1;r+=2){const o=e.parse(t[r],r,Wi);if(!o)return null;const s=e.parse(t[r+1],r+1,n);if(!s)return null;i.push([o,s]),n=n||s.type}const r=e.parse(t[t.length-1],t.length-1,n);return r?new Lo(n,i,r):null}evaluate(t){for(const[e,n]of this.branches)if(e.evaluate(t))return n.evaluate(t);return this.otherwise.evaluate(t)}eachChild(t){for(const[e,n]of this.branches)t(e),t(n);t(this.otherwise)}outputDefined(){return this.branches.every(([t,e])=>e.outputDefined())&&this.otherwise.outputDefined()}serialize(){const t=["case"];return this.eachChild(e=>{t.push(e.serialize())}),t}}var $o=Lo;class Uo{constructor(t,e,n,i){this.type=t,this.input=e,this.beginIndex=n,this.endIndex=i}static parse(t,e){if(t.length<=2||t.length>=5)return e.error(`Expected 3 or 4 arguments, but found ${t.length-1} instead.`);const n=e.parse(t[1],1,Gi),i=e.parse(t[2],2,$i);if(!n||!i)return null;if(!tr(n.type,[Xi(Gi),Ui,Gi]))return e.error(`Expected first argument to be of type array or string, but found ${Yi(n.type)} instead`);if(4===t.length){const r=e.parse(t[3],3,$i);return r?new Uo(n.type,n,i,r):null}return new Uo(n.type,n,i)}evaluate(t){const e=this.input.evaluate(t),n=this.beginIndex.evaluate(t);if(!er(e,["string","array"]))throw new wr(`Expected first argument to be of type array or string, but found ${Yi(yr(e))} instead.`);if(this.endIndex){const i=this.endIndex.evaluate(t);return e.slice(n,i)}return e.slice(n)}eachChild(t){t(this.input),t(this.beginIndex),this.endIndex&&t(this.endIndex)}outputDefined(){return!1}serialize(){if(null!=this.endIndex&&void 0!==this.endIndex){const t=this.endIndex.serialize();return["slice",this.input.serialize(),this.beginIndex.serialize(),t]}return["slice",this.input.serialize(),this.beginIndex.serialize()]}}var Wo=Uo;function Jo(t,e){return"=="===t||"!="===t?"boolean"===e.kind||"string"===e.kind||"number"===e.kind||"null"===e.kind||"value"===e.kind:"string"===e.kind||"number"===e.kind||"value"===e.kind}function Ho(t,e,n,i){return 0===i.compare(e,n)}function Go(t,e,n){const i="=="!==t&&"!="!==t;return class r{constructor(t,e,n){this.type=Wi,this.lhs=t,this.rhs=e,this.collator=n,this.hasUntypedArgument="value"===t.type.kind||"value"===e.type.kind}static parse(t,e){if(3!==t.length&&4!==t.length)return e.error("Expected two or three arguments.");const n=t[0];let o=e.parse(t[1],1,Gi);if(!o)return null;if(!Jo(n,o.type))return e.concat(1).error(`"${n}" comparisons are not supported for type \'${Yi(o.type)}\'.`);let s=e.parse(t[2],2,Gi);if(!s)return null;if(!Jo(n,s.type))return e.concat(2).error(`"${n}" comparisons are not supported for type \'${Yi(s.type)}\'.`);if(o.type.kind!==s.type.kind&&"value"!==o.type.kind&&"value"!==s.type.kind)return e.error(`Cannot compare types \'${Yi(o.type)}\' and \'${Yi(s.type)}\'.`);i&&("value"===o.type.kind&&"value"!==s.type.kind?o=new Mr(s.type,[o]):"value"!==o.type.kind&&"value"===s.type.kind&&(s=new Mr(o.type,[s])));let a=null;if(4===t.length){if("string"!==o.type.kind&&"string"!==s.type.kind&&"value"!==o.type.kind&&"value"!==s.type.kind)return e.error("Cannot use collator to compare non-string types.");if(a=e.parse(t[3],3,Vi),!a)return null}return new r(o,s,a)}evaluate(r){const o=this.lhs.evaluate(r),s=this.rhs.evaluate(r);if(i&&this.hasUntypedArgument){const e=yr(o),n=yr(s);if(e.kind!==n.kind||"string"!==e.kind&&"number"!==e.kind)throw new wr(`Expected arguments for "${t}" to be (string, string) or (number, number), but found (${e.kind}, ${n.kind}) instead.`)}if(this.collator&&!i&&this.hasUntypedArgument){const t=yr(o),n=yr(s);if("string"!==t.kind||"string"!==n.kind)return e(r,o,s)}return this.collator?n(r,o,s,this.collator.evaluate(r)):e(r,o,s)}eachChild(t){t(this.lhs),t(this.rhs),this.collator&&t(this.collator)}outputDefined(){return!0}serialize(){const e=[t];return this.eachChild(t=>{e.push(t.serialize())}),e}}}const Vo=Go("==",(function(t,e,n){return e===n}),Ho),Bo=Go("!=",(function(t,e,n){return e!==n}),(function(t,e,n,i){return!Ho(0,e,n,i)})),Zo=Go("<",(function(t,e,n){return e<n}),(function(t,e,n,i){return i.compare(e,n)<0})),Xo=Go(">",(function(t,e,n){return e>n}),(function(t,e,n,i){return i.compare(e,n)>0})),Yo=Go("<=",(function(t,e,n){return e<=n}),(function(t,e,n,i){return i.compare(e,n)<=0})),Ko=Go(">=",(function(t,e,n){return e>=n}),(function(t,e,n,i){return i.compare(e,n)>=0}));class Qo{constructor(t,e,n,i,r,o){this.type=Ui,this.number=t,this.locale=e,this.currency=n,this.unit=i,this.minFractionDigits=r,this.maxFractionDigits=o}static parse(t,e){if(3!==t.length)return e.error("Expected two arguments.");const n=e.parse(t[1],1,$i);if(!n)return null;const i=t[2];if("object"!=typeof i||Array.isArray(i))return e.error("NumberFormat options argument must be an object.");let r=null;if(i.locale&&(r=e.parse(i.locale,1,Ui),!r))return null;let o=null;if(i.currency&&(o=e.parse(i.currency,1,Ui),!o))return null;let s=null;if(i.unit&&(s=e.parse(i.unit,1,Ui),!s))return null;let a=null;if(i["min-fraction-digits"]&&(a=e.parse(i["min-fraction-digits"],1,$i),!a))return null;let l=null;return i["max-fraction-digits"]&&(l=e.parse(i["max-fraction-digits"],1,$i),!l)?null:new Qo(n,r,o,s,a,l)}evaluate(t){return new Intl.NumberFormat(this.locale?this.locale.evaluate(t):[],{style:(this.currency?"currency":this.unit&&"unit")||"decimal",currency:this.currency?this.currency.evaluate(t):void 0,unit:this.unit?this.unit.evaluate(t):void 0,minimumFractionDigits:this.minFractionDigits?this.minFractionDigits.evaluate(t):void 0,maximumFractionDigits:this.maxFractionDigits?this.maxFractionDigits.evaluate(t):void 0}).format(this.number.evaluate(t))}eachChild(t){t(this.number),this.locale&&t(this.locale),this.currency&&t(this.currency),this.unit&&t(this.unit),this.minFractionDigits&&t(this.minFractionDigits),this.maxFractionDigits&&t(this.maxFractionDigits)}outputDefined(){return!1}serialize(){const t={};return this.locale&&(t.locale=this.locale.serialize()),this.currency&&(t.currency=this.currency.serialize()),this.unit&&(t.unit=this.unit.serialize()),this.minFractionDigits&&(t["min-fraction-digits"]=this.minFractionDigits.serialize()),this.maxFractionDigits&&(t["max-fraction-digits"]=this.maxFractionDigits.serialize()),["number-format",this.number.serialize(),t]}}class ts{constructor(t){this.type=$i,this.input=t}static parse(t,e){if(2!==t.length)return e.error(`Expected 1 argument, but found ${t.length-1} instead.`);const n=e.parse(t[1],1);return n?"array"!==n.type.kind&&"string"!==n.type.kind&&"value"!==n.type.kind?e.error(`Expected argument of type string or array, but found ${Yi(n.type)} instead.`):new ts(n):null}evaluate(t){const e=this.input.evaluate(t);if("string"==typeof e)return e.length;if(Array.isArray(e))return e.length;throw new wr(`Expected value to be of type string or array, but found ${Yi(yr(e))} instead.`)}eachChild(t){t(this.input)}outputDefined(){return!1}serialize(){const t=["length"];return this.eachChild(e=>{t.push(e.serialize())}),t}}const es={"==":Vo,"!=":Bo,">":Xo,"<":Zo,">=":Ko,"<=":Yo,array:Mr,at:Oo,boolean:Mr,case:$o,coalesce:So,collator:Or,format:jr,image:Ar,in:Co,"index-of":Eo,interpolate:To,"interpolate-hcl":To,"interpolate-lab":To,length:ts,let:Po,literal:vr,match:Do,number:Mr,"number-format":Qo,object:Mr,slice:Wo,step:so,string:Mr,"to-boolean":zr,"to-color":zr,"to-number":zr,"to-string":zr,var:eo,within:Xr};function ns(t,[e,n,i,r]){e=e.evaluate(t),n=n.evaluate(t),i=i.evaluate(t);const o=r?r.evaluate(t):1,s=pr(e,n,i,o);if(s)throw new wr(s);return new ur(e/255*o,n/255*o,i/255*o,o)}function is(t,e){return t in e}function rs(t,e){const n=e[t];return void 0===n?null:n}function os(t){return{type:t}}Ir.register(es,{error:[{kind:"error"},[Ui],(t,[e])=>{throw new wr(e.evaluate(t))}],typeof:[Ui,[Gi],(t,[e])=>Yi(yr(e.evaluate(t)))],"to-rgba":[Xi($i,4),[Ji],(t,[e])=>e.evaluate(t).toArray()],rgb:[Ji,[$i,$i,$i],ns],rgba:[Ji,[$i,$i,$i,$i],ns],has:{type:Wi,overloads:[[[Ui],(t,[e])=>is(e.evaluate(t),t.properties())],[[Ui,Hi],(t,[e,n])=>is(e.evaluate(t),n.evaluate(t))]]},get:{type:Gi,overloads:[[[Ui],(t,[e])=>rs(e.evaluate(t),t.properties())],[[Ui,Hi],(t,[e,n])=>rs(e.evaluate(t),n.evaluate(t))]]},"feature-state":[Gi,[Ui],(t,[e])=>rs(e.evaluate(t),t.featureState||{})],properties:[Hi,[],t=>t.properties()],"geometry-type":[Ui,[],t=>t.geometryType()],id:[Gi,[],t=>t.id()],zoom:[$i,[],t=>t.globals.zoom],pitch:[$i,[],t=>t.globals.pitch||0],"distance-from-center":[$i,[],t=>t.distanceFromCenter()],"heatmap-density":[$i,[],t=>t.globals.heatmapDensity||0],"line-progress":[$i,[],t=>t.globals.lineProgress||0],"sky-radial-progress":[$i,[],t=>t.globals.skyRadialProgress||0],accumulated:[Gi,[],t=>void 0===t.globals.accumulated?null:t.globals.accumulated],"+":[$i,os($i),(t,e)=>{let n=0;for(const i of e)n+=i.evaluate(t);return n}],"*":[$i,os($i),(t,e)=>{let n=1;for(const i of e)n*=i.evaluate(t);return n}],"-":{type:$i,overloads:[[[$i,$i],(t,[e,n])=>e.evaluate(t)-n.evaluate(t)],[[$i],(t,[e])=>-e.evaluate(t)]]},"/":[$i,[$i,$i],(t,[e,n])=>e.evaluate(t)/n.evaluate(t)],"%":[$i,[$i,$i],(t,[e,n])=>e.evaluate(t)%n.evaluate(t)],ln2:[$i,[],()=>Math.LN2],pi:[$i,[],()=>Math.PI],e:[$i,[],()=>Math.E],"^":[$i,[$i,$i],(t,[e,n])=>Math.pow(e.evaluate(t),n.evaluate(t))],sqrt:[$i,[$i],(t,[e])=>Math.sqrt(e.evaluate(t))],log10:[$i,[$i],(t,[e])=>Math.log(e.evaluate(t))/Math.LN10],ln:[$i,[$i],(t,[e])=>Math.log(e.evaluate(t))],log2:[$i,[$i],(t,[e])=>Math.log(e.evaluate(t))/Math.LN2],sin:[$i,[$i],(t,[e])=>Math.sin(e.evaluate(t))],cos:[$i,[$i],(t,[e])=>Math.cos(e.evaluate(t))],tan:[$i,[$i],(t,[e])=>Math.tan(e.evaluate(t))],asin:[$i,[$i],(t,[e])=>Math.asin(e.evaluate(t))],acos:[$i,[$i],(t,[e])=>Math.acos(e.evaluate(t))],atan:[$i,[$i],(t,[e])=>Math.atan(e.evaluate(t))],min:[$i,os($i),(t,e)=>Math.min(...e.map(e=>e.evaluate(t)))],max:[$i,os($i),(t,e)=>Math.max(...e.map(e=>e.evaluate(t)))],abs:[$i,[$i],(t,[e])=>Math.abs(e.evaluate(t))],round:[$i,[$i],(t,[e])=>{const n=e.evaluate(t);return n<0?-Math.round(-n):Math.round(n)}],floor:[$i,[$i],(t,[e])=>Math.floor(e.evaluate(t))],ceil:[$i,[$i],(t,[e])=>Math.ceil(e.evaluate(t))],"filter-==":[Wi,[Ui,Gi],(t,[e,n])=>t.properties()[e.value]===n.value],"filter-id-==":[Wi,[Gi],(t,[e])=>t.id()===e.value],"filter-type-==":[Wi,[Ui],(t,[e])=>t.geometryType()===e.value],"filter-<":[Wi,[Ui,Gi],(t,[e,n])=>{const i=t.properties()[e.value],r=n.value;return typeof i==typeof r&&i<r}],"filter-id-<":[Wi,[Gi],(t,[e])=>{const n=t.id(),i=e.value;return typeof n==typeof i&&n<i}],"filter->":[Wi,[Ui,Gi],(t,[e,n])=>{const i=t.properties()[e.value],r=n.value;return typeof i==typeof r&&i>r}],"filter-id->":[Wi,[Gi],(t,[e])=>{const n=t.id(),i=e.value;return typeof n==typeof i&&n>i}],"filter-<=":[Wi,[Ui,Gi],(t,[e,n])=>{const i=t.properties()[e.value],r=n.value;return typeof i==typeof r&&i<=r}],"filter-id-<=":[Wi,[Gi],(t,[e])=>{const n=t.id(),i=e.value;return typeof n==typeof i&&n<=i}],"filter->=":[Wi,[Ui,Gi],(t,[e,n])=>{const i=t.properties()[e.value],r=n.value;return typeof i==typeof r&&i>=r}],"filter-id->=":[Wi,[Gi],(t,[e])=>{const n=t.id(),i=e.value;return typeof n==typeof i&&n>=i}],"filter-has":[Wi,[Gi],(t,[e])=>e.value in t.properties()],"filter-has-id":[Wi,[],t=>null!==t.id()&&void 0!==t.id()],"filter-type-in":[Wi,[Xi(Ui)],(t,[e])=>e.value.indexOf(t.geometryType())>=0],"filter-id-in":[Wi,[Xi(Gi)],(t,[e])=>e.value.indexOf(t.id())>=0],"filter-in-small":[Wi,[Ui,Xi(Gi)],(t,[e,n])=>n.value.indexOf(t.properties()[e.value])>=0],"filter-in-large":[Wi,[Ui,Xi(Gi)],(t,[e,n])=>function(t,e,n,i){for(;n<=i;){const r=n+i>>1;if(e[r]===t)return!0;e[r]>t?i=r-1:n=r+1}return!1}(t.properties()[e.value],n.value,0,n.value.length-1)],all:{type:Wi,overloads:[[[Wi,Wi],(t,[e,n])=>e.evaluate(t)&&n.evaluate(t)],[os(Wi),(t,e)=>{for(const n of e)if(!n.evaluate(t))return!1;return!0}]]},any:{type:Wi,overloads:[[[Wi,Wi],(t,[e,n])=>e.evaluate(t)||n.evaluate(t)],[os(Wi),(t,e)=>{for(const n of e)if(n.evaluate(t))return!0;return!1}]]},"!":[Wi,[Wi],(t,[e])=>!e.evaluate(t)],"is-supported-script":[Wi,[Ui],(t,[e])=>{const n=t.globals&&t.globals.isSupportedScript;return!n||n(e.evaluate(t))}],upcase:[Ui,[Ui],(t,[e])=>e.evaluate(t).toUpperCase()],downcase:[Ui,[Ui],(t,[e])=>e.evaluate(t).toLowerCase()],concat:[Ui,os(Gi),(t,e)=>e.map(e=>gr(e.evaluate(t))).join("")],"resolved-locale":[Ui,[Vi],(t,[e])=>e.evaluate(t).resolvedLocale()]});var ss=es;function as(t){return{result:"success",value:t}}function ls(t){return{result:"error",value:t}}function us(t){return!!t.expression&&t.expression.interpolated}function cs(t){return t instanceof Number?"number":t instanceof String?"string":t instanceof Boolean?"boolean":Array.isArray(t)?"array":null===t?"null":typeof t}function hs(t){return"object"==typeof t&&null!==t&&!Array.isArray(t)}function ds(t){return t}function fs(t,e,n){return void 0!==t?t:void 0!==e?e:void 0!==n?n:void 0}function ps(t,e,n,i,r){return fs(typeof n===r?i[n]:void 0,t.default,e.default)}function ms(t,e,n){if("number"!==cs(n))return fs(t.default,e.default);const i=t.stops.length;if(1===i)return t.stops[0][1];if(n<=t.stops[0][0])return t.stops[0][1];if(n>=t.stops[i-1][0])return t.stops[i-1][1];const r=ro(t.stops.map(t=>t[0]),n);return t.stops[r][1]}function ys(t,e,n){const i=void 0!==t.base?t.base:1;if("number"!==cs(n))return fs(t.default,e.default);const r=t.stops.length;if(1===r)return t.stops[0][1];if(n<=t.stops[0][0])return t.stops[0][1];if(n>=t.stops[r-1][0])return t.stops[r-1][1];const o=ro(t.stops.map(t=>t[0]),n),s=function(t,e,n,i){const r=i-n,o=t-n;return 0===r?0:1===e?o/r:(Math.pow(e,o)-1)/(Math.pow(e,r)-1)}(n,i,t.stops[o][0],t.stops[o+1][0]),a=t.stops[o][1],l=t.stops[o+1][1];let u=co[e.type]||ds;if(t.colorSpace&&"rgb"!==t.colorSpace){const e=jo[t.colorSpace];u=(t,n)=>e.reverse(e.interpolate(e.forward(t),e.forward(n),s))}return"function"==typeof a.evaluate?{evaluate(...t){const e=a.evaluate.apply(void 0,t),n=l.evaluate.apply(void 0,t);if(void 0!==e&&void 0!==n)return u(e,n,s)}}:u(a,l,s)}function gs(t,e,n){return"color"===e.type?n=ur.parse(n):"formatted"===e.type?n=dr.fromString(n.toString()):"resolvedImage"===e.type?n=fr.fromString(n.toString()):cs(n)===e.type||"enum"===e.type&&e.values[n]||(n=void 0),fs(n,t.default,e.default)}class bs{constructor(t,e){this.expression=t,this.U={},this.W=new _r,this.J=e?function(t){return"color"===t.type&&(hs(t.default)||Array.isArray(t.default))?new ur(0,0,0,0):"color"===t.type?ur.parse(t.default)||null:void 0===t.default?null:t.default}(e):null,this.H=e&&"enum"===e.type?e.values:null}evaluateWithoutErrorHandling(t,e,n,i,r,o,s,a){return this.W.globals=t,this.W.feature=e,this.W.featureState=n,this.W.canonical=i||null,this.W.availableImages=r||null,this.W.formattedSection=o,this.W.featureTileCoord=s||null,this.W.featureDistanceData=a||null,this.expression.evaluate(this.W)}evaluate(t,e,n,i,r,o,s,a){this.W.globals=t,this.W.feature=e||null,this.W.featureState=n||null,this.W.canonical=i||null,this.W.availableImages=r||null,this.W.formattedSection=o||null,this.W.featureTileCoord=s||null,this.W.featureDistanceData=a||null;try{const t=this.expression.evaluate(this.W);if(null==t||"number"==typeof t&&t!=t)return this.J;if(this.H&&!(t in this.H))throw new wr(`Expected value to be one of ${Object.keys(this.H).map(t=>JSON.stringify(t)).join(", ")}, but found ${JSON.stringify(t)} instead.`);return t}catch(t){return this.U[t.message]||(this.U[t.message]=!0,"undefined"!=typeof console&&console.warn(t.message)),this.J}}}function vs(t){return Array.isArray(t)&&t.length>0&&"string"==typeof t[0]&&t[0]in ss}function ws(t,e){const n=new io(ss,[],e?function(t){const e={color:Ji,string:Ui,number:$i,enum:Ui,boolean:Wi,formatted:Bi,resolvedImage:Zi};return"array"===t.type?Xi(e[t.value]||Gi,t.length):e[t.type]}(e):void 0),i=n.parse(t,void 0,void 0,void 0,e&&"string"===e.type?{typeAnnotation:"coerce"}:void 0);return i?as(new bs(i,e)):ls(n.errors)}class xs{constructor(t,e){this.kind=t,this.G=e,this.isStateDependent="constant"!==t&&!Kr(e.expression)}evaluateWithoutErrorHandling(t,e,n,i,r,o){return this.G.evaluateWithoutErrorHandling(t,e,n,i,r,o)}evaluate(t,e,n,i,r,o){return this.G.evaluate(t,e,n,i,r,o)}}class ks{constructor(t,e,n,i){this.kind=t,this.zoomStops=n,this.G=e,this.isStateDependent="camera"!==t&&!Kr(e.expression),this.interpolationType=i}evaluateWithoutErrorHandling(t,e,n,i,r,o){return this.G.evaluateWithoutErrorHandling(t,e,n,i,r,o)}evaluate(t,e,n,i,r,o){return this.G.evaluate(t,e,n,i,r,o)}interpolationFactor(t,e,n){return this.interpolationType?To.interpolationFactor(this.interpolationType,t,e,n):0}}function Ms(t,e){if("error"===(t=ws(t,e)).result)return t;const n=t.value.expression,i=Yr(n);if(!i&&!function(t){return"data-driven"===t["property-type"]}(e))return ls([new Ei("","data expressions not supported")]);const r=Qr(n,["zoom","pitch","distance-from-center"]);if(!r&&!function(t){return!!t.expression&&t.expression.parameters.indexOf("zoom")>-1}(e))return ls([new Ei("","zoom expressions not supported")]);const o=function t(e){let n=null;if(e instanceof Po)n=t(e.result);else if(e instanceof So){for(const i of e.args)if(n=t(i),n)break}else(e instanceof so||e instanceof To)&&e.input instanceof Ir&&"zoom"===e.input.name&&(n=e);return n instanceof Ei||e.eachChild(e=>{const i=t(e);i instanceof Ei?n=i:!n&&i?n=new Ei("",\'"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.\'):n&&i&&n!==i&&(n=new Ei("",\'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.\'))}),n}(n);if(!o&&!r)return ls([new Ei("",\'"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.\')]);if(o instanceof Ei)return ls([o]);if(o instanceof To&&!us(e))return ls([new Ei("",\'"interpolate" expressions cannot be used with this property\')]);if(!o)return as(new xs(i?"constant":"source",t.value));const s=o instanceof To?o.interpolation:void 0;return as(new ks(i?"camera":"composite",t.value,o.labels,s))}class js{constructor(t,e){this.V=t,this.B=e,Ci(this,function t(e,n){const i="color"===n.type,r=e.stops&&"object"==typeof e.stops[0][0],o=r||!(r||void 0!==e.property),s=e.type||(us(n)?"exponential":"interval");if(i&&((e=Ci({},e)).stops&&(e.stops=e.stops.map(t=>[t[0],ur.parse(t[1])])),e.default=ur.parse(e.default?e.default:n.default)),e.colorSpace&&"rgb"!==e.colorSpace&&!jo[e.colorSpace])throw new Error("Unknown color space: "+e.colorSpace);let a,l,u;if("exponential"===s)a=ys;else if("interval"===s)a=ms;else if("categorical"===s){a=ps,l=Object.create(null);for(const t of e.stops)l[t[0]]=t[1];u=typeof e.stops[0][0]}else{if("identity"!==s)throw new Error(`Unknown function type "${s}"`);a=gs}if(r){const i={},r=[];for(let t=0;t<e.stops.length;t++){const n=e.stops[t],o=n[0].zoom;void 0===i[o]&&(i[o]={zoom:o,type:e.type,property:e.property,default:e.default,stops:[]},r.push(o)),i[o].stops.push([n[0].value,n[1]])}const o=[];for(const e of r)o.push([i[e].zoom,t(i[e],n)]);const s={name:"linear"};return{kind:"composite",interpolationType:s,interpolationFactor:To.interpolationFactor.bind(void 0,s),zoomStops:o.map(t=>t[0]),evaluate:({zoom:t},i)=>ys({stops:o,base:e.base},n,t).evaluate(t,i)}}if(o){const t="exponential"===s?{name:"exponential",base:void 0!==e.base?e.base:1}:null;return{kind:"camera",interpolationType:t,interpolationFactor:To.interpolationFactor.bind(void 0,t),zoomStops:e.stops.map(t=>t[0]),evaluate:({zoom:t})=>a(e,n,t,l,u)}}return{kind:"source",evaluate(t,i){const r=i&&i.properties?i.properties[e.property]:void 0;return void 0===r?fs(e.default,n.default):a(e,n,r,l,u)}}}(this.V,this.B))}static deserialize(t){return new js(t.V,t.B)}static serialize(t){return{V:t.V,B:t.B}}}function As(t){if(Array.isArray(t))return t.map(As);if(t instanceof Object&&!(t instanceof Number||t instanceof String||t instanceof Boolean)){const e={};for(const n in t)e[n]=As(t[n]);return e}return function(t){return t instanceof Number||t instanceof String||t instanceof Boolean?t.valueOf():t}(t)}function Fs(t){if(!0===t||!1===t)return!0;if(!Array.isArray(t)||0===t.length)return!1;switch(t[0]){case"has":return t.length>=2&&"$id"!==t[1]&&"$type"!==t[1];case"in":return t.length>=3&&("string"!=typeof t[1]||Array.isArray(t[2]));case"!in":case"!has":case"none":return!1;case"==":case"!=":case">":case">=":case"<":case"<=":return 3!==t.length||Array.isArray(t[1])||Array.isArray(t[2]);case"any":case"all":for(const e of t.slice(1))if(!Fs(e)&&"boolean"!=typeof e)return!1;return!0;default:return!0}}function Ts(t){if(!Array.isArray(t))return!1;if(function(t){return"pitch"===t||"distance-from-center"===t}(t[0]))return!0;for(let e=1;e<t.length;e++)if(Ts(t[e]))return!0;return!1}const zs=new Set(["in","==","!=",">",">=","<","<=","to-boolean"]);function Ss(t,e){return t<e?-1:t>e?1:0}function _s(t){if(!t)return!0;const e=t[0];return t.length<=1?"any"!==e:"=="===e?Ps(t[1],t[2],"=="):"!="===e?qs(Ps(t[1],t[2],"==")):"<"===e||">"===e||"<="===e||">="===e?Ps(t[1],t[2],e):"any"===e?(n=t.slice(1),["any"].concat(n.map(_s))):"all"===e?["all"].concat(t.slice(1).map(_s)):"none"===e?["all"].concat(t.slice(1).map(_s).map(qs)):"in"===e?Is(t[1],t.slice(2)):"!in"===e?qs(Is(t[1],t.slice(2))):"has"===e?Os(t[1]):"!has"===e?qs(Os(t[1])):"within"!==e||t;var n}function Ps(t,e,n){switch(t){case"$type":return["filter-type-"+n,e];case"$id":return["filter-id-"+n,e];default:return["filter-"+n,t,e]}}function Is(t,e){if(0===e.length)return!1;switch(t){case"$type":return["filter-type-in",["literal",e]];case"$id":return["filter-id-in",["literal",e]];default:return e.length>200&&!e.some(t=>typeof t!=typeof e[0])?["filter-in-large",t,["literal",e.sort(Ss)]]:["filter-in-small",t,["literal",e]]}}function Os(t){switch(t){case"$type":return!0;case"$id":return["filter-has-id"];default:return["filter-has",t]}}function qs(t){return["!",t]}var Cs,Ns;Cs={},Ns=function(){var t=function(t,e,n,i){for(n=n||{},i=t.length;i--;n[t[i]]=e);return n},e=[1,12],n=[1,13],i=[1,9],r=[1,10],o=[1,11],s=[1,14],a=[1,15],l=[14,18,22,24],u=[18,22],c=[22,24],h={trace:function(){},yy:{},symbols_:{error:2,JSONString:3,STRING:4,JSONNumber:5,NUMBER:6,JSONNullLiteral:7,NULL:8,JSONBooleanLiteral:9,TRUE:10,FALSE:11,JSONText:12,JSONValue:13,EOF:14,JSONObject:15,JSONArray:16,"{":17,"}":18,JSONMemberList:19,JSONMember:20,":":21,",":22,"[":23,"]":24,JSONElementList:25,$accept:0,$end:1},terminals_:{2:"error",4:"STRING",6:"NUMBER",8:"NULL",10:"TRUE",11:"FALSE",14:"EOF",17:"{",18:"}",21:":",22:",",23:"[",24:"]"},productions_:[0,[3,1],[5,1],[7,1],[9,1],[9,1],[12,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[15,2],[15,3],[20,3],[19,1],[19,3],[16,2],[16,3],[25,1],[25,3]],performAction:function(t,e,n,i,r,o,s){var a=o.length-1;switch(r){case 1:this.$=new String(t.replace(/\\\\(\\\\|")/g,"$1").replace(/\\\\n/g,"\\n").replace(/\\\\r/g,"\\r").replace(/\\\\t/g,"\\t").replace(/\\\\v/g,"\\v").replace(/\\\\f/g,"\\f").replace(/\\\\b/g,"\\b")),this.$.Z=this.X.first_line;break;case 2:this.$=new Number(t),this.$.Z=this.X.first_line;break;case 3:this.$=null;break;case 4:this.$=new Boolean(!0),this.$.Z=this.X.first_line;break;case 5:this.$=new Boolean(!1),this.$.Z=this.X.first_line;break;case 6:return this.$=o[a-1];case 13:this.$={},Object.defineProperty(this.$,"Z",{value:this.X.first_line,enumerable:!1});break;case 14:case 19:this.$=o[a-1],Object.defineProperty(this.$,"Z",{value:this.X.first_line,enumerable:!1});break;case 15:this.$=[o[a-2],o[a]];break;case 16:this.$={},this.$[o[a][0]]=o[a][1];break;case 17:this.$=o[a-2],o[a-2][o[a][0]]=o[a][1];break;case 18:this.$=[],Object.defineProperty(this.$,"Z",{value:this.X.first_line,enumerable:!1});break;case 20:this.$=[o[a]];break;case 21:this.$=o[a-2],o[a-2].push(o[a])}},table:[{3:5,4:e,5:6,6:n,7:3,8:i,9:4,10:r,11:o,12:1,13:2,15:7,16:8,17:s,23:a},{1:[3]},{14:[1,16]},t(l,[2,7]),t(l,[2,8]),t(l,[2,9]),t(l,[2,10]),t(l,[2,11]),t(l,[2,12]),t(l,[2,3]),t(l,[2,4]),t(l,[2,5]),t([14,18,21,22,24],[2,1]),t(l,[2,2]),{3:20,4:e,18:[1,17],19:18,20:19},{3:5,4:e,5:6,6:n,7:3,8:i,9:4,10:r,11:o,13:23,15:7,16:8,17:s,23:a,24:[1,21],25:22},{1:[2,6]},t(l,[2,13]),{18:[1,24],22:[1,25]},t(u,[2,16]),{21:[1,26]},t(l,[2,18]),{22:[1,28],24:[1,27]},t(c,[2,20]),t(l,[2,14]),{3:20,4:e,20:29},{3:5,4:e,5:6,6:n,7:3,8:i,9:4,10:r,11:o,13:30,15:7,16:8,17:s,23:a},t(l,[2,19]),{3:5,4:e,5:6,6:n,7:3,8:i,9:4,10:r,11:o,13:31,15:7,16:8,17:s,23:a},t(u,[2,17]),t(u,[2,15]),t(c,[2,21])],defaultActions:{16:[2,6]},parseError:function(t,e){if(!e.recoverable)throw new Error(t);this.trace(t)},parse:function(t){var e=this,n=[0],i=[null],r=[],o=this.table,s="",a=0,l=0,u=2,c=1,h=r.slice.call(arguments,1),d=Object.create(this.lexer),f={yy:{}};for(var p in this.yy)Object.prototype.hasOwnProperty.call(this.yy,p)&&(f.yy[p]=this.yy[p]);d.setInput(t,f.yy),f.yy.lexer=d,f.yy.parser=this,void 0===d.yylloc&&(d.yylloc={});var m=d.yylloc;r.push(m);var y=d.options&&d.options.ranges;function g(){var t;return"number"!=typeof(t=d.lex()||c)&&(t=e.symbols_[t]||t),t}this.parseError="function"==typeof f.yy.parseError?f.yy.parseError:Object.getPrototypeOf(this).parseError;for(var b,v,w,x,k,M,j,A={};;){if(this.defaultActions[v=n[n.length-1]]?w=this.defaultActions[v]:(null==b&&(b=g()),w=o[v]&&o[v][b]),void 0===w||!w.length||!w[0]){var F="";for(k in j=[],o[v])this.terminals_[k]&&k>u&&j.push("\'"+this.terminals_[k]+"\'");F=d.showPosition?"Parse error on line "+(a+1)+":\\n"+d.showPosition()+"\\nExpecting "+j.join(", ")+", got \'"+(this.terminals_[b]||b)+"\'":"Parse error on line "+(a+1)+": Unexpected "+(b==c?"end of input":"\'"+(this.terminals_[b]||b)+"\'"),this.parseError(F,{text:d.match,token:this.terminals_[b]||b,line:d.yylineno,loc:m,expected:j})}if(w[0]instanceof Array&&w.length>1)throw new Error("Parse Error: multiple actions possible at state: "+v+", token: "+b);switch(w[0]){case 1:n.push(b),i.push(d.yytext),r.push(d.yylloc),n.push(w[1]),b=null,l=d.yyleng,s=d.yytext,a=d.yylineno,m=d.yylloc;break;case 2:if(A.$=i[i.length-(M=this.productions_[w[1]][1])],A.X={first_line:r[r.length-(M||1)].first_line,last_line:r[r.length-1].last_line,first_column:r[r.length-(M||1)].first_column,last_column:r[r.length-1].last_column},y&&(A.X.range=[r[r.length-(M||1)].range[0],r[r.length-1].range[1]]),void 0!==(x=this.performAction.apply(A,[s,l,a,f.yy,w[1],i,r].concat(h))))return x;M&&(n=n.slice(0,-1*M*2),i=i.slice(0,-1*M),r=r.slice(0,-1*M)),n.push(this.productions_[w[1]][0]),i.push(A.$),r.push(A.X),n.push(o[n[n.length-2]][n[n.length-1]]);break;case 3:return!0}}return!0}};function d(){this.yy={}}return h.lexer={EOF:1,parseError:function(t,e){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,e)},setInput:function(t,e){return this.yy=e||this.yy||{},this.Y=t,this.K=this.tt=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var t=this.Y[0];return this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t,t.match(/(?:\\r\\n?|\\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this.Y=this.Y.slice(1),t},unput:function(t){var e=t.length,n=t.split(/(?:\\r\\n?|\\n)/g);this.Y=t+this.Y,this.yytext=this.yytext.substr(0,this.yytext.length-e),this.offset-=e;var i=this.match.split(/(?:\\r\\n?|\\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var r=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===i.length?this.yylloc.first_column:0)+i[i.length-n.length].length-n[0].length:this.yylloc.first_column-e},this.options.ranges&&(this.yylloc.range=[r[0],r[0]+this.yyleng-e]),this.yyleng=this.yytext.length,this},more:function(){return this.K=!0,this},reject:function(){return this.options.backtrack_lexer?(this.tt=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?"...":"")+t.substr(-20).replace(/\\n/g,"")},upcomingInput:function(){var t=this.match;return t.length<20&&(t+=this.Y.substr(0,20-t.length)),(t.substr(0,20)+(t.length>20?"...":"")).replace(/\\n/g,"")},showPosition:function(){var t=this.pastInput(),e=new Array(t.length+1).join("-");return t+this.upcomingInput()+"\\n"+e+"^"},test_match:function(t,e){var n,i,r;if(this.options.backtrack_lexer&&(r={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,K:this.K,Y:this.Y,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(r.yylloc.range=this.yylloc.range.slice(0))),(i=t[0].match(/(?:\\r\\n?|\\n).*/g))&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\\r?\\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this.K=!1,this.tt=!1,this.Y=this.Y.slice(t[0].length),this.matched+=t[0],n=this.performAction.call(this,this.yy,this,e,this.conditionStack[this.conditionStack.length-1]),this.done&&this.Y&&(this.done=!1),n)return n;if(this.tt){for(var o in r)this[o]=r[o];return!1}return!1},next:function(){if(this.done)return this.EOF;var t,e,n,i;this.Y||(this.done=!0),this.K||(this.yytext="",this.match="");for(var r=this.et(),o=0;o<r.length;o++)if((n=this.Y.match(this.rules[r[o]]))&&(!e||n[0].length>e[0].length)){if(e=n,i=o,this.options.backtrack_lexer){if(!1!==(t=this.test_match(n,r[o])))return t;if(this.tt){e=!1;continue}return!1}if(!this.options.flex)break}return e?!1!==(t=this.test_match(e,r[i]))&&t:""===this.Y?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){return this.next()||this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},et:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(t){return(t=this.conditionStack.length-1-Math.abs(t||0))>=0?this.conditionStack[t]:"INITIAL"},pushState:function(t){this.begin(t)},stateStackSize:function(){return this.conditionStack.length},options:{},performAction:function(t,e,n,i){switch(n){case 0:break;case 1:return 6;case 2:return e.yytext=e.yytext.substr(1,e.yyleng-2),4;case 3:return 17;case 4:return 18;case 5:return 23;case 6:return 24;case 7:return 22;case 8:return 21;case 9:return 10;case 10:return 11;case 11:return 8;case 12:return 14;case 13:return"INVALID"}},rules:[/^(?:\\s+)/,/^(?:(-?([0-9]|[1-9][0-9]+))(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b)/,/^(?:"(?:\\\\[\\\\"bfnrt/]|\\\\u[a-fA-F0-9]{4}|[^\\\\\\0-\\x09\\x0a-\\x1f"])*")/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\[)/,/^(?:\\])/,/^(?:,)/,/^(?::)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:null\\b)/,/^(?:$)/,/^(?:.)/],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13],inclusive:!0}}},d.prototype=h,h.Parser=d,new d}(),Cs.parser=Ns,Cs.Parser=Ns.Parser,Cs.parse=function(){return Ns.parse.apply(Ns,arguments)};const Es={StyleExpression:bs,isExpression:vs,isExpressionFilter:Fs,createExpression:ws,createPropertyExpression:Ms,normalizePropertyExpression:function(t,e){if(hs(t))return new js(t,e);if(vs(t)){const n=Ms(t,e);if("error"===n.result)throw new Error(n.value.map(t=>`${t.key}: ${t.message}`).join(", "));return n.value}{let n=t;return"string"==typeof t&&"color"===e.type&&(n=ur.parse(t)),{kind:"constant",evaluate:()=>n}}},ZoomConstantExpression:xs,ZoomDependentExpression:ks,StylePropertyFunction:js},{isExpression:Rs,createExpression:Ds}=Es,Ls={};function $s(t){if(!0===t)return function(){return!0};if(t&&t.condition){if("any"===t.type){const e=t.condition,n=[];for(let t=0;t<e.length;t++)n.push($s(e[t]));return(t,e)=>{for(let i=0;i<n.length;i++)if(n[i](t,e))return!0;return!1}}const e=$s(t.condition);if(ni(t.layer))return e;const n=e=>e.layer===t.layer;return(t,i)=>n(t)&&e(t,i)}if(function t(e){if(!0===e||!1===e)return!0;if(!Array.isArray(e)||0===e.length)return!1;switch(e[0]){case"has":case"!has":return 2===e.length&&("string"==typeof e[1]||e[1].property&&e[1].op);case"in":case"!in":return e.length>=2&&("string"==typeof e[1]||e[1].property&&e[1].op);case"==":case"!=":case">":case">=":case"<":case"<=":return 3===e.length&&("string"==typeof e[1]||e[1].property&&e[1].op);case"none":case"any":case"all":for(const n of e.slice(1))if(!t(n)&&"boolean"!=typeof n)return!1;return!0;case"contains":return!0;default:return!1}}(t))return new Function("f","var p = (f && f.properties || {}); return "+qe(t));{let e=function(t,e="fill"){if(null==t)return{filter:()=>!0,needGeometry:!1,needFeature:!1};Fs(t)||(t=_s(t));const n=t;let i=!0;try{i=function(t){if(!Ts(t))return t;let e=As(t);return function t(e){let n=!1;const i=[];if("case"===e[0]){for(let t=1;t<e.length-1;t+=2)n=n||Ts(e[t]),i.push(e[t+1]);i.push(e[e.length-1])}else if("match"===e[0]){n=n||Ts(e[1]);for(let t=2;t<e.length-1;t+=2)i.push(e[t+1]);i.push(e[e.length-1])}else if("step"===e[0]){n=n||Ts(e[1]);for(let t=1;t<e.length-1;t+=2)i.push(e[t+1])}n&&(e.length=0,e.push("any",...i));for(let n=1;n<e.length;n++)t(e[n])}(e),e=function t(e){if(!Array.isArray(e))return e;const n=function(t){if(zs.has(t[0]))for(let e=1;e<t.length;e++)if(Ts(t[e]))return!0;return t}(e);return!0===n?n:n.map(e=>t(e))}(e),e}(n)}catch(t){console.warn(`Failed to extract static filter. Filter will continue working, but at higher memory usage and slower framerate.\\nThis is most likely a bug, please report this via https://github.com/mapbox/mapbox-gl-js/issues/new?assignees=&labels=&template=Bug_report.md\\nand paste the contents of this message in the report.\\nThank you!\\nFilter Expression:\\n${JSON.stringify(n,null,2)}\\n        `)}const r=Ii["filter_"+e],o=ws(i,r);let s=null;if("error"===o.result)throw new Error(o.value.map(t=>`${t.key}: ${t.message}`).join(", "));s=(t,e,n)=>o.value.evaluate(t,e,{},n);let a=null,l=null;if(i!==n){const t=ws(n,r);if("error"===t.result)throw new Error(t.value.map(t=>`${t.key}: ${t.message}`).join(", "));a=(e,n,i,r,o)=>t.value.evaluate(e,n,{},i,void 0,void 0,r,o),l=!Yr(t.value.expression)}return s=s,{filter:s,dynamicFilter:a||void 0,needGeometry:function t(e){if(!Array.isArray(e))return!1;if("within"===e[0])return!0;for(let n=1;n<e.length;n++)if(t(e[n]))return!0;return!1}(i),needFeature:!!l}}(t);return e=e&&e.filter,(t,n)=>(Ls.zoom=n,e&&e(Ls,t))}}const Us={type:"number","property-type":"data-driven",expression:{parameters:["zoom","feature"]}};function Ws(t,e){Us.type=e||"number";const n=Ds(t,Us);if("success"!==n.result)throw new Error(`Invalid maplibre spec expression: ${JSON.stringify(t)} (${n.value})`);return n.value}function Js(t){return Rs(t)}const Hs={lineWidth:1,lineStrokeWidth:1,lineDx:1,lineDy:1,lineOpacity:1,linePatternAnimSpeed:1,markerWidth:1,markerHeight:1,markerDx:1,markerDy:1,markerSpacing:1,markerOpacity:1,markerRotation:1,textWrapWidth:1,textSpacing:1,textSize:1,textHaloRadius:1,textHaloOpacity:1,textDx:1,textDy:1,textOpacity:1,textRotation:1,polygonOpacity:1};function Gs(t){return Hs[t]}const Vs={markerPlacement:1,markerFile:1,mergeOnProperty:1,markerTextFit:1,markerType:1,markerHorizontalAlignment:1,markerVerticalAlignment:1,markerRotationAlignment:1,markerPitchAlignment:1,markerFillPatternFile:1,markerLinePatternFile:1,textName:1,textPlacement:1,textFaceName:1,textStyle:1,textHorizontalAlignment:1,textVerticalAlignment:1,textRotationAlignment:1,textPitchAlignment:1,lineJoin:1,lineCap:1,linePatternFile:1,polygonPatternFile:1},Bs={lineDasharray:1,markerLineDasharray:1,uvScale:1,uvOffset:1};function Zs(t){return Vs[t]?"string":Gs(t)?"number":Bs[t]?"array":"color"}var Xs=Object.freeze({__proto__:null,compileStyle:function(t=[]){return function t(e){if(!Array.isArray(e))return t([e]);const n=[];for(let t=0;t<e.length;t++){let i;i=!0===e[t].filter?function(){return!0}:$s(e[t].filter),n.push(ei({},e[t],{filter:i}))}return n}(t=t.map(t=>{const e=ei({},t);return e.filter&&e.filter.value&&(e.filter=e.filter.value),e}))},compileFilter:$s,createExpression:Ws,isExpression:Js,isInterpolated:Gs,getExpressionType:Zs});const Ys=[],Ks={},Qs={},ta={},ea=[];class na{static isAtlasLoaded(t,e={}){const{iconAtlas:n}=e;return!!(!t||n&&n.positions[t])}static genFnTypes(t){const e={};for(const n in t)if(Js(t[n])){const i=(n+"_Fn_0").trim(),r=(n+"Fn").trim(),o=Zs(n);e[i]=Ws(t[n],o),e[r]=(t,n)=>{let r;Ks.zoom=t,Qs.properties=n;try{r=e[i].evaluateWithoutErrorHandling(Ks,Qs,ta,null,ea)}catch(t){return null}return r}}else if(ci(t[n])){const i=(n+"_Fn_0").trim(),r=(n+"Fn").trim();Gs(n)?(e[i]=p(t[n]),e[r]=(t,n)=>{const r=e[i](t,n);return ci(r)?p(r)(t,n):r}):(e[i]=m(t[n]),e[r]=(t,n)=>{const r=e[i](t,n);return ci(r)?m(r)(t,n):r})}return e}constructor(t,e,n){this.options=n;const i=[];this.symbolDef=e,this.symbol=y(e,()=>(i[0]=n.zoom,i)),this.styledVectors=[],this.properties={},this.nt=n.fnTypes||na.genFnTypes(this.symbolDef),ci(this.symbolDef.visible)&&(this.it=p(this.symbolDef.visible)),n.atlas&&(this.iconAtlas=n.atlas.iconAtlas,this.glyphAtlas=n.atlas.glyphAtlas),this.features=this.rt(t)}needAltitudeAttribute(){return this.options.forceAltitudeAttribute||this.maxPosZ>=Math.pow(2,17)||this.options.positionType===Float32Array}getPositionFormat(){return this.needAltitudeAttribute()?[{type:Int16Array,width:2,name:"aPosition"},{type:Float32Array,width:1,name:"aAltitude"}]:[{type:Int16Array,width:3,name:"aPosition"}]}fillPosition(t,e,n,i){this.needAltitudeAttribute()?(t.aPosition.push(e,n),t.aAltitude.push(i)):(Ti(Ys,e,n,i),t.aPosition.push(Ys[0],Ys[1],Ys[2]))}rt(t){if(!t.length)return t;const e="__fea_idx".trim();let n,i=0,r=t[i];for(;!r.geometry;)i++,r=t[i];if(Array.isArray(r.geometry)&&r.properties){let e=r.geometry[0];for(;Array.isArray(e);)e=e[0];e instanceof Rt&&(n=t)}if(!n)if(n=[],Array.isArray(r.geometry))for(let e=0;e<t.length;e++){const i=ei({},t[e]);n.push(ti(i))}else for(let i=0;i<t.length;i++){const r=t[i],o=Cn(r);for(let t=0;t<o.length;t++){const i=o[t];i[e]=r[e],n.push(i)}}if(this.maxPosZ=0,!this.options.forceAltitudeAttribute){const t="line"===this.symbolDef.textPlacement;let e=0,i=!1;const{textPitchAlignmentFn:r}=this.nt;!r&&t&&"map"===this.symbolDef.textPitchAlignment&&(i=!0);for(let o=0;o<n.length;o++){const s=ra(n[o]&&n[o].geometry);if(s>e&&(e=s),t&&!i&&r&&n[o].properties){const t=r(null,n[o].properties);"map"===t&&(i=t)}}this.hasMapPitchAlign=i,this.maxPosZ=e}const o=this.options.order;if(o){const t=[];for(let e=0;e<o.length;e++)o[e]&&t.push($s(o[e]));n=n.sort((e,n)=>{const i=t.length;let r=-1,o=-1;for(let s=0;s<i&&(t[s](e)&&(r=s),t[s](n)&&(o=s),!(r>=0&&r<i&&o>=0&&o<i));s++);return r-o})}return n}load(t=1){const e="__fea_idx".trim(),n="_debug_info".trim(),i=this.nt,r=this.styledVectors;this.count=0;const o=this.features;if(!o||!o.length)return Promise.resolve(null);const s={},a={},l={zoom:this.options.zoom},u=[],c=y(this.symbolDef,()=>(u[0]=l.zoom,u));let h=0,d=o.length;const f=this.options.debugIndex;try{for(;h<d;h++){const t=o[h];if(!t||!t.geometry)continue;if(void 0!==f&&t[n].index!==f)continue;t.properties||(t.properties={}),t.properties.$layer=t.layer,t.properties.$type=t.type;const u=this.createStyledVector(t,c,i,l,s,a);u&&u.feature.geometry&&(u.featureIdx=void 0===t[e]?h:t[e],this.count++,r.push(u))}}catch(t){return Promise.reject(t)}return this.options.atlas?Promise.resolve(this.pack(t)):this.loadAtlas(s,a).then(()=>this.pack(t))}loadAtlas(t,e){return new Promise((n,i)=>{this.fetchAtlas(t,e,(t,e)=>{if(t)i(t);else{if(e){const{icons:t,glyphs:n}=e;if(t&&Object.keys(t).length){for(const e in t){const n=t[e],{width:i,height:r,data:o}=n.data;n.data=new Hn({width:i,height:r},o)}this.iconAtlas=new Vn(t)}if(n&&Object.keys(n).length){for(const t in n){const e=n[t];for(const t in e){const n=e[t],{width:i,height:r,data:o}=n.bitmap;n.bitmap=new Jn({width:i,height:r},o)}}this.glyphAtlas=new Xn(n)}}n({glyphAtlas:this.glyphAtlas,iconAtlas:this.iconAtlas})}})})}fetchAtlas(t,e,n){Object.keys(t).length>0||Object.keys(e).length>0?this.options.requestor(t,e,n):n()}pack(t){if(!this.count)return null;if(null==t)throw new Error("layout scale is undefined");const e=this.createDataPack(this.styledVectors,t);if(!e)return null;e.properties=this.properties,this.empty&&(e.empty=!0);const n=e.buffers;delete e.buffers;const i={data:e,buffers:n};if(this.iconAtlas){const t=i.data.iconAtlas=ia(this.iconAtlas);if(t.glyphMap)for(const e in t.glyphMap)n.push(t.glyphMap[e].data.data.buffer);n.push(i.data.iconAtlas.image.data.buffer)}return this.glyphAtlas&&(i.data.glyphAtlas=ia(this.glyphAtlas),n.push(i.data.glyphAtlas.image.data.buffer)),i}createStyledVector(t,e,n,i){return new Fi(t,e,n,i)}createDataPack(t,e){if(!t||!t.length)return null;this.maxIndex=0,this.maxPos=0,this.maxAltitude=0;const n=this.data={};let i=this.elements=[];const r=this.getFormat(Array.isArray(t[0])?t[0][0].symbol:t[0].symbol),o=this.needAltitudeAttribute()?2:3;for(let t=0;t<r.length;t++)n[r[t].name]=[];let s=[],a=0;const l=[];let u=0,c=!1,h=!0;const d=new Set;for(let i=0,r=t.length;i<r;i++){if(!t[i].feature.geometry)continue;const r=Array.isArray(t[i])?t[i][0].feature.id:t[i].feature.id;h&&(void 0!==Qs.id?d&&(d.has(Qs.id)?h=!1:d.add(Qs.id)):h=!1),ii(r)&&(Math.abs(r)>u&&(u=Math.abs(r)),r<0&&(c=!0));const f=this.data.aPosition.length;if(Array.isArray(t[i]))for(let n=0;n<t[i].length;n++)this.ot(t[i][n],e);else this.ot(t[i],e);const p=(n.aPosition.length-f)/o;for(let e=0;e<p;e++)s.push(t[i].featureIdx),ii(r)&&l.push(r);a=Math.max(a,t[i].featureIdx)}if(this.hasElements()&&!i.length)return null;s=new(Qn(a))(s),r[0].type=this.options.positionType?this.options.positionType:Kn(this.maxPos);const f=this.options.center;if(f&&(f[0]||f[1])){const t=n.aPosition;for(let e=0;e<t.length;e+=o)t[e]-=f[0],t[e+1]-=f[1]}const p=function(t,e){const n={};for(let i=0;i<t.length;i++){const r=t[i],o=r.type,s=r.name;n[s]=o===Array?e[s]:new o(e[s])}return n}(r,n);p.aPickingId=s;const m=[];for(const t in p)m.push(p[t].buffer);i=new(Yn(this.maxIndex))(i),m.push(i.buffer);const y={data:p,isIdUnique:h,is2D:0===this.maxPosZ,indices:this.hasElements()?i:null,positionSize:o,buffers:m,symbolIndex:this.symbolDef.index||{index:0}};if(this.st&&(y.markerPlacement=this.st),this.lt&&(y.textPlacement=this.lt),l.length){const t=c?Kn(u):Qn(u);y.featureIds=new t(l),m.push(y.featureIds.buffer)}else y.featureIds=[];return y.pickingIdIndiceMap=Ai(s,y.indices),y}ot(t,e){this.it&&!this.it(this.options.zoom,t.feature.properties)||this.placeVector(t,e,this.formatWidth)}addElements(...t){this.maxIndex=Math.max(this.maxIndex,...t),this.elements.push(...t)}hasElements(){return!0}getAltitude(t){const{altitudeProperty:e,defaultAltitude:n,altitudeScale:i}=this.options;let r=wi(t,e,n);return i&&(r*=i),this.maxAltitude=Math.max(this.maxAltitude,Math.abs(r)),r}getIconAtlasMaxValue(){const t=this.iconAtlas.positions;let e=0;for(const n in t)if(li(t,n)){const{tl:i,displaySize:r}=t[n],o=Math.max(i[0],i[1],r[0]-1,r[1]-1);o>e&&(e=o)}return e}}function ia(t){let e=t.positions,n=t.image&&t.image.format||"alpha";if(t instanceof Vn){e={};for(const n in t.positions){const i=t.positions[n];e[n]={paddedRect:i.paddedRect,pixelRatio:i.pixelRatio,tl:i.tl,br:i.br,displaySize:i.displaySize}}n="rgba"}const i=t.image;return{image:{width:i.width,height:i.height,data:i.data,format:n},glyphMap:t.glyphMap,positions:e}}function ra(t){if(!t)return 0;let e=0;if(Array.isArray(t))for(let n=0;n<t.length;n++)if(Array.isArray(t[n])){const i=ra(t[n]);i>e&&(e=i)}else{const i=Math.abs(t[n].z||0);i>e&&(e=i)}else{const n=Math.abs(t.z||0);n>e&&(e=n)}return e}function oa(t,e,n,i){const r="__fn_textSize".trim();let o=t.textSize;if(ni(e.textSize))return[16,16];t[r]&&(o=t[r]);const s=[];return s[0]=si(o)?o(i,n):o,s[1]=s[0],s}function sa(t){const e=t.stops;let n=-1/0;for(let t=0;t<e.length;t++){let i=e[t][1];ri(e[t][1])&&(i=sa(e[t][1])),i>n&&(n=i)}return n}function aa(t,e,n){return[e||"normal",n||"normal","24px",t||"monospace"].join(" ")}const la=/\\{[\\w-]+(?:\\|[\\w-]+)*\\}/g;function ua(t,e){return oi(t)?t.replace(la,(function(t){if(!e)return"";if((t=t.substring(1,t.length-1)).indexOf("|")>0){const n=t.split("|");for(let t=0;t<n.length;t++){const i=e[n[t]];if(!ni(i))return i}return""}const n=e[t];return ni(n)?"":Array.isArray(n)?n.join():n})):t}var ca=Object.freeze({__proto__:null,getSDFFont:aa,resolveText:ua,resolveVarNames:function(t){return t.match(la)},resolveExpVarNames:function t(e,n){if(2!==n.length||"get"!==n[0])for(let i=0;i<n.length;i++)2===n[i].length&&"get"===n[i][0]?e.push(n[i][1]):Array.isArray(n[i])&&t(e,n[i]);else e.push(n[1])}});const ha=t=>t>=11904&&t<=12031,da=t=>t>=12032&&t<=12255,fa=t=>t>=12272&&t<=12287,pa=t=>t>=12288&&t<=12351,ma=t=>t>=12352&&t<=12447,ya=t=>t>=12448&&t<=12543,ga=t=>t>=12544&&t<=12591,ba=t=>t>=12704&&t<=12735,va=t=>t>=12736&&t<=12783,wa=t=>t>=12784&&t<=12799,xa=t=>t>=12800&&t<=13055,ka=t=>t>=13056&&t<=13311,Ma=t=>t>=13312&&t<=19903,ja=t=>t>=19968&&t<=40959,Aa=t=>t>=40960&&t<=42127,Fa=t=>t>=42128&&t<=42191,Ta=t=>t>=63744&&t<=64255,za=t=>t>=64336&&t<=65023,Sa=t=>t>=65040&&t<=65055,_a=t=>t>=65072&&t<=65103,Pa=t=>t>=65104&&t<=65135,Ia=t=>t>=65136&&t<=65279,Oa=t=>t>=65280&&t<=65519;function qa(t){return!((t=>t>=1536&&t<=1791)(t)||(t=>t>=1872&&t<=1919)(t)||(t=>t>=2208&&t<=2303)(t)||za(t)||Ia(t))}function Ca(t){return!!(746===t||747===t||!(t<4352)&&(ba(t)||ga(t)||_a(t)&&!(t>=65097&&t<=65103)||Ta(t)||ka(t)||ha(t)||va(t)||!(!pa(t)||t>=12296&&t<=12305||t>=12308&&t<=12319||12336===t)||Ma(t)||ja(t)||xa(t)||(t=>t>=12592&&t<=12687)(t)||(t=>t>=43360&&t<=43391)(t)||(t=>t>=55216&&t<=55295)(t)||(t=>t>=4352&&t<=4607)(t)||(t=>t>=44032&&t<=55215)(t)||ma(t)||fa(t)||(t=>t>=12688&&t<=12703)(t)||da(t)||wa(t)||ya(t)&&12540!==t||!(!Oa(t)||65288===t||65289===t||65293===t||t>=65306&&t<=65310||65339===t||65341===t||65343===t||t>=65371&&t<=65503||65507===t||t>=65512&&t<=65519)||!(!Pa(t)||t>=65112&&t<=65118||t>=65123&&t<=65126)||(t=>t>=5120&&t<=5759)(t)||(t=>t>=6320&&t<=6399)(t)||Sa(t)||(t=>t>=19904&&t<=19967)(t)||Aa(t)||Fa(t)))}function Na(t){return!(Ca(t)||function(t){return!!((t=>t>=128&&t<=255)(t)&&(167===t||169===t||174===t||177===t||188===t||189===t||190===t||215===t||247===t)||(t=>t>=8192&&t<=8303)(t)&&(8214===t||8224===t||8225===t||8240===t||8241===t||8251===t||8252===t||8258===t||8263===t||8264===t||8265===t||8273===t)||(t=>t>=8448&&t<=8527)(t)||(t=>t>=8528&&t<=8591)(t)||(t=>t>=8960&&t<=9215)(t)&&(t>=8960&&t<=8967||t>=8972&&t<=8991||t>=8996&&t<=9e3||9003===t||t>=9085&&t<=9114||t>=9150&&t<=9165||9167===t||t>=9169&&t<=9179||t>=9186&&t<=9215)||(t=>t>=9216&&t<=9279)(t)&&9251!==t||(t=>t>=9280&&t<=9311)(t)||(t=>t>=9312&&t<=9471)(t)||(t=>t>=9632&&t<=9727)(t)||(t=>t>=9728&&t<=9983)(t)&&!(t>=9754&&t<=9759)||(t=>t>=11008&&t<=11263)(t)&&(t>=11026&&t<=11055||t>=11088&&t<=11097||t>=11192&&t<=11243)||pa(t)||ya(t)||(t=>t>=57344&&t<=63743)(t)||_a(t)||Pa(t)||Oa(t)||8734===t||8756===t||8757===t||t>=9984&&t<=10087||t>=10102&&t<=10131||65532===t||65533===t)}(t))}function Ea(t){return t>=1424&&t<=2303||za(t)||Ia(t)}const Ra=[[9,9],[32,32],[5760,5760],[8192,8198],[8200,8202],[8287,12288],[6158,6158],[8203,8205]];function Da(t){for(const e of Ra)if(t>=e[0]&&t<=e[1])return!0;return!1}const La={"!":"︕","#":"＃",$:"＄","%":"％","&":"＆","(":"︵",")":"︶","*":"＊","+":"＋",",":"︐","-":"︲",".":"・","/":"／",":":"︓",";":"︔","<":"︿","=":"＝",">":"﹀","?":"︖","@":"＠","[":"﹇","\\\\":"＼","]":"﹈","^":"＾",ut:"︳","`":"｀","{":"︷","|":"―","}":"︸","~":"～","¢":"￠","£":"￡","¥":"￥","¦":"￤","¬":"￢","¯":"￣","–":"︲","—":"︱","‘":"﹃","’":"﹄","“":"﹁","”":"﹂","…":"︙","‧":"・","₩":"￦","、":"︑","。":"︒","〈":"︿","〉":"﹀","《":"︽","》":"︾","「":"﹁","」":"﹂","『":"﹃","』":"﹄","【":"︻","】":"︼","〔":"︹","〕":"︺","〖":"︗","〗":"︘","！":"︕","（":"︵","）":"︶","，":"︐","－":"︲","．":"・","：":"︓","；":"︔","＜":"︿","＞":"﹀","？":"︖","［":"﹇","］":"﹈","＿":"︳","｛":"︷","｜":"―","｝":"︸","｟":"︵","｠":"︶","｡":"︒","｢":"﹁","｣":"﹂"};function $a(t,e,n,i,r,o,s,a,l,u){let c=t.trim();2===u&&(c=function(t){let e="";for(let n=0;n<t.length;n++){const i=t.charCodeAt(n+1)||null,r=t.charCodeAt(n-1)||null;e+=i&&Na(i)&&!La[t[n+1]]||r&&Na(r)&&!La[t[n-1]]||!La[t[n]]?t[n]:La[t[n]]}return e}(c));const h=[],d={positionedGlyphs:h,text:c,top:a[1],bottom:a[1],left:a[0],right:a[0],writingMode:u};let f;return f=function(t,e){const n=[];let i=0;for(let r=0;r<e.length;r++){const o=e[r];n.push(t.substring(i,o)),i=o}return i<t.length&&n.push(t.substring(i,t.length)),n}(c,function(t,e,n,i){if(!n)return[];if(!t)return[];const r=[],o=function(t,e,n,i){let r=0;for(let n=0;n<t.length;n++){const o=i[t.charCodeAt(n)];o&&(r+=o.metrics.advance+e)}return r/Math.max(1,Math.ceil(r/n))}(t,e,n,i);let s=0;for(let n=0;n<t.length;n++){const l=t.charCodeAt(n),u=i[l];u&&!Ua[l]&&(s+=u.metrics.advance+e),n<t.length-1&&(Wa[l]||!((a=l)<11904)&&(ba(a)||ga(a)||_a(a)||Ta(a)||ka(a)||ha(a)||va(a)||pa(a)||Ma(a)||ja(a)||xa(a)||Oa(a)||ma(a)||fa(a)||da(a)||wa(a)||ya(a)||Sa(a)||Fa(a)||Aa(a)))&&r.push(Ga(n+1,s,o,r,Ha(l,t.charCodeAt(n+1)),!1))}var a;return function t(e){return e?t(e.priorBreak).concat(e.index):[]}(Ga(t.length,s,o,r,0,!0))}(c,s,n,e)),function(t,e,n,i,r,o,s,a,l){let u=0,c=8,h=0;const d=t.positionedGlyphs,f="right"===o?1:"left"===o?0:.5;for(let t=0;t<n.length;t++){let r=n[t];if(r=r.trim(),!r.length){c-=i;continue}const o=d.length;for(let t=0;t<r.length;t++){const n=r.charCodeAt(t),i=e[n];i&&(Ca(n)&&1!==s?(32!==n&&d.push({glyph:n,x:u,y:0,vertical:!0}),u+=l+a):(32!==n&&d.push({glyph:n,x:u,y:c,vertical:!1}),u+=i.metrics.advance+a))}d.length!==o&&(h=Math.max(u-a,h),Ba(d,e,o,d.length-1,f)),u=0,c-=i}const{horizontalAlign:p,verticalAlign:m}=Va(r);!function(t,e,n,i,r,o,s){const a=(e-n)*r,l=-(-i*s+.5)*o;if(a||l)for(let e=0;e<t.length;e++)t[e].x+=a,t[e].y+=l}(d,f,p,m,h,i,n.length);const y=n.length*i;t.top+=-m*y,t.bottom=t.top+y,t.left+=-p*h,t.right=t.left+h}(d,e,f,i,r,o,u,s,l),!!h.length&&d}const Ua={9:!0,10:!0,11:!0,12:!0,13:!0,32:!0},Wa={10:!0,32:!0,38:!0,40:!0,41:!0,43:!0,45:!0,47:!0,173:!0,183:!0,8203:!0,8208:!0,8211:!0,8231:!0};function Ja(t,e,n,i){const r=Math.pow(t-e,2);return i?t<e?r/2:2*r:r+Math.abs(n)*n}function Ha(t,e){let n=0;return 10===t&&(n-=1e4),40!==t&&65288!==t||(n+=50),41!==e&&65289!==e||(n+=50),n}function Ga(t,e,n,i,r,o){let s=null,a=Ja(e,n,r,o);for(let t=0;t<i.length;t++){const l=i[t],u=Ja(e-l.x,n,r,o)+l.badness;u<=a&&(s=l,a=u)}return{index:t,x:e,priorBreak:s,badness:a}}function Va(t){let e=.5,n=.5;switch(t){case"right":case"top-right":case"bottom-right":e=1;break;case"left":case"top-left":case"bottom-left":e=0}switch(t){case"bottom":case"bottom-right":case"bottom-left":n=1;break;case"top":case"top-right":case"top-left":n=0}return{horizontalAlign:e,verticalAlign:n}}function Ba(t,e,n,i,r){if(!r)return;const o=e[t[i].glyph];if(o){const e=(t[i].x+o.metrics.advance)*r;if(!e)return;for(let r=n;r<=i;r++)t[r].x-=e}}function Za(t){if(!function(t){for(const e of t)if(Ea(e.charCodeAt(0)))return!0;return!1}(t))return t;const e=[],n=[],i=[];let r=0,o=0,s=1,a=1;for(const l of t){const t=l.codePointAt(0);Da(t)?(i.push(l),r++):(s=Ea(t)?-1:1,a!==s?(o=r,n.length&&(a>0&&n.reverse(),e.push(...n)),i.length&&(e.splice(o,0,...i),i.length=0),a=s,n.length=0):i.length&&(n.push(...i),i.length=0),n.push(l),r++)}return i.length&&n.push(...i),n.length&&(a>0&&n.reverse(),e.push(...n)),e.reverse().join("")}const Xa=/\\{ *([\\w_]+) *\\}/g;class Ya{constructor(t,e,n,i,r){this.feature=t,this.symbolDef=e,this.symbol=n,this.options=r,this.ct=this.ht.bind(this),this.nt=i}ht(t,e){return this.feature.properties[e]||"default"}getShape(t,e){if(this.dt)return this.dt;const{textHorizontalAlignmentFn:n,textVerticalAlignmentFn:i,markerHorizontalAlignmentFn:r,markerVerticalAlignmentFn:o,textWrapWidthFn:s}=this.nt;let a;const l=this.symbol,u=this.getIconAndGlyph(),c=this.feature.properties;if(u&&u.glyph){const{font:t,text:r}=u.glyph;if(""===r)return null;const o=this.size[0]/24,h=24,d=l.textKeepUpright,f="map"===l.textRotationAlignment&&"line"===l.textPlacement&&!l.isIconText,p=e.glyphMap[t],m=Ka(n?n(null,c):l.textHorizontalAlignment,i?i(null,c):l.textVerticalAlignment),y=1.2*h,g=function(t){for(let e=0;e<t.length;e++)if(!qa(t.charAt(e).charCodeAt(0)))return!1;return!0}(r),b=g&&l.textLetterSpacing/o||0,v=[l.textDx/o||0,l.textDy/o||0],w=((s?s(null,c):l.textWrapWidth)||10*h)/o;a={},a.horizontal=$a(r,p,w,y,m,"center",b,v,h,1),g&&f&&d&&(a.vertical=$a(r,p,w,y,m,"center",b,v,h,2))}else if(u&&u.icon){if(!t.positions[u.icon.url])return null;const e=Ka(r?r(null,c):l.markerHorizontalAlignment,o?o(null,c):l.markerVerticalAlignment);a=function(t,e){const{horizontalAlign:n,verticalAlign:i}=Va(e),r=-2048*n,o=-2048*i;return{image:t,top:o,bottom:o+2048,left:r,right:r+2048}}(t.positions[u.icon.url],e),this.size||(this.size=a.image.displaySize)}return this.dt=a,a}getIconAndGlyph(){if(this.iconGlyph)return this.iconGlyph;const{markerFileFn:t,markerTypeFn:e,markerPathFn:n,markerWidthFn:i,markerHeightFn:r,markerFillFn:o,markerFillPatternFileFn:s,markerFillOpacityFn:a,markerTextFitFn:l,markerTextFitPaddingFn:u,markerLineColorFn:c,markerLineWidthFn:h,markerLineOpacityFn:d,markerLineDasharrayFn:m,markerLinePatternFileFn:y,markerPathWidthFn:g,markerPathHeightFn:b,textNameFn:v,textFaceNameFn:w,textStyleFn:x,textWeightFn:k}=this.nt,{zoom:M}=this.options,j={},A=this.symbol,F=this.feature.properties,T=t?t(null,F):A.markerFile,z=e?e(null,F):A.markerType,S=T||z||A.markerPath,_=!ni(this.symbolDef.textName);let P;if(S){P=function(t,e,n,i,r,o){if(ni(e.markerWidth)&&ni(e.markerHeight))return null;const s="__fn_markerWidth".trim(),a="__fn_markerHeight".trim();let l=e.markerWidth||0,u=e.markerHeight||0;return ri(l)&&("identity"!==l.type?l=sa(l):(l=t.markerWidth,t[s]&&(l=t[s](i,n)),ri(l)&&(l="identity"===l.type?r(i,n):sa(l)))),ri(u)&&("identity"!==u.type?u=sa(u):(u=t.markerHeight,t[a]&&(u=t[a](i,n)),ri(u)&&(u="identity"===u.type?o(i,n):sa(u)))),[l,u]}(A,this.symbolDef,F,M,i,r)||[0,0];let t=A.markerTextFit;if(l&&(t=l(M,F)),t&&A.text&&"none"!==t){const e=A.text.textSize;let n=A.text.textName;f(n)&&(n=p(n)(M,F));const i=ua(n,F);if(i){const n="__fn_textSize".trim(),r="__fn_textSize_0".trim();f(e)&&!A.text[n]&&(A.text[r]=p(e),A.text[n]=(t,e)=>{const n=A.text[r](t,e);return f(n)?p(n)(t,e):n});const o=oa(A.text,A.text,F,M);if("width"!==t&&"both"!==t||(P[0]=o[0]*i.length),"height"!==t&&"both"!==t||(P[1]=o[1]),o[0]&&o[1]){let t=A.markerTextFitPadding||[0,0,0,0];u&&(t=u(M,F)),P[0]+=t[1]+t[3],P[1]+=t[0]+t[2]}}else P[0]=P[1]=-1}}if(_&&(P=oa(A,this.symbolDef,F,M)),!P)return j;if(P[0]=Math.ceil(P[0]),P[1]=Math.ceil(P[1]),this.size=P,S&&P[0]>=0&&P[1]>=0){let t;if(z){const e={};if(e.markerType=z,"path"===z&&(e.markerPath=n?n(null,F):A.markerPath,e.markerPathWidth=g?g(null,F):A.markerPathWidth,e.markerPathHeight=b?b(null,F):A.markerPathHeight),i){const t=i(null,F);ni(t)||(e.markerWidth=t)}else A.markerWidth>=0&&(e.markerWidth=A.markerWidth);if(r){const t=r(null,F);ni(t)||(e.markerHeight=t)}else A.markerHeight>=0&&(e.markerHeight=A.markerHeight);if(o){const t=o(null,F);ni(t)||(e.markerFill=t)}else A.markerFill&&(e.markerFill=A.markerFill);if(s){const t=s(null,F);ni(t)||(e.markerFillPatternFile=t)}else A.markerFillPatternFile&&(e.markerFillPatternFile=A.markerFillPatternFile);if(a){const t=a(null,F);ni(t)||(e.markerFillOpacity=t)}else A.markerFillOpacity>=0&&(e.markerFillOpacity=A.markerFillOpacity);if(c){const t=c(null,F);ni(t)||(e.markerLineColor=t)}else A.markerLineColor&&(e.markerLineColor=A.markerLineColor);if(h){const t=h(null,F);ni(t)||(e.markerLineWidth=t)}else A.markerLineWidth>=0&&(e.markerLineWidth=A.markerLineWidth);if(d){const t=d(null,F);ni(t)||(e.markerLineOpacity=t)}else A.markerLineOpacity>=0&&(e.markerLineOpacity=A.markerLineOpacity);if(m){const t=m(null,F);ni(t)||(e.markerLineDasharray=t)}else A.markerLineDasharray&&(e.markerLineDasharray=A.markerLineDasharray);if(y){const t=y(null,F);ni(t)||(e.markerLinePatternFile=t)}else A.markerLinePatternFile&&(e.markerLinePatternFile=A.markerLinePatternFile);t="vector://"+JSON.stringify(e)}else t=T?T.replace(Xa,this.ct):A.markerPath?function(t,e,n){if(!t.markerPath)return null;let i=1;const r=function(t){const e={stroke:{stroke:t.markerLineColor,"stroke-width":t.markerLineWidth,"stroke-opacity":t.markerLineOpacity,"stroke-dasharray":null,"stroke-linecap":"butt","stroke-linejoin":"round"},fill:{fill:t.markerFill,"fill-opacity":t.markerFillOpacity}};return 0===e.stroke["stroke-width"]&&(e.stroke["stroke-opacity"]=0),e}(t);ii(t.markerOpacity)&&(i=t.markerOpacity),ii(t.opacity)&&(i*=t.opacity);const o={};if(r){for(const t in r.stroke)li(r.stroke,t)&&(ni(r.stroke[t])||(o[t]=r.stroke[t]));for(const t in r.fill)li(r.fill,t)&&(ni(r.fill[t])||(o[t]=r.fill[t]))}const s=Array.isArray(t.markerPath)?t.markerPath:[t.markerPath];let a;const l=[];for(let t=0;t<s.length;t++)a=oi(s[t])?{path:s[t]}:s[t],a=ei({},a,o),a.d=a.path,delete a.path,l.push(a);const u=[\'<svg version="1.1"\',\'xmlns="http://www.w3.org/2000/svg"\'];i<1&&u.push(\'opacity="\'+i+\'"\'),t.markerPathWidth&&t.markerPathHeight&&u.push(\'viewBox="0 0 \'+t.markerPathWidth+" "+t.markerPathHeight+\'"\'),u.push(\'preserveAspectRatio="none"\'),e&&u.push(\'width="\'+e+\'"\'),n&&u.push(\'height="\'+n+\'"\'),u.push("><defs></defs>");for(let t=0;t<l.length;t++){let e="<path ";for(const n in l[t])li(l[t],n)&&(e+=" "+n+\'="\'+l[t][n]+\'"\');e+="></path>",u.push(e)}return u.push("</svg>"),"data:image/svg+xml;base64,"+btoa(u.join(" "))}(A,P[0],P[1]):null;j.icon={url:t,size:P}}if(_){const t=v?v(this.options.zoom,F):A.textName;if(t||0===t){const e=aa(w?w(null,F):A.textFaceName,x?x(null,F):A.textStyle,k?k(null,F):A.textWeight);let n=ua(t,F);n&&n.length&&(n=Za(n),j.glyph={font:e,text:n})}}return this.iconGlyph=j,j}}function Ka(t,e){e&&"middle"!==e||(e="center"),t&&"middle"!==t||(t="center");let n="center"!==e?e:"";return n+="center"!==t?(n.length?"-":"")+t:"",n\n/*!\n     * From mapbox-gl-js\n     * MIT License\n     * https://github.com/mapbox/mapbox-gl-js\n     */}function Qa(t,e,n,i,r){const o=[];let s;for(let a=0;a<t.length;a++){const l=t[a];let u,c=!1;for(let t=0;t<l.length-1;t++){let a=l[t],h=l[t+1];a.x<e&&h.x<e||(a.x<e?(s=a,a=new Rt(e,a.y+(e-a.x)/(h.x-a.x)*(h.y-a.y)).I(),a.z=s.z+(e-s.x)/(h.x-s.x)*(h.z-s.z),c=!0):h.x<e&&(s=h,h=new Rt(e,a.y+(e-a.x)/(h.x-a.x)*(h.y-a.y)).I(),h.z=a.z+(e-a.x)/(s.x-a.x)*(s.z-a.z),c=!0),a.y<n&&h.y<n||(a.y<n?(s=a,a=new Rt(a.x+(n-a.y)/(h.y-a.y)*(h.x-a.x),n).I(),a.z=s.z+(n-s.y)/(h.y-s.y)*(h.z-s.z),c=!0):h.y<n&&(s=h,h=new Rt(a.x+(n-a.y)/(h.y-a.y)*(h.x-a.x),n).I(),h.z=a.z+(n-a.y)/(s.y-a.y)*(s.z-a.z),c=!0),a.x>=i&&h.x>=i||(a.x>=i?(s=a,a=new Rt(i,a.y+(i-a.x)/(h.x-a.x)*(h.y-a.y)).I(),a.z=s.z+(i-s.x)/(h.x-s.x)*(h.z-s.z),c=!0):h.x>=i&&(s=h,h=new Rt(i,a.y+(i-a.x)/(h.x-a.x)*(h.y-a.y)).I(),h.z=a.z+(i-a.x)/(s.x-a.x)*(s.z-a.z),c=!0),a.y>=r&&h.y>=r||(a.y>=r?(s=a,a=new Rt(a.x+(r-a.y)/(h.y-a.y)*(h.x-a.x),r).I(),a.z=s.z+(r-s.y)/(h.y-s.y)*(h.z-s.z),c=!0):h.y>=r&&(s=h,h=new Rt(a.x+(r-a.y)/(h.y-a.y)*(h.x-a.x),r).I(),h.z=a.z+(r-a.y)/(s.y-a.y)*(s.z-a.z),c=!0),u&&a.equals(u[u.length-1])||(u=[a],o.push(u)),c&&(u.clipped=!0),u.push(h)))))}}return o}class tl extends Rt{constructor(t,e,n,i){super(t,e),this.angle=n,void 0!==i&&(this.segment=i)}clone(){return new tl(this.x,this.y,this.angle,this.segment)}}\n/*!\n     * From mapbox-gl-js\n     * MIT License\n     * https://github.com/mapbox/mapbox-gl-js\n     */function el(t,e,n,i,r){if(void 0===e.segment)return!0;let o=e,s=e.segment+1,a=0;for(;a>-n/2;){if(s--,s<0)return!1;a-=t[s].dist(o),o=t[s]}a+=t[s].dist(t[s+1]),s++;const l=[];let u=0;for(;a<n/2;){const e=t[s],n=t[s+1];if(!n)return!1;let o=t[s-1].angleTo(e)-e.angleTo(n);for(o=Math.abs((o+3*Math.PI)%(2*Math.PI)-Math.PI),l.push({distance:a,angleDelta:o}),u+=o;a-l[0].distance>i;)u-=l.shift().angleDelta;if(u>r)return!1;s++,a+=e.dist(n)}return!0}function nl(t,e,n,i,r,o,s,a,l,u,c){const h=function(t,e,n){return t?.6*e*n:0}(i,o,s),d=function(t,e){return Math.max(t?t.right-t.left:0,e?e.right-e.left:0)}(i,r),f=0===t[0].x||t[0].x===l||0===t[0].y||t[0].y===l;return e-d*s<e/4&&(e=d*s+e/4),function t(e,n,i,r,o,s,a,l,u,c,h){const d=s/2,f=function(t){let e=0;for(let n=0;n<t.length-1;n++)e+=t[n].dist(t[n+1]);return e}(e);let p=0,m=n-i,y=[];for(let t=0;t<e.length-1;t++){const n=e[t],a=e[t+1],l=n.dist(a),g=a.angleTo(n);for(;m+i<p+l;){m+=i;const b=(m-p)/l,v=il(n.x,a.x,b),w=il(n.y,a.y,b),x=il(n.z||0,a.z||0,b);if(v>=0&&v<u&&w>=0&&w<u&&m-d>=0&&m+d<=f){const i=new tl(v,w,g,t);i.z=x,c&&(i.axis=[n.y-w,v-n.x],i.angleR=x===(n.z||0)?0:Math.atan(.9*(x-(n.z||0))*h/n.dist(i))),i.line=e,i.I(),r&&!el(e,i,s,r,o)||y.push(i)}}p+=l}return l||y.length||a||(y=t(e,p/2,i,r,o,s,a,!0,u,c,h)),y}(t,f?e/2*a%e:(d/2+2*o)*s*a%e,e,h,n,d*s,f,!1,l,u,c)}function il(t,e,n){return t*(1-n)+e*n}function rl(t,e){const n=t.length;if(n<=1)return[t];const i=[];let r,o;for(let e=0;e<n;e++){const n=bi(t[e]);0!==n&&(t[e].area=Math.abs(n),void 0===o&&(o=n<0),o===n<0?(r&&i.push(r),r=[t[e]]):r.push(t[e]))}if(r&&i.push(r),e>1)for(let t=0;t<i.length;t++)i[t].length<=e||(Je(i[t],e,1,i[t].length-1,ol),i[t]=i[t].slice(0,e));return i}function ol(t,e){return e.area-t.area}function sl(t,e,n){const i=e.distSqr(n);if(0===i)return t.distSqr(e);const r=((t.x-e.x)*(n.x-e.x)+(t.y-e.y)*(n.y-e.y))/i;return t.distSqr(r<0?e:r>1?n:n.sub(e).j(r).m(e))}function al(t,e=1,n=!1){let i=1/0,r=1/0,o=-1/0,s=-1/0;const a=t[0];for(let t=0;t<a.length;t++){const e=a[t];(!t||e.x<i)&&(i=e.x),(!t||e.y<r)&&(r=e.y),(!t||e.x>o)&&(o=e.x),(!t||e.y>s)&&(s=e.y)}const l=Math.min(o-i,s-r);let u=l/2;const c=new Be(null,ll);if(0===l)return new Rt(i,r);for(let e=i;e<o;e+=l)for(let n=r;n<s;n+=l)c.push(new ul(e+u,n+u,u,t));let h=function(t){let e=0,n=0,i=0;const r=t[0];for(let t=0,o=r.length,s=o-1;t<o;s=t++){const o=r[t],a=r[s],l=o.x*a.y-a.x*o.y;n+=(o.x+a.x)*l,i+=(o.y+a.y)*l,e+=3*l}return new ul(n/e,i/e,0,t)}(t),d=c.length;for(;c.length;){const i=c.pop();(i.d>h.d||!h.d)&&(h=i,n&&console.log("found best %d after %d probes",Math.round(1e4*i.d)/1e4,d)),i.max-h.d<=e||(u=i.h/2,c.push(new ul(i.p.x-u,i.p.y-u,u,t)),c.push(new ul(i.p.x+u,i.p.y-u,u,t)),c.push(new ul(i.p.x-u,i.p.y+u,u,t)),c.push(new ul(i.p.x+u,i.p.y+u,u,t)),d+=4)}return n&&(console.log("num probes: "+d),console.log("best distance: "+h.d)),h.p}function ll(t,e){return e.max-t.max}function ul(t,e,n,i){this.p=new Rt(t,e),this.h=n,this.d=function(t,e){let n=!1,i=1/0;for(let r=0;r<e.length;r++){const o=e[r];for(let e=0,r=o.length,s=r-1;e<r;s=e++){const r=o[e],a=o[s];r.y>t.y!=a.y>t.y&&t.x<(a.x-r.x)*(t.y-r.y)/(a.y-r.y)+r.x&&(n=!n),i=Math.min(i,sl(t,r,a))}}return(n?1:-1)*Math.sqrt(i)}(this.p,i),this.max=this.d+this.h*Math.SQRT2}const cl=45*Math.PI/100;function hl(t,e,n,i,r,o,s,a,l){const{feature:u,size:c,symbol:h}=t,d=c?24:0,f=i*(c?c[0]/d:1);if("line"===o){const t=[];let i=u.geometry;r&&(i=Qa(u.geometry,0,0,r,r));for(let o=0;o<i.length;o++){const u=nl(i[o],s,cl,h.isIconText?null:n&&n.vertical||n&&n.horizontal||n,null,d,h.isIconText?1:f,1,r||1/0,a,l);if(h.textPlacement&&!h.isIconText)for(let t=0;t<u.length;t++)u[t].startIndex=e.length/3;if(t.push.apply(t,u),h.textPlacement&&!h.isIconText)for(let t=0;t<i[o].length;t++)e.push(i[o][t].x,i[o][t].y,i[o][t].z||0)}return t}return dl(u,o,r)}function dl(t,e,n){const i=[];if(3===t.type){const r=rl(t.geometry,0);for(let t=0;t<r.length;t++){const o=r[t];if("vertex"===e)for(let t=0;t<o.length;t++){const e=o[t];for(let t=0;t<e.length;t++)ki(e[t],n)||i.push(e[t])}else if("vertex-first"===e){const t=o[0];t&&t[0]&&!ki(t[0],n)&&i.push(t[0])}else if("vertex-last"===e){const t=o[0];t&&t[t.length-1]&&!ki(t[t.length-1],n)&&i.push(t[t.length-1])}else{const t=al(o,16);ki(t,n)||i.push(t)}}}else if(2===t.type)for(let r=0;r<t.geometry.length;r++){const o=t.geometry[r];if("vertex"===e)for(let t=0;t<o.length;t++)ki(o[t],n)||i.push(o[t]);else"vertex-last"===e?o&&o[o.length-1]&&!ki(o[o.length-1],n)&&i.push(o[o.length-1]):ki(o[0],n)||i.push(o[0])}else if(1===t.type)for(let e=0;e<t.geometry.length;e++){const r=t.geometry[e];for(let t=0;t<r.length;t++){const e=r[t];ki(e,n)||i.push(e)}}return i}function fl(t,e){const n={},i={},r=[];let o=0;function s(e){r.push(t[e]),o++}function a(t,e,n){const o=i[t];return delete i[t],i[e]=o,r[o].geometry[0].pop(),r[o].geometry[0]=r[o].geometry[0].concat(n[0]),o}function l(t,e,i){const o=n[e];return delete n[e],n[t]=o,r[o].geometry[0].shift(),r[o].geometry[0]=i[0].concat(r[o].geometry[0]),o}function u(t,e,n){const i=n?e[0][e[0].length-1]:e[0][0];return`${t}:${i.x}:${i.y}`}for(let c=0;c<t.length;c++){const h=t[c],d=h.geometry;if(!d)continue;const f=h.properties[e]?h.properties[e].toString():null;if(!f){s(c);continue}const p=u(f,d),m=u(f,d,!0);if(p in i&&m in n&&i[p]!==n[m]){const t=l(p,m,d),e=a(p,m,r[t].geometry);delete n[p],delete i[m],i[u(f,r[e].geometry,!0)]=e,r[t].geometry=null}else p in i?a(p,m,d):m in n?l(p,m,d):(s(c),n[p]=o-1,i[m]=o-1)}return r.filter(t=>t.geometry)}class pl extends na{static needMerge(t,e,n){if(!t)return!1;let i="line"===t.textPlacement||"line"===t.markerPlacement;return i||(e.textPlacementFn&&(i="line"===e.textPlacementFn(n)),e.markerPlacementFn&&(i="line"===e.markerPlacementFn(n))),t.mergeOnProperty&&i}static mergeLineFeatures(t,e,n,i){const r="__index".trim();let o=e.textPlacement,s=e.markerPlacement;n.textPlacementFn&&(o=n.textPlacementFn(i)),n.markerPlacementFn&&(s=n.markerPlacementFn(i));const a=function(t,e,n,i,r){const o="__index".trim(),s=na.genFnTypes(e),{mergeOnPropertyFn:a}=s;if(!e.mergeOnProperty||"line"!==i&&"line"!==n)return[];if(!(Mi(l=e.mergeOnProperty)||"string"!=typeof l&&(null===l.constructor||l.constructor!==String)||"line"!==i&&"line"!==n))return[{features:t,property:e.mergeOnProperty}];var l;const u=[],c={},h=[];for(let s=0;s<t.length;s++){t[s][o]=s;const l=t[s].properties=t[s].properties||{};l.$layer=t[s].layer,l.$type=t[s].type;let d=n;"line"!==d&&(d=i);const f=a?a(r,l):e.mergeOnProperty;"line"!==d||Mi(f)?h.push(t[s]):(void 0===c[f]&&(c[f]=u.length,u.push({features:[],property:f})),u[c[f]].features.push(t[s]))}return h.length&&u.push({features:h}),u}(t,e,s,o,i);if(a.length){const e=[];for(let n=0;n<a.length;n++)e.push(a[n].property?fl(a[n].features,a[n].property):t);if(1===e.length)return e[0];{let t=[];for(let n=0;n<e.length;n++)t=t.concat(e[n]);return t.sort((t,e)=>t[r]-e[r]),t}}}static splitPointSymbol(t,e=0){const n=[];if(Array.isArray(t)){const e=t;for(let t=0;t<e.length;t++)e[t]&&n.push(...pl.splitPointSymbol(e[t],t));return n}let i=null,r=null;for(const e in t)0===e.indexOf("marker")?(i=i||{},i[e]=t[e]):0===e.indexOf("text")&&(r=r||{},r[e]=t[e]);return i&&(i.isIconText=!0,t.mergeOnProperty&&(i.mergeOnProperty=t.mergeOnProperty),n.push(i)),r&&(i&&(r.textPlacement=i.markerPlacement,r.textSpacing=i.markerSpacing,r.isIconText=!0),t.mergeOnProperty&&(r.mergeOnProperty=t.mergeOnProperty),n.push(r)),void 0!==t.visible&&(i&&(i.visible=t.visible),r&&(r.visible=t.visible)),i&&(i.markerTextFit&&r&&(i.text={},i.text.textName=r.textName,i.text.textSize=r.textSize),i.index={index:e,type:0}),r&&(r.index={index:e,type:1}),n}static isAtlasLoaded(t,e){const{icon:n,glyph:i}=t,{iconAtlas:r,glyphAtlas:o}=e;if(n&&(!r||!r.positions[n.url]))return!1;if(i){if(!o||!o.positions[i.font])return!1;const t=o.positions[i.font],{text:e}=i;for(let n=0;n<e.length;n++)if(!t[e.charCodeAt(n)])return!1}return!0}constructor(t,e,n){super(t,e,n),this.ft=e.textPlacement,this.nt.textPlacementFn&&(this.ft=this.nt.textPlacementFn(this.options.zoom))}createStyledVector(t,e,n,i,r,o){const s=new Ya(t,this.symbolDef,e,n,i),a=s.getIconAndGlyph();if(a.icon&&!this.options.atlas){const{url:t,size:e}=a.icon;r[t]||(r[t]=a.icon.size),r[t][0]<e[0]&&(r[t][0]=e[0]),r[t][1]<e[1]&&(r[t][1]=e[1])}if(a.glyph&&!this.options.atlas){const{font:t,text:e}=a.glyph,n=o[t]=o[t]||{};for(let t=0;t<e.length;t++)n[e.charCodeAt(t)]=1;"line"===this.ft&&(o.options={isCharsCompact:!1})}return this.options.allowEmptyPack||a.icon||a.glyph?s:null}getFormat(t){const e=void 0!==t.textName,n=e?this.getPackSDFFormat(t):this.getPackMarkerFormat();e?n.push(...this.pt()):n.push(...this.yt());const{markerOpacityFn:i,textOpacityFn:r,markerPitchAlignmentFn:o,textPitchAlignmentFn:s,markerRotationAlignmentFn:a,textRotationAlignmentFn:l,markerRotationFn:u,textRotationFn:c,markerAllowOverlapFn:h,textAllowOverlapFn:d,markerIgnorePlacementFn:f,textIgnorePlacementFn:p}=this.nt;return(i||r)&&n.push({type:Uint8Array,width:1,name:"aColorOpacity"}),(o||s)&&n.push({type:Uint8Array,width:1,name:"aPitchAlign"}),(a||l)&&n.push({type:Uint8Array,width:1,name:"aRotationAlign"}),(u||c)&&n.push({type:Uint16Array,width:1,name:"aRotation"}),(h||d||f||p)&&n.push({type:Uint8Array,width:1,name:"aOverlap"}),n}gt(){return this.hasMapPitchAlign}pt(){const{textFillFn:t,textSizeFn:e,textHaloFillFn:n,textHaloRadiusFn:i,textHaloOpacityFn:r,textDxFn:o,textDyFn:s}=this.nt,a=[];return t&&a.push({type:Uint8Array,width:4,name:"aTextFill"}),e&&a.push({type:Uint8Array,width:1,name:"aTextSize"}),n&&a.push({type:Uint8Array,width:4,name:"aTextHaloFill"}),i&&a.push({type:Uint8Array,width:1,name:"aTextHaloRadius"}),r&&a.push({type:Uint8Array,width:1,name:"aTextHaloOpacity"}),o&&a.push({type:Int8Array,width:1,name:"aTextDx"}),s&&a.push({type:Int8Array,width:1,name:"aTextDy"}),a}yt(){const{markerWidthFn:t,markerHeightFn:e,markerDxFn:n,markerDyFn:i}=this.nt,r=[];return t&&r.push({type:this.options.markerWidthType||Uint8Array,width:1,name:"aMarkerWidth"}),e&&r.push({type:this.options.markerHeightType||Uint8Array,width:1,name:"aMarkerHeight"}),n&&r.push({type:Int8Array,width:1,name:"aMarkerDx"}),i&&r.push({type:Int8Array,width:1,name:"aMarkerDy"}),r}createDataPack(){if(!this.iconAtlas&&!this.glyphAtlas){if(!this.options.allowEmptyPack)return null;this.empty=!0}this.lineVertex=[];const t=super.createDataPack.apply(this,arguments);return t?(t.lineVertex=new Int16Array(this.lineVertex),t.buffers.push(t.lineVertex.buffer),t):null}placeVector(t,e){const n=t.getShape(this.iconAtlas,this.glyphAtlas);if(!this.options.allowEmptyPack&&!n)return;const i=this.bt(t,n,e);if(0===i.length)return;const r=this.data,o=this.needAltitudeAttribute()?2:3;let s=this.data.aPosition.length/o;const a=t.symbol,l=t.feature.properties,u="line"===this.ft&&!a.isIconText,c=void 0!==a.textName,h=c&&u&&function(t){let e=0;for(let n=0;n<t.length;n++)if(Ca(t.charAt(n).charCodeAt(0)))e=0;else if(e++,e>=1)return!1;return!0}(t.getIconAndGlyph().glyph.text)?1:0,{textFillFn:d,textSizeFn:p,textHaloFillFn:m,textHaloRadiusFn:y,textHaloOpacityFn:g,textDxFn:b,textDyFn:v,textPitchAlignmentFn:w,textRotationAlignmentFn:x,textRotationFn:k,textAllowOverlapFn:M,textIgnorePlacementFn:j,textOpacityFn:A,markerWidthFn:F,markerHeightFn:T,markerDxFn:z,markerDyFn:S,markerPitchAlignmentFn:_,markerRotationAlignmentFn:P,markerRotationFn:I,markerAllowOverlapFn:O,markerIgnorePlacementFn:q,markerOpacityFn:C}=this.nt;let N,E,R,D,L,$,U,W,J,H,G,V,B,Z,X,Y,K;if(c){const e=t.getIconAndGlyph().glyph.font;N=function(t,e,n){const i=t.positionedGlyphs,r=[];for(let o=0;o<i.length;o++){const s=i[o],a=n[s.glyph];if(!a)continue;const l=a.rect;if(!l)continue;const u=4,c=a.metrics.advance/2,h=a.metrics.height/2,d=e?[s.x+c,0]:[0,0],f=e?[0,s.y-h]:[s.x+c,s.y-h],p=a.metrics.left-u-c+f[0],m=a.metrics.top-u+f[1],y=p+l.w,g=m+l.h,b=new Rt(p,m),v=new Rt(y,m),w=new Rt(p,g),x=new Rt(y,g);if(e&&s.vertical){const t=new Rt(-c,c),e=-Math.PI/2,n=new Rt(5,0);b.T(e,t).m(n),v.T(e,t).m(n),w.T(e,t).m(n),x.T(e,t).m(n)}r.push({tl:b,tr:v,bl:w,br:x,tex:l,writingMode:t.writingMode,glyphOffset:d})}return r}(n.horizontal,u,this.glyphAtlas.positions[e]),d&&(E=d(null,l),E=f(E)?[0,0,0,0]:pi([],E)),p&&(R=p(this.options.zoom,l),Mi(R)&&(R=14)),m&&(D=m(null,l),D=pi([],D)),y&&(L=y(null,l)),g&&($=255*g(null,l)),b&&(U=b(null,l)||0),v&&(W=v(null,l)||0),w&&(B=+("map"===w(null,l))),x&&(Z=+("map"===x(null,l))),k&&(X=ji(k(null,l),0,360)*Math.PI/180)}else N=n?function(t){const e=t.image,n=t.top-1/e.pixelRatio,i=t.left-1/e.pixelRatio,r=t.bottom+1/e.pixelRatio,o=t.right+1/e.pixelRatio;let s,a,l,u;return s=new Rt(i,n),a=new Rt(o,n),l=new Rt(o,r),u=new Rt(i,r),[{tl:s,tr:a,bl:u,br:l,tex:{x:e.tl[0],y:e.tl[1],w:e.displaySize[0],h:e.displaySize[1]},writingMode:void 0,glyphOffset:[0,0]}]}(n):function(){const t=new Rt(0,0),e=new Rt(0,0),n=new Rt(0,0);return[{tl:t,tr:e,bl:new Rt(0,0),br:n,tex:{x:0,y:0,w:0,h:0},writingMode:void 0,glyphOffset:[0,0]}]}(),F&&(J=F(null,l)),T&&(H=T(null,l)),z&&(G=z(null,l)),S&&(V=S(null,l)),_&&(B=+("map"===_(null,l))),P&&(Z=+("map"===P(null,l))),I&&(X=ji(I(null,l),0,360)*Math.PI/180);const Q=O||M;Q&&(Y=Q(null,l)||0);const tt=q||j;let et;tt&&(K=tt(null,l)||0);const nt=A||C;nt&&(et=255*nt(this.options.zoom,l));const it=this.options.EXTENT,rt=N.length,{altitudeScale:ot,altitudeProperty:st,defaultAltitude:at}=this.options,{altitude:lt}=xi(t.feature,ot,st,at);for(let t=0;t<i.length;t++){const e=i[t],n=e.z||lt||0;if(it!==1/0&&ki(e,it))continue;const o=e.x,a=e.y,l=N.length;for(let t=0;t<l;t++){const i=N[t],{tl:l,tr:d,bl:f,br:p,tex:m}=i;this.vt(r,o,a,n,10*l.x,10*l.y,m.x,m.y+m.h),c&&this.wt(r,u,rt,i.glyphOffset,e,h,e.axis,e.angleR),this.xt(r,E,R,D,L,$,U,W,J,H,G,V,et,B,Z,X,Y,K),this.vt(r,o,a,n,10*d.x,10*d.y,m.x+m.w,m.y+m.h),c&&this.wt(r,u,rt,i.glyphOffset,e,h,e.axis,e.angleR),this.xt(r,E,R,D,L,$,U,W,J,H,G,V,et,B,Z,X,Y,K),this.vt(r,o,a,n,10*f.x,10*f.y,m.x,m.y),c&&this.wt(r,u,rt,i.glyphOffset,e,h,e.axis,e.angleR),this.xt(r,E,R,D,L,$,U,W,J,H,G,V,et,B,Z,X,Y,K),this.vt(r,o,a,n,10*p.x,10*p.y,m.x+m.w,m.y),c&&this.wt(r,u,rt,i.glyphOffset,e,h,e.axis,e.angleR),this.xt(r,E,R,D,L,$,U,W,J,H,G,V,et,B,Z,X,Y,K),this.addElements(s,s+1,s+2),this.addElements(s+1,s+2,s+3),s+=4;const y=Math.max(Math.abs(o),Math.abs(a),Math.abs(n));y>this.maxPos&&(this.maxPos=y)}}}vt(t,e,n,i,r,o,s,a){this.fillPosition(t,e,n,i),t.aShape.push(r,o),t.aTexCoord.push(s,a)}wt(t,e,n,i,r,o,s,a){if(t.aCount.push(n),e){t.aGlyphOffset.push(i[0],i[1]),this.gt()&&t.aPitchRotation.push(s[0],s[1],a);const e=r.startIndex;t.aSegment.push(r.segment+e,e,r.line.length),t.aVertical.push(o)}}xt(t,e,n,i,r,o,s,a,l,u,c,h,d,f,p,m,y,g){const{textFillFn:b,textSizeFn:v,textHaloFillFn:w,textHaloRadiusFn:x,textHaloOpacityFn:k,textDxFn:M,textDyFn:j,textPitchAlignmentFn:A,textRotationAlignmentFn:F,textRotationFn:T,textAllowOverlapFn:z,textIgnorePlacementFn:S,textOpacityFn:_,markerWidthFn:P,markerHeightFn:I,markerDxFn:O,markerDyFn:q,markerPitchAlignmentFn:C,markerRotationAlignmentFn:N,markerRotationFn:E,markerAllowOverlapFn:R,markerIgnorePlacementFn:D,markerOpacityFn:L}=this.nt;b&&t.aTextFill.push(...e),v&&t.aTextSize.push(n),w&&t.aTextHaloFill.push(...i),x&&t.aTextHaloRadius.push(r),k&&t.aTextHaloOpacity.push(o),M&&t.aTextDx.push(s),j&&t.aTextDy.push(a),P&&t.aMarkerWidth.push(l),I&&t.aMarkerHeight.push(u),O&&t.aMarkerDx.push(c),q&&t.aMarkerDy.push(h),(L||_)&&t.aColorOpacity.push(d),(A||C)&&t.aPitchAlign.push(f),(N||F)&&t.aRotationAlign.push(p),(E||T)&&t.aRotation.push(9362*m);const $=R||z,U=D||S;($||U)&&t.aOverlap.push(($?8:0)+4*y+((U?2:0)+g)),r>0&&(this.properties.hasHalo=1)}bt(t,e,n){const{feature:i,symbol:r}=t,o=this.kt(t,r),s=i.properties,{markerSpacingFn:a,textSpacingFn:l}=this.nt,u=((a?a(null,s):r.markerSpacing)||(l?l(null,s):r.textSpacing)||250)*n,c=this.options.altitudeToTileScale;return hl(t,this.lineVertex,e,n,this.options.EXTENT,o,u,this.gt(),c)}kt(t,e){let n;return n=this.nt.markerPlacementFn?this.nt.markerPlacementFn(this.options.zoom,t.feature.properties):e.markerPlacement||this.ft,this.st||!e.markerPlacement&&!e.isIconText||(this.st=n),!this.ft||e.isIconText||this.lt||(this.lt=n),n}getPackSDFFormat(t){if("line"!==this.ft||t.isIconText)return[...this.getPositionFormat(),{type:Int16Array,width:2,name:"aShape"},{type:Uint16Array,width:2,name:"aTexCoord"},{type:Uint8Array,width:1,name:"aCount"}];{const t=[...this.getPositionFormat(),{type:Int16Array,width:2,name:"aShape"},{type:Uint16Array,width:2,name:"aTexCoord"},{type:Uint8Array,width:1,name:"aCount"},{type:Int16Array,width:2,name:"aGlyphOffset"},{type:Uint16Array,width:3,name:"aSegment"},{type:Uint8Array,width:1,name:"aVertical"}];return this.gt()&&t.push({type:Float32Array,width:3,name:"aPitchRotation"}),t}}getPackMarkerFormat(){return[...this.getPositionFormat(),{type:Int16Array,width:2,name:"aShape"},{type:Uint16Array,width:2,name:"aTexCoord"}]}}class ml{constructor(t){this.x=t.x,this.y=t.y,this.z=t.z||0}clone(){return new ml(this)}_(){return this.A(this.mag()),this}A(t){return this.x/=t,this.y/=t,this.z/=t,this}P(){var t=this.y;return this.y=this.x,this.x=-t,this}mag(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}add(t){return this.clone().m(t)}sub(t){return this.clone().v(t)}m(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}v(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}mult(t){return this.clone().j(t)}j(t){return this.x*=t,this.y*=t,this.z*=t,this}dist(t){return Math.sqrt(this.distSqr(t))}distSqr(t){var e=t.x-this.x,n=t.y-this.y,i=t.z-this.z;return e*e+n*n+i*i}I(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}angleTo(t){return Math.atan2(this.y-t.y,this.x-t.x)}}const yl=Math.cos(Math.PI/180*37.5),gl=Math.pow(2,16)/1,bl=new Rt,vl=new Rt,wl=new Rt;class xl extends na{constructor(t,e,n){super(t,e,n);let i=!1;const{lineDasharrayFn:r,lineDashColorFn:o}=this.nt;this.hasGradient=this.symbol.lineGradientProperty,r&&(i=function(t,e,n){for(let i=0;i<t.length;i++)if(n(e,t[i].properties))return!0;return!1}(t,this.options.zoom,r),i&&(this.dasharrayFn=r)),this.hasDasharray=jl(this.symbol.lineDasharray)||i,this.hasDasharray&&o&&(this.dashColorFn=o)}createStyledVector(t,e,n,i,r){const o=new Fi(t,e,n,i),s=o.getLineResource();return!this.options.atlas&&s&&(r[s]=[0,0]),o}getFormat(){const{lineWidthFn:t,lineStrokeWidthFn:e,lineStrokeColorFn:n,lineColorFn:i,lineOpacityFn:r,lineDxFn:o,lineDyFn:s,linePatternAnimSpeedFn:a,linePatternGapFn:l}=this.nt,u=[...this.getPositionFormat()];if(u.push(this.iconAtlas||this.hasDasharray?{type:Int8Array,width:3,name:"aExtrude"}:{type:Int8Array,width:2,name:"aExtrude"}),u.push({type:this.options.positionType||Uint16Array,width:1,name:"aLinesofar"}),t&&u.push({type:Uint8Array,width:1,name:"aLineWidth"}),e&&u.push({type:Uint8Array,width:1,name:"aLineStrokeWidth"}),i&&u.push({type:Uint8Array,width:4,name:"aColor"}),n&&u.push({type:Uint8Array,width:4,name:"aStrokeColor"}),r&&u.push({type:Uint8Array,width:1,name:"aOpacity"}),this.dasharrayFn&&u.push({type:Uint8Array,width:4,name:"aDasharray"}),this.dashColorFn&&u.push({type:Uint8Array,width:4,name:"aDashColor"}),this.iconAtlas){const t=this.getIconAtlasMaxValue();u.push({type:t>255?Uint16Array:Uint8Array,width:4,name:"aTexInfo"})}return(o||s)&&u.push({type:Int8Array,width:2,name:"aLineDxDy"}),(a||l)&&u.push({type:Int8Array,width:2,name:"aLinePattern"}),u}placeVector(t){const{lineJoinFn:e,lineCapFn:n,lineWidthFn:i,lineHeightFn:r,lineStrokeWidthFn:o,lineStrokeColorFn:s,lineColorFn:a,lineOpacityFn:l,lineDxFn:u,lineDyFn:c,linePatternAnimSpeedFn:h,linePatternGapFn:d}=this.nt,p=this.symbol,m=t.feature,y=m.properties;let g=p.lineJoin||"miter",b=p.lineCap||"butt";if(e&&(g=e(this.options.zoom,y)||"miter"),n&&(b=n(this.options.zoom,y)||"butt"),i){let t=i(this.options.zoom,y);ni(t)&&(t=4),this.feaLineWidth=+t}else this.feaLineWidth=+p.lineWidth;if(r){let t=r(this.options.zoom,y);ni(t)&&(t=this.feaLineWidth),this.feaLineHeight=+t}else this.feaLineHeight=+p.lineHeight||this.feaLineWidth;if(o){let t=o(this.options.zoom,y);ni(t)&&(t=0),this.feaLineStrokeWidth=t}else this.feaLineStrokeWidth=p.lineStrokeWidth||0;if(a&&(this.feaColor=a(this.options.zoom,y)||[255,255,255,255],this.feaColor=f(this.feaColor)?[0,0,0,0]:pi([],this.feaColor)),s&&(this.feaStrokeColor=s(this.options.zoom,y)||[0,0,0,255],this.feaStrokeColor=f(this.feaStrokeColor)?[0,0,0,0]:pi([],this.feaStrokeColor)),l){let t=l(this.options.zoom,y);ni(t)&&(t=1),this.feaOpacity=255*t}if(this.dasharrayFn){let t=this.dasharrayFn(this.options.zoom,y)||[0,0,0,0];if(t.length<4){const e=t;1===t.length?t=[e[0],e[0],e[0],e[0]]:2===t.length?t=[e[0],e[1],e[0],e[1]]:3===t.length&&(t=[e[0],e[1],e[2],e[2]])}this.feaDash=t}if(this.dashColorFn){let t=(this.dashColorFn?this.dashColorFn(this.options.zoom,y):this.symbol.lineDashColor)||[0,0,0,0];t=pi([],t),this.feaDashColor=t}if(this.iconAtlas){const e=t.getLineResource(),n=this.iconAtlas.glyphMap[e];if(this.feaTexInfo=this.feaTexInfo||[0,0,0,0],n){const{tl:t,displaySize:n}=this.iconAtlas.positions[e];this.feaTexInfo[0]=t[0]+1,this.feaTexInfo[1]=t[1]+1,this.feaTexInfo[2]=n[0]-3,this.feaTexInfo[3]=n[1]-3}else this.feaTexInfo[0]=this.feaTexInfo[1]=this.feaTexInfo[2]=this.feaTexInfo[3]=0}if(u){let t=u(this.options.zoom,y);ni(t)&&(t=0),this.feaLineDx=t}if(c){let t=c(this.options.zoom,y);ni(t)&&(t=0),this.feaLineDy=t}if(h){let t=h(this.options.zoom,y);ni(t)&&(t=0),0!==t&&(this.properties.hasPatternAnim=1),this.feaPatternAnimSpeed=t}if(d){let t=d(this.options.zoom,y);ni(t)&&(t=0),this.feaLinePatternGap=t}const v=this.options.EXTENT;let w=m.geometry;if(v!==1/0){w=[];const t=[];for(let e=0;e<m.geometry.length;e++){t[0]=m.geometry[e];const n=Qa(t,-1,-1,v+1,v+1);if(3===m.type&&n.length>1){const t=n[0],e=n[n.length-1];zl(t[0],e[e.length-1])&&(n[0]=e.concat(t.slice(1)),n.length=n.length-1)}w.push(...n)}}const x=this.needAltitudeAttribute()?2:3;for(let t=0;t<w.length;t++)this.offset=this.data.aPosition.length/x,this.Mt(w[t],m,g,b,2,1.05)}jt(){return this.iconAtlas&&this.feaTexInfo[2]&&this.feaTexInfo[3]}Mt(t,e,n,i,r,o){const s=this.jt()||jl(this.feaDash)||jl(this.symbol.lineDasharray),a=this.options.isTube;a&&(t=t.map(t=>new ml(t))),this.overscaling=1;const l=this.options.EXTENT;if(this.distance=0,this.scaledDistance=0,this.totalDistance=0,this.prevVertex=null,this.symbol.lineGradientProperty&&e.properties&&ii(e.properties.mapbox_clip_start)&&ii(e.properties.mapbox_clip_end)){this.clipStart=+e.properties.mapbox_clip_start,this.clipEnd=+e.properties.mapbox_clip_end;for(let e=0;e<t.length-1;e++)this.totalDistance+=t[e].dist(t[e+1]);this.updateScaledDistance()}const u=3===e.type&&!t.clipped;let c=t.length;for(;c>=2&&zl(t[c-1],t[c-2]);)c--;let h=0;for(;h<c-1&&zl(t[h],t[h+1]);)h++;if(c<(u?3:2))return;"bevel"===n&&(r=1.05);const d=this.overscaling<=16?15*l/(512*this.overscaling):0,f={vertexLength:0,primitiveLength:0,currentNormal:null};let p,m,y,g,b;this.e1=this.e2=-1,u&&(p=t[c-2],b=t[h].sub(p)._().P());for(let e=h;e<c;e++){if(y=e===c-1?u?t[h+1]:void 0:t[e+1],y&&zl(t[e],y))continue;b&&(g=b),p&&(m=p),p=t[e],b=y?y.sub(p)._().P():g,f.dir=m?p.sub(m)._():y.sub(p)._(),g=g||b,f.currentNormal=g;let l=g.add(b);0===l.x&&0===l.y||l._();const v=g.x*b.x+g.y*b.y,w=l.x*b.x+l.y*b.y,x=0!==w?1/w:1/0,k=2*Math.sqrt(2-2*w),M=w<yl&&m&&y,j=g.x*b.y-g.y*b.x>0;if(!a&&M&&e>h){const t=p.dist(m);if(t>2*d){const e=p.sub(p.sub(m).j(d/t).I());e.z=p.z,this.updateDistance(m,e),this.addCurrentVertex(e,g,0,0,f),m=e}}const A=m&&y;f.middleVertex=A;let F=A?n:u?"butt":i;if(A&&"round"===F&&(x<o?F="miter":x<=2&&(F="fakeround")),"miter"===F&&x>r&&!a&&(F="bevel"),"bevel"===F&&(x>2&&(F="flipbevel"),x<r&&(F="miter")),m&&this.updateDistance(m,p),"miter"===F)a?(this.addCurrentVertex(p,g,0,0,f),f.dir=y.sub(p)._(),this.addCurrentVertex(p,b,0,0,f)):(l.j(x),this.addCurrentVertex(p,l,0,0,f),s&&(f.currentNormal=b,this.addCurrentVertex(p,l,0,0,f)));else if("flipbevel"===F){if(x>100)l=b.mult(-1);else{const t=x*g.add(b).mag()/g.sub(b).mag();l.P().j(t*(j?-1:1))}this.addCurrentVertex(p,l,0,0,f),this.addCurrentVertex(p,l.mult(-1),0,0,f)}else if("bevel"===F||"fakeround"===F){const t=-Math.sqrt(x*x-1),e=j?t:0,n=j?0:t;if(m&&this.addCurrentVertex(p,g,e,n,f),"fakeround"===F){const t=Math.round(180*k/Math.PI/20);for(let e=1;e<t;e++){let n=e/t;if(.5!==n){const t=n-.5;n+=n*t*(n-1)*((1.0904+v*(v*(3.55645-1.43519*v)-3.2452))*t*t+(.848013+v*(.215638*v-1.06021)))}const i=b.sub(g).j(n).m(g)._().j(j?-1:1);this.addHalfVertex(p,i.x,i.y,!1,j,0,f)}}y&&(f.currentNormal=b,this.addCurrentVertex(p,b,-e,-n,f))}else if("butt"===F)this.addCurrentVertex(p,l,0,0,f);else if("square"===F){const t=m?1:-1;this.addCurrentVertex(p,l,t,t,f)}else"round"===F&&(m&&(this.addCurrentVertex(p,g,0,0,f),this.addCurrentVertex(p,g,1,1,f,!0)),y&&(this.addCurrentVertex(p,b,-1,-1,f,!0),this.addCurrentVertex(p,b,0,0,f)));if(!a&&M&&e<c-1){const t=p.dist(y);if(t>2*d){const e=p.add(y.sub(p).j(d/t).I());e.z=p.z,this.updateDistance(p,e),this.addCurrentVertex(e,b,0,0,f),p=e}}}}addCurrentVertex(t,e,n,i,r,o=!1){const s=e.x+e.y*n,a=e.y-e.x*n,l=e.y*i-e.x,u=-e.y-e.x*i;let c=0,h=0;if(r.middleVertex){bl.x=s,bl.y=a,vl.x=l,vl.y=u;const t=r.currentNormal;if(c=Tl(t,bl),0===n&&0===i)h=-c;else{const e=wl;e.x=t.x,e.y=t.y,e.j(-1),h=Tl(e,vl)}}this.addHalfVertex(t,s,a,o,!1,n,r,c),this.addHalfVertex(t,l,u,o,!0,-i,r,h),this.prevVertex&&zl(t,this.prevVertex)||(this.prevVertex=t),this.distance>gl/2&&0===this.totalDistance&&(this.distance=0,this.updateScaledDistance(),this.addCurrentVertex(t,e,n,i,r,o))}addHalfVertex({x:t,y:e,z:n},i,r,o,s,a,l,u){this.fillData(this.data,t,e,n||0,i,r,o,s,1*this.scaledDistance,u);const c=l.vertexLength++;this.e1>=0&&this.e2>=0&&(this.addElements(this.e1,this.e2,c),l.primitiveLength++),s?this.e2=c:this.e1=c}fillData(t,e,n,i,r,o,s,a,l,u){const{lineWidthFn:c,lineStrokeWidthFn:h,lineStrokeColorFn:d,lineColorFn:f,lineOpacityFn:p,lineDxFn:m,lineDyFn:y,linePatternAnimSpeedFn:g,linePatternGapFn:b}=this.nt;this.fillPosition(t,e,n,i);let v=63*r;v=(Math.sign(v)||1)*((Math.floor(Math.abs(v))>>1<<1)+ +s);let w=63*o;w=(Math.sign(w)||1)*((Math.floor(Math.abs(w))>>1<<1)+ +a),t.aExtrude.push(v,w),(this.iconAtlas||this.hasDasharray)&&t.aExtrude.push(63*u),t.aLinesofar.push(l),c&&t.aLineWidth.push(Math.round(2*this.feaLineWidth)),h&&t.aLineStrokeWidth.push(Math.round(2*this.feaLineStrokeWidth)),f&&t.aColor.push(...this.feaColor),d&&t.aStrokeColor.push(...this.feaStrokeColor),p&&t.aOpacity.push(this.feaOpacity),this.dasharrayFn&&t.aDasharray.push(...this.feaDash),this.dashColorFn&&t.aDashColor.push(...this.feaDashColor),this.iconAtlas&&t.aTexInfo.push(...this.feaTexInfo),(m||y)&&t.aLineDxDy.push(this.feaLineDx||0,this.feaLineDy||0),(g||b)&&t.aLinePattern.push(127*(this.feaPatternAnimSpeed||0),10*(this.feaLinePatternGap||0)),this.maxPos=Math.max(this.maxPos,Math.abs(e)+1,Math.abs(n)+1)}addElements(t,e,n){super.addElements(this.offset+t,this.offset+e,this.offset+n)}At(t){const e=this.options.EXTENT,n=this.elements;for(let i=0;i<n.length;i+=3)e!==1/0&&(Ml(this.data.aPosition,n[i],n[i+1],3,e)||Ml(this.data.aPosition,n[i+1],n[i+2],3,e))||t.push(n[i],n[i+1],n[i+2])}Ft(t){if(t.length<=1)return t;const e=[],n=this.options.EXTENT;let i,r=!0;for(i=0;i<t.length-1;i++){const o=kl(t[i],t[i+1],n);o&&r||(e.push(t[i]),r=o)}return r||e.push(t[i]),e}updateDistance(t,e){if(this.options.isTube){const n=t.dist(e),i=hi(this.options)*(e.z-t.z);this.distance+=Math.sqrt(n*n+i*i)}else this.distance+=t.dist(e);this.updateScaledDistance()}updateScaledDistance(){this.scaledDistance=this.totalDistance>0?(this.clipStart+(this.clipEnd-this.clipStart)*this.distance/this.totalDistance)*(gl-1):this.distance}}function kl(t,e,n){return n!==1/0&&(t.x<0&&e.x<0||t.x>n&&e.x>n||t.y<0&&e.y<0||t.y>n&&e.y>n)}function Ml(t,e,n,i,r){if(r===1/0)return!1;const o=Math.floor(.5*t[e*i]),s=Math.floor(.5*t[e*i+1]),a=Math.floor(.5*t[n*i]),l=Math.floor(.5*t[n*i+1]);return o===a&&(o<0||o>r)&&s!==l||s===l&&(s<0||s>r)&&o!==a}function jl(t){if(!Array.isArray(t))return!1;for(let e=0;e<t.length;e++)if(t[e])return!0;return!1}const Al=new Rt(0,0),Fl=new Rt(0,0);function Tl(t,e){const n=t.mag(),i=e.mag();Al.x=e.x,Al.y=e.y;const r=t.angleTo(Fl),o=e.angleTo(Fl);return Math.sign(o-r)*Math.sqrt(i*i-n*n)}function zl(t,e){return t.equals(e)&&t.z===e.z}class Sl extends xl{constructor(t,e,n){super(t,e,n),this.Tt=n.altitudeProperty}getFormat(){const{lineColorFn:t,lineWidthFn:e}=this.nt,n=[{type:this.maxPosZ>=Math.pow(2,15)?Float32Array:Int16Array,width:3,name:"aPosition"},{type:Uint16Array,width:1,name:"aLinesofar"},{type:Uint8Array,width:1,name:"aUp"},{type:Int16Array,width:3,name:"aExtrudedPosition"},{type:Int8Array,width:2,name:"aExtrude"}];return t&&n.push({type:Uint8Array,width:4,name:"aColor"}),e&&n.push({type:Uint8Array,width:1,name:"aLineWidth"}),this.Tt&&n.push({type:Array,width:1,name:"aLineHeight"}),n}placeVector(t){const e=t.feature;if(this.Tt){const{altitudeScale:t,altitudeProperty:n,defaultAltitude:i,heightProperty:r,defaultHeight:o,minHeightProperty:s}=this.options,{altitude:a,height:l}=xi(e,t,n,i,r,o,s);this.feaAltitude=a,this.feaMinHeight=(a-l)/a*32767,a>this.maxAltitude&&(this.maxAltitude=a)}return super.placeVector(t)}needAltitudeAttribute(){return!1}Mt(t,e,n,i,r,o){const s=this.data.aPosition.length/3;super.Mt(t,e,n,i,r,o);const a=this.data.aPosition.length/3,l=this.data.aPosition.length/3-this.offset;if(3!==e.type&&l>0&&!1!==this.options.side){const t=!1!==this.options.top?1:0,e=t+4;let n=this.data.aPosition.length/3;for(const t in this.data){const e=this.data[t],i=e.length/n;for(let t=0;t<i;t++)e.push(e[s*i+3*i+t])}n=this.data.aPosition.length/3;for(const t in this.data){const i=this.data[t],r=i.length/n;for(let t=0;t<r;t++)i.push(i[s*r+r*e+t])}n=this.data.aPosition.length/3;for(const t in this.data){const i=this.data[t],r=i.length/n;for(let t=0;t<r;t++)i.push(i[s*r+r*(e+3)+t])}super.addElements(t+1,l+1,l),super.addElements(l,l+1,l+2);const i=this.data.aPosition.length/3-this.offset;n=this.data.aPosition.length/3;for(const t in this.data){const e=this.data[t],i=e.length/n;for(let t=0;t<i;t++)e.push(e[a*i-i+t])}n=this.data.aPosition.length/3;for(const t in this.data){const i=this.data[t],r=i.length/n;for(let t=0;t<r;t++)i.push(i[a*r-e*r-r+t])}n=this.data.aPosition.length/3;for(const t in this.data){const i=this.data[t],r=i.length/n;for(let t=0;t<r;t++)i.push(i[a*r-e*r-3*r+t])}super.addElements(i,l-3,i+1),super.addElements(l-3,i+2,i+1)}}fillData(t,e,n,i,r,o,s,a,l){const u=!1!==this.options.top,c=!1!==this.options.side,h=this.feaLineWidth||this.symbol.lineWidth/2*(this.options.EXTENT/this.options.tileSize),d=63*r,f=63*o,p=h*r+e,m=h*o+n;this.zt(t,e,n,r,o,s,a,l,p,m,d,f),c&&(u&&this.zt(t,e,n,r,o,s,a,l,p,m,d,f),this.zt(t,e,n,r,o,s,a,l,p,m,d,f),this.St(t,e,n,r,o,s,a,l,p,m,d,f),this.St(t,e,n,r,o,s,a,l,p,m,d,f)),this.maxPos=Math.max(this.maxPos,Math.abs(e),Math.abs(n))}zt(t,e,n,i,r,o,s,a,l,u,c,h){const{lineColorFn:d,lineWidthFn:f}=this.nt;t.aPosition.push(e,n,32767),t.aLinesofar.push(a),t.aUp.push(+s),t.aExtrudedPosition.push(l,u,1),t.aExtrude.push(c,h),d&&t.aColor.push(...this.feaColor),f&&t.aLineWidth.push(Math.round(2*this.feaLineWidth)),this.Tt&&t.aLineHeight.push(this.feaAltitude)}St(t,e,n,i,r,o,s,a,l,u,c,h){const{lineColorFn:d,lineWidthFn:f}=this.nt;t.aPosition.push(e,n,this.feaMinHeight||0),t.aLinesofar.push(a),t.aUp.push(+s),t.aExtrudedPosition.push(l,u,1),t.aExtrude.push(c,h),d&&t.aColor.push(...this.feaColor),f&&t.aLineWidth.push(Math.round(2*this.feaLineWidth)),this.Tt&&t.aLineHeight.push(this.feaAltitude)}addElements(t,e,n){const i=!1!==this.options.top,r=!1!==this.options.side,o=(i?1:0)+(r?4:0);if(t*=o,e*=o,this.data.aUp[this.offset+(n*=o)+4]){if(i&&super.addElements(e,t,n),r){const t=i?1:0;super.addElements(e+t,n+t,n+t+2),super.addElements(e+t+1,n+t+1+2,e+t+1+2)}}else if(i&&super.addElements(t,n,e),r){const e=i?1:0;super.addElements(t+e,t+e+2,n+e),super.addElements(t+e+1+2,n+e+1+2,n+e+1)}}createDataPack(t,e){this.maxAltitude=0;const n=super.createDataPack(t,e);if(!n)return n;const{data:i,indices:r}=n;this.getFormat().reduce((t,e)=>(t[e.name]={size:e.width},t),{}).aPickingId={size:1};const{aExtrudedPosition:o,aPosition:s,aLinesofar:a,aUp:l,aExtrude:u,aColor:c,aLineHeight:h,aLineWidth:d}=i,f={},p=nn(o,r);let m,y=!0;for(let t=0;t<p.length;t++)p[t]=-p[t],p[t]%1!=0&&(y=!1);if(!1!==this.options.top&&this.symbol.material&&function(t){for(const e in t)if(e.indexOf("Texture")>=0&&t[e])return!0;return!1}(this.symbol.material)&&(m=function(t,e,n){const i=[];for(let r=0;r<t.length;r+=3){const t=e[r/3];i.push(t/256,n[r/3]?1:0)}return i}(o,a,l)),f.aPosition=s,m&&(f.aTexCoord0=new Float32Array(m)),f.aNormal=y?new Int8Array(p):new Float32Array(p),f.aPickingId=i.aPickingId,f.aExtrude=u,c&&(f.aColor=c),d&&(f.aLineWidth=d),h){const t=Kn(this.maxAltitude);f.aLineHeight=new t(h)}const g=[];for(const t in f)g.push(f[t].buffer);return n.data=f,n.buffers=g,n}}const _l=Math.pow(2,16)/1;class Pl extends na{getFormat(){return[...this.getPositionFormat()]}placeVector(t){const e=t.feature,n=3===e.type,i=e.geometry,r=this.elements;n&&(this.elements=[]);const o=this.needAltitudeAttribute()?2:3;for(let t=0;t<i.length;t++)this.offset=this.data.aPosition.length/o,this.Mt(i[t],e),n&&(this.At(r),this.elements=[]);n&&(this.elements=r)}Mt(t,e){const n=3===e.type;let i=t.length;for(;i>=2&&t[i-1].equals(t[i-2]);)i--;let r,o,s,a=0;for(;a<i-1&&t[a].equals(t[a+1]);)a++;if(!(i<(n?3:2))){this.distance=0,this.vertexLength=0,this.primitiveLength=0,this.e1=this.e2=this.e3=-1,n&&(r=t[i-2]);for(let e=a;e<i;e++)s=n&&e===i-1?t[a+1]:t[e+1],s&&t[e].equals(s)||(r&&(o=r),r=t[e],o&&(this.distance+=r.dist(o)),this.addCurrentVertex(r,this.distance))}}addCurrentVertex(t,e){const n=this.vertexLength++;this.addLineVertex(this.data,t,e),n>=1&&this.addElements(n-1,n),e>_l&&(this.distance=0,this.addCurrentVertex(t,this.distance))}addLineVertex(t,e){this.fillPosition(t,e.x,e.y,e.z||0),this.maxPos=Math.max(this.maxPos,Math.abs(e.x),Math.abs(e.y))}addElements(t,e){super.addElements(this.offset+t,this.offset+e)}At(t){const e=this.options.EXTENT,n=this.elements;for(let i=0;i<n.length;i+=2)vi(this.data.aPosition,n[i],n[i+1],3,e)||t.push(n[i],n[i+1])}}const Il=45*Math.PI/100;class Ol extends na{getFormat(){return[...this.getPositionFormat()]}placeVector(t){const e=this.bt(t,this.symbol.markerSpacing||250,this.symbol.markerPlacement||"point");for(let t=0;t<e.length;t++){const n=e[t];this.fillPosition(this.data,n.x,n.y,n.z);const i=Math.max(Math.abs(n.x),Math.abs(n.y));i>this.maxPos&&(this.maxPos=i)}}bt(t,e,n){const i=t.feature,r=this.options.EXTENT;if("line"===n){const t=[];let n=i.geometry;r&&(n=Qa(i.geometry,0,0,r,r));for(let i=0;i<n.length;i++){const o=nl(n[i],e,Il,null,null,24,1,1,r||1/0);t.push.apply(t,o)}return t}return dl(i,n,r)}hasElements(){return!1}}\n/*!\n     * from @turf/bboxClip\n     * https://github.com/Turfjs/turf\n     * MIT LICENSE\n     */const ql=[],Cl=[];function Nl(t,e){var n,i,r,o,s,a,l;for(i=1;i<=8;i*=2){for(n=[],o=!(Rl(r=t[t.length-1],e)&i),s=0;s<t.length;s++){if((l=!(Rl(a=t[s],e)&i))!==o){const t=El(r,a,i,e);n.push(void 0!==a.x?new Rt(t[0],t[1]):t)}l&&n.push(a),r=a,o=l}if(!(t=n).length)break}return n}function El(t,e,n,i){return ql[0]=void 0===t.x?t[0]:t.x,ql[1]=void 0===t.y?t[1]:t.y,t=ql,Cl[0]=void 0===e.x?e[0]:e.x,Cl[1]=void 0===e.y?e[1]:e.y,e=Cl,8&n?[t[0]+(e[0]-t[0])*(i[3]-t[1])/(e[1]-t[1]),i[3]]:4&n?[t[0]+(e[0]-t[0])*(i[1]-t[1])/(e[1]-t[1]),i[1]]:2&n?[i[2],t[1]+(e[1]-t[1])*(i[2]-t[0])/(e[0]-t[0])]:1&n?[i[0],t[1]+(e[1]-t[1])*(i[0]-t[0])/(e[0]-t[0])]:null}function Rl(t,e){ql[0]=void 0===t.x?t[0]:t.x,ql[1]=void 0===t.y?t[1]:t.y;var n=0;return(t=ql)[0]<e[0]?n|=1:t[0]>e[2]&&(n|=2),t[1]<e[1]?n|=4:t[1]>e[3]&&(n|=8),n}const Dl=[0,0,0,0];class Ll extends na{constructor(...t){super(...t),this.lineElements=[]}createStyledVector(t,e,n,i,r){const o=new Fi(t,e,n,i),s=o.getPolygonResource();return!this.options.atlas&&s&&(r[s]=[0,0]),o}getFormat(){const t=[...this.getPositionFormat()],{polygonFillFn:e,polygonOpacityFn:n,uvScaleFn:i,uvOffsetFn:r}=this.nt;if(this.iconAtlas){const e=this.getIconAtlasMaxValue();t.push({type:e>255?Uint16Array:Uint8Array,width:4,name:"aTexInfo"})}return e&&t.push({type:Uint8Array,width:4,name:"aColor"}),n&&t.push({type:Uint8Array,width:1,name:"aOpacity"}),i&&t.push({type:Uint16Array,width:2,name:"aUVScale"}),r&&t.push({type:Uint8Array,width:2,name:"aUVOffset"}),t}placeVector(t,e){const n=t.feature;this._t(n.geometry,n,e)}_t(t,e){let n,i,r,o;const{polygonFillFn:s,polygonOpacityFn:a,uvScaleFn:l,uvOffsetFn:u}=this.nt,c=e.properties;s&&(n=s(this.options.zoom,c)||At([],255,255,255,255),n=f(n)?Dl:pi([],n)),a&&(i=a(this.options.zoom,c),ni(i)&&(i=1),i*=255),l&&(r=l(this.options.zoom,c),ni(r)&&(r=[1,1]),r=[255*r[0],255*r[1]]),u&&(o=u(this.options.zoom,c),ni(o)&&(o=[0,0]),o=[255*o[0],255*o[1]]);const h=!!this.iconAtlas,d=rl(t,500),p=[0,0],m=[0,0];if(h){const{polygonPatternFileFn:t}=this.nt,e=t?t(null,c):this.symbol.polygonPatternFile;if(this.iconAtlas.glyphMap[e]){const t=this.iconAtlas.positions[e];p[0]=t.tl[0]+1,p[1]=t.tl[1]+1,m[0]=t.displaySize[0]-3,m[1]=t.displaySize[1]-3}}const y=this.needAltitudeAttribute()?2:3,g=[-1,-1,e.extent+1,e.extent+1];for(let t=0;t<d.length;t++){const e=d[t],s=this.data.aPosition.length/y,a=[],l=[];for(let t=0;t<e.length;t++){let s=e[t];if(this.options.EXTENT!==1/0&&0===this.maxPosZ&&(s=Nl(s,g)),0!==s.length){0!==t&&l.push(a.length/3);for(let t=0;t<s.length;t++){const e=s[t].x,l=s[t].y,u=s[t].z||0;this.fillPosition(this.data,e,l,u),h&&this.data.aTexInfo.push(p[0],p[1],m[0],m[1]),void 0!==n&&this.data.aColor.push(n[0],n[1],n[2],n[3]),void 0!==i&&this.data.aOpacity.push(i),void 0!==r&&this.data.aUVScale.push(r[0],r[1]),void 0!==o&&this.data.aUVOffset.push(o[0],o[1]);const c=Math.abs(e),d=Math.abs(l);c>this.maxPos&&(this.maxPos=c),d>this.maxPos&&(this.maxPos=d),a.push(e,l,u)}}}let u=On(a,l,3);if(a.length&&!u.length){const t=[];for(let e=0;e<a.length;e+=3)t[e]=a[e],t[e+1]=a[e+2],t[e+2]=a[e+1];if(u=On(t,l,3),!u.length){for(let e=0;e<a.length;e+=3)t[e]=a[e+1],t[e+1]=a[e+2],t[e+2]=a[e];u=On(t,l,3)}}for(let t=0;t<u.length;t+=3)this.addElements(s+u[t],s+u[t+1],s+u[t+2])}}}const $l=[{type:Int16Array,width:3,name:"aPosition"}];class Ul extends na{getFormat(){return $l}placeVector(t,e){const n=this.bt(t,e);if(0===n.length)return;const i=this.data,r=this.getAltitude(t.feature.properties);let o=i.aPosition.length/$l[0].width;for(let t=0;t<n.length;t++){const e=n[t];i.aPosition.push(2*e.x+0,2*e.y+0,r),i.aPosition.push(2*e.x+1,2*e.y+0,r),i.aPosition.push(2*e.x+1,2*e.y+1,r),i.aPosition.push(2*e.x+0,2*e.y+1,r),this.addElements(o,o+1,o+2),this.addElements(o,o+2,o+3),o+=4;const s=Math.max(Math.abs(2*e.x+1),Math.abs(2*e.y+1));s>this.maxPos&&(this.maxPos=s)}}bt(t,e){const{feature:n,symbol:i}=t,r=this.kt(t,i),o=n.properties,{markerSpacingFn:s}=this.nt,a=((s?s(null,o):i.markerSpacing)||250)*e;return hl(t,null,null,e,this.options.EXTENT,r,a)}kt(t,e){return this.nt.markerPlacementFn?this.nt.markerPlacementFn(this.options.zoom,t.feature.properties):e.markerPlacement}}class Wl extends xl{constructor(t,e,n){(e=ei({},e)).lineJoin="miter",e.lineCap="butt",super(t,e,n),this.options.radialSegments%2==1&&this.options.radialSegments--}getFormat(){const{lineWidthFn:t,lineColorFn:e,lineOpacityFn:n,linePatternAnimSpeedFn:i,linePatternGapFn:r}=this.nt,o=[...this.getPositionFormat(),{type:Int8Array,size:4,name:"aTubeNormal"},{type:this.options.positionType||Uint16Array,width:1,name:"aLinesofar"}];if(this.iconAtlas){o.push({type:Int8Array,width:1,name:"aNormalDistance"});const t=this.getIconAtlasMaxValue();o.push({type:t>255?Uint16Array:Uint8Array,width:4,name:"aTexInfo"})}return t&&o.push({type:Uint16Array,width:1,name:"aLineWidth"}),e&&o.push({type:Uint8Array,width:4,name:"aColor"}),n&&o.push({type:Uint8Array,width:1,name:"aOpacity"}),i&&o.push({type:Int8Array,width:1,name:"aLinePatternAnimSpeed"}),r&&o.push({type:Int8Array,width:1,name:"aLinePatternGap"}),o}addHalfVertex(t,e,n,i,r,o,s,a){const{x:l,y:u,z:c}=t,h=1*this.scaledDistance,d=this.options.radialSegments/2,{x:f,y:p,z:m}=s.dir,y=function(t,e,n,i,r,o,s,a){gt(Jl,n,i,r),gt(Hl,o,s,0),kt(Gl,Jl,Hl),wt(Hl,Hl),wt(Gl,Gl),Vl[e]||(Vl[e]=[]);const l=Vl[e];for(var u=0;u<e;u++){const t=Math.PI*u/e,n=1-Math.abs(t-0)/(Math.PI/2);l[u]=l[u]||[],Bl(Hl,Gl,l[u],1,t,n*(a?-1:1))}return l}(0,d,f,p,m,e,n,r);this.prevVertex&&this.fillTubeElements(r),this.fillData(this.data,l,u,c||0,y,r,h,a)}fillTubeElements(t){const e=this.options.radialSegments/2,n=this.needAltitudeAttribute()?2:3,i=this.data.aPosition.length/n;for(let n=0;n<e;n++){const r=n+i-2*e;let o,s;n===e-1&&t?(o=n+i-2*e+1,s=n+i-2*e-2*e+1):(o=n+i+1,s=n+i+1-2*e),super.addElements(n+i-this.offset,o-this.offset,r-this.offset),super.addElements(r-this.offset,o-this.offset,s-this.offset)}}fillData(t,e,n,i,r,o,s,a){const{lineWidthFn:l,lineColorFn:u,lineOpacityFn:c,linePatternAnimSpeedFn:h,linePatternGapFn:d}=this.nt,f=r.length;for(let o=0;o<f;o++){if(this.fillPosition(t,e,n,i),Ft(r[o],r[o],63),t.aTubeNormal.push(...r[o]),t.aLinesofar.push(s),this.iconAtlas&&(t.aNormalDistance.push(63*a),t.aTexInfo.push(...this.feaTexInfo)),l){const e=di(this.options.metric);let n=this.feaLineWidth*e;isNaN(n)&&(n=0),t.aLineWidth.push(Math.round(n))}u&&t.aColor.push(...this.feaColor),c&&t.aOpacity.push(this.feaOpacity),h&&t.aLinePatternAnimSpeed.push(127*(this.feaPatternAnimSpeed||0)),d&&t.aLinePatternGap.push(10*(this.feaLinePatternGap||0))}this.maxPos=Math.max(this.maxPos,Math.abs(e)+1,Math.abs(n)+1)}createDataPack(t,e){const n=super.createDataPack(t,e);return n&&(n.is2D=!1),n}}const Jl=[],Hl=[],Gl=[],Vl={};function Bl(t,e,n,i,r,o){return At(n,i*(Math.cos(r)*t[0]+Math.sin(r)*e[0]),i*(Math.cos(r)*t[1]+Math.sin(r)*e[1]),i*(Math.cos(r)*t[2]+Math.sin(r)*e[2]),o),n}class Zl extends Wl{addHalfVertex(t,e,n,i,r,o,s,a){const{x:l,y:u,z:c}=t,h=1*this.scaledDistance,{x:d,y:f,z:p}=s.dir,m=function(t,e,n,i,r,o,s,a){gt(Yl,n,i,r),gt(Kl,o,s,0),kt(Ql,Yl,Kl),wt(Kl,Kl),wt(Ql,Ql),function(t,e,n){t[0]=e,t[1]=n}(Xl,t,e);const l=Ot(Xl)/t,u=Math.atan(e/t);let c=Math.PI/2+(Math.PI/2-u);return tu[0]||(tu[0]=[]),Bl(Kl,Ql,tu[0],l,c,a?1:-1),c+=2*u,tu[1]||(tu[1]=[]),Bl(Kl,Ql,tu[1],l,c,a?1:-1),tu}(this.feaLineWidth,this.feaLineHeight,d,f,p,e,n,r);this.prevVertex&&this.fillTubeElements(r),this.fillData(this.data,l,u,c||0,m,r,h,a)}}const Xl=[],Yl=[],Kl=[],Ql=[],tu=[];var eu=Object.freeze({__proto__:null,clipPolygon:Nl,calculateSignedArea:bi,getFeaAltitudeAndHeight:xi,generatePickingIndiceIndex:Ai,convertRTLText:Za,packPosition:Ti,unpackPosition:function(t,e,n,i){const r=(Math.sign(e)||1)*(Math.abs(e)%zi),o=(Math.sign(n)||1)*(Math.abs(n)%zi),s=Math.floor(Math.abs(e)/zi),a=Math.floor(Math.abs(n)/zi);return t[0]=r,t[1]=o,t[2]=Math.sign(i+1e-5)*(2*s+a)*Si+i,t},convertGeometry:ti,getPosArrayType:Kn,getUnsignedArrayType:Qn,getIndexArrayType:Yn});const nu={},iu={},ru=[];Object.freeze({__proto__:null,loadSymbolFnTypes:function t(e,n){if(!e)return null;var i=!1;if(Array.isArray(e)){var r,o=[];for(let s=0;s<e.length;s++)(r=t(e[s],n))?(o.push(r),i=!0):o.push(e[s]);return i?o:e}var s={__fn_types_loaded:!0};const a=[];for(const t in e)li(e,t)&&a.push(t);const l=function(t){Object.defineProperty(s,t,{get:function(){return this["__fn_"+t]||(this["__fn_"+t]=p(this["_"+t])),this["__fn_"+t].apply(this,n())},set:function(e){this["_"+t]=e},configurable:!0,enumerable:!0})},u={},c=function(t,e){Object.defineProperty(s,t,{get:function(){this["__fn_"+t]||(this["__fn_"+t]=Ws(this["_"+t],e));const i=n()[0];u.zoom=i;try{return this["__fn_"+t].evaluateWithoutErrorHandling(u,nu,iu,null,ru)}catch(t){return null}},set:function(e){this["_"+t]=e},configurable:!0,enumerable:!0})};for(let t=0,n=a.length;t<n;t++){const n=a[t];if(f(e[n]))i=!0,s["_"+n]=e[n],l(n);else if(Js(e[n])){i=!0;const t=Zs(n);s["_"+n]=e[n],c(n,t)}else s[n]=e[n]}return i?s:e}});const ou={polygonPatternFile:1,markerFile:1,markerPlacement:1,markerSpacing:1,textName:1,textStyle:1,textFaceName:1,textWeight:1,textPlacement:1,textSpacing:1,lineJoin:1,lineCap:1,linePatternFile:1};Object.assign({visible:1,textHorizontalAlignment:1,textVerticalAlignment:1,textWrapWidth:1,markerHorizontalAlignment:1,markerVerticalAlignment:1},ou),Object.assign({lineDasharray:1},ou);function su(t,e,n,i,r,o,s,a,l,u,c,h,d,f,p,m){const y=e.length,g=r/3;for(let n=2,i=y;n<i;n+=3)t[r+n-2]=e[n-2],t[r+n-1]=e[n-1],t[r+n-0]=e[n]-o;r+=y;for(let n=2,i=y;n<i;n+=3)t[r+n-2]=e[n-2],t[r+n-1]=e[n-1],t[r+n-0]=e[n]-s;r+=y;for(let n=2,i=y;n<i;n+=3)t[r+n-2]=e[n-2],t[r+n-1]=e[n-1],t[r+n-0]=e[n]-o;r+=y;for(let n=2,i=y;n<i;n+=3)t[r+n-2]=e[n-2],t[r+n-1]=e[n-1],t[r+n-0]=e[n]-s;r+=y,(n=n||[]).push(y/3);for(let e=0;e<n.length;e++){au(g+(n[e-1]||0),g+n[e],t,y/3,a,i,l,u,c,h,d,f,p,m)}return r}function au(t,e,n,i,r,o,s,a,l,u,c,h,d,f){const p=o.length;let m,y;for(let s=t,a=e;s<a-1;s++)m=s,y=s+1,at(n,m,y,r)||((s-t)%2==1&&(m+=2*i,y+=2*i),o.push(m+i,m,y),o.push(y,y+i,m+i));s&&function(t,e,n,i,r,o,s,a,l,u){let c,h=0,d=0,f=0,p=0;for(let m=r.length-1;m>=0;m--){const y=r[m],g=3*y+1,b=3*y+2,v=i[3*y],w=i[g],x=i[b];h||d||(h=Math.max(i[b],i[3*r[m-2]+2]),d=Math.min(i[b],i[3*r[m-2]+2]),c=h-d);let k=f;const M=m%6;0===t?(5===M&&(p=Et(i,r,m,v,w)),k=2===M||3===M||4===M?f:f+p):1===t&&(2===M||3===M||4===M?k=0:5===M?(p=Et(i,r,m,v,w),k=p):k=p);const j=k*a*l/o;let A;A="bottom"===e?x===h?c*u/s:0:x===h?0:c*u/s,n[2*y]=j,n[2*y+1]=A,0===M&&(f+=p)}}(a,l,u,n,o.slice(p,o.length),c[0],c[1],h,d,f)}function lu(t,e,n,i,r,o,s,a,l,u){void 0===e.top&&(e.top=!0),void 0===e.side&&(e.side=!0);const{altitudeScale:c,altitudeProperty:h,defaultAltitude:d,heightProperty:f,minHeightProperty:y,defaultHeight:g,tangent:b,uv:v,uvScale:w,topUVMode:x,sideUVMode:M,top:j,side:A,textureYOrigin:z,topThickness:S}=e,_=function(t,e,{altitudeScale:n,altitudeProperty:i,defaultAltitude:r,heightProperty:o,minHeightProperty:s,defaultHeight:a},{side:l,top:u,topThickness:c,uvOrigin:h,uv:d,uvSize:f,topUVMode:p,sideUVMode:m,textureYOrigin:y,glScale:g,localScale:b,vScale:v},w){const x=e/t[0].extent,M=[],j=[],A=[],T=[],z=[],S=[],_=!!d,P=!!u,I=!!l,O=_?[]:null;function q(t,n,i,r){if(P){const r=On(T,i,3);if(0===r.length)return n;let o;F(z,T),n+=T.length;for(let e=2,n=r.length;e<n;e+=3)o=r[e-1],r[e-1]=r[e]+t/3,r[e]=o+t/3,r[e-2]+=t/3;F(S,r),_&&qt(p||0,t,n,O,z,0,g,b,f[0],f[1]),c>0&&!I&&(n=su(z,T,i,S,n,0,c,e,_,m||0,y,O,f,g,b,v))}return I&&(P&&(c=0),n=su(z,T,i,S,n,c,r,e,_,m||0,y,O,f,g,b,v)),n}let C=0,N=0;const E=[-1,-1,e+1,e+1];let R=0,D=t.length;void 0!==w&&(R=w,D=w+1);let L=0,$=!1;for(;R<D;R++){const l=t[R],u=l.id;k(u)&&(Math.abs(u)>L&&(L=Math.abs(u)),u<0&&($=!0));const c=l.geometry,{altitude:h,height:d}=eu.getFeaAltitudeAndHeight(l,n,i,r,o,a,s);C=Math.max(Math.abs(h),C);const f=z.length;let p=N,m=[];T.length=0;for(let t=0,n=c.length;t<n;t++){const i=eu.calculateSignedArea(c[t])<0;!i&&t>0&&(N=q(p,N,m,d*x),T.length=0,m=[],p=N);let r=c[t];if(e!==1/0&&(r=eu.clipPolygon(r,E)),!r.length){t===n-1&&(N=q(p,N,m,d*x));continue}const o=r.length;Array.isArray(r[0])?r[0][0]===r[o-1][0]&&r[0][1]===r[o-1][1]||r.push([r[0][0],r[0][1]]):r[0].x===r[o-1].x&&r[0].y===r[o-1].y||r.push(r[0]),i&&m.push(T.length/3),st(T,T.length,r,x,h),t===n-1&&(N=q(p,N,m,d*x))}const y=z.length-f,g="__fea_idx".trim();for(let t=0;t<y/3;t++)j.push(void 0===l[g]?R:l[g]),M.push(R),k(u)&&A.push(u)}const U=eu.getUnsignedArrayType(j.length?j[j.length-1]:0),W={maxAltitude:C,vertices:new(eu.getPosArrayType(Math.max(512,C)))(z),indices:S,pickingIds:new U(j),featureIndexes:M};if(A.length){const t=$?eu.getPosArrayType(L):eu.getUnsignedArrayType(L);W.featureIds=new t(A)}else W.featureIds=[];return O&&(O.length=z.length/3*2,W.uvs=O),W}(t,n,{altitudeScale:c,altitudeProperty:h,defaultAltitude:d||0,heightProperty:f,minHeightProperty:y,defaultHeight:g||0},{top:j,side:A,topThickness:10*S||0,uv:v||b,uvSize:w?[.5*w[0],.5*w[1]]:[.5,.5],uvOrigin:i,topUVMode:x,sideUVMode:M,textureYOrigin:z,glScale:r,localScale:s,vScale:o},u),P=[],I=new(eu.getIndexArrayType(_.vertices.length/3))(_.indices);delete _.indices,P.push(I.buffer,_.vertices.buffer,_.pickingIds.buffer);const O=nn(_.vertices,I);let q=!0;for(let t=0;t<O.length;t++)O[t]=-O[t],O[t]%1!=0&&(q=!1);if(_.normals=O,b){let t=function(t,e,n,i){const r=t.length/3,o=new Array(4*r),s=[],a=[];for(let t=0;t<r;t++)s[t]=[0,0,0],a[t]=[0,0,0];const l=[0,0,0],u=[0,0,0],c=[0,0,0],h=[0,0],d=[0,0],f=[0,0],p=[0,0,0],m=[0,0,0];function y(e,i,r){rn(l,t,3*e),rn(u,t,3*i),rn(c,t,3*r),on(h,n,2*e),on(d,n,2*i),on(f,n,2*r);const o=u[0]-l[0],y=c[0]-l[0],g=u[1]-l[1],b=c[1]-l[1],v=u[2]-l[2],w=c[2]-l[2],x=d[0]-h[0],k=f[0]-h[0],M=d[1]-h[1],j=f[1]-h[1],A=1/(x*j-k*M);gt(p,(j*o-M*y)*A,(j*g-M*b)*A,(j*v-M*w)*A),gt(m,(x*y-k*o)*A,(x*b-k*g)*A,(x*w-k*v)*A),bt(s[e],s[e],p),bt(s[i],s[i],p),bt(s[r],s[r],p),bt(a[e],a[e],m),bt(a[i],a[i],m),bt(a[r],a[r],m)}for(let t=0,e=i.length;t<e;t+=3)y(i[t+0],i[t+1],i[t+2]);const g=[],b=[],v=[],w=[];let x,k,M;function j(t){rn(v,e,3*t),yt(w,v),k=s[t],yt(g,k),Mt(g,g,function(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}(v,v,xt(v,k))),wt(g,g),kt(b,w,k),M=xt(b,a[t]),x=M<0?-1:1,o[4*t]=g[0],o[4*t+1]=g[1],o[4*t+2]=g[2],o[4*t+3]=x}for(let t=0,e=i.length;t<e;t+=3)j(i[t+0]),j(i[t+1]),j(i[t+2]);return o}(_.vertices,_.normals,_.uvs,I);t=function(t,e){const n=new Float32Array(e.length),i=[],r=[],o=[];for(let s=0;s<e.length;s+=4){const a=s/4*3;gt(r,t[a]||0,t[a+1]||0,t[a+2]||0),At(i,e[s]||0,e[s+1]||0,e[s+2]||0,e[s+3]||0),en(o,r,i),jt(n.subarray(s,s+4),o)}return n}(_.normals,t),_.tangents=t,P.push(t.buffer),delete _.normals}if(_.normals&&(_.normals=q?new Int8Array(_.normals):new Float32Array(_.normals),P.push(_.normals.buffer)),_.uvs){const t=_.uvs;_.uvs=new Float32Array(t),P.push(_.uvs.buffer)}const C=function(t,e,n,i){const r={};if(T(e.polygonFill)){const o=m(e.polygonFill),s=new Uint8Array(4*i.length);s.fill(255);for(let e=0;e<i.length;e++){const r=t[i[e]],a=r.properties||{};a.$layer=r.layer,a.$type=r.type;let l=o(n,a);delete a.$layer,delete a.$type,gi.normalizeColor(uu,l),s[4*e]=uu[0],s[4*e+1]=uu[1],s[4*e+2]=uu[2],s[4*e+3]=uu[3]}r.aColor=s}if(T(e.polygonOpacity)){const o=p(e.polygonOpacity),s=new Uint8Array(i.length);s.fill(255);for(let e=0;e<i.length;e++){const r=t[i[e]],a=r.properties||{};a.$layer=r.layer,a.$type=r.type;const l=o(n,a);delete a.$layer,delete a.$type,s[e]=255*l}r.aOpacity=s}return r}(t,a,l,_.featureIndexes),N={data:{data:{aPosition:_.vertices,aNormal:_.normals,aTexCoord0:_.uvs,aTangent:_.tangents,aPickingId:_.pickingIds},indices:I,properties:{maxAltitude:_.maxAltitude}},buffers:P};return _.featureIds.length?(N.data.featureIds=_.featureIds,P.push(N.data.featureIds.buffer)):N.data.featureIds=[],C.aColor&&(N.data.data.aColor=C.aColor,N.buffers.push(C.aColor.buffer)),C.aOpacity&&(N.data.data.aOpacity=C.aOpacity,N.buffers.push(C.aOpacity.buffer)),N.data.pickingIdIndiceMap=eu.generatePickingIndiceIndex(N.data.data.aPickingId,N.data.indices),N}const uu=[];function cu(t,e,n,i,{altitudeScale:r,altitudeProperty:o,defaultAltitude:s,heightProperty:a,minHeightProperty:l,defaultHeight:u,bottom:c}){const h=c,d=e/t[0].extent,p=2*function(t,e){let n=0;for(let i=0,r=t.length;i<r;i++){const r=t[i];if(k(r.geometry[0][0])){const t=3*r.geometry.length;n+=e?2*t-6:t}else for(let t=0,i=r.geometry.length;t<i;t++){let i=3*r.geometry[t].length;3===r.type&&(i-=3),n+=e?2*i-6:i}}return n}(t)+3*t.length*2,m=[],y=new Int16Array(p),g=new Uint8Array(y.length/3*4);f(n)&&(n=Xs.compileFilter(n));const b=[];function v(t,n,i){const r=n-t,o=y.subarray(t,n),s=y.subarray(n,n+r);s.set(o);for(let t=2,e=s.length;t<e;t+=3)s[t]=o[t]-i;const a=t/3,l=r/3;let u,c;for(let t=a,n=l+a;t<n;t++)t<n-1?(u=t,c=t+1):(u=t,c=a),at(y,u,c,e)||(b.push(u,c),h&&b.push(u+l,c+l),hu(y,u,e)||b.push(u,u+l));return n+r}let w=0,x=0;const M="__fea_idx".trim(),j=[];for(let e=0,c=t.length;e<c;e++){const c=t[e],h=c.geometry;if(n){let t;t="function"==typeof n?n(c&&c.properties):n,gi.normalizeColor(j,t)}else gt(j,255,255,255);const f=w/3*4,{altitude:p,height:k}=eu.getFeaAltitudeAndHeight(c,r,o,s,a,u,l);x=Math.max(Math.abs(p),x);let A=w;for(let t=0,e=h.length;t<e;t++){let e=h[t];const n=e.length;e[0][0]===e[n-1][0]&&e[0][1]===e[n-1][1]&&(e=e.slice(0,n-1)),w=st(y,A,e,d,p),w=v(A,w,k*d),A=w}const F=A/3*4;for(let t=f;t<F;t+=4)g[t]=j[0],g[t+1]=j[1],g[t+2]=j[2],g[t+3]=255*(i||1);const T=b.length-m.length;for(let t=0;t<T;t++)m.push(c[M])}const A=b.reduce((t,e)=>Math.max(t,e),0),F=new(eu.getIndexArrayType(A))(b),T=eu.getUnsignedArrayType(t.length);return{aPosition:new(eu.getPosArrayType(Math.max(512,x)))(y),indices:F,aPickingId:new T(m),aColor:g}}function hu(t,e,n){const i=t[3*e],r=t[3*e+1];return i<0||i>n||r<0||r>n}function du(t,e,n,i){const r=cu(t,e,n.lineColor,n.lineOpacity,i),o=[r.aPosition.buffer,r.indices.buffer,r.aPickingId.buffer],s=r.indices;return delete r.indices,{data:{data:r,indices:s},buffers:o}}\n/*!\n        Feature Filter by\n\n        (c) mapbox 2016 and maptalks 2018\n        www.mapbox.com | www.maptalks.org\n        License: MIT, header required.\n    */const fu=["Unknown","Point","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon","GeometryCollection"];function pu(t){if(!t)return"true";const e=t[0];if(t.length<=1)return"any"===e?"false":"true";return`(${"=="===e?yu(t[1],t[2],"===",!1):"!="===e?yu(t[1],t[2],"!==",!1):"<"===e||">"===e||"<="===e||">="===e?yu(t[1],t[2],e,!0):"any"===e?bu(t.slice(1),"||"):"all"===e?bu(t.slice(1),"&&"):"none"===e?xu(bu(t.slice(1),"||")):"in"===e?vu(t[1],t.slice(2)):"!in"===e?xu(vu(t[1],t.slice(2))):"has"===e?wu(t[1]):"!has"===e?xu(wu(t[1])):"contains"===e?function(t,e,n){const i=mu(t);return void 0!==n?`(${i} + \'\').indexOf("${e}") === ${n}`:`(${i} + \'\').indexOf("${e}") >= 0`}(t[1],t[2],t[3]):"true"})`}function mu(t){return"$"===t[0]?"f."+t.substring(1):"p["+JSON.stringify(t)+"]"}function yu(t,e,n,i){if("object"==typeof(r=t)&&r&&t.op)return function(t,e,n,i){const r=t.property,o=t.op;let s=mu(r);return"length"!==o?(console.error(`not support ${o} op`),"false"):(s=`((${s}+=\'\').length)`,gu(s,r,e,n,i))}(t,e,n,i);var r;return gu(mu(t),t,e,n,i)}function gu(t,e,n,i,r){const o="$type"===e?fu.indexOf(n):JSON.stringify(n);return(r?`typeof ${t}=== typeof ${o}&&`:"")+t+i+o}function bu(t,e){return t.map(pu).join(e)}function vu(t,e){"$type"===t&&(e=e.map(t=>fu.indexOf(t)));const n=JSON.stringify(e.sort(ku)),i=mu(t);return e.length<=200?`${n}.indexOf(${i}) !== -1`:`function(v, a, i, j) {\\n        while (i <= j) { var m = (i + j) >> 1;\\n            if (a[m] === v) return true; if (a[m] > v) j = m - 1; else i = m + 1;\\n        }\\n    return false; }(${i}, ${n},0,${e.length-1})`}function wu(t){return"$id"===t?\'"id" in f\':JSON.stringify(t)+" in p"}function xu(t){return`!(${t})`}function ku(t,e){return t<e?-1:t>e?1:0}const Mu="__original_properties",ju="__fn-type_properties";class Au{constructor(t,e,n,i,r){this.id=t,this.options=e,this.upload=n,this.Pt(e.style),this.requests={},this.It=i,this.Ot=0,this.loadings=r}updateStyle(t,e){this.options.style=t,this.Ot=t.styleCounter,this.Pt(t),e()}updateOptions(t,e){this.options=w(this.options,t),e()}loadTile(t,e){const n=this.loadings,i=t.tileInfo.url,r=this.options.debugTile;if(r){const{x:n,y:i,z:o}=t.tileInfo;let s=!1;for(let t=0;t<r.length;t++)if(n===r[t].x&&i===r[t].y&&o===r[t].z){s=!0;break}if(!s)return void e()}n[i]?n[i].push({context:t,callback:e,ref:this}):(n[i]=[{context:t,callback:e,ref:this}],this.requests[i]=this.getTileFeatures(t,(e,r,o,s)=>{const a=n[i];if(delete n[i],this.checkIfCanceled(i))return delete this.requests[i],void this.qt(a,null,{canceled:!0});if(delete this.requests[i],this.options.debug&&r)for(let e=0;e<r.length;e++)r[e]._debug_info={index:e,id:r[e].id,tileId:t.tileInfo.id};if(e)this.qt(a,e);else if(r&&r.length){if(a)for(let t=0;t<a.length;t++)this.Ct.call(a[t].ref,a[t].context,a[t].callback,i,o,r,s)}else this.qt(a)}))}Ct(t,e,n,i,r,o){this.Nt(i,r,t).then(n=>{n.canceled?e(null,{canceled:!0}):(n.data.style=t.styleCounter,o&&w(n.data,o),e(null,n.data,n.buffers))}).catch(t=>{e(t)})}abortTile(t,e){delete this.requests[t],this.Et(t),e()}Et(t){const e=this.loadings[t];if(e)for(let t=0;t<e.length;t++)e[t].callback(null,{canceled:!0});delete this.loadings[t]}qt(t,e,n){if(t)for(let i=0;i<t.length;i++)t[i].callback(e,n)}checkIfCanceled(t){return!this.requests[t]}onRemove(){this.loadings={}}fetchIconGlyphs(t,e,n){this.upload("fetchIconGlyphs",{icons:t,glyphs:e},null,n)}Nt(t,e,n){if(!e.length)return Promise.resolve({data:null,buffers:[]});const{glScale:i,tileInfo:r}=n,o=!this.options.style.style.length&&!this.options.style.featureStyle.length;let s=this.pluginConfig.slice(0);o&&(s=this.Rt(t)),this.featurePlugins&&F(s,this.featurePlugins);const a={};for(let t=0;t<s.length;t++)Iu(e,n.tileInfo.z,s[t],a);const l=[],u=[];for(let t=0;t<e.length;t++){const n=e[t],i=a[t];if(i){u.fill(null);let t=0;for(const e in i){let r=0;const o=i[e].values();for(const t of o){let i=u[r];i||(i=Nu(n),u[r]=i),i.properties[e]=t,r++}r>t&&(t=r)}for(let e=0;e<t;e++)l.push(u[e])}else l.push(n)}const c=(e=l)[0].extent,h=r.z,d={x:r.extent2d.xmin*i,y:r.extent2d.ymax*i},f=[],p=[],m=[],y=this.options,g=[],b={},v=[Promise.resolve(n.styleCounter)];let x=0,k=-1;const M=[];let j=!1;for(let t=0;t<s.length;t++){k++;const i=s[t];i.type!==x&&(k=0,x=i.type);const a=0===i.type?f:p;if(i.symbol&&!1===i.symbol.visible){a[k]=null;continue}Du(i.symbol,M,t),j=j||M[t]&&M[t].size>0;const{tileFeatures:l,tileFeaIndexes:u}=this.Dt(h,i.type,i.filter,e,b,t);if(!l.length){a[k]=null;continue}const y=u[u.length-1],w=eu.getIndexArrayType(y);a[k]={styledFeatures:new w(u)},m.push({idx:t,typeIdx:k}),g.push(a[k].styledFeatures.buffer);const A={extent:c,zoom:h,tilePoint:d,...n};if(this.options.debugTile){const t=this.options.debugTile;for(let e=0;e<t.length;e++){const{x:n,y:i,z:o}=t[e];if(r.x===n&&r.y===i&&r.z===o){A.debugIndex=t[e].index;break}}}let F=this.Lt(l,i,A);o&&(F=F.then(t=>{if(!t)return null;if(t.data)t.data.layer=l[0].layer;else if(Array.isArray(t))for(let e=0;e<t.length;e++)t[e]&&t[e].data&&(t[e].data.layer=l[0].layer);return t})),v.push(F)}return Promise.all(v).then(([n,...i])=>{function r(t,e){if(void 0===t.data.ref&&(t.data.type=s[m[e].idx].renderPlugin.dataConfig.type,t.data.filter=s[m[e].idx].filter.def,t.buffers&&t.buffers.length))for(let e=0;e<t.buffers.length;e++)g.push(t.buffers[e])}if(n!==this.Ot)return{canceled:!0};for(let t=0;t<i.length;t++){if(!i[t])continue;const e=i[t],n=0===s[m[t].idx].type?f:p;if(Array.isArray(e)){const i=[];for(let n=0;n<e.length;n++)e[n]&&(r(e[n],t),(void 0===e[n].data.ref||e[e[n].data.ref])&&i.push(e[n].data));i.length&&(n[m[t].typeIdx].data=i)}else r(e,t),n[m[t].typeIdx].data=e.data}const o={},a=t;if(y.features||y.schema||j){let t,n=!1;for(let i=0,r=e.length;i<r;i++)if(t=e[i],a[t.layer].properties||(a[t.layer].properties=zu(t.properties)),t&&(y.features||j&&b[i]))if("id"===y.features)o[i]=t.id;else{y.pickingGeometry||delete t.geometry,delete t.extent,delete t.properties.$layer,delete t.properties.$type,delete t.__index;const e=t.originalFeature;if(e){const e=t.properties,n=w({},t.originalFeature);delete e[Mu],n.customProps=w({},e),t=n}const r=w({},t);if(!y.features){const r=b[i];for(let i=0;i<r.length;i++){const r=M[i];r&&r.forEach(i=>{const r=e?e.properties:t.properties;r[ju]||(r[ju]=new Set),r[ju].add(i),n=!0})}}o[i]=r}if(n)for(const t in o){const e=o[t];if(e.properties[ju]){const t=e.properties[ju];delete e.properties[ju];for(const n in e.properties)t.has(n)||delete e.properties[n]}}}return{data:{schema:a,data:f,featureData:p,extent:c,features:o},buffers:g}}).catch(t=>{console.error(t)})}Lt(t,e,n){let i=t;const r=e.renderPlugin.dataConfig,o=e.symbol,s=this.options.tileSize,{extent:a,glScale:l,zScale:u,zoom:c,tilePoint:h,pointAtTileRes:d}=n,f=a/s,p=r.type,m=n.debugIndex;let y=w({},r,{EXTENT:a,zoom:c,debugIndex:m,features:this.options.features});if("3d-extrusion"===p){const t=Su(o);return t&&(r.uv=1,2===t&&(r.tangent=1)),Promise.all([Promise.resolve(lu(i,r,a,h,l,u,this.options.tileSize/a,o,c,m))])}if("3d-wireframe"===p)return Promise.all([Promise.resolve(du(i,a,o,r))]);if("point"===p){y=w(y,{requestor:this.fetchIconGlyphs.bind(this),altitudeToTileScale:u*a/this.options.tileSize/l});const t=pl.splitPointSymbol(o),e=na.genFnTypes(t[0]);return pl.needMerge(t[0],e,c)&&(i=pl.mergeLineFeatures(i,t[0],e,c)),Promise.all(t.map((t,n)=>(0===n?y.fnTypes=e:delete y.fnTypes,new pl(i,t,y).load(f))))}if("native-point"===p)return _u(i,o,y,Ol,a/s);if("line"===p)return y=w(y,{requestor:this.fetchIconGlyphs.bind(this),tileRatio:f}),_u(i,o,y,xl);if("native-line"===p)return _u(i,o,y,Pl);if("fill"===p)return y=w(y,{requestor:this.fetchIconGlyphs.bind(this)}),_u(i,o,y,Ll);if("line-extrusion"===p){delete o.lineGradientProperty,o.lineJoin="miter",o.lineCap="butt";const t=Su(o);if(t&&(r.uv=1,2===t&&(r.tangent=1)),y=w(y,{tileSize:s,zScale:u,glScale:l}),t){const t=[];if(!1!==r.top){const e=w({},y);e.side=!1,t.push(new Sl(i,o,e))}return!1!==r.side&&(y.side=!0,y.top=!1,t.push(new Sl(i,o,y))),Promise.all(t.map(t=>t.load()))}return Promise.all([new Sl(i,o,y).load()])}if("circle"===p)return _u(i,o,y,Ul);if("round-tube"===p||"square-tube"===p){const t="round-tube"===p?Wl:Zl;return y=w(y,{requestor:this.fetchIconGlyphs.bind(this),radialSegments:"round-tube"===p?r.radialSegments||8:4,pointAtTileRes:d,tileRatio:f,isTube:!0}),_u(i,o,y,t)}return Promise.resolve([])}Dt(t,e,n,i,r,o){const s="__fea_idx".trim(),a=[],l=[],u=i.length;for(let c=0;c<u;c++)if((1===e||void 0===i[c].id||!this.styledFeatures[i[c].id])&&((!n.def||"default"===n.def)&&!r[c]||!0===n.def||n.def&&(void 0!==n.def.condition||Array.isArray(n.def))&&n(i[c],t))){const t=i[c];if(void 0===t[s]&&(t[s]=c),r[c]||(r[c]=[]),r[c].push(o),l.push(t),a.push(c),1===e)break}return{tileFeatures:l,tileFeaIndexes:a}}Pt(t){const{style:e,featureStyle:n}=t,i={};n.forEach(t=>{Array.isArray(t.id)?(t.id.forEach(t=>{i[t]=1}),t.filter=["in","$id",...t.id]):(i[t.id]=1,t.filter=["==","$id",t.id])});const r=Xs.compileStyle(e);for(let t=0;t<e.length;t++)r[t].filter&&(r[t].filter.def=e[t].filter?e[t].filter.value||e[t].filter:void 0),r[t].type=0;const o=[],s=Xs.compileStyle(n);for(let t=0;t<n.length;t++)s[t].type=1,s[t].filter.def=n[t].filter?n[t].filter.value||n[t].filter:void 0,s[t].renderPlugin&&o.push(s[t]);this.pluginConfig=r,this.featurePlugins=o,this.styledFeatures=i}Rt(t){let e=this.$t;this.$t||(e=this.$t={});const n=["","Point","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon"],i=[];for(const o in t){const s=o;if(!e[o]){const i=[];for(let e=0;e<t[o].types.length;e++){const a=t[o].types[e],l=["all",["==","$layer",s],["==","$type",n[a]]],u={filter:(r=l,new Function("f","var p = (f && f.properties || {}); return "+pu(r))),renderPlugin:Fu(a),symbol:Tu(a)};u.filter.def=l,u.type=0,i.push(u)}e[s]=i}i.push(...e[s])}var r;return i}}function Fu(t){switch(t){case 1:return{type:"native-point",dataConfig:{type:"native-point",only2D:!0}};case 2:return{type:"native-line",dataConfig:{type:"native-line",only2D:!0}};case 3:return{type:"fill",dataConfig:{type:"fill",only2D:!0}}}return null}function Tu(t){switch(t){case 1:return{markerFill:"#f00",markerSize:10};case 2:return{lineColor:"#fff"};case 3:return{polygonFill:"#00f",polygonOpacity:.4}}return null}function zu(t){if(Array.isArray(t)||!j(t))return{};const e={};for(const n in t){const i=t[n];x(i)?e[n]="string":k(i)?e[n]="number":!0===i||!1===i?e[n]="boolean":Array.isArray(i)?e[n]="array":e[n]="object"}return e}function Su(t){if(!t)return 0;let e=0;for(const n in t){if(("normalTexture"===n||"bumpTexture"===n)&&t[n])return 2;if(n.indexOf("Texture")>0&&t[n])e=1;else if(j(t[n])){const i=Su(t[n]);if(2===i)return i;1===i&&(e=1)}}return e}function _u(t,e,n,i,r){const o={},s=Array.isArray(e)?e:[e];let a=-1;for(let t=0;t<s.length;t++)o[t]=Pu(s[t]),!o[t]&&s[t]&&-1===a&&(a=t);const l=[];for(let e=0;e<s.length;e++)s[e]&&(s[e].index={index:e},o[e]||e===a?l.push(new i(t,s[e],n).load(r)):l.push({data:{ref:a,symbolIndex:{index:e}}}));return Promise.all(l)}function Pu(t){if(!t)return 0;for(const e in t)if(T(t[e]))return 1;return 0}function Iu(t,e,n,i){const r=n.customProperties;if(!r)return t;if(r)for(let t=0;t<r.length;t++)r[t].fn=Xs.compileFilter(r[t].filter);for(let n=0;n<r.length;n++)for(let o=0,s=t.length;o<s;o++)if(r[n].fn(t[o],e))for(const t in r[n].properties){const e=r[n].properties[t];A(e)||(i[o]||(i[o]={}),i[o][t]||(i[o][t]=new Set),i[o][t].add(e))}}const Ou={get:(t,e)=>e in t?t[e]:t.originalFeature[e],has:(t,e)=>e in t||e in t.originalFeature},qu={get:function(t,e){return e in t?t[e]:t[Mu][e]},has:(t,e)=>e in t||e in t[Mu]},Cu={};function Nu(t){const e={};e.originalFeature=t;const n=new Proxy(e,Ou);return n.properties=new Proxy({},qu),n.properties[Mu]=t.properties||Cu,n}function Eu(t,e,n){t[e]||(t[e]=new Set),t[e].add(n)}const Ru=[];function Du(t,e,n){if(!t)return Ru;for(const i in t){if(!t[i]||!gi.checkIfZoomFnTypeSymbol(i))continue;if(T(t[i]))Eu(e,n,t[i].property);else{if("lineGradientProperty"===i){Eu(e,n,t[i]);continue}if("textName"===i)if(x(t[i])){const r=ca.resolveVarNames(t[i]);if(r)for(let t=0;t<r.length;t++)Eu(e,n,r[t])}else if(Xs.isExpression(t[i])){const r=[];ca.resolveExpVarNames(r,t[i]);for(let t=0;t<r.length;t++)Eu(e,n,r[t])}}const r=t[i].stops;if(r&&r.length)for(let t=0;t<r.length;t++)T(r[t][1])&&Eu(e,t,r[t][1].property)}return e[n]}function Lu(t,e){$u(t.geometry,e)}function $u(t,e){if(t)switch(t.type){case"Point":Uu(t.coordinates,e);break;case"MultiPoint":case"LineString":Wu(t.coordinates,e);break;case"MultiLineString":!function(t,e){for(let n=0,i=t.length;n<i;n++)Wu(t[n],e)}(t.coordinates,e);break;case"Polygon":Ju(t.coordinates,e);break;case"MultiPolygon":!function(t,e){for(let n=0,i=t.length;n<i;n++)Ju(t[n],e)}(t.coordinates,e);break;case"GeometryCollection":const n=t.geometries.length;for(let i=0;i<n;i++)$u(t.geometries[i],e)}}function Uu(t,e){e[0]=Math.min(e[0],t[0]),e[1]=Math.min(e[1],t[1]),e[2]=Math.max(e[2],t[0]),e[3]=Math.max(e[3],t[1])}function Wu(t,e){for(let n=0,i=t.length;n<i;n++)Uu(t[n],e)}function Ju(t,e){t.length&&Wu(t[0],e)}class Hu extends Au{constructor(t,e,n,i,r,o){super(t,e,n,i,r),(e=e||{}).extent||(e.extent=8192),this.zoomOffset=0,e.tileSize&&(this.zoomOffset=-function(t){if(Math.log2)return Math.log2(t);const e=Math.log(t)*Math.LOG2E,n=Math.round(e);return Math.abs(n-e)<1e-14?n:e}(e.tileSize/256)),this.setData(e.data,o)}setData(t,e){if(delete this.index,!t)return void e();const n={maxZoom:24,tolerance:this.options.simplifyTolerance,extent:this.options.extent,buffer:this.options.tileBuffer||64,hasAltitude:!!this.options.hasAltitude,debug:0,lineMetrics:!0,indexMaxZoom:5,indexMaxPoints:1e5,disableFilter:!0};if(this.options.projection&&(n.projection=this.options.projection),x(t)&&"{"!=t.substring(0,1)||t.url)S.getJSON(t.url?t.url:t,t.url?t:{},(t,i)=>{if(t&&e(t),!i)return void e(null,{extent:null,idMap:{}});const r=i,{first1000:o,idMap:s}=this.Ut(r);this.Wt(o,s,r,n,e)});else{"string"==typeof t&&(t=JSON.parse(t));const i=Array.isArray(t)?t:t.features;let r=i;i&&i.length>1e3&&(r=i.slice(0,1e3)),this.Wt(r,null,t,n,e)}}Wt(t,e,n,i,r){try{const o=t&&t.length?function(t){let e=[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY];switch(t.type){case"FeatureCollection":const n=t.features.length;for(let i=0;i<n;i++)Lu(t.features[i],e);break;case"Feature":Lu(t,e);break;default:$u(t,e)}return e}({type:"FeatureCollection",features:t}):null;this.index=function(t,e){return new rt(t,e)}(n,this.options.geojsonvt||i),r(null,{extent:o,idMap:e})}catch(t){console.warn(t),r({error:t.message})}}Ut(t){const e=[],n={};let i=0;function r(t){t&&("Feature"!==t.type||t.geometry)&&(void 0!==t.id&&null!==t.id||(t.id=i++),n[t.id]=w({},t),t.geometry?(n[t.id].geometry=w({},t.geometry),n[t.id].geometry.coordinates=null):t.coordinates&&(n[t.id].coordinates=null),e.length<1e3&&e.push(t))}return Array.isArray(t)?t.forEach(t=>{r(t)}):t.features&&t.features.forEach(t=>{r(t)}),{first1000:e,idMap:n}}getTileFeatures(t,e){const n=t.tileInfo,i=[];if(!this.index)return setTimeout((function(){e({loading:!0})}),1),1;const r=this.index.getTile(n.z+this.zoomOffset,n.x,n.y);if(!r||0===r.features.length)return setTimeout((function(){e(null,i,[])}),1),1;const o=[];for(let t=0,e=r.features.length;t<e;t++){const e=r.features[t];let n=e.layer;void 0===n&&(n="0"),o[n]={types:{}};o[n].types[e.type]=1,e.tags=e.tags||{},e.geometry.converted||(eu.convertGeometry(e),e.geometry.converted=1),i.push({type:e.type,layer:n,id:e.id,geometry:e.geometry,properties:e.tags,extent:this.options.extent})}for(const t in o)o[t].types=Object.keys(o[t].types).map(t=>+t);return setTimeout((function(){e(null,i,o)}),1),1}onRemove(){super.onRemove(),delete this.index}}var Gu={\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nread:function(t,e,n,i,r){var o,s,a=8*r-i-1,l=(1<<a)-1,u=l>>1,c=-7,h=n?r-1:0,d=n?-1:1,f=t[e+h];for(h+=d,o=f&(1<<-c)-1,f>>=-c,c+=a;c>0;o=256*o+t[e+h],h+=d,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=i;c>0;s=256*s+t[e+h],h+=d,c-=8);if(0===o)o=1-u;else{if(o===l)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,i),o-=u}return(f?-1:1)*s*Math.pow(2,o-i)},write:function(t,e,n,i,r,o){var s,a,l,u=8*o-r-1,c=(1<<u)-1,h=c>>1,d=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,f=i?0:o-1,p=i?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=c):(s=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-s))<1&&(s--,l*=2),(e+=s+h>=1?d/l:d*Math.pow(2,1-h))*l>=2&&(s++,l/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(e*l-1)*Math.pow(2,r),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,r),s=0));r>=8;t[n+f]=255&a,f+=p,a/=256,r-=8);for(s=s<<r|a,u+=r;u>0;t[n+f]=255&s,f+=p,s/=256,u-=8);t[n+f-p]|=128*m}},Vu=Zu,Bu=Gu;function Zu(t){this.buf=ArrayBuffer.isView&&ArrayBuffer.isView(t)?t:new Uint8Array(t||0),this.pos=0,this.type=0,this.length=this.buf.length}Zu.Varint=0,Zu.Fixed64=1,Zu.Bytes=2,Zu.Fixed32=5;var Xu="undefined"==typeof TextDecoder?null:new TextDecoder("utf8");function Yu(t){return t.type===Zu.Bytes?t.readVarint()+t.pos:t.pos+1}function Ku(t,e,n){return n?4294967296*e+(t>>>0):4294967296*(e>>>0)+(t>>>0)}function Qu(t,e,n){var i=e<=16383?1:e<=2097151?2:e<=268435455?3:Math.floor(Math.log(e)/(7*Math.LN2));n.realloc(i);for(var r=n.pos-1;r>=t;r--)n.buf[r+i]=n.buf[r]}function tc(t,e){for(var n=0;n<t.length;n++)e.writeVarint(t[n])}function ec(t,e){for(var n=0;n<t.length;n++)e.writeSVarint(t[n])}function nc(t,e){for(var n=0;n<t.length;n++)e.writeFloat(t[n])}function ic(t,e){for(var n=0;n<t.length;n++)e.writeDouble(t[n])}function rc(t,e){for(var n=0;n<t.length;n++)e.writeBoolean(t[n])}function oc(t,e){for(var n=0;n<t.length;n++)e.writeFixed32(t[n])}function sc(t,e){for(var n=0;n<t.length;n++)e.writeSFixed32(t[n])}function ac(t,e){for(var n=0;n<t.length;n++)e.writeFixed64(t[n])}function lc(t,e){for(var n=0;n<t.length;n++)e.writeSFixed64(t[n])}function uc(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+16777216*t[e+3]}function cc(t,e,n){t[n]=e,t[n+1]=e>>>8,t[n+2]=e>>>16,t[n+3]=e>>>24}function hc(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+(t[e+3]<<24)}Zu.prototype={destroy:function(){this.buf=null},readFields:function(t,e,n){for(n=n||this.length;this.pos<n;){var i=this.readVarint(),r=i>>3,o=this.pos;this.type=7&i,t(r,e,this),this.pos===o&&this.skip(i)}return e},readMessage:function(t,e){return this.readFields(t,e,this.readVarint()+this.pos)},readFixed32:function(){var t=uc(this.buf,this.pos);return this.pos+=4,t},readSFixed32:function(){var t=hc(this.buf,this.pos);return this.pos+=4,t},readFixed64:function(){var t=uc(this.buf,this.pos)+4294967296*uc(this.buf,this.pos+4);return this.pos+=8,t},readSFixed64:function(){var t=uc(this.buf,this.pos)+4294967296*hc(this.buf,this.pos+4);return this.pos+=8,t},readFloat:function(){var t=Bu.read(this.buf,this.pos,!0,23,4);return this.pos+=4,t},readDouble:function(){var t=Bu.read(this.buf,this.pos,!0,52,8);return this.pos+=8,t},readVarint:function(t){var e,n,i=this.buf;return e=127&(n=i[this.pos++]),n<128?e:(e|=(127&(n=i[this.pos++]))<<7,n<128?e:(e|=(127&(n=i[this.pos++]))<<14,n<128?e:(e|=(127&(n=i[this.pos++]))<<21,n<128?e:function(t,e,n){var i,r,o=n.buf;if(r=o[n.pos++],i=(112&r)>>4,r<128)return Ku(t,i,e);if(r=o[n.pos++],i|=(127&r)<<3,r<128)return Ku(t,i,e);if(r=o[n.pos++],i|=(127&r)<<10,r<128)return Ku(t,i,e);if(r=o[n.pos++],i|=(127&r)<<17,r<128)return Ku(t,i,e);if(r=o[n.pos++],i|=(127&r)<<24,r<128)return Ku(t,i,e);if(r=o[n.pos++],i|=(1&r)<<31,r<128)return Ku(t,i,e);throw new Error("Expected varint not more than 10 bytes")}(e|=(15&(n=i[this.pos]))<<28,t,this))))},readVarint64:function(){return this.readVarint(!0)},readSVarint:function(){var t=this.readVarint();return t%2==1?(t+1)/-2:t/2},readBoolean:function(){return Boolean(this.readVarint())},readString:function(){var t=this.readVarint()+this.pos,e=this.pos;return this.pos=t,t-e>=12&&Xu?function(t,e,n){return Xu.decode(t.subarray(e,n))}(this.buf,e,t):function(t,e,n){var i="",r=e;for(;r<n;){var o,s,a,l=t[r],u=null,c=l>239?4:l>223?3:l>191?2:1;if(r+c>n)break;1===c?l<128&&(u=l):2===c?128==(192&(o=t[r+1]))&&(u=(31&l)<<6|63&o)<=127&&(u=null):3===c?(o=t[r+1],s=t[r+2],128==(192&o)&&128==(192&s)&&((u=(15&l)<<12|(63&o)<<6|63&s)<=2047||u>=55296&&u<=57343)&&(u=null)):4===c&&(o=t[r+1],s=t[r+2],a=t[r+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&((u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)<=65535||u>=1114112)&&(u=null)),null===u?(u=65533,c=1):u>65535&&(u-=65536,i+=String.fromCharCode(u>>>10&1023|55296),u=56320|1023&u),i+=String.fromCharCode(u),r+=c}return i}(this.buf,e,t)},readBytes:function(){var t=this.readVarint()+this.pos,e=this.buf.subarray(this.pos,t);return this.pos=t,e},readPackedVarint:function(t,e){if(this.type!==Zu.Bytes)return t.push(this.readVarint(e));var n=Yu(this);for(t=t||[];this.pos<n;)t.push(this.readVarint(e));return t},readPackedSVarint:function(t){if(this.type!==Zu.Bytes)return t.push(this.readSVarint());var e=Yu(this);for(t=t||[];this.pos<e;)t.push(this.readSVarint());return t},readPackedBoolean:function(t){if(this.type!==Zu.Bytes)return t.push(this.readBoolean());var e=Yu(this);for(t=t||[];this.pos<e;)t.push(this.readBoolean());return t},readPackedFloat:function(t){if(this.type!==Zu.Bytes)return t.push(this.readFloat());var e=Yu(this);for(t=t||[];this.pos<e;)t.push(this.readFloat());return t},readPackedDouble:function(t){if(this.type!==Zu.Bytes)return t.push(this.readDouble());var e=Yu(this);for(t=t||[];this.pos<e;)t.push(this.readDouble());return t},readPackedFixed32:function(t){if(this.type!==Zu.Bytes)return t.push(this.readFixed32());var e=Yu(this);for(t=t||[];this.pos<e;)t.push(this.readFixed32());return t},readPackedSFixed32:function(t){if(this.type!==Zu.Bytes)return t.push(this.readSFixed32());var e=Yu(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed32());return t},readPackedFixed64:function(t){if(this.type!==Zu.Bytes)return t.push(this.readFixed64());var e=Yu(this);for(t=t||[];this.pos<e;)t.push(this.readFixed64());return t},readPackedSFixed64:function(t){if(this.type!==Zu.Bytes)return t.push(this.readSFixed64());var e=Yu(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed64());return t},skip:function(t){var e=7&t;if(e===Zu.Varint)for(;this.buf[this.pos++]>127;);else if(e===Zu.Bytes)this.pos=this.readVarint()+this.pos;else if(e===Zu.Fixed32)this.pos+=4;else{if(e!==Zu.Fixed64)throw new Error("Unimplemented type: "+e);this.pos+=8}},writeTag:function(t,e){this.writeVarint(t<<3|e)},realloc:function(t){for(var e=this.length||16;e<this.pos+t;)e*=2;if(e!==this.length){var n=new Uint8Array(e);n.set(this.buf),this.buf=n,this.length=e}},finish:function(){return this.length=this.pos,this.pos=0,this.buf.subarray(0,this.length)},writeFixed32:function(t){this.realloc(4),cc(this.buf,t,this.pos),this.pos+=4},writeSFixed32:function(t){this.realloc(4),cc(this.buf,t,this.pos),this.pos+=4},writeFixed64:function(t){this.realloc(8),cc(this.buf,-1&t,this.pos),cc(this.buf,Math.floor(t*(1/4294967296)),this.pos+4),this.pos+=8},writeSFixed64:function(t){this.realloc(8),cc(this.buf,-1&t,this.pos),cc(this.buf,Math.floor(t*(1/4294967296)),this.pos+4),this.pos+=8},writeVarint:function(t){(t=+t||0)>268435455||t<0?function(t,e){var n,i;t>=0?(n=t%4294967296|0,i=t/4294967296|0):(i=~(-t/4294967296),4294967295^(n=~(-t%4294967296))?n=n+1|0:(n=0,i=i+1|0));if(t>=0x10000000000000000||t<-0x10000000000000000)throw new Error("Given varint doesn\'t fit into 10 bytes");e.realloc(10),function(t,e,n){n.buf[n.pos++]=127&t|128,t>>>=7,n.buf[n.pos++]=127&t|128,t>>>=7,n.buf[n.pos++]=127&t|128,t>>>=7,n.buf[n.pos++]=127&t|128,t>>>=7,n.buf[n.pos]=127&t}(n,0,e),function(t,e){var n=(7&t)<<4;if(e.buf[e.pos++]|=n|((t>>>=3)?128:0),!t)return;if(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),!t)return;if(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),!t)return;if(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),!t)return;if(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),!t)return;e.buf[e.pos++]=127&t}(i,e)}(t,this):(this.realloc(4),this.buf[this.pos++]=127&t|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=t>>>7&127))))},writeSVarint:function(t){this.writeVarint(t<0?2*-t-1:2*t)},writeBoolean:function(t){this.writeVarint(Boolean(t))},writeString:function(t){t=String(t),this.realloc(4*t.length),this.pos++;var e=this.pos;this.pos=function(t,e,n){for(var i,r,o=0;o<e.length;o++){if((i=e.charCodeAt(o))>55295&&i<57344){if(!r){i>56319||o+1===e.length?(t[n++]=239,t[n++]=191,t[n++]=189):r=i;continue}if(i<56320){t[n++]=239,t[n++]=191,t[n++]=189,r=i;continue}i=r-55296<<10|i-56320|65536,r=null}else r&&(t[n++]=239,t[n++]=191,t[n++]=189,r=null);i<128?t[n++]=i:(i<2048?t[n++]=i>>6|192:(i<65536?t[n++]=i>>12|224:(t[n++]=i>>18|240,t[n++]=i>>12&63|128),t[n++]=i>>6&63|128),t[n++]=63&i|128)}return n}(this.buf,t,this.pos);var n=this.pos-e;n>=128&&Qu(e,n,this),this.pos=e-1,this.writeVarint(n),this.pos+=n},writeFloat:function(t){this.realloc(4),Bu.write(this.buf,t,this.pos,!0,23,4),this.pos+=4},writeDouble:function(t){this.realloc(8),Bu.write(this.buf,t,this.pos,!0,52,8),this.pos+=8},writeBytes:function(t){var e=t.length;this.writeVarint(e),this.realloc(e);for(var n=0;n<e;n++)this.buf[this.pos++]=t[n]},writeRawMessage:function(t,e){this.pos++;var n=this.pos;t(e,this);var i=this.pos-n;i>=128&&Qu(n,i,this),this.pos=n-1,this.writeVarint(i),this.pos+=i},writeMessage:function(t,e,n){this.writeTag(t,Zu.Bytes),this.writeRawMessage(e,n)},writePackedVarint:function(t,e){e.length&&this.writeMessage(t,tc,e)},writePackedSVarint:function(t,e){e.length&&this.writeMessage(t,ec,e)},writePackedBoolean:function(t,e){e.length&&this.writeMessage(t,rc,e)},writePackedFloat:function(t,e){e.length&&this.writeMessage(t,nc,e)},writePackedDouble:function(t,e){e.length&&this.writeMessage(t,ic,e)},writePackedFixed32:function(t,e){e.length&&this.writeMessage(t,oc,e)},writePackedSFixed32:function(t,e){e.length&&this.writeMessage(t,sc,e)},writePackedFixed64:function(t,e){e.length&&this.writeMessage(t,ac,e)},writePackedSFixed64:function(t,e){e.length&&this.writeMessage(t,lc,e)},writeBytesField:function(t,e){this.writeTag(t,Zu.Bytes),this.writeBytes(e)},writeFixed32Field:function(t,e){this.writeTag(t,Zu.Fixed32),this.writeFixed32(e)},writeSFixed32Field:function(t,e){this.writeTag(t,Zu.Fixed32),this.writeSFixed32(e)},writeFixed64Field:function(t,e){this.writeTag(t,Zu.Fixed64),this.writeFixed64(e)},writeSFixed64Field:function(t,e){this.writeTag(t,Zu.Fixed64),this.writeSFixed64(e)},writeVarintField:function(t,e){this.writeTag(t,Zu.Varint),this.writeVarint(e)},writeSVarintField:function(t,e){this.writeTag(t,Zu.Varint),this.writeSVarint(e)},writeStringField:function(t,e){this.writeTag(t,Zu.Bytes),this.writeString(e)},writeFloatField:function(t,e){this.writeTag(t,Zu.Fixed32),this.writeFloat(e)},writeDoubleField:function(t,e){this.writeTag(t,Zu.Fixed64),this.writeDouble(e)},writeBooleanField:function(t,e){this.writeVarintField(t,Boolean(e))}};var dc=Rt,fc=pc;function pc(t,e,n,i,r){this.properties={},this.extent=n,this.type=0,this.Jt=t,this.Ht=-1,this.Gt=i,this.Vt=r,t.readFields(mc,this,e)}function mc(t,e,n){1==t?e.id=n.readVarint():2==t?function(t,e){var n=t.readVarint()+t.pos;for(;t.pos<n;){var i=e.Gt[t.readVarint()],r=e.Vt[t.readVarint()];e.properties[i]=r}}(n,e):3==t?e.type=n.readVarint():4==t&&(e.Ht=n.pos)}function yc(t){for(var e,n,i=0,r=0,o=t.length,s=o-1;r<o;s=r++)e=t[r],i+=((n=t[s]).x-e.x)*(e.y+n.y);return i}pc.types=["Unknown","Point","LineString","Polygon"],pc.prototype.loadGeometry=function(){var t=this.Jt;t.pos=this.Ht;for(var e,n=t.readVarint()+t.pos,i=1,r=0,o=0,s=0,a=[];t.pos<n;){if(r<=0){var l=t.readVarint();i=7&l,r=l>>3}if(r--,1===i||2===i)o+=t.readSVarint(),s+=t.readSVarint(),1===i&&(e&&a.push(e),e=[]),e.push(new dc(o,s));else{if(7!==i)throw new Error("unknown command "+i);e&&e.push(e[0].clone())}}return e&&a.push(e),a},pc.prototype.bbox=function(){var t=this.Jt;t.pos=this.Ht;for(var e=t.readVarint()+t.pos,n=1,i=0,r=0,o=0,s=1/0,a=-1/0,l=1/0,u=-1/0;t.pos<e;){if(i<=0){var c=t.readVarint();n=7&c,i=c>>3}if(i--,1===n||2===n)(r+=t.readSVarint())<s&&(s=r),r>a&&(a=r),(o+=t.readSVarint())<l&&(l=o),o>u&&(u=o);else if(7!==n)throw new Error("unknown command "+n)}return[s,l,a,u]},pc.prototype.toGeoJSON=function(t,e,n){var i,r,o=this.extent*Math.pow(2,n),s=this.extent*t,a=this.extent*e,l=this.loadGeometry(),u=pc.types[this.type];function c(t){for(var e=0;e<t.length;e++){var n=t[e],i=180-360*(n.y+a)/o;t[e]=[360*(n.x+s)/o-180,360/Math.PI*Math.atan(Math.exp(i*Math.PI/180))-90]}}switch(this.type){case 1:var h=[];for(i=0;i<l.length;i++)h[i]=l[i][0];c(l=h);break;case 2:for(i=0;i<l.length;i++)c(l[i]);break;case 3:for(l=function(t){var e=t.length;if(e<=1)return[t];for(var n,i,r=[],o=0;o<e;o++){var s=yc(t[o]);0!==s&&(void 0===i&&(i=s<0),i===s<0?(n&&r.push(n),n=[t[o]]):n.push(t[o]))}n&&r.push(n);return r}(l),i=0;i<l.length;i++)for(r=0;r<l[i].length;r++)c(l[i][r])}1===l.length?l=l[0]:u="Multi"+u;var d={type:"Feature",geometry:{type:u,coordinates:l},properties:this.properties};return"id"in this&&(d.id=this.id),d};var gc=fc,bc=vc;function vc(t,e){this.version=1,this.name=null,this.extent=4096,this.length=0,this.Jt=t,this.Gt=[],this.Vt=[],this.Bt=[],t.readFields(wc,this,e),this.length=this.Bt.length}function wc(t,e,n){15===t?e.version=n.readVarint():1===t?e.name=n.readString():5===t?e.extent=n.readVarint():2===t?e.Bt.push(n.pos):3===t?e.Gt.push(n.readString()):4===t&&e.Vt.push(function(t){var e=null,n=t.readVarint()+t.pos;for(;t.pos<n;){var i=t.readVarint()>>3;e=1===i?t.readString():2===i?t.readFloat():3===i?t.readDouble():4===i?t.readVarint64():5===i?t.readVarint():6===i?t.readSVarint():7===i?t.readBoolean():null}return e}(n))}vc.prototype.feature=function(t){if(t<0||t>=this.Bt.length)throw new Error("feature index out of bounds");this.Jt.pos=this.Bt[t];var e=this.Jt.readVarint()+this.Jt.pos;return new gc(this.Jt,e,this.extent,this.Gt,this.Vt)};var xc=bc;function kc(t,e,n){if(3===t){var i=new xc(n,n.readVarint()+n.pos);i.length&&(e[i.name]=i)}}var Mc=function(t,e){this.layers=t.readFields(kc,{},e)};class jc extends Au{constructor(t,e,n,i,r,o){super(t,e,n,i,r),e=e||{},o()}getTileFeatures(t,e){const n=t.tileInfo.url,i=t.fetchOptions;if(this.It.has(n)){const{err:t,data:i}=this.It.get(n);return setTimeout(()=>{this.Zt(n,t,i,e)},1)}return S.getArrayBuffer(n,i,(t,i)=>{t?t.loading||this.It.add(n,{err:t,data:i&&i.data}):i&&i.data&&this.It.add(n,{err:null,data:i.data}),this.Zt(n,t,i&&i.data,e)})}Zt(t,e,n,i){if(e)return void i(e);let r;try{r=new Mc(new Vu(n))}catch(e){return void i(e.message,[],[])}const o=[];if(!r.layers)return void i(null,o,[]);const s={};let a;for(const t in r.layers)if(l=r.layers,u=t,Object.prototype.hasOwnProperty.call(l,u)){s[t]={types:{}};const n=s[t].types;for(let i=0,s=r.layers[t].length;i<s;i++)try{a=r.layers[t].feature(i),n[a.type]=1;const e={type:a.type,layer:t,geometry:a.loadGeometry(),properties:a.properties,extent:a.extent};void 0!==a.id&&(e.id=a.id),o.push(e)}catch(e){console.warn("error when load vt geometry:",e)}}var l,u;for(const t in s)s[t].types=Object.keys(s[t].types).map(t=>+t);i(null,o,s,{byteLength:n.byteLength})}abortTile(t,e){const n=this.requests[t];delete this.requests[t],n&&n.abort&&n.abort(),this.Et(t),e()}onRemove(){super.onRemove();for(const t in this.requests){const e=this.requests[t];e&&e.abort&&e.abort()}this.requests={}}}let Ac=0;const Fc=new class{constructor(t){this.max=t,this.reset()}reset(){return this.data={},this.order=[],this}clear(){this.reset()}add(t,e){return this.has(t)?(this.order.splice(this.order.indexOf(t),1),this.data[t]=e,this.order.push(t)):(this.data[t]=e,this.order.push(t),this.order.length>this.max&&this.getAndRemove(this.order[0])),this}has(t){return t in this.data}keys(){return this.order}getAndRemove(t){if(!this.has(t))return null;const e=this.data[t];return delete this.data[t],this.order.splice(this.order.indexOf(t),1),e}get(t){return this.has(t)?this.data[t]:null}remove(t){return this.has(t)?(delete this.data[t],this.order.splice(this.order.indexOf(t),1),this):this}setMaxSize(t){for(this.max=t;this.order.length>this.max;)this.getAndRemove(this.order[0]);return this}}(32);class Tc{constructor(t){this.Xt={},this.Yt={},this.workerId=t}addLayer({actorId:t,mapId:e,layerId:n,params:i},r){if(this.Kt(e,n))return;const o=this.Qt(e,n),s=i.type,a=i.options,l=this.send.bind(this,t);this.Xt[o]="GeoJSONVectorTileLayer"===s?new Hu(n,a,l,Fc,{},r):new jc(n,a,l,Fc,{},r)}removeLayer({mapId:t,layerId:e},n){const i=this.Kt(t,e),r=this.Qt(t,e);delete this.Xt[r],i&&i.onRemove(n)}loadTile({mapId:t,layerId:e,params:n},i){const r=this.Kt(t,e);r&&r.loadTile(n,i)}abortTile({mapId:t,layerId:e,params:n},i){const r=this.Kt(t,e);r&&r.abortTile&&r.abortTile(n.url,i)}removeTile({mapId:t,layerId:e,params:n},i){const r=this.Kt(t,e);r&&r.removeTile(n,i)}updateStyle({mapId:t,layerId:e,params:n},i){const r=this.Kt(t,e);r&&r.updateStyle(n,i)}updateOptions({mapId:t,layerId:e,params:n},i){const r=this.Kt(t,e);r&&r.updateOptions(n,i)}setData({mapId:t,layerId:e,params:n},i){const r=this.Kt(t,e);r&&r.setData(n.data,i)}receive(t){const e=t.callback,n=this.Yt[e];delete this.Yt[e],n&&t.error?n(new Error(t.error)):n&&n(null,t.data)}send(t,e,n,i,r){const o=r?`${t}-${Ac++}`:null;r&&(this.Yt[o]=r),postMessage({type:"<request>",workerId:this.workerId,actorId:t,command:e,params:n,callback:String(o)},i||[])}Qt(t,e){return`${t}-${e}`}Kt(t,e){const n=this.Qt(t,e);return this.Xt[n]}te(){Fc.reset()}}t.initialize=function(){},t.onmessage=function(t,e){const n=t.data;if(this.dispatcher||(this.dispatcher=new Tc(t.workerId)),"<response>"===t.type)this.dispatcher.workerId===t.workerId&&this.dispatcher.receive(t);else{const i=n.command;this.dispatcher[i]({actorId:t.actorId,mapId:n.mapId,layerId:n.layerId,params:n.params},(t,n,r)=>{t&&404!==t.status&&console.error(i,t),e(t,n,r)})}},Object.defineProperty(t,"ee",{value:!0})}';
    let a;
    const l = {
        width: 100,
        height: 10
    };
    function u() {
        if (!a) {
            const {width: t, height: e} = l;
            OffscreenCanvas ? a = new OffscreenCanvas(t, e) : (a = document.createElement("canvas"), 
            a.width = t, a.height = e);
        }
        return a;
    }
    class c {
        constructor(t, e = {}) {
            if (!Array.isArray(t)) return void console.error("colors is not array");
            if (t.length < 2) return void console.error("colors.length should >1");
            this.colors = t;
            let n = 1 / 0, i = -1 / 0;
            for (let e = 0, r = t.length; e < r; e++) {
                const r = t[e][0];
                n = Math.min(r, n), i = Math.max(r, i);
            }
            this.min = n, this.max = i, this.valueOffset = this.max - this.min, this.options = Object.assign({}, l, e), 
            this.o();
        }
        getImageData() {
            return this.imgData;
        }
        o() {
            const t = u(), {width: e, height: n} = this.options;
            t.width = e, t.height = n;
            const i = t.getContext("2d");
            i.clearRect(0, 0, t.width, t.height);
            const r = i.createLinearGradient(0, 0, t.width, 0), {colors: o, valueOffset: s} = this;
            for (let t = 0, e = o.length; t < e; t++) {
                const [e, n] = o[t], i = (e - this.min) / s;
                r.addColorStop(i, n);
            }
            i.fillStyle = r, i.fillRect(0, 0, t.width, t.height), this.imgData = i.getImageData(0, 0, t.width, t.height);
        }
        getColor(t) {
            t = Math.max(this.min, t);
            const e = ((t = Math.min(t, this.max)) - this.min) / this.valueOffset;
            let n = Math.round(e * this.imgData.width);
            n = Math.min(n, this.imgData.width - 1);
            const i = 4 * n;
            return [ this.imgData.data[i], this.imgData.data[i + 1], this.imgData.data[i + 2], this.imgData.data[i + 3] ];
        }
    }
    var h;
    function d(t, e) {
        for (let n = 0; n < t.stops.length; n++) if (e === t.stops[n][0]) return t.stops[n][1];
        return t.default;
    }
    function f(t, e) {
        for (var n = 0; n < t.stops.length && !(e < t.stops[n][0]); n++) ;
        return t.stops[Math.max(n - 1, 0)][1];
    }
    function p(t, e) {
        for (var n = void 0 !== t.base ? t.base : 1, i = 0; !(i >= t.stops.length || e <= t.stops[i][0]); ) i++;
        return 0 === i ? t.stops[i][1] : i === t.stops.length ? t.stops[i - 1][1] : function t(e, n, i, r, o, s) {
            return "function" == typeof o ? function() {
                var a = o.apply(void 0, arguments), l = s.apply(void 0, arguments);
                return t(e, n, i, r, a, l);
            } : o.length ? function(t, e, n, i, r, o) {
                var s = [];
                for (let a = 0; a < r.length; a++) s[a] = b(t, e, n, i, r[a], o[a]);
                return s;
            }(e, n, i, r, o, s) : b(e, n, i, r, o, s);
        }(e, n, t.stops[i - 1][0], t.stops[i][0], t.stops[i - 1][1], t.stops[i][1]);
    }
    "function" == typeof Map && (h = new Map);
    const m = {
        width: 100,
        height: 1
    };
    function y(t, e) {
        const n = t.stops;
        if (n && n.length > 1) {
            let t;
            if (h) {
                const e = JSON.stringify(n);
                if (!h.has(e)) {
                    const t = new c(n, m);
                    h.set(e, t);
                }
                t = h.get(e);
            } else t = new c(n, m);
            const [i, r, o, s] = t.getColor(e);
            return [ i / 255, r / 255, o / 255, s / 255 ];
        }
        return n && 1 === n.length ? n[0][1] : null;
    }
    function g(t, e) {
        return function(t, e, n) {
            return void 0 !== t ? t : void 0 !== e ? e : void 0 !== n ? n : null;
        }(e, t.default);
    }
    function b(t, e, n, i, r, o) {
        var s, a = i - n, l = t - n;
        return r * (1 - (s = 1 === e ? l / a : (Math.pow(e, l) - 1) / (Math.pow(e, a) - 1))) + o * s;
    }
    function v(t) {
        return t && "object" == typeof t && (t.stops || t.property && "identity" === t.type);
    }
    function x(t) {
        return A(t, "exponential");
    }
    function w(t) {
        return A(t, "interval");
    }
    function k(t, e) {
        if (!t) return null;
        var n = !1;
        if (Array.isArray(t)) {
            var i, r = [];
            for (let o = 0; o < t.length; o++) (i = k(t[o], e)) ? (r.push(i), n = !0) : r.push(t[o]);
            return n ? r : t;
        }
        var o, s = {
            __fn_types_loaded: !0
        }, a = [];
        for (o in t) t.hasOwnProperty(o) && a.push(o);
        const l = function(t) {
            Object.defineProperty(s, t, {
                get: function() {
                    return this["__fn_" + t] || (this["__fn_" + t] = x(this["_" + t])), this["__fn_" + t].apply(this, e());
                },
                set: function(e) {
                    this["_" + t] = e;
                },
                configurable: !0,
                enumerable: !0
            });
        };
        for (let e = 0, i = a.length; e < i; e++) v(t[o = a[e]]) ? (n = !0, s["_" + o] = t[o], 
        l(o)) : s[o] = t[o];
        return n ? s : t;
    }
    function A(t, e) {
        if (!v(t)) return function() {
            return t;
        };
        let n = !0, i = !0;
        const r = (t = JSON.parse(JSON.stringify(t))).stops;
        if (r) for (let t = 0; t < r.length; t++) if (v(r[t][1])) {
            const o = A(r[t][1], e);
            n = n && o.isZoomConstant, i = i && o.isFeatureConstant, r[t] = [ r[t][0], o ];
        }
        const o = function t(e, n) {
            var i, r, o;
            if (v(e)) {
                var s, a = e.stops && "object" == typeof e.stops[0][0], l = a || void 0 !== e.property, u = a || !l, c = e.type || n || "exponential";
                if ("exponential" === c) s = p; else if ("interval" === c) s = f; else if ("categorical" === c) s = d; else if ("identity" === c) s = g; else {
                    if ("color-interpolate" !== c) throw new Error('Unknown function type "' + c + '"');
                    s = y;
                }
                if (a) {
                    var h = {}, m = [];
                    for (let t = 0; t < e.stops.length; t++) {
                        var b = e.stops[t];
                        void 0 === h[b[0].zoom] && (h[b[0].zoom] = {
                            zoom: b[0].zoom,
                            type: e.type,
                            property: e.property,
                            default: e.default,
                            stops: []
                        }), h[b[0].zoom].stops.push([ b[0].value, b[1] ]);
                    }
                    for (let e in h) m.push([ h[e].zoom, t(h[e]) ]);
                    i = function(t, n) {
                        const i = p({
                            stops: m,
                            base: e.base
                        }, t)(t, n);
                        return "function" == typeof i ? i(t, n) : i;
                    }, r = !1, o = !1;
                } else u ? (i = function(t) {
                    const n = s(e, t);
                    return "function" == typeof n ? n(t) : n;
                }, r = !0, o = !1) : (i = function(t, n) {
                    const i = s(e, n ? n[e.property] : null);
                    return "function" == typeof i ? i(t, n) : i;
                }, r = !1, o = !0);
            } else i = function() {
                return e;
            }, r = !0, o = !0;
            return i.isZoomConstant = o, i.isFeatureConstant = r, i;
        }(t, e);
        return o.isZoomConstant = n && o.isZoomConstant, o.isFeatureConstant = i && o.isFeatureConstant, 
        o;
    }
    let _ = 0;
    function T() {
        return _++;
    }
    const S = "function" == typeof Object.assign;
    function M(t, ...e) {
        if (S) return Object.assign(t, ...e), t;
        for (let n = 0; n < e.length; n++) {
            const i = e[n];
            for (const e in i) t[e] = i[e];
        }
        return t;
    }
    function P(t) {
        return !j(t) && ("string" == typeof t || null !== t.constructor && t.constructor === String);
    }
    function I(t) {
        return !j(t) && ("function" == typeof t || null !== t.constructor && t.constructor === Function);
    }
    function j(t) {
        return null == t;
    }
    function z(t) {
        for (let e = 1; e < arguments.length; e++) {
            const n = arguments[e];
            if (n) for (let e = 0, i = n.length; e < i; e++) t.push(n[e]);
        }
        return t.length;
    }
    function F(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e);
    }
    function O(t, e) {
        let n;
        return n = e.altitudeToPoint ? e.altitudeToPoint(100, t) : e.distanceToPointAtRes(100, 0, t).x, 
        n / 100 / 100;
    }
    "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self;
    var C = E;
    function E(t, e) {
        this.x = t, this.y = e;
    }
    function R(t, e, n) {
        n = n || {}, this.w = t || 64, this.h = e || 64, this.autoResize = !!n.autoResize, 
        this.shelves = [], this.freebins = [], this.stats = {}, this.bins = {}, this.maxId = 0;
    }
    function N(t, e, n) {
        this.x = 0, this.y = t, this.w = this.free = e, this.h = n;
    }
    function D(t, e, n, i, r, o, s) {
        this.id = t, this.x = e, this.y = n, this.w = i, this.h = r, this.maxw = o || i, 
        this.maxh = s || r, this.refcount = 0;
    }
    E.prototype = {
        clone: function() {
            return new E(this.x, this.y);
        },
        add: function(t) {
            return this.clone().s(t);
        },
        sub: function(t) {
            return this.clone().u(t);
        },
        multByPoint: function(t) {
            return this.clone().m(t);
        },
        divByPoint: function(t) {
            return this.clone().k(t);
        },
        mult: function(t) {
            return this.clone().A(t);
        },
        div: function(t) {
            return this.clone()._(t);
        },
        rotate: function(t) {
            return this.clone().T(t);
        },
        rotateAround: function(t, e) {
            return this.clone().S(t, e);
        },
        matMult: function(t) {
            return this.clone().M(t);
        },
        unit: function() {
            return this.clone().P();
        },
        perp: function() {
            return this.clone().I();
        },
        round: function() {
            return this.clone().j();
        },
        mag: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        },
        equals: function(t) {
            return this.x === t.x && this.y === t.y;
        },
        dist: function(t) {
            return Math.sqrt(this.distSqr(t));
        },
        distSqr: function(t) {
            var e = t.x - this.x, n = t.y - this.y;
            return e * e + n * n;
        },
        angle: function() {
            return Math.atan2(this.y, this.x);
        },
        angleTo: function(t) {
            return Math.atan2(this.y - t.y, this.x - t.x);
        },
        angleWith: function(t) {
            return this.angleWithSep(t.x, t.y);
        },
        angleWithSep: function(t, e) {
            return Math.atan2(this.x * e - this.y * t, this.x * t + this.y * e);
        },
        M: function(t) {
            var e = t[0] * this.x + t[1] * this.y, n = t[2] * this.x + t[3] * this.y;
            return this.x = e, this.y = n, this;
        },
        s: function(t) {
            return this.x += t.x, this.y += t.y, this;
        },
        u: function(t) {
            return this.x -= t.x, this.y -= t.y, this;
        },
        A: function(t) {
            return this.x *= t, this.y *= t, this;
        },
        _: function(t) {
            return this.x /= t, this.y /= t, this;
        },
        m: function(t) {
            return this.x *= t.x, this.y *= t.y, this;
        },
        k: function(t) {
            return this.x /= t.x, this.y /= t.y, this;
        },
        P: function() {
            return this._(this.mag()), this;
        },
        I: function() {
            var t = this.y;
            return this.y = this.x, this.x = -t, this;
        },
        T: function(t) {
            var e = Math.cos(t), n = Math.sin(t), i = e * this.x - n * this.y, r = n * this.x + e * this.y;
            return this.x = i, this.y = r, this;
        },
        S: function(t, e) {
            var n = Math.cos(t), i = Math.sin(t), r = e.x + n * (this.x - e.x) - i * (this.y - e.y), o = e.y + i * (this.x - e.x) + n * (this.y - e.y);
            return this.x = r, this.y = o, this;
        },
        j: function() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
        }
    }, E.convert = function(t) {
        return t instanceof E ? t : Array.isArray(t) ? new E(t[0], t[1]) : t;
    }, R.prototype.pack = function(t, e) {
        t = [].concat(t), e = e || {};
        for (var n, i, r, o, s = [], a = 0; a < t.length; a++) if (n = t[a].w || t[a].width, 
        i = t[a].h || t[a].height, r = t[a].id, n && i) {
            if (!(o = this.packOne(n, i, r))) continue;
            e.inPlace && (t[a].x = o.x, t[a].y = o.y, t[a].id = o.id), s.push(o);
        }
        return this.shrink(), s;
    }, R.prototype.packOne = function(t, e, n) {
        var i, r, o, s, a, l, u, c, h = {
            freebin: -1,
            shelf: -1,
            waste: 1 / 0
        }, d = 0;
        if ("string" == typeof n || "number" == typeof n) {
            if (i = this.getBin(n)) return this.ref(i), i;
            "number" == typeof n && (this.maxId = Math.max(n, this.maxId));
        } else n = ++this.maxId;
        for (s = 0; s < this.freebins.length; s++) {
            if (e === (i = this.freebins[s]).maxh && t === i.maxw) return this.allocFreebin(s, t, e, n);
            e > i.maxh || t > i.maxw || e <= i.maxh && t <= i.maxw && (o = i.maxw * i.maxh - t * e) < h.waste && (h.waste = o, 
            h.freebin = s);
        }
        for (s = 0; s < this.shelves.length; s++) if (d += (r = this.shelves[s]).h, !(t > r.free)) {
            if (e === r.h) return this.allocShelf(s, t, e, n);
            e > r.h || e < r.h && (o = (r.h - e) * t) < h.waste && (h.freebin = -1, h.waste = o, 
            h.shelf = s);
        }
        return -1 !== h.freebin ? this.allocFreebin(h.freebin, t, e, n) : -1 !== h.shelf ? this.allocShelf(h.shelf, t, e, n) : e <= this.h - d && t <= this.w ? (r = new N(d, this.w, e), 
        this.allocShelf(this.shelves.push(r) - 1, t, e, n)) : this.autoResize ? (a = l = this.h, 
        ((u = c = this.w) <= a || t > u) && (c = 2 * Math.max(t, u)), (a < u || e > a) && (l = 2 * Math.max(e, a)), 
        this.resize(c, l), this.packOne(t, e, n)) : null;
    }, R.prototype.allocFreebin = function(t, e, n, i) {
        var r = this.freebins.splice(t, 1)[0];
        return r.id = i, r.w = e, r.h = n, r.refcount = 0, this.bins[i] = r, this.ref(r), 
        r;
    }, R.prototype.allocShelf = function(t, e, n, i) {
        var r = this.shelves[t].alloc(e, n, i);
        return this.bins[i] = r, this.ref(r), r;
    }, R.prototype.shrink = function() {
        if (this.shelves.length > 0) {
            for (var t = 0, e = 0, n = 0; n < this.shelves.length; n++) {
                var i = this.shelves[n];
                e += i.h, t = Math.max(i.w - i.free, t);
            }
            this.resize(t, e);
        }
    }, R.prototype.getBin = function(t) {
        return this.bins[t];
    }, R.prototype.ref = function(t) {
        if (1 == ++t.refcount) {
            var e = t.h;
            this.stats[e] = 1 + (0 | this.stats[e]);
        }
        return t.refcount;
    }, R.prototype.unref = function(t) {
        return 0 === t.refcount ? 0 : (0 == --t.refcount && (this.stats[t.h]--, delete this.bins[t.id], 
        this.freebins.push(t)), t.refcount);
    }, R.prototype.clear = function() {
        this.shelves = [], this.freebins = [], this.stats = {}, this.bins = {}, this.maxId = 0;
    }, R.prototype.resize = function(t, e) {
        this.w = t, this.h = e;
        for (var n = 0; n < this.shelves.length; n++) this.shelves[n].resize(t);
        return !0;
    }, N.prototype.alloc = function(t, e, n) {
        if (t > this.free || e > this.h) return null;
        var i = this.x;
        return this.x += t, this.free -= t, new D(n, i, this.y, t, e, t, this.h);
    }, N.prototype.resize = function(t) {
        return this.free += t - this.w, this.w = t, !0;
    };
    var L = {
        exports: {}
    }, H = {
        aliceblue: [ 240, 248, 255 ],
        antiquewhite: [ 250, 235, 215 ],
        aqua: [ 0, 255, 255 ],
        aquamarine: [ 127, 255, 212 ],
        azure: [ 240, 255, 255 ],
        beige: [ 245, 245, 220 ],
        bisque: [ 255, 228, 196 ],
        black: [ 0, 0, 0 ],
        blanchedalmond: [ 255, 235, 205 ],
        blue: [ 0, 0, 255 ],
        blueviolet: [ 138, 43, 226 ],
        brown: [ 165, 42, 42 ],
        burlywood: [ 222, 184, 135 ],
        cadetblue: [ 95, 158, 160 ],
        chartreuse: [ 127, 255, 0 ],
        chocolate: [ 210, 105, 30 ],
        coral: [ 255, 127, 80 ],
        cornflowerblue: [ 100, 149, 237 ],
        cornsilk: [ 255, 248, 220 ],
        crimson: [ 220, 20, 60 ],
        cyan: [ 0, 255, 255 ],
        darkblue: [ 0, 0, 139 ],
        darkcyan: [ 0, 139, 139 ],
        darkgoldenrod: [ 184, 134, 11 ],
        darkgray: [ 169, 169, 169 ],
        darkgreen: [ 0, 100, 0 ],
        darkgrey: [ 169, 169, 169 ],
        darkkhaki: [ 189, 183, 107 ],
        darkmagenta: [ 139, 0, 139 ],
        darkolivegreen: [ 85, 107, 47 ],
        darkorange: [ 255, 140, 0 ],
        darkorchid: [ 153, 50, 204 ],
        darkred: [ 139, 0, 0 ],
        darksalmon: [ 233, 150, 122 ],
        darkseagreen: [ 143, 188, 143 ],
        darkslateblue: [ 72, 61, 139 ],
        darkslategray: [ 47, 79, 79 ],
        darkslategrey: [ 47, 79, 79 ],
        darkturquoise: [ 0, 206, 209 ],
        darkviolet: [ 148, 0, 211 ],
        deeppink: [ 255, 20, 147 ],
        deepskyblue: [ 0, 191, 255 ],
        dimgray: [ 105, 105, 105 ],
        dimgrey: [ 105, 105, 105 ],
        dodgerblue: [ 30, 144, 255 ],
        firebrick: [ 178, 34, 34 ],
        floralwhite: [ 255, 250, 240 ],
        forestgreen: [ 34, 139, 34 ],
        fuchsia: [ 255, 0, 255 ],
        gainsboro: [ 220, 220, 220 ],
        ghostwhite: [ 248, 248, 255 ],
        gold: [ 255, 215, 0 ],
        goldenrod: [ 218, 165, 32 ],
        gray: [ 128, 128, 128 ],
        green: [ 0, 128, 0 ],
        greenyellow: [ 173, 255, 47 ],
        grey: [ 128, 128, 128 ],
        honeydew: [ 240, 255, 240 ],
        hotpink: [ 255, 105, 180 ],
        indianred: [ 205, 92, 92 ],
        indigo: [ 75, 0, 130 ],
        ivory: [ 255, 255, 240 ],
        khaki: [ 240, 230, 140 ],
        lavender: [ 230, 230, 250 ],
        lavenderblush: [ 255, 240, 245 ],
        lawngreen: [ 124, 252, 0 ],
        lemonchiffon: [ 255, 250, 205 ],
        lightblue: [ 173, 216, 230 ],
        lightcoral: [ 240, 128, 128 ],
        lightcyan: [ 224, 255, 255 ],
        lightgoldenrodyellow: [ 250, 250, 210 ],
        lightgray: [ 211, 211, 211 ],
        lightgreen: [ 144, 238, 144 ],
        lightgrey: [ 211, 211, 211 ],
        lightpink: [ 255, 182, 193 ],
        lightsalmon: [ 255, 160, 122 ],
        lightseagreen: [ 32, 178, 170 ],
        lightskyblue: [ 135, 206, 250 ],
        lightslategray: [ 119, 136, 153 ],
        lightslategrey: [ 119, 136, 153 ],
        lightsteelblue: [ 176, 196, 222 ],
        lightyellow: [ 255, 255, 224 ],
        lime: [ 0, 255, 0 ],
        limegreen: [ 50, 205, 50 ],
        linen: [ 250, 240, 230 ],
        magenta: [ 255, 0, 255 ],
        maroon: [ 128, 0, 0 ],
        mediumaquamarine: [ 102, 205, 170 ],
        mediumblue: [ 0, 0, 205 ],
        mediumorchid: [ 186, 85, 211 ],
        mediumpurple: [ 147, 112, 219 ],
        mediumseagreen: [ 60, 179, 113 ],
        mediumslateblue: [ 123, 104, 238 ],
        mediumspringgreen: [ 0, 250, 154 ],
        mediumturquoise: [ 72, 209, 204 ],
        mediumvioletred: [ 199, 21, 133 ],
        midnightblue: [ 25, 25, 112 ],
        mintcream: [ 245, 255, 250 ],
        mistyrose: [ 255, 228, 225 ],
        moccasin: [ 255, 228, 181 ],
        navajowhite: [ 255, 222, 173 ],
        navy: [ 0, 0, 128 ],
        oldlace: [ 253, 245, 230 ],
        olive: [ 128, 128, 0 ],
        olivedrab: [ 107, 142, 35 ],
        orange: [ 255, 165, 0 ],
        orangered: [ 255, 69, 0 ],
        orchid: [ 218, 112, 214 ],
        palegoldenrod: [ 238, 232, 170 ],
        palegreen: [ 152, 251, 152 ],
        paleturquoise: [ 175, 238, 238 ],
        palevioletred: [ 219, 112, 147 ],
        papayawhip: [ 255, 239, 213 ],
        peachpuff: [ 255, 218, 185 ],
        peru: [ 205, 133, 63 ],
        pink: [ 255, 192, 203 ],
        plum: [ 221, 160, 221 ],
        powderblue: [ 176, 224, 230 ],
        purple: [ 128, 0, 128 ],
        rebeccapurple: [ 102, 51, 153 ],
        red: [ 255, 0, 0 ],
        rosybrown: [ 188, 143, 143 ],
        royalblue: [ 65, 105, 225 ],
        saddlebrown: [ 139, 69, 19 ],
        salmon: [ 250, 128, 114 ],
        sandybrown: [ 244, 164, 96 ],
        seagreen: [ 46, 139, 87 ],
        seashell: [ 255, 245, 238 ],
        sienna: [ 160, 82, 45 ],
        silver: [ 192, 192, 192 ],
        skyblue: [ 135, 206, 235 ],
        slateblue: [ 106, 90, 205 ],
        slategray: [ 112, 128, 144 ],
        slategrey: [ 112, 128, 144 ],
        snow: [ 255, 250, 250 ],
        springgreen: [ 0, 255, 127 ],
        steelblue: [ 70, 130, 180 ],
        tan: [ 210, 180, 140 ],
        teal: [ 0, 128, 128 ],
        thistle: [ 216, 191, 216 ],
        tomato: [ 255, 99, 71 ],
        turquoise: [ 64, 224, 208 ],
        violet: [ 238, 130, 238 ],
        wheat: [ 245, 222, 179 ],
        white: [ 255, 255, 255 ],
        whitesmoke: [ 245, 245, 245 ],
        yellow: [ 255, 255, 0 ],
        yellowgreen: [ 154, 205, 50 ]
    }, U = {
        exports: {}
    }, q = function(t) {
        return !(!t || "string" == typeof t) && (t instanceof Array || Array.isArray(t) || t.length >= 0 && (t.splice instanceof Function || Object.getOwnPropertyDescriptor(t, t.length - 1) && "String" !== t.constructor.name));
    }, V = Array.prototype.concat, $ = Array.prototype.slice, G = U.exports = function(t) {
        for (var e = [], n = 0, i = t.length; n < i; n++) {
            var r = t[n];
            q(r) ? e = V.call(e, $.call(r)) : e.push(r);
        }
        return e;
    };
    G.wrap = function(t) {
        return function() {
            return t(G(arguments));
        };
    };
    var W = H, B = U.exports, J = Object.hasOwnProperty, X = Object.create(null);
    for (var Y in W) J.call(W, Y) && (X[W[Y]] = Y);
    var Z = L.exports = {
        to: {},
        get: {}
    };
    function K(t, e, n) {
        return Math.min(Math.max(e, t), n);
    }
    function Q(t) {
        var e = Math.round(t).toString(16).toUpperCase();
        return e.length < 2 ? "0" + e : e;
    }
    Z.get = function(t) {
        var e, n;
        switch (t.substring(0, 3).toLowerCase()) {
          case "hsl":
            e = Z.get.hsl(t), n = "hsl";
            break;

          case "hwb":
            e = Z.get.hwb(t), n = "hwb";
            break;

          default:
            e = Z.get.rgb(t), n = "rgb";
        }
        return e ? {
            model: n,
            value: e
        } : null;
    }, Z.get.rgb = function(t) {
        if (!t) return null;
        var e, n, i, r = [ 0, 0, 0, 1 ];
        if (e = t.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)) {
            for (i = e[2], e = e[1], n = 0; n < 3; n++) {
                var o = 2 * n;
                r[n] = parseInt(e.slice(o, o + 2), 16);
            }
            i && (r[3] = parseInt(i, 16) / 255);
        } else if (e = t.match(/^#([a-f0-9]{3,4})$/i)) {
            for (i = (e = e[1])[3], n = 0; n < 3; n++) r[n] = parseInt(e[n] + e[n], 16);
            i && (r[3] = parseInt(i + i, 16) / 255);
        } else if (e = t.match(/^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/)) {
            for (n = 0; n < 3; n++) r[n] = parseInt(e[n + 1], 0);
            e[4] && (e[5] ? r[3] = .01 * parseFloat(e[4]) : r[3] = parseFloat(e[4]));
        } else {
            if (!(e = t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/))) return (e = t.match(/^(\w+)$/)) ? "transparent" === e[1] ? [ 0, 0, 0, 0 ] : J.call(W, e[1]) ? ((r = W[e[1]])[3] = 1, 
            r) : null : null;
            for (n = 0; n < 3; n++) r[n] = Math.round(2.55 * parseFloat(e[n + 1]));
            e[4] && (e[5] ? r[3] = .01 * parseFloat(e[4]) : r[3] = parseFloat(e[4]));
        }
        for (n = 0; n < 3; n++) r[n] = K(r[n], 0, 255);
        return r[3] = K(r[3], 0, 1), r;
    }, Z.get.hsl = function(t) {
        if (!t) return null;
        var e = t.match(/^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);
        if (e) {
            var n = parseFloat(e[4]);
            return [ (parseFloat(e[1]) % 360 + 360) % 360, K(parseFloat(e[2]), 0, 100), K(parseFloat(e[3]), 0, 100), K(isNaN(n) ? 1 : n, 0, 1) ];
        }
        return null;
    }, Z.get.hwb = function(t) {
        if (!t) return null;
        var e = t.match(/^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);
        if (e) {
            var n = parseFloat(e[4]);
            return [ (parseFloat(e[1]) % 360 + 360) % 360, K(parseFloat(e[2]), 0, 100), K(parseFloat(e[3]), 0, 100), K(isNaN(n) ? 1 : n, 0, 1) ];
        }
        return null;
    }, Z.to.hex = function() {
        var t = B(arguments);
        return "#" + Q(t[0]) + Q(t[1]) + Q(t[2]) + (t[3] < 1 ? Q(Math.round(255 * t[3])) : "");
    }, Z.to.rgb = function() {
        var t = B(arguments);
        return t.length < 4 || 1 === t[3] ? "rgb(" + Math.round(t[0]) + ", " + Math.round(t[1]) + ", " + Math.round(t[2]) + ")" : "rgba(" + Math.round(t[0]) + ", " + Math.round(t[1]) + ", " + Math.round(t[2]) + ", " + t[3] + ")";
    }, Z.to.rgb.percent = function() {
        var t = B(arguments), e = Math.round(t[0] / 255 * 100), n = Math.round(t[1] / 255 * 100), i = Math.round(t[2] / 255 * 100);
        return t.length < 4 || 1 === t[3] ? "rgb(" + e + "%, " + n + "%, " + i + "%)" : "rgba(" + e + "%, " + n + "%, " + i + "%, " + t[3] + ")";
    }, Z.to.hsl = function() {
        var t = B(arguments);
        return t.length < 4 || 1 === t[3] ? "hsl(" + t[0] + ", " + t[1] + "%, " + t[2] + "%)" : "hsla(" + t[0] + ", " + t[1] + "%, " + t[2] + "%, " + t[3] + ")";
    }, Z.to.hwb = function() {
        var t = B(arguments), e = "";
        return t.length >= 4 && 1 !== t[3] && (e = ", " + t[3]), "hwb(" + t[0] + ", " + t[1] + "%, " + t[2] + "%" + e + ")";
    }, Z.to.keyword = function(t) {
        return X[t.slice(0, 3)];
    };
    var tt = {
        exports: {}
    }, et = H, nt = {};
    for (var it in et) et.hasOwnProperty(it) && (nt[et[it]] = it);
    var rt = tt.exports = {
        rgb: {
            channels: 3,
            labels: "rgb"
        },
        hsl: {
            channels: 3,
            labels: "hsl"
        },
        hsv: {
            channels: 3,
            labels: "hsv"
        },
        hwb: {
            channels: 3,
            labels: "hwb"
        },
        cmyk: {
            channels: 4,
            labels: "cmyk"
        },
        xyz: {
            channels: 3,
            labels: "xyz"
        },
        lab: {
            channels: 3,
            labels: "lab"
        },
        lch: {
            channels: 3,
            labels: "lch"
        },
        hex: {
            channels: 1,
            labels: [ "hex" ]
        },
        keyword: {
            channels: 1,
            labels: [ "keyword" ]
        },
        ansi16: {
            channels: 1,
            labels: [ "ansi16" ]
        },
        ansi256: {
            channels: 1,
            labels: [ "ansi256" ]
        },
        hcg: {
            channels: 3,
            labels: [ "h", "c", "g" ]
        },
        apple: {
            channels: 3,
            labels: [ "r16", "g16", "b16" ]
        },
        gray: {
            channels: 1,
            labels: [ "gray" ]
        }
    };
    for (var ot in rt) if (rt.hasOwnProperty(ot)) {
        if (!("channels" in rt[ot])) throw new Error("missing channels property: " + ot);
        if (!("labels" in rt[ot])) throw new Error("missing channel labels property: " + ot);
        if (rt[ot].labels.length !== rt[ot].channels) throw new Error("channel and label counts mismatch: " + ot);
        var st = rt[ot].channels, at = rt[ot].labels;
        delete rt[ot].channels, delete rt[ot].labels, Object.defineProperty(rt[ot], "channels", {
            value: st
        }), Object.defineProperty(rt[ot], "labels", {
            value: at
        });
    }
    function lt(t, e) {
        return Math.pow(t[0] - e[0], 2) + Math.pow(t[1] - e[1], 2) + Math.pow(t[2] - e[2], 2);
    }
    rt.rgb.hsl = function(t) {
        var e, n, i = t[0] / 255, r = t[1] / 255, o = t[2] / 255, s = Math.min(i, r, o), a = Math.max(i, r, o), l = a - s;
        return a === s ? e = 0 : i === a ? e = (r - o) / l : r === a ? e = 2 + (o - i) / l : o === a && (e = 4 + (i - r) / l), 
        (e = Math.min(60 * e, 360)) < 0 && (e += 360), n = (s + a) / 2, [ e, 100 * (a === s ? 0 : n <= .5 ? l / (a + s) : l / (2 - a - s)), 100 * n ];
    }, rt.rgb.hsv = function(t) {
        var e, n, i, r, o, s = t[0] / 255, a = t[1] / 255, l = t[2] / 255, u = Math.max(s, a, l), c = u - Math.min(s, a, l), h = function(t) {
            return (u - t) / 6 / c + .5;
        };
        return 0 === c ? r = o = 0 : (o = c / u, e = h(s), n = h(a), i = h(l), s === u ? r = i - n : a === u ? r = 1 / 3 + e - i : l === u && (r = 2 / 3 + n - e), 
        r < 0 ? r += 1 : r > 1 && (r -= 1)), [ 360 * r, 100 * o, 100 * u ];
    }, rt.rgb.hwb = function(t) {
        var e = t[0], n = t[1], i = t[2];
        return [ rt.rgb.hsl(t)[0], 100 * (1 / 255 * Math.min(e, Math.min(n, i))), 100 * (i = 1 - 1 / 255 * Math.max(e, Math.max(n, i))) ];
    }, rt.rgb.cmyk = function(t) {
        var e, n = t[0] / 255, i = t[1] / 255, r = t[2] / 255;
        return [ 100 * ((1 - n - (e = Math.min(1 - n, 1 - i, 1 - r))) / (1 - e) || 0), 100 * ((1 - i - e) / (1 - e) || 0), 100 * ((1 - r - e) / (1 - e) || 0), 100 * e ];
    }, rt.rgb.keyword = function(t) {
        var e = nt[t];
        if (e) return e;
        var n, i = 1 / 0;
        for (var r in et) if (et.hasOwnProperty(r)) {
            var o = lt(t, et[r]);
            o < i && (i = o, n = r);
        }
        return n;
    }, rt.keyword.rgb = function(t) {
        return et[t];
    }, rt.rgb.xyz = function(t) {
        var e = t[0] / 255, n = t[1] / 255, i = t[2] / 255;
        return [ 100 * (.4124 * (e = e > .04045 ? Math.pow((e + .055) / 1.055, 2.4) : e / 12.92) + .3576 * (n = n > .04045 ? Math.pow((n + .055) / 1.055, 2.4) : n / 12.92) + .1805 * (i = i > .04045 ? Math.pow((i + .055) / 1.055, 2.4) : i / 12.92)), 100 * (.2126 * e + .7152 * n + .0722 * i), 100 * (.0193 * e + .1192 * n + .9505 * i) ];
    }, rt.rgb.lab = function(t) {
        var e = rt.rgb.xyz(t), n = e[0], i = e[1], r = e[2];
        return i /= 100, r /= 108.883, n = (n /= 95.047) > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116, 
        [ 116 * (i = i > .008856 ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116) - 16, 500 * (n - i), 200 * (i - (r = r > .008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116)) ];
    }, rt.hsl.rgb = function(t) {
        var e, n, i, r, o, s = t[0] / 360, a = t[1] / 100, l = t[2] / 100;
        if (0 === a) return [ o = 255 * l, o, o ];
        e = 2 * l - (n = l < .5 ? l * (1 + a) : l + a - l * a), r = [ 0, 0, 0 ];
        for (var u = 0; u < 3; u++) (i = s + 1 / 3 * -(u - 1)) < 0 && i++, i > 1 && i--, 
        o = 6 * i < 1 ? e + 6 * (n - e) * i : 2 * i < 1 ? n : 3 * i < 2 ? e + (n - e) * (2 / 3 - i) * 6 : e, 
        r[u] = 255 * o;
        return r;
    }, rt.hsl.hsv = function(t) {
        var e = t[0], n = t[1] / 100, i = t[2] / 100, r = n, o = Math.max(i, .01);
        return n *= (i *= 2) <= 1 ? i : 2 - i, r *= o <= 1 ? o : 2 - o, [ e, 100 * (0 === i ? 2 * r / (o + r) : 2 * n / (i + n)), 100 * ((i + n) / 2) ];
    }, rt.hsv.rgb = function(t) {
        var e = t[0] / 60, n = t[1] / 100, i = t[2] / 100, r = Math.floor(e) % 6, o = e - Math.floor(e), s = 255 * i * (1 - n), a = 255 * i * (1 - n * o), l = 255 * i * (1 - n * (1 - o));
        switch (i *= 255, r) {
          case 0:
            return [ i, l, s ];

          case 1:
            return [ a, i, s ];

          case 2:
            return [ s, i, l ];

          case 3:
            return [ s, a, i ];

          case 4:
            return [ l, s, i ];

          case 5:
            return [ i, s, a ];
        }
    }, rt.hsv.hsl = function(t) {
        var e, n, i, r = t[0], o = t[1] / 100, s = t[2] / 100, a = Math.max(s, .01);
        return i = (2 - o) * s, n = o * a, [ r, 100 * (n = (n /= (e = (2 - o) * a) <= 1 ? e : 2 - e) || 0), 100 * (i /= 2) ];
    }, rt.hwb.rgb = function(t) {
        var e, n, i, r, o, s, a, l = t[0] / 360, u = t[1] / 100, c = t[2] / 100, h = u + c;
        switch (h > 1 && (u /= h, c /= h), i = 6 * l - (e = Math.floor(6 * l)), 0 != (1 & e) && (i = 1 - i), 
        r = u + i * ((n = 1 - c) - u), e) {
          default:
          case 6:
          case 0:
            o = n, s = r, a = u;
            break;

          case 1:
            o = r, s = n, a = u;
            break;

          case 2:
            o = u, s = n, a = r;
            break;

          case 3:
            o = u, s = r, a = n;
            break;

          case 4:
            o = r, s = u, a = n;
            break;

          case 5:
            o = n, s = u, a = r;
        }
        return [ 255 * o, 255 * s, 255 * a ];
    }, rt.cmyk.rgb = function(t) {
        var e = t[0] / 100, n = t[1] / 100, i = t[2] / 100, r = t[3] / 100;
        return [ 255 * (1 - Math.min(1, e * (1 - r) + r)), 255 * (1 - Math.min(1, n * (1 - r) + r)), 255 * (1 - Math.min(1, i * (1 - r) + r)) ];
    }, rt.xyz.rgb = function(t) {
        var e, n, i, r = t[0] / 100, o = t[1] / 100, s = t[2] / 100;
        return n = -.9689 * r + 1.8758 * o + .0415 * s, i = .0557 * r + -.204 * o + 1.057 * s, 
        e = (e = 3.2406 * r + -1.5372 * o + -.4986 * s) > .0031308 ? 1.055 * Math.pow(e, 1 / 2.4) - .055 : 12.92 * e, 
        n = n > .0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - .055 : 12.92 * n, i = i > .0031308 ? 1.055 * Math.pow(i, 1 / 2.4) - .055 : 12.92 * i, 
        [ 255 * (e = Math.min(Math.max(0, e), 1)), 255 * (n = Math.min(Math.max(0, n), 1)), 255 * (i = Math.min(Math.max(0, i), 1)) ];
    }, rt.xyz.lab = function(t) {
        var e = t[0], n = t[1], i = t[2];
        return n /= 100, i /= 108.883, e = (e /= 95.047) > .008856 ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116, 
        [ 116 * (n = n > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116) - 16, 500 * (e - n), 200 * (n - (i = i > .008856 ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116)) ];
    }, rt.lab.xyz = function(t) {
        var e, n, i, r = t[0];
        e = t[1] / 500 + (n = (r + 16) / 116), i = n - t[2] / 200;
        var o = Math.pow(n, 3), s = Math.pow(e, 3), a = Math.pow(i, 3);
        return n = o > .008856 ? o : (n - 16 / 116) / 7.787, e = s > .008856 ? s : (e - 16 / 116) / 7.787, 
        i = a > .008856 ? a : (i - 16 / 116) / 7.787, [ e *= 95.047, n *= 100, i *= 108.883 ];
    }, rt.lab.lch = function(t) {
        var e, n = t[0], i = t[1], r = t[2];
        return (e = 360 * Math.atan2(r, i) / 2 / Math.PI) < 0 && (e += 360), [ n, Math.sqrt(i * i + r * r), e ];
    }, rt.lch.lab = function(t) {
        var e, n = t[0], i = t[1];
        return e = t[2] / 360 * 2 * Math.PI, [ n, i * Math.cos(e), i * Math.sin(e) ];
    }, rt.rgb.ansi16 = function(t) {
        var e = t[0], n = t[1], i = t[2], r = 1 in arguments ? arguments[1] : rt.rgb.hsv(t)[2];
        if (0 === (r = Math.round(r / 50))) return 30;
        var o = 30 + (Math.round(i / 255) << 2 | Math.round(n / 255) << 1 | Math.round(e / 255));
        return 2 === r && (o += 60), o;
    }, rt.hsv.ansi16 = function(t) {
        return rt.rgb.ansi16(rt.hsv.rgb(t), t[2]);
    }, rt.rgb.ansi256 = function(t) {
        var e = t[0], n = t[1], i = t[2];
        return e === n && n === i ? e < 8 ? 16 : e > 248 ? 231 : Math.round((e - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(e / 255 * 5) + 6 * Math.round(n / 255 * 5) + Math.round(i / 255 * 5);
    }, rt.ansi16.rgb = function(t) {
        var e = t % 10;
        if (0 === e || 7 === e) return t > 50 && (e += 3.5), [ e = e / 10.5 * 255, e, e ];
        var n = .5 * (1 + ~~(t > 50));
        return [ (1 & e) * n * 255, (e >> 1 & 1) * n * 255, (e >> 2 & 1) * n * 255 ];
    }, rt.ansi256.rgb = function(t) {
        if (t >= 232) {
            var e = 10 * (t - 232) + 8;
            return [ e, e, e ];
        }
        var n;
        return t -= 16, [ Math.floor(t / 36) / 5 * 255, Math.floor((n = t % 36) / 6) / 5 * 255, n % 6 / 5 * 255 ];
    }, rt.rgb.hex = function(t) {
        var e = (((255 & Math.round(t[0])) << 16) + ((255 & Math.round(t[1])) << 8) + (255 & Math.round(t[2]))).toString(16).toUpperCase();
        return "000000".substring(e.length) + e;
    }, rt.hex.rgb = function(t) {
        var e = t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!e) return [ 0, 0, 0 ];
        var n = e[0];
        3 === e[0].length && (n = n.split("").map((function(t) {
            return t + t;
        })).join(""));
        var i = parseInt(n, 16);
        return [ i >> 16 & 255, i >> 8 & 255, 255 & i ];
    }, rt.rgb.hcg = function(t) {
        var e, n = t[0] / 255, i = t[1] / 255, r = t[2] / 255, o = Math.max(Math.max(n, i), r), s = Math.min(Math.min(n, i), r), a = o - s;
        return e = a <= 0 ? 0 : o === n ? (i - r) / a % 6 : o === i ? 2 + (r - n) / a : 4 + (n - i) / a + 4, 
        e /= 6, [ 360 * (e %= 1), 100 * a, 100 * (a < 1 ? s / (1 - a) : 0) ];
    }, rt.hsl.hcg = function(t) {
        var e = t[1] / 100, n = t[2] / 100, i = 1, r = 0;
        return (i = n < .5 ? 2 * e * n : 2 * e * (1 - n)) < 1 && (r = (n - .5 * i) / (1 - i)), 
        [ t[0], 100 * i, 100 * r ];
    }, rt.hsv.hcg = function(t) {
        var e = t[1] / 100, n = t[2] / 100, i = e * n, r = 0;
        return i < 1 && (r = (n - i) / (1 - i)), [ t[0], 100 * i, 100 * r ];
    }, rt.hcg.rgb = function(t) {
        var e = t[0] / 360, n = t[1] / 100, i = t[2] / 100;
        if (0 === n) return [ 255 * i, 255 * i, 255 * i ];
        var r, o = [ 0, 0, 0 ], s = e % 1 * 6, a = s % 1, l = 1 - a;
        switch (Math.floor(s)) {
          case 0:
            o[0] = 1, o[1] = a, o[2] = 0;
            break;

          case 1:
            o[0] = l, o[1] = 1, o[2] = 0;
            break;

          case 2:
            o[0] = 0, o[1] = 1, o[2] = a;
            break;

          case 3:
            o[0] = 0, o[1] = l, o[2] = 1;
            break;

          case 4:
            o[0] = a, o[1] = 0, o[2] = 1;
            break;

          default:
            o[0] = 1, o[1] = 0, o[2] = l;
        }
        return r = (1 - n) * i, [ 255 * (n * o[0] + r), 255 * (n * o[1] + r), 255 * (n * o[2] + r) ];
    }, rt.hcg.hsv = function(t) {
        var e = t[1] / 100, n = e + t[2] / 100 * (1 - e), i = 0;
        return n > 0 && (i = e / n), [ t[0], 100 * i, 100 * n ];
    }, rt.hcg.hsl = function(t) {
        var e = t[1] / 100, n = t[2] / 100 * (1 - e) + .5 * e, i = 0;
        return n > 0 && n < .5 ? i = e / (2 * n) : n >= .5 && n < 1 && (i = e / (2 * (1 - n))), 
        [ t[0], 100 * i, 100 * n ];
    }, rt.hcg.hwb = function(t) {
        var e = t[1] / 100, n = e + t[2] / 100 * (1 - e);
        return [ t[0], 100 * (n - e), 100 * (1 - n) ];
    }, rt.hwb.hcg = function(t) {
        var e = t[1] / 100, n = 1 - t[2] / 100, i = n - e, r = 0;
        return i < 1 && (r = (n - i) / (1 - i)), [ t[0], 100 * i, 100 * r ];
    }, rt.apple.rgb = function(t) {
        return [ t[0] / 65535 * 255, t[1] / 65535 * 255, t[2] / 65535 * 255 ];
    }, rt.rgb.apple = function(t) {
        return [ t[0] / 255 * 65535, t[1] / 255 * 65535, t[2] / 255 * 65535 ];
    }, rt.gray.rgb = function(t) {
        return [ t[0] / 100 * 255, t[0] / 100 * 255, t[0] / 100 * 255 ];
    }, rt.gray.hsl = rt.gray.hsv = function(t) {
        return [ 0, 0, t[0] ];
    }, rt.gray.hwb = function(t) {
        return [ 0, 100, t[0] ];
    }, rt.gray.cmyk = function(t) {
        return [ 0, 0, 0, t[0] ];
    }, rt.gray.lab = function(t) {
        return [ t[0], 0, 0 ];
    }, rt.gray.hex = function(t) {
        var e = 255 & Math.round(t[0] / 100 * 255), n = ((e << 16) + (e << 8) + e).toString(16).toUpperCase();
        return "000000".substring(n.length) + n;
    }, rt.rgb.gray = function(t) {
        return [ (t[0] + t[1] + t[2]) / 3 / 255 * 100 ];
    };
    var ut = tt.exports;
    function ct(t) {
        var e = function() {
            for (var t = {}, e = Object.keys(ut), n = e.length, i = 0; i < n; i++) t[e[i]] = {
                distance: -1,
                parent: null
            };
            return t;
        }(), n = [ t ];
        for (e[t].distance = 0; n.length; ) for (var i = n.pop(), r = Object.keys(ut[i]), o = r.length, s = 0; s < o; s++) {
            var a = r[s], l = e[a];
            -1 === l.distance && (l.distance = e[i].distance + 1, l.parent = i, n.unshift(a));
        }
        return e;
    }
    function ht(t, e) {
        return function(n) {
            return e(t(n));
        };
    }
    function dt(t, e) {
        for (var n = [ e[t].parent, t ], i = ut[e[t].parent][t], r = e[t].parent; e[r].parent; ) n.unshift(e[r].parent), 
        i = ht(ut[e[r].parent][r], i), r = e[r].parent;
        return i.conversion = n, i;
    }
    var ft = tt.exports, pt = function(t) {
        for (var e = ct(t), n = {}, i = Object.keys(e), r = i.length, o = 0; o < r; o++) {
            var s = i[o];
            null !== e[s].parent && (n[s] = dt(s, e));
        }
        return n;
    }, mt = {};
    Object.keys(ft).forEach((function(t) {
        mt[t] = {}, Object.defineProperty(mt[t], "channels", {
            value: ft[t].channels
        }), Object.defineProperty(mt[t], "labels", {
            value: ft[t].labels
        });
        var e = pt(t);
        Object.keys(e).forEach((function(n) {
            var i = e[n];
            mt[t][n] = function(t) {
                var e = function(e) {
                    if (null == e) return e;
                    arguments.length > 1 && (e = Array.prototype.slice.call(arguments));
                    var n = t(e);
                    if ("object" == typeof n) for (var i = n.length, r = 0; r < i; r++) n[r] = Math.round(n[r]);
                    return n;
                };
                return "conversion" in t && (e.conversion = t.conversion), e;
            }(i), mt[t][n].raw = function(t) {
                var e = function(e) {
                    return null == e ? e : (arguments.length > 1 && (e = Array.prototype.slice.call(arguments)), 
                    t(e));
                };
                return "conversion" in t && (e.conversion = t.conversion), e;
            }(i);
        }));
    }));
    var yt = mt, gt = L.exports, bt = yt, vt = [].slice, xt = [ "keyword", "gray", "hex" ], wt = {};
    Object.keys(bt).forEach((function(t) {
        wt[vt.call(bt[t].labels).sort().join("")] = t;
    }));
    var kt = {};
    function At(t, e) {
        if (!(this instanceof At)) return new At(t, e);
        if (e && e in xt && (e = null), e && !(e in bt)) throw new Error("Unknown model: " + e);
        var n, i;
        if (null == t) this.model = "rgb", this.color = [ 0, 0, 0 ], this.valpha = 1; else if (t instanceof At) this.model = t.model, 
        this.color = t.color.slice(), this.valpha = t.valpha; else if ("string" == typeof t) {
            var r = gt.get(t);
            if (null === r) throw new Error("Unable to parse color from string: " + t);
            this.model = r.model, i = bt[this.model].channels, this.color = r.value.slice(0, i), 
            this.valpha = "number" == typeof r.value[i] ? r.value[i] : 1;
        } else if (t.length) {
            this.model = e || "rgb", i = bt[this.model].channels;
            var o = vt.call(t, 0, i);
            this.color = Mt(o, i), this.valpha = "number" == typeof t[i] ? t[i] : 1;
        } else if ("number" == typeof t) t &= 16777215, this.model = "rgb", this.color = [ t >> 16 & 255, t >> 8 & 255, 255 & t ], 
        this.valpha = 1; else {
            this.valpha = 1;
            var s = Object.keys(t);
            "alpha" in t && (s.splice(s.indexOf("alpha"), 1), this.valpha = "number" == typeof t.alpha ? t.alpha : 0);
            var a = s.sort().join("");
            if (!(a in wt)) throw new Error("Unable to parse color from object: " + JSON.stringify(t));
            this.model = wt[a];
            var l = bt[this.model].labels, u = [];
            for (n = 0; n < l.length; n++) u.push(t[l[n]]);
            this.color = Mt(u);
        }
        if (kt[this.model]) for (i = bt[this.model].channels, n = 0; n < i; n++) {
            var c = kt[this.model][n];
            c && (this.color[n] = c(this.color[n]));
        }
        this.valpha = Math.max(0, Math.min(1, this.valpha)), Object.freeze && Object.freeze(this);
    }
    function _t(t, e, n) {
        return (t = Array.isArray(t) ? t : [ t ]).forEach((function(t) {
            (kt[t] || (kt[t] = []))[e] = n;
        })), t = t[0], function(i) {
            var r;
            return arguments.length ? (n && (i = n(i)), (r = this[t]()).color[e] = i, r) : (r = this[t]().color[e], 
            n && (r = n(r)), r);
        };
    }
    function Tt(t) {
        return function(e) {
            return Math.max(0, Math.min(t, e));
        };
    }
    function St(t) {
        return Array.isArray(t) ? t : [ t ];
    }
    function Mt(t, e) {
        for (var n = 0; n < e; n++) "number" != typeof t[n] && (t[n] = 0);
        return t;
    }
    At.prototype = {
        toString: function() {
            return this.string();
        },
        toJSON: function() {
            return this[this.model]();
        },
        string: function(t) {
            var e = this.model in gt.to ? this : this.rgb(), n = 1 === (e = e.round("number" == typeof t ? t : 1)).valpha ? e.color : e.color.concat(this.valpha);
            return gt.to[e.model](n);
        },
        percentString: function(t) {
            var e = this.rgb().round("number" == typeof t ? t : 1), n = 1 === e.valpha ? e.color : e.color.concat(this.valpha);
            return gt.to.rgb.percent(n);
        },
        array: function() {
            return 1 === this.valpha ? this.color.slice() : this.color.concat(this.valpha);
        },
        object: function() {
            for (var t = {}, e = bt[this.model].channels, n = bt[this.model].labels, i = 0; i < e; i++) t[n[i]] = this.color[i];
            return 1 !== this.valpha && (t.alpha = this.valpha), t;
        },
        unitArray: function() {
            var t = this.rgb().color;
            return t[0] /= 255, t[1] /= 255, t[2] /= 255, 1 !== this.valpha && t.push(this.valpha), 
            t;
        },
        unitObject: function() {
            var t = this.rgb().object();
            return t.r /= 255, t.g /= 255, t.b /= 255, 1 !== this.valpha && (t.alpha = this.valpha), 
            t;
        },
        round: function(t) {
            return t = Math.max(t || 0, 0), new At(this.color.map(function(t) {
                return function(e) {
                    return function(t, e) {
                        return Number(t.toFixed(e));
                    }(e, t);
                };
            }(t)).concat(this.valpha), this.model);
        },
        alpha: function(t) {
            return arguments.length ? new At(this.color.concat(Math.max(0, Math.min(1, t))), this.model) : this.valpha;
        },
        red: _t("rgb", 0, Tt(255)),
        green: _t("rgb", 1, Tt(255)),
        blue: _t("rgb", 2, Tt(255)),
        hue: _t([ "hsl", "hsv", "hsl", "hwb", "hcg" ], 0, (function(t) {
            return (t % 360 + 360) % 360;
        })),
        saturationl: _t("hsl", 1, Tt(100)),
        lightness: _t("hsl", 2, Tt(100)),
        saturationv: _t("hsv", 1, Tt(100)),
        value: _t("hsv", 2, Tt(100)),
        chroma: _t("hcg", 1, Tt(100)),
        gray: _t("hcg", 2, Tt(100)),
        white: _t("hwb", 1, Tt(100)),
        wblack: _t("hwb", 2, Tt(100)),
        cyan: _t("cmyk", 0, Tt(100)),
        magenta: _t("cmyk", 1, Tt(100)),
        yellow: _t("cmyk", 2, Tt(100)),
        black: _t("cmyk", 3, Tt(100)),
        x: _t("xyz", 0, Tt(100)),
        y: _t("xyz", 1, Tt(100)),
        z: _t("xyz", 2, Tt(100)),
        l: _t("lab", 0, Tt(100)),
        a: _t("lab", 1),
        b: _t("lab", 2),
        keyword: function(t) {
            return arguments.length ? new At(t) : bt[this.model].keyword(this.color);
        },
        hex: function(t) {
            return arguments.length ? new At(t) : gt.to.hex(this.rgb().round().color);
        },
        rgbNumber: function() {
            var t = this.rgb().color;
            return (255 & t[0]) << 16 | (255 & t[1]) << 8 | 255 & t[2];
        },
        luminosity: function() {
            for (var t = this.rgb().color, e = [], n = 0; n < t.length; n++) {
                var i = t[n] / 255;
                e[n] = i <= .03928 ? i / 12.92 : Math.pow((i + .055) / 1.055, 2.4);
            }
            return .2126 * e[0] + .7152 * e[1] + .0722 * e[2];
        },
        contrast: function(t) {
            var e = this.luminosity(), n = t.luminosity();
            return e > n ? (e + .05) / (n + .05) : (n + .05) / (e + .05);
        },
        level: function(t) {
            var e = this.contrast(t);
            return e >= 7.1 ? "AAA" : e >= 4.5 ? "AA" : "";
        },
        isDark: function() {
            var t = this.rgb().color;
            return (299 * t[0] + 587 * t[1] + 114 * t[2]) / 1e3 < 128;
        },
        isLight: function() {
            return !this.isDark();
        },
        negate: function() {
            for (var t = this.rgb(), e = 0; e < 3; e++) t.color[e] = 255 - t.color[e];
            return t;
        },
        lighten: function(t) {
            var e = this.hsl();
            return e.color[2] += e.color[2] * t, e;
        },
        darken: function(t) {
            var e = this.hsl();
            return e.color[2] -= e.color[2] * t, e;
        },
        saturate: function(t) {
            var e = this.hsl();
            return e.color[1] += e.color[1] * t, e;
        },
        desaturate: function(t) {
            var e = this.hsl();
            return e.color[1] -= e.color[1] * t, e;
        },
        whiten: function(t) {
            var e = this.hwb();
            return e.color[1] += e.color[1] * t, e;
        },
        blacken: function(t) {
            var e = this.hwb();
            return e.color[2] += e.color[2] * t, e;
        },
        grayscale: function() {
            var t = this.rgb().color, e = .3 * t[0] + .59 * t[1] + .11 * t[2];
            return At.rgb(e, e, e);
        },
        fade: function(t) {
            return this.alpha(this.valpha - this.valpha * t);
        },
        opaquer: function(t) {
            return this.alpha(this.valpha + this.valpha * t);
        },
        rotate: function(t) {
            var e = this.hsl(), n = e.color[0];
            return n = (n = (n + t) % 360) < 0 ? 360 + n : n, e.color[0] = n, e;
        },
        mix: function(t, e) {
            if (!t || !t.rgb) throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof t);
            var n = t.rgb(), i = this.rgb(), r = void 0 === e ? .5 : e, o = 2 * r - 1, s = n.alpha() - i.alpha(), a = ((o * s == -1 ? o : (o + s) / (1 + o * s)) + 1) / 2, l = 1 - a;
            return At.rgb(a * n.red() + l * i.red(), a * n.green() + l * i.green(), a * n.blue() + l * i.blue(), n.alpha() * r + i.alpha() * (1 - r));
        }
    }, Object.keys(bt).forEach((function(t) {
        if (-1 === xt.indexOf(t)) {
            var e = bt[t].channels;
            At.prototype[t] = function() {
                if (this.model === t) return new At(this);
                if (arguments.length) return new At(arguments, t);
                var n = "number" == typeof arguments[e] ? e : this.valpha;
                return new At(St(bt[this.model][t].raw(this.color)).concat(n), t);
            }, At[t] = function(n) {
                return "number" == typeof n && (n = Mt(vt.call(arguments), e)), new At(n, t);
            };
        }
    }));
    var Pt = At;
    /*!
        Feature Filter by

        (c) mapbox 2016 and maptalks 2018
        www.mapbox.com | www.maptalks.org
        License: MIT, header required.
    */    const It = [ "Unknown", "Point", "LineString", "Polygon", "MultiPoint", "MultiLineString", "MultiPolygon", "GeometryCollection" ];
    function jt(t) {
        if (!t) return "true";
        const e = t[0];
        if (t.length <= 1) return "any" === e ? "false" : "true";
        return `(${"==" === e ? Ft(t[1], t[2], "===", !1) : "!=" === e ? Ft(t[1], t[2], "!==", !1) : "<" === e || ">" === e || "<=" === e || ">=" === e ? Ft(t[1], t[2], e, !0) : "any" === e ? Ct(t.slice(1), "||") : "all" === e ? Ct(t.slice(1), "&&") : "none" === e ? Nt(Ct(t.slice(1), "||")) : "in" === e ? Et(t[1], t.slice(2)) : "!in" === e ? Nt(Et(t[1], t.slice(2))) : "has" === e ? Rt(t[1]) : "!has" === e ? Nt(Rt(t[1])) : "contains" === e ? function(t, e, n) {
            const i = zt(t);
            return void 0 !== n ? `(${i} + '').indexOf("${e}") === ${n}` : `(${i} + '').indexOf("${e}") >= 0`;
        }(t[1], t[2], t[3]) : "true"})`;
    }
    function zt(t) {
        return "$" === t[0] ? "f." + t.substring(1) : "p[" + JSON.stringify(t) + "]";
    }
    function Ft(t, e, n, i) {
        if ("object" == typeof (r = t) && r && t.op) return function(t, e, n, i) {
            const r = t.property, o = t.op;
            let s = zt(r);
            return "length" !== o ? (console.error(`not support ${o} op`), "false") : (s = `((${s}+='').length)`, 
            Ot(s, r, e, n, i));
        }(t, e, n, i);
        var r;
        return Ot(zt(t), t, e, n, i);
    }
    function Ot(t, e, n, i, r) {
        const o = "$type" === e ? It.indexOf(n) : JSON.stringify(n);
        return (r ? `typeof ${t}=== typeof ${o}&&` : "") + t + i + o;
    }
    function Ct(t, e) {
        return t.map(jt).join(e);
    }
    function Et(t, e) {
        "$type" === t && (e = e.map(t => It.indexOf(t)));
        const n = JSON.stringify(e.sort(Dt)), i = zt(t);
        return e.length <= 200 ? `${n}.indexOf(${i}) !== -1` : `function(v, a, i, j) {\n        while (i <= j) { var m = (i + j) >> 1;\n            if (a[m] === v) return true; if (a[m] > v) j = m - 1; else i = m + 1;\n        }\n    return false; }(${i}, ${n},0,${e.length - 1})`;
    }
    function Rt(t) {
        return "$id" === t ? '"id" in f' : JSON.stringify(t) + " in p";
    }
    function Nt(t) {
        return `!(${t})`;
    }
    function Dt(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }
    var Lt = {
        exports: {}
    };
    !function(t, e) {
        t.exports = function() {
            function t(t, e, n) {
                var i = t[e];
                t[e] = t[n], t[n] = i;
            }
            function e(t, e) {
                return t < e ? -1 : t > e ? 1 : 0;
            }
            return function(n, i, r, o, s) {
                !function e(n, i, r, o, s) {
                    for (;o > r; ) {
                        if (o - r > 600) {
                            var a = o - r + 1, l = i - r + 1, u = Math.log(a), c = .5 * Math.exp(2 * u / 3), h = .5 * Math.sqrt(u * c * (a - c) / a) * (l - a / 2 < 0 ? -1 : 1), d = Math.max(r, Math.floor(i - l * c / a + h)), f = Math.min(o, Math.floor(i + (a - l) * c / a + h));
                            e(n, i, d, f, s);
                        }
                        var p = n[i], m = r, y = o;
                        for (t(n, r, i), s(n[o], p) > 0 && t(n, r, o); m < y; ) {
                            for (t(n, m, y), m++, y--; s(n[m], p) < 0; ) m++;
                            for (;s(n[y], p) > 0; ) y--;
                        }
                        0 === s(n[r], p) ? t(n, r, y) : (y++, t(n, y, o)), y <= i && (r = y + 1), i <= y && (o = y - 1);
                    }
                }(n, i, r || 0, o || n.length - 1, s || e);
            };
        }();
    }(Lt);
    var Ht = Lt.exports, Ut = {
        exports: {}
    };
    function qt(t, e) {
        if (!(this instanceof qt)) return new qt(t, e);
        if (this.data = t || [], this.length = this.data.length, this.compare = e || Vt, 
        this.length > 0) for (var n = (this.length >> 1) - 1; n >= 0; n--) this.F(n);
    }
    function Vt(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }
    Ut.exports = qt, Ut.exports.default = qt, qt.prototype = {
        push: function(t) {
            this.data.push(t), this.length++, this.O(this.length - 1);
        },
        pop: function() {
            if (0 !== this.length) {
                var t = this.data[0];
                return this.length--, this.length > 0 && (this.data[0] = this.data[this.length], 
                this.F(0)), this.data.pop(), t;
            }
        },
        peek: function() {
            return this.data[0];
        },
        O: function(t) {
            for (var e = this.data, n = this.compare, i = e[t]; t > 0; ) {
                var r = t - 1 >> 1, o = e[r];
                if (n(i, o) >= 0) break;
                e[t] = o, t = r;
            }
            e[t] = i;
        },
        F: function(t) {
            for (var e = this.data, n = this.compare, i = this.length >> 1, r = e[t]; t < i; ) {
                var o = 1 + (t << 1), s = o + 1, a = e[o];
                if (s < this.length && n(e[s], a) < 0 && (o = s, a = e[s]), n(a, r) >= 0) break;
                e[t] = a, t = o;
            }
            e[t] = r;
        }
    };
    var $t, Gt = Ut.exports, Wt = "undefined" != typeof Float32Array ? Float32Array : Array;
    $t = new Wt(4), Wt != Float32Array && ($t[0] = 0, $t[1] = 0, $t[2] = 0, $t[3] = 0);
    var Bt = {
        exports: {}
    };
    function Jt(t, e, n) {
        n = n || 2;
        var i, r, o, s, a, l, u, c = e && e.length, h = c ? e[0] * n : t.length, d = Xt(t, 0, h, n, !0), f = [];
        if (!d || d.next === d.prev) return f;
        if (c && (d = function(t, e, n, i) {
            var r, o, s, a, l, u = [];
            for (r = 0, o = e.length; r < o; r++) s = e[r] * i, a = r < o - 1 ? e[r + 1] * i : t.length, 
            (l = Xt(t, s, a, i, !1)) === l.next && (l.steiner = !0), u.push(se(l));
            for (u.sort(ne), r = 0; r < u.length; r++) n = ie(u[r], n);
            return n;
        }(t, e, d, n)), t.length > 80 * n) {
            i = o = t[0], r = s = t[1];
            for (var p = n; p < h; p += n) (a = t[p]) < i && (i = a), (l = t[p + 1]) < r && (r = l), 
            a > o && (o = a), l > s && (s = l);
            u = 0 !== (u = Math.max(o - i, s - r)) ? 32767 / u : 0;
        }
        return Zt(d, f, n, i, r, u, 0), f;
    }
    function Xt(t, e, n, i, r) {
        var o, s;
        if (r === ve(t, e, n, i) > 0) for (o = e; o < n; o += i) s = ye(o, t[o], t[o + 1], s); else for (o = n - i; o >= e; o -= i) s = ye(o, t[o], t[o + 1], s);
        return s && ce(s, s.next) && (ge(s), s = s.next), s;
    }
    function Yt(t, e) {
        if (!t) return t;
        e || (e = t);
        var n, i = t;
        do {
            if (n = !1, i.steiner || !ce(i, i.next) && 0 !== ue(i.prev, i, i.next)) i = i.next; else {
                if (ge(i), (i = e = i.prev) === i.next) break;
                n = !0;
            }
        } while (n || i !== e);
        return e;
    }
    function Zt(t, e, n, i, r, o, s) {
        if (t) {
            !s && o && function(t, e, n, i) {
                var r = t;
                do {
                    0 === r.z && (r.z = oe(r.x, r.y, e, n, i)), r.prevZ = r.prev, r.nextZ = r.next, 
                    r = r.next;
                } while (r !== t);
                r.prevZ.nextZ = null, r.prevZ = null, function(t) {
                    var e, n, i, r, o, s, a, l, u = 1;
                    do {
                        for (n = t, t = null, o = null, s = 0; n; ) {
                            for (s++, i = n, a = 0, e = 0; e < u && (a++, i = i.nextZ); e++) ;
                            for (l = u; a > 0 || l > 0 && i; ) 0 !== a && (0 === l || !i || n.z <= i.z) ? (r = n, 
                            n = n.nextZ, a--) : (r = i, i = i.nextZ, l--), o ? o.nextZ = r : t = r, r.prevZ = o, 
                            o = r;
                            n = i;
                        }
                        o.nextZ = null, u *= 2;
                    } while (s > 1);
                }(r);
            }(t, i, r, o);
            for (var a, l, u = t; t.prev !== t.next; ) if (a = t.prev, l = t.next, o ? Qt(t, i, r, o) : Kt(t)) e.push(a.i / n | 0), 
            e.push(t.i / n | 0), e.push(l.i / n | 0), ge(t), t = l.next, u = l.next; else if ((t = l) === u) {
                s ? 1 === s ? Zt(t = te(Yt(t), e, n), e, n, i, r, o, 2) : 2 === s && ee(t, e, n, i, r, o) : Zt(Yt(t), e, n, i, r, o, 1);
                break;
            }
        }
    }
    function Kt(t) {
        var e = t.prev, n = t, i = t.next;
        if (ue(e, n, i) >= 0) return !1;
        for (var r = e.x, o = n.x, s = i.x, a = e.y, l = n.y, u = i.y, c = r < o ? r < s ? r : s : o < s ? o : s, h = a < l ? a < u ? a : u : l < u ? l : u, d = r > o ? r > s ? r : s : o > s ? o : s, f = a > l ? a > u ? a : u : l > u ? l : u, p = i.next; p !== e; ) {
            if (p.x >= c && p.x <= d && p.y >= h && p.y <= f && ae(r, a, o, l, s, u, p.x, p.y) && ue(p.prev, p, p.next) >= 0) return !1;
            p = p.next;
        }
        return !0;
    }
    function Qt(t, e, n, i) {
        var r = t.prev, o = t, s = t.next;
        if (ue(r, o, s) >= 0) return !1;
        for (var a = r.x, l = o.x, u = s.x, c = r.y, h = o.y, d = s.y, f = a < l ? a < u ? a : u : l < u ? l : u, p = c < h ? c < d ? c : d : h < d ? h : d, m = a > l ? a > u ? a : u : l > u ? l : u, y = c > h ? c > d ? c : d : h > d ? h : d, g = oe(f, p, e, n, i), b = oe(m, y, e, n, i), v = t.prevZ, x = t.nextZ; v && v.z >= g && x && x.z <= b; ) {
            if (v.x >= f && v.x <= m && v.y >= p && v.y <= y && v !== r && v !== s && ae(a, c, l, h, u, d, v.x, v.y) && ue(v.prev, v, v.next) >= 0) return !1;
            if (v = v.prevZ, x.x >= f && x.x <= m && x.y >= p && x.y <= y && x !== r && x !== s && ae(a, c, l, h, u, d, x.x, x.y) && ue(x.prev, x, x.next) >= 0) return !1;
            x = x.nextZ;
        }
        for (;v && v.z >= g; ) {
            if (v.x >= f && v.x <= m && v.y >= p && v.y <= y && v !== r && v !== s && ae(a, c, l, h, u, d, v.x, v.y) && ue(v.prev, v, v.next) >= 0) return !1;
            v = v.prevZ;
        }
        for (;x && x.z <= b; ) {
            if (x.x >= f && x.x <= m && x.y >= p && x.y <= y && x !== r && x !== s && ae(a, c, l, h, u, d, x.x, x.y) && ue(x.prev, x, x.next) >= 0) return !1;
            x = x.nextZ;
        }
        return !0;
    }
    function te(t, e, n) {
        var i = t;
        do {
            var r = i.prev, o = i.next.next;
            !ce(r, o) && he(r, i, i.next, o) && pe(r, o) && pe(o, r) && (e.push(r.i / n | 0), 
            e.push(i.i / n | 0), e.push(o.i / n | 0), ge(i), ge(i.next), i = t = o), i = i.next;
        } while (i !== t);
        return Yt(i);
    }
    function ee(t, e, n, i, r, o) {
        var s = t;
        do {
            for (var a = s.next.next; a !== s.prev; ) {
                if (s.i !== a.i && le(s, a)) {
                    var l = me(s, a);
                    return s = Yt(s, s.next), l = Yt(l, l.next), Zt(s, e, n, i, r, o, 0), void Zt(l, e, n, i, r, o, 0);
                }
                a = a.next;
            }
            s = s.next;
        } while (s !== t);
    }
    function ne(t, e) {
        return t.x - e.x;
    }
    function ie(t, e) {
        var n = function(t, e) {
            var n, i = e, r = t.x, o = t.y, s = -1 / 0;
            do {
                if (o <= i.y && o >= i.next.y && i.next.y !== i.y) {
                    var a = i.x + (o - i.y) * (i.next.x - i.x) / (i.next.y - i.y);
                    if (a <= r && a > s && (s = a, n = i.x < i.next.x ? i : i.next, a === r)) return n;
                }
                i = i.next;
            } while (i !== e);
            if (!n) return null;
            var l, u = n, c = n.x, h = n.y, d = 1 / 0;
            i = n;
            do {
                r >= i.x && i.x >= c && r !== i.x && ae(o < h ? r : s, o, c, h, o < h ? s : r, o, i.x, i.y) && (l = Math.abs(o - i.y) / (r - i.x), 
                pe(i, t) && (l < d || l === d && (i.x > n.x || i.x === n.x && re(n, i))) && (n = i, 
                d = l)), i = i.next;
            } while (i !== u);
            return n;
        }(t, e);
        if (!n) return e;
        var i = me(n, t);
        return Yt(i, i.next), Yt(n, n.next);
    }
    function re(t, e) {
        return ue(t.prev, t, e.prev) < 0 && ue(e.next, t, t.next) < 0;
    }
    function oe(t, e, n, i, r) {
        return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = (t - n) * r | 0) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = (e - i) * r | 0) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
    }
    function se(t) {
        var e = t, n = t;
        do {
            (e.x < n.x || e.x === n.x && e.y < n.y) && (n = e), e = e.next;
        } while (e !== t);
        return n;
    }
    function ae(t, e, n, i, r, o, s, a) {
        return (r - s) * (e - a) >= (t - s) * (o - a) && (t - s) * (i - a) >= (n - s) * (e - a) && (n - s) * (o - a) >= (r - s) * (i - a);
    }
    function le(t, e) {
        return t.next.i !== e.i && t.prev.i !== e.i && !function(t, e) {
            var n = t;
            do {
                if (n.i !== t.i && n.next.i !== t.i && n.i !== e.i && n.next.i !== e.i && he(n, n.next, t, e)) return !0;
                n = n.next;
            } while (n !== t);
            return !1;
        }(t, e) && (pe(t, e) && pe(e, t) && function(t, e) {
            var n = t, i = !1, r = (t.x + e.x) / 2, o = (t.y + e.y) / 2;
            do {
                n.y > o != n.next.y > o && n.next.y !== n.y && r < (n.next.x - n.x) * (o - n.y) / (n.next.y - n.y) + n.x && (i = !i), 
                n = n.next;
            } while (n !== t);
            return i;
        }(t, e) && (ue(t.prev, t, e.prev) || ue(t, e.prev, e)) || ce(t, e) && ue(t.prev, t, t.next) > 0 && ue(e.prev, e, e.next) > 0);
    }
    function ue(t, e, n) {
        return (e.y - t.y) * (n.x - e.x) - (e.x - t.x) * (n.y - e.y);
    }
    function ce(t, e) {
        return t.x === e.x && t.y === e.y;
    }
    function he(t, e, n, i) {
        var r = fe(ue(t, e, n)), o = fe(ue(t, e, i)), s = fe(ue(n, i, t)), a = fe(ue(n, i, e));
        return r !== o && s !== a || (!(0 !== r || !de(t, n, e)) || (!(0 !== o || !de(t, i, e)) || (!(0 !== s || !de(n, t, i)) || !(0 !== a || !de(n, e, i)))));
    }
    function de(t, e, n) {
        return e.x <= Math.max(t.x, n.x) && e.x >= Math.min(t.x, n.x) && e.y <= Math.max(t.y, n.y) && e.y >= Math.min(t.y, n.y);
    }
    function fe(t) {
        return t > 0 ? 1 : t < 0 ? -1 : 0;
    }
    function pe(t, e) {
        return ue(t.prev, t, t.next) < 0 ? ue(t, e, t.next) >= 0 && ue(t, t.prev, e) >= 0 : ue(t, e, t.prev) < 0 || ue(t, t.next, e) < 0;
    }
    function me(t, e) {
        var n = new be(t.i, t.x, t.y), i = new be(e.i, e.x, e.y), r = t.next, o = e.prev;
        return t.next = e, e.prev = t, n.next = r, r.prev = n, i.next = n, n.prev = i, o.next = i, 
        i.prev = o, i;
    }
    function ye(t, e, n, i) {
        var r = new be(t, e, n);
        return i ? (r.next = i.next, r.prev = i, i.next.prev = r, i.next = r) : (r.prev = r, 
        r.next = r), r;
    }
    function ge(t) {
        t.next.prev = t.prev, t.prev.next = t.next, t.prevZ && (t.prevZ.nextZ = t.nextZ), 
        t.nextZ && (t.nextZ.prevZ = t.prevZ);
    }
    function be(t, e, n) {
        this.i = t, this.x = e, this.y = n, this.prev = null, this.next = null, this.z = 0, 
        this.prevZ = null, this.nextZ = null, this.steiner = !1;
    }
    function ve(t, e, n, i) {
        for (var r = 0, o = e, s = n - i; o < n; o += i) r += (t[s] - t[o]) * (t[o + 1] + t[s + 1]), 
        s = o;
        return r;
    }
    Bt.exports = Jt, Bt.exports.default = Jt, Jt.deviation = function(t, e, n, i) {
        var r = e && e.length, o = r ? e[0] * n : t.length, s = Math.abs(ve(t, 0, o, n));
        if (r) for (var a = 0, l = e.length; a < l; a++) {
            var u = e[a] * n, c = a < l - 1 ? e[a + 1] * n : t.length;
            s -= Math.abs(ve(t, u, c, n));
        }
        var h = 0;
        for (a = 0; a < i.length; a += 3) {
            var d = i[a] * n, f = i[a + 1] * n, p = i[a + 2] * n;
            h += Math.abs((t[d] - t[p]) * (t[f + 1] - t[d + 1]) - (t[d] - t[f]) * (t[p + 1] - t[d + 1]));
        }
        return 0 === s && 0 === h ? 0 : Math.abs((h - s) / s);
    }, Jt.flatten = function(t) {
        for (var e = t[0][0].length, n = {
            vertices: [],
            holes: [],
            dimensions: e
        }, i = 0, r = 0; r < t.length; r++) {
            for (var o = 0; o < t[r].length; o++) for (var s = 0; s < e; s++) n.vertices.push(t[r][o][s]);
            r > 0 && (i += t[r - 1].length, n.holes.push(i));
        }
        return n;
    };
    var xe = Bt.exports;
    /*!
     * @maptalks/vector-packer v0.79.1
     * LICENSE : UNLICENSED
     * (c) 2016-2023 maptalks.com
     */    const we = {
        Point: 1,
        LineString: 2,
        Polygon: 3,
        MultiPoint: 4,
        MultiLineString: 5,
        MultiPolygon: 6
    };
    function ke(t, e = {}) {
        var n = [];
        if ("FeatureCollection" === t.type) for (var i = 0; i < t.features.length; i++) Ae(n, t.features[i], e, i); else Ae(n, "Feature" === t.type ? t : {
            geometry: t
        }, e);
        return n;
    }
    function Ae(t, e, n, i) {
        if (e.geometry && e.geometry.geometry) {
            var r = e.geometry.coordinates, o = e.geometry.type, s = [], a = e.id;
            if (n.promoteId ? a = e.properties[n.promoteId] : n.generateId && (a = i || 0), 
            "Point" === o) _e(r, s); else if ("MultiPoint" === o) for (var l = 0; l < r.length; l++) _e(r[l], s); else if ("LineString" === o) Se([ r ], s); else if ("MultiLineString" === o) {
                if (n.lineMetrics) {
                    for (l = 0; l < r.length; l++) Te(r[l], s = []), t.push(Me(a, "LineString", s, e.properties));
                    return;
                }
                Se(r, s);
            } else if ("Polygon" === o) Se(r, s); else {
                if ("MultiPolygon" !== o) {
                    if ("GeometryCollection" === o) {
                        for (l = 0; l < e.geometry.geometries.length; l++) Ae(t, {
                            id: a,
                            geometry: e.geometry.geometries[l],
                            properties: e.properties
                        }, n, i);
                        return;
                    }
                    return void console.warn(`Input data type(${o}) is not a valid GeoJSON geometry type.`);
                }
                for (l = 0; l < r.length; l++) {
                    var u = [];
                    Se(r[l], u), s.push(u);
                }
            }
            t.push(Me(a, o, s, e.properties));
        }
    }
    function _e(t, e) {
        const n = new C(t[0], t[1]);
        n.z = 100 * (t[2] || 0), e.push([ n ]);
    }
    function Te(t, e) {
        for (let n = 0; n < t.length; n++) {
            const i = new C(t[n][0], t[n][1]);
            i.z = 100 * (t[n][2] || 0), e.push(i);
        }
    }
    function Se(t, e, n, i) {
        for (var r = 0; r < t.length; r++) {
            var o = [];
            Te(t[r], o), e.push(o);
        }
    }
    function Me(t, e, n, i) {
        return {
            id: void 0 === t ? null : t,
            type: we[e],
            geometry: n,
            properties: i
        };
    }
    /*!
     * Codes from mapbox-gl-js
     * github.com/mapbox/mapbox-gl-js
     * MIT License
     */    function Pe(t, {width: e, height: n}, i, r) {
        if (r) {
            if (r.length !== e * n * i) throw new RangeError("mismatched image size");
        } else r = new Uint8Array(e * n * i);
        return t.width = e, t.height = n, t.data = r, t;
    }
    function Ie(t, {width: e, height: n}, i) {
        if (e === t.width && n === t.height) return;
        const r = Pe({}, {
            width: e,
            height: n
        }, i);
        je(t, r, {
            x: 0,
            y: 0
        }, {
            x: 0,
            y: 0
        }, {
            width: Math.min(t.width, e),
            height: Math.min(t.height, n)
        }, i), t.width = e, t.height = n, t.data = r.data;
    }
    function je(t, e, n, i, r, o) {
        if (0 === r.width || 0 === r.height) return e;
        if (r.width > t.width || r.height > t.height || n.x > t.width - r.width || n.y > t.height - r.height) throw new RangeError("out of range source coordinates for image copy");
        if (r.width > e.width || r.height > e.height || i.x > e.width - r.width || i.y > e.height - r.height) throw new RangeError("out of range destination coordinates for image copy");
        const s = t.data, a = e.data;
        if (s === a) return e;
        for (let l = 0; l < r.height; l++) {
            const u = ((n.y + l) * t.width + n.x) * o, c = ((i.y + l) * e.width + i.x) * o;
            for (let t = 0; t < r.width * o; t++) a[c + t] = s[u + t];
        }
        return e;
    }
    class ze {
        constructor(t, e) {
            Pe(this, t, 1, e);
        }
        resize(t) {
            Ie(this, t, 1);
        }
        clone() {
            return new ze({
                width: this.width,
                height: this.height
            }, new Uint8Array(this.data));
        }
        static copy(t, e, n, i, r) {
            je(t, e, n, i, r, 1);
        }
    }
    class Fe {
        constructor(t, e) {
            Pe(this, t, 4, e);
        }
        resize(t) {
            Ie(this, t, 4);
        }
        clone() {
            return new Fe({
                width: this.width,
                height: this.height
            }, new Uint8Array(this.data));
        }
        static copy(t, e, n, i, r) {
            je(t, e, n, i, r, 4);
        }
    }
    /*!
     * Codes from mapbox-gl-js
     * github.com/mapbox/mapbox-gl-js
     * MIT License
     */    class Oe {
        constructor(t, {pixelRatio: e}) {
            this.paddedRect = t, this.pixelRatio = e || 1;
        }
        get tl() {
            return [ this.paddedRect.x + 1, this.paddedRect.y + 1 ];
        }
        get br() {
            return [ this.paddedRect.x + this.paddedRect.w - 1, this.paddedRect.y + this.paddedRect.h - 1 ];
        }
        get displaySize() {
            return [ (this.paddedRect.w - 2) / this.pixelRatio, (this.paddedRect.h - 2) / this.pixelRatio ];
        }
    }
    class Ce {
        constructor(t) {
            this.glyphMap = t, this.build();
        }
        build() {
            const t = this.glyphMap, e = {}, n = new R(0, 0, {
                autoResize: !0
            }), i = [];
            for (const n in t) {
                const r = t[n], o = {
                    x: 0,
                    y: 0,
                    w: r.data.width + 2,
                    h: r.data.height + 2
                };
                i.push(o), e[n] = new Oe(o, r);
            }
            if (n.pack(i, {
                inPlace: !0
            }), !Ee(n.w) || !Ee(n.h)) {
                const t = Re(n.w), e = Re(n.h);
                n.resize(t, e);
            }
            const r = new Fe({
                width: n.w,
                height: n.h
            });
            for (const n in t) {
                const i = t[n], o = e[n].paddedRect;
                Fe.copy(i.data, r, {
                    x: 0,
                    y: 0
                }, {
                    x: o.x + 1,
                    y: o.y + 1
                }, i.data);
            }
            this.image = r, this.positions = e;
        }
    }
    function Ee(t) {
        return 0 == (t & t - 1) && 0 !== t;
    }
    function Re(t) {
        return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2));
    }
    /*!
     * Codes from mapbox-gl-js
     * github.com/mapbox/mapbox-gl-js
     * MIT License
     * TODO 升级为potpack
     */    class Ne {
        constructor(t) {
            this.glyphMap = t, this.build();
        }
        build() {
            const t = this.glyphMap, e = {}, n = new R(0, 0, {
                autoResize: !0
            }), i = [];
            for (const n in t) {
                const r = t[n], o = e[n] = {};
                for (const t in r) {
                    const e = r[+t];
                    if (!e || 0 === e.bitmap.width || 0 === e.bitmap.height) continue;
                    const n = {
                        x: 0,
                        y: 0,
                        w: e.bitmap.width + 2,
                        h: e.bitmap.height + 2
                    };
                    i.push(n), o[t] = {
                        rect: n,
                        metrics: e.metrics
                    };
                }
            }
            n.pack(i, {
                inPlace: !0
            });
            const r = new ze({
                width: n.w,
                height: n.h
            });
            for (const n in t) {
                const i = t[n];
                for (const t in i) {
                    const o = i[+t];
                    if (!o || 0 === o.bitmap.width || 0 === o.bitmap.height) continue;
                    const s = e[n][t].rect;
                    ze.copy(o.bitmap, r, {
                        x: 0,
                        y: 0
                    }, {
                        x: s.x + 1,
                        y: s.y + 1
                    }, o.bitmap);
                }
            }
            this.image = r, this.positions = e;
        }
    }
    function De(t) {
        return t < 65536 ? Uint16Array : Uint32Array;
    }
    function Le(t) {
        return (t = Math.abs(t)) < 128 ? Int8Array : t < 32768 ? Int16Array : Float32Array;
    }
    function He(t) {
        return t < 256 ? Uint8Array : t < 65536 ? Uint16Array : t < Math.pow(2, 32) ? Uint32Array : Float64Array;
    }
    function Ue(t) {
        const e = t.type, n = [];
        if (1 === e || 4 === e) for (let e = 0; e < t.geometry.length; e++) _e(t.geometry[e], n); else if (2 === e) Se(t.geometry, n); else if (3 === e) Se(t.geometry, n); else if (5 === e) Se(t.geometry, n); else if (6 === e) for (let e = 0; e < t.geometry.length; e++) {
            const i = [];
            Se(t.geometry[e], i), n.push(i);
        }
        return t.geometry = n, t;
    }
    function qe(t) {
        for (let e = 1; e < arguments.length; e++) {
            const n = arguments[e];
            for (const e in n) t[e] = n[e];
        }
        return t;
    }
    function Ve(t) {
        return null == t;
    }
    function $e(t) {
        return "number" == typeof t && !isNaN(t);
    }
    function Ge(t) {
        return "object" == typeof t && !!t;
    }
    function We(t) {
        return !Ve(t) && ("string" == typeof t || null !== t.constructor && t.constructor === String);
    }
    function Be(t) {
        return !Ve(t) && ("function" == typeof t || null !== t.constructor && t.constructor === Function);
    }
    const Je = Object.prototype.hasOwnProperty;
    function Xe(t, e) {
        return Je.call(t, e);
    }
    const Ye = Math.PI / 180;
    function Ze(t) {
        return t && v(t) && t.property;
    }
    function Ke(t) {
        const {pointAtTileRes: e, tileRatio: n} = t;
        return e * n;
    }
    const Qe = {};
    function tn(t, e) {
        if (!Array.isArray(e)) {
            if (e && void 0 !== e.r && void 0 !== e.g && void 0 !== e.b) return t[0] = 255 * e.r, 
            t[1] = 255 * e.g, t[2] = 255 * e.b, t[3] = void 0 !== e.a ? 255 * e.a : 255, t;
            e = Qe[e] = Qe[e] || Pt(e).unitArray();
        }
        for (let n = 0; n < e.length; n++) t[n] = 255 * e[n];
        return 3 === t.length && t.push(255), t;
    }
    const en = {
        textFill: 1,
        textSize: 1,
        textOpacity: 1,
        markerWidth: 1,
        markerHeight: 1,
        markerOpacity: 1,
        markerDx: 1,
        markerDy: 1,
        lineWidth: 1,
        lineColor: 1,
        lineOpacity: 1,
        polygonFill: 1,
        polygonOpacity: 1
    }, nn = {
        textName: 1,
        markerTextFitPadding: 1,
        markerTextFit: 1,
        lineGradientProperty: 1
    };
    var rn = Object.freeze({
        __proto__: null,
        now: function() {
            return Date.now();
        },
        extend: qe,
        isNil: Ve,
        isNumber: $e,
        isInteger: function(t) {
            return (0 | t) === t;
        },
        isObject: Ge,
        isString: We,
        isFunction: Be,
        hasOwn: Xe,
        join: function(t, e) {
            return t.join ? t.join(e || ",") : Array.prototype.join.call(t, e || ",");
        },
        toRadian: function(t) {
            return t * Ye;
        },
        toDegree: function(t) {
            return t / Ye;
        },
        evaluate: function(t, e, n) {
            return Be(t) ? t(void 0 !== n ? n : null, e) : t;
        },
        isFnTypeSymbol: Ze,
        getAltitudeToLocal: Ke,
        getTubeSizeScale: function(t) {
            return "centimeter" === t || "cm" === t ? 1 : "millimeter" === t || "mm" === t ? .1 : 100;
        },
        normalizeColor: tn,
        checkIfIdentityZoomDependent: function(t, e, n) {
            if (Array.isArray(n) || (n = Object.values(n)), !n || !n.length) return !1;
            if (!en[t]) return !1;
            for (let t = 0; t < n.length; t++) {
                const i = n[t] && (n[t].feature || n[t]);
                if (!i) continue;
                const r = i.properties && i.properties[e];
                if (r && v(r) && !x(r).isZoomConstant) return !0;
            }
            return !1;
        },
        checkIfZoomFnTypeSymbol: function(t) {
            return !!en[t] || !!nn[t];
        }
    });
    function on(t) {
        let e = 0;
        for (let n, i, r = 0, o = t.length, s = o - 1; r < o; s = r++) n = t[r], i = t[s], 
        e += void 0 !== n.x ? (i.x - n.x) * (n.y + i.y) : (i[0] - n[0]) * (n[1] + i[1]);
        return e;
    }
    function sn(t, e, n) {
        let i = n;
        return e && t && (i = +t[e]), isNaN(i) && (i = n || 0), 100 * i;
    }
    function an(t, e, n, i, r, o, s) {
        e || 0 === e || (e = 1);
        const a = sn(t.properties, n, i), l = a * e;
        let u = (o ? 100 * o : 0) || a;
        return r ? u = sn(t.properties, r, o) : s && (u = a - sn(t.properties, s, o)), u *= e, 
        {
            altitude: l,
            height: u
        };
    }
    function ln(t, e) {
        return e < 1 / 0 && (t.x < 0 || t.x > e || t.y < 0 || t.y > e);
    }
    function un(t) {
        return null == t;
    }
    function cn(t, e, n) {
        if (t === n || t === e) return t;
        const i = n - e;
        return ((t - e) % i + i) % i + e;
    }
    function hn(t, e) {
        if (!e) return null;
        const n = new Map;
        for (let i = 0; i < e.length; i++) {
            const r = e[i], o = t[r];
            let s = n.get(o);
            s || (s = [], n.set(o, s)), s.push(r);
        }
        return n;
    }
    class dn {
        constructor(t, e, n, i) {
            this.feature = t, this.symbol = e, this.fnTypes = n, this.options = i;
        }
        getPolygonResource() {
            let t = this.symbol.polygonPatternFile;
            const {polygonPatternFileFn: e} = this.fnTypes;
            return this.C(t, e);
        }
        getLineResource() {
            let t = this.symbol.linePatternFile;
            const {linePatternFileFn: e} = this.fnTypes;
            return this.C(t, e);
        }
        C(t, e) {
            return e && (t = e(this.options.zoom, this.feature.properties)), t;
        }
    }
    function fn(t, e, n, i) {
        const r = Math.abs(i) >> 15, o = r >> 1, s = r % 2;
        let a = i % Math.pow(2, 15);
        const l = e + (o << 14) * Math.sign(e), u = n + (s << 14) * Math.sign(n);
        return t[0] = l, t[1] = u, a = Math.round(a), t[2] = 0 === a ? i < 0 ? -1 : 0 : a, 
        t;
    }
    const pn = Math.pow(2, 14), mn = Math.pow(2, 15);
    var yn, gn, bn = {
        $version: 8,
        $root: {
            version: {
                required: !0,
                type: "enum",
                values: [ 8 ],
                doc: "Style specification version number. Must be 8.",
                example: 8
            },
            name: {
                type: "string",
                doc: "A human-readable name for the style.",
                example: "Bright"
            },
            metadata: {
                type: "*",
                doc: "Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."
            },
            center: {
                type: "array",
                value: "number",
                doc: "Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
                example: [ -73.9749, 40.7736 ]
            },
            zoom: {
                type: "number",
                doc: "Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
                example: 12.5
            },
            bearing: {
                type: "number",
                default: 0,
                period: 360,
                units: "degrees",
                doc: 'Default bearing, in degrees. The bearing is the compass direction that is "up"; for example, a bearing of 90° orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).',
                example: 29
            },
            pitch: {
                type: "number",
                default: 0,
                units: "degrees",
                doc: "Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
                example: 50
            },
            light: {
                type: "light",
                doc: "The global light source.",
                example: {
                    anchor: "viewport",
                    color: "white",
                    intensity: .4
                }
            },
            terrain: {
                type: "terrain",
                doc: "A global modifier that elevates layers and markers based on a DEM data source."
            },
            fog: {
                type: "fog",
                doc: "A global effect that fades layers and markers based on their distance to the camera. The fog can be used to approximate the effect of atmosphere on distant objects and enhance the depth perception of the map when used with terrain or 3D features. Note: fog is renamed to atmosphere in the Android and iOS SDKs and planned to be changed in GL-JS v.3.0.0."
            },
            sources: {
                required: !0,
                type: "sources",
                doc: "Data source specifications.",
                example: {
                    "mapbox-streets": {
                        type: "vector",
                        url: "mapbox://mapbox.mapbox-streets-v6"
                    }
                }
            },
            sprite: {
                type: "string",
                doc: "A base URL for retrieving the sprite image and metadata. The extensions `.png`, `.json` and scale factor `@2x.png` will be automatically appended. This property is required if any layer uses the `background-pattern`, `fill-pattern`, `line-pattern`, `fill-extrusion-pattern`, or `icon-image` properties. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",
                example: "mapbox://sprites/mapbox/bright-v8"
            },
            glyphs: {
                type: "string",
                doc: "A URL template for loading signed-distance-field glyph sets in PBF format. The URL must include `{fontstack}` and `{range}` tokens. This property is required if any layer uses the `text-field` layout property. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",
                example: "mapbox://fonts/mapbox/{fontstack}/{range}.pbf"
            },
            transition: {
                type: "transition",
                doc: "A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style's `transition` property.",
                example: {
                    duration: 300,
                    delay: 0
                }
            },
            projection: {
                type: "projection",
                doc: "The projection the map should be rendered in. Supported projections are Mercator, Globe, Albers, Equal Earth, Equirectangular (WGS84), Lambert conformal conic, Natural Earth, and Winkel Tripel. Terrain, sky and fog are supported by only Mercator and globe. CustomLayerInterface is not supported outside of Mercator.",
                example: {
                    name: "albers",
                    center: [ -154, 50 ],
                    parallels: [ 55, 65 ]
                }
            },
            layers: {
                required: !0,
                type: "array",
                value: "layer",
                doc: "Layers will be drawn in the order of this array.",
                example: [ {
                    id: "water",
                    source: "mapbox-streets",
                    "source-layer": "water",
                    type: "fill",
                    paint: {
                        "fill-color": "#00ffff"
                    }
                } ]
            }
        },
        sources: {
            "*": {
                type: "source",
                doc: "Specification of a data source. For vector and raster sources, either TileJSON or a URL to a TileJSON must be provided. For image and video sources, a URL must be provided. For GeoJSON sources, a URL or inline GeoJSON must be provided."
            }
        },
        source: [ "source_vector", "source_raster", "source_raster_dem", "source_geojson", "source_video", "source_image" ],
        source_vector: {
            type: {
                required: !0,
                type: "enum",
                values: {
                    vector: {
                        doc: "A vector tile source."
                    }
                },
                doc: "The type of the source."
            },
            url: {
                type: "string",
                doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
            },
            tiles: {
                type: "array",
                value: "string",
                doc: "An array of one or more tile source URLs, as in the TileJSON spec."
            },
            bounds: {
                type: "array",
                value: "number",
                length: 4,
                default: [ -180, -85.051129, 180, 85.051129 ],
                doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
            },
            scheme: {
                type: "enum",
                values: {
                    xyz: {
                        doc: "Slippy map tilenames scheme."
                    },
                    tms: {
                        doc: "OSGeo spec scheme."
                    }
                },
                default: "xyz",
                doc: "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
            },
            minzoom: {
                type: "number",
                default: 0,
                doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
            },
            maxzoom: {
                type: "number",
                default: 22,
                doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
            },
            attribution: {
                type: "string",
                doc: "Contains an attribution to be displayed when the map is shown to a user."
            },
            promoteId: {
                type: "promoteId",
                doc: "A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`. If specified as a string for a vector tile source, the same property is used across all its source layers. If specified as an object only specified source layers will have id overriden, others will fallback to original feature id"
            },
            volatile: {
                type: "boolean",
                default: !1,
                doc: "A setting to determine whether a source's tiles are cached locally.",
                "sdk-support": {
                    "basic functionality": {
                        android: "9.3.0",
                        ios: "5.10.0"
                    }
                }
            },
            "*": {
                type: "*",
                doc: "Other keys to configure the data source."
            }
        },
        source_raster: {
            type: {
                required: !0,
                type: "enum",
                values: {
                    raster: {
                        doc: "A raster tile source."
                    }
                },
                doc: "The type of the source."
            },
            url: {
                type: "string",
                doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
            },
            tiles: {
                type: "array",
                value: "string",
                doc: "An array of one or more tile source URLs, as in the TileJSON spec."
            },
            bounds: {
                type: "array",
                value: "number",
                length: 4,
                default: [ -180, -85.051129, 180, 85.051129 ],
                doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
            },
            minzoom: {
                type: "number",
                default: 0,
                doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
            },
            maxzoom: {
                type: "number",
                default: 22,
                doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
            },
            tileSize: {
                type: "number",
                default: 512,
                units: "pixels",
                doc: "The minimum visual size to display tiles for this layer. Only configurable for raster layers."
            },
            scheme: {
                type: "enum",
                values: {
                    xyz: {
                        doc: "Slippy map tilenames scheme."
                    },
                    tms: {
                        doc: "OSGeo spec scheme."
                    }
                },
                default: "xyz",
                doc: "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
            },
            attribution: {
                type: "string",
                doc: "Contains an attribution to be displayed when the map is shown to a user."
            },
            volatile: {
                type: "boolean",
                default: !1,
                doc: "A setting to determine whether a source's tiles are cached locally.",
                "sdk-support": {
                    "basic functionality": {
                        android: "9.3.0",
                        ios: "5.10.0"
                    }
                }
            },
            "*": {
                type: "*",
                doc: "Other keys to configure the data source."
            }
        },
        source_raster_dem: {
            type: {
                required: !0,
                type: "enum",
                values: {
                    "raster-dem": {
                        doc: "A RGB-encoded raster DEM source"
                    }
                },
                doc: "The type of the source."
            },
            url: {
                type: "string",
                doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
            },
            tiles: {
                type: "array",
                value: "string",
                doc: "An array of one or more tile source URLs, as in the TileJSON spec."
            },
            bounds: {
                type: "array",
                value: "number",
                length: 4,
                default: [ -180, -85.051129, 180, 85.051129 ],
                doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
            },
            minzoom: {
                type: "number",
                default: 0,
                doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
            },
            maxzoom: {
                type: "number",
                default: 22,
                doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
            },
            tileSize: {
                type: "number",
                default: 512,
                units: "pixels",
                doc: "The minimum visual size to display tiles for this layer. Only configurable for raster layers."
            },
            attribution: {
                type: "string",
                doc: "Contains an attribution to be displayed when the map is shown to a user."
            },
            encoding: {
                type: "enum",
                values: {
                    terrarium: {
                        doc: "Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info."
                    },
                    mapbox: {
                        doc: "Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info."
                    }
                },
                default: "mapbox",
                doc: "The encoding used by this source. Mapbox Terrain RGB is used by default"
            },
            volatile: {
                type: "boolean",
                default: !1,
                doc: "A setting to determine whether a source's tiles are cached locally.",
                "sdk-support": {
                    "basic functionality": {
                        android: "9.3.0",
                        ios: "5.10.0"
                    }
                }
            },
            "*": {
                type: "*",
                doc: "Other keys to configure the data source."
            }
        },
        source_geojson: {
            type: {
                required: !0,
                type: "enum",
                values: {
                    geojson: {
                        doc: "A GeoJSON data source."
                    }
                },
                doc: "The data type of the GeoJSON source."
            },
            data: {
                type: "*",
                doc: "A URL to a GeoJSON file, or inline GeoJSON."
            },
            maxzoom: {
                type: "number",
                default: 18,
                doc: "Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels)."
            },
            attribution: {
                type: "string",
                doc: "Contains an attribution to be displayed when the map is shown to a user."
            },
            buffer: {
                type: "number",
                default: 128,
                maximum: 512,
                minimum: 0,
                doc: "Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance."
            },
            filter: {
                type: "*",
                doc: "An expression for filtering features prior to processing them for rendering."
            },
            tolerance: {
                type: "number",
                default: .375,
                doc: "Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance)."
            },
            cluster: {
                type: "boolean",
                default: !1,
                doc: "If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:\n * `cluster` Is `true` if the point is a cluster \n * `cluster_id` A unqiue id for the cluster to be used in conjunction with the [cluster inspection methods](https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)\n * `point_count` Number of original points grouped into this cluster\n * `point_count_abbreviated` An abbreviated point count"
            },
            clusterRadius: {
                type: "number",
                default: 50,
                minimum: 0,
                doc: "Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile."
            },
            clusterMaxZoom: {
                type: "number",
                doc: "Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15."
            },
            clusterMinPoints: {
                type: "number",
                doc: "Minimum number of points necessary to form a cluster if clustering is enabled. Defaults to `2`."
            },
            clusterProperties: {
                type: "*",
                doc: 'An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form `{"property_name": [operator, map_expression]}`. `operator` is any expression function that accepts at least 2 operands (e.g. `"+"` or `"max"`) — it accumulates the property value from clusters/points the cluster contains; `map_expression` produces the value of a single point.\n\nExample: `{"sum": ["+", ["get", "scalerank"]]}`.\n\nFor more advanced use cases, in place of `operator`, you can use a custom reduce expression that references a special `["accumulated"]` value, e.g.:\n`{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}`'
            },
            lineMetrics: {
                type: "boolean",
                default: !1,
                doc: "Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values."
            },
            generateId: {
                type: "boolean",
                default: !1,
                doc: "Whether to generate ids for the geojson features. When enabled, the `feature.id` property will be auto assigned based on its index in the `features` array, over-writing any previous values."
            },
            promoteId: {
                type: "promoteId",
                doc: "A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`."
            }
        },
        source_video: {
            type: {
                required: !0,
                type: "enum",
                values: {
                    video: {
                        doc: "A video data source."
                    }
                },
                doc: "The data type of the video source."
            },
            urls: {
                required: !0,
                type: "array",
                value: "string",
                doc: "URLs to video content in order of preferred format."
            },
            coordinates: {
                required: !0,
                doc: "Corners of video specified in longitude, latitude pairs.",
                type: "array",
                length: 4,
                value: {
                    type: "array",
                    length: 2,
                    value: "number",
                    doc: "A single longitude, latitude pair."
                }
            }
        },
        source_image: {
            type: {
                required: !0,
                type: "enum",
                values: {
                    image: {
                        doc: "An image data source."
                    }
                },
                doc: "The data type of the image source."
            },
            url: {
                required: !0,
                type: "string",
                doc: "URL that points to an image."
            },
            coordinates: {
                required: !0,
                doc: "Corners of image specified in longitude, latitude pairs.",
                type: "array",
                length: 4,
                value: {
                    type: "array",
                    length: 2,
                    value: "number",
                    doc: "A single longitude, latitude pair."
                }
            }
        },
        layer: {
            id: {
                type: "string",
                doc: "Unique layer name.",
                required: !0
            },
            type: {
                type: "enum",
                values: {
                    fill: {
                        doc: "A filled polygon with an optional stroked border.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.10.0",
                                android: "2.0.1",
                                ios: "2.0.0",
                                macos: "0.1.0"
                            }
                        }
                    },
                    line: {
                        doc: "A stroked line.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.10.0",
                                android: "2.0.1",
                                ios: "2.0.0",
                                macos: "0.1.0"
                            }
                        }
                    },
                    symbol: {
                        doc: "An icon or a text label.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.10.0",
                                android: "2.0.1",
                                ios: "2.0.0",
                                macos: "0.1.0"
                            }
                        }
                    },
                    circle: {
                        doc: "A filled circle.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.10.0",
                                android: "2.0.1",
                                ios: "2.0.0",
                                macos: "0.1.0"
                            }
                        }
                    },
                    heatmap: {
                        doc: "A heatmap.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.41.0",
                                android: "6.0.0",
                                ios: "4.0.0",
                                macos: "0.7.0"
                            }
                        }
                    },
                    "fill-extrusion": {
                        doc: "An extruded (3D) polygon.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.27.0",
                                android: "5.1.0",
                                ios: "3.6.0",
                                macos: "0.5.0"
                            }
                        }
                    },
                    raster: {
                        doc: "Raster map textures such as satellite imagery.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.10.0",
                                android: "2.0.1",
                                ios: "2.0.0",
                                macos: "0.1.0"
                            }
                        }
                    },
                    hillshade: {
                        doc: "Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.43.0",
                                android: "6.0.0",
                                ios: "4.0.0",
                                macos: "0.7.0"
                            }
                        }
                    },
                    background: {
                        doc: "The background color or pattern of the map.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "0.10.0",
                                android: "2.0.1",
                                ios: "2.0.0",
                                macos: "0.1.0"
                            }
                        }
                    },
                    sky: {
                        doc: "A spherical dome around the map that is always rendered behind all other layers.",
                        "sdk-support": {
                            "basic functionality": {
                                js: "2.0.0",
                                ios: "10.0.0",
                                android: "10.0.0"
                            }
                        }
                    }
                },
                doc: "Rendering type of this layer.",
                required: !0
            },
            metadata: {
                type: "*",
                doc: "Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."
            },
            source: {
                type: "string",
                doc: "Name of a source description to be used for this layer. Required for all layer types except `background`."
            },
            "source-layer": {
                type: "string",
                doc: "Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources."
            },
            minzoom: {
                type: "number",
                minimum: 0,
                maximum: 24,
                doc: "The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden."
            },
            maxzoom: {
                type: "number",
                minimum: 0,
                maximum: 24,
                doc: "The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden."
            },
            filter: {
                type: "filter",
                doc: 'An expression specifying conditions on source features. Only features that match the filter are displayed. Zoom expressions in filters are only evaluated at integer zoom levels. The `["feature-state", ...]` expression is not supported in filter expressions.  The `["pitch"]` and `["distance-from-center"]` expressions are supported only for filter expressions on the symbol layer.'
            },
            layout: {
                type: "layout",
                doc: "Layout properties for the layer."
            },
            paint: {
                type: "paint",
                doc: "Default paint properties for this layer."
            }
        },
        layout: [ "layout_fill", "layout_line", "layout_circle", "layout_heatmap", "layout_fill-extrusion", "layout_symbol", "layout_raster", "layout_hillshade", "layout_background", "layout_sky" ],
        layout_background: {
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                "property-type": "constant"
            }
        },
        layout_sky: {
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                "property-type": "constant"
            }
        },
        layout_fill: {
            "fill-sort-key": {
                type: "number",
                doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
                "sdk-support": {
                    "basic functionality": {
                        js: "1.2.0",
                        android: "9.1.0",
                        ios: "5.8.0",
                        macos: "0.15.0"
                    },
                    "data-driven styling": {
                        js: "1.2.0",
                        android: "9.1.0",
                        ios: "5.8.0",
                        macos: "0.15.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                "property-type": "constant"
            }
        },
        layout_circle: {
            "circle-sort-key": {
                type: "number",
                doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
                "sdk-support": {
                    "basic functionality": {
                        js: "1.2.0",
                        android: "9.2.0",
                        ios: "5.9.0",
                        macos: "0.16.0"
                    },
                    "data-driven styling": {
                        js: "1.2.0",
                        android: "9.2.0",
                        ios: "5.9.0",
                        macos: "0.16.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                "property-type": "constant"
            }
        },
        layout_heatmap: {
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.41.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                "property-type": "constant"
            }
        },
        "layout_fill-extrusion": {
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                "property-type": "constant"
            },
            "fill-extrusion-edge-radius": {
                type: "number",
                private: !0,
                default: 0,
                minimum: 0,
                maximum: 1,
                doc: "Radius of a fill extrusion edge in meters. If not zero, rounds extrusion edges for a smoother appearance.",
                "sdk-support": {
                    "basic functionality": {
                        js: "v2.10.0",
                        android: "10.7.0",
                        ios: "10.7.0"
                    }
                },
                "property-type": "constant"
            }
        },
        layout_line: {
            "line-cap": {
                type: "enum",
                values: {
                    butt: {
                        doc: "A cap with a squared-off end which is drawn to the exact endpoint of the line."
                    },
                    round: {
                        doc: "A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
                    },
                    square: {
                        doc: "A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
                    }
                },
                default: "butt",
                doc: "The display of line endings.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "2.3.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "line-join": {
                type: "enum",
                values: {
                    bevel: {
                        doc: "A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
                    },
                    round: {
                        doc: "A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
                    },
                    miter: {
                        doc: "A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."
                    }
                },
                default: "miter",
                doc: "The display of lines when joining.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.40.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "line-miter-limit": {
                type: "number",
                default: 2,
                doc: "Used to automatically convert miter joins to bevel joins for sharp angles.",
                requires: [ {
                    "line-join": "miter"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "line-round-limit": {
                type: "number",
                default: 1.05,
                doc: "Used to automatically convert round joins to miter joins for shallow angles.",
                requires: [ {
                    "line-join": "round"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "line-sort-key": {
                type: "number",
                doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
                "sdk-support": {
                    "basic functionality": {
                        js: "1.2.0",
                        android: "9.1.0",
                        ios: "5.8.0",
                        macos: "0.15.0"
                    },
                    "data-driven styling": {
                        js: "1.2.0",
                        android: "9.1.0",
                        ios: "5.8.0",
                        macos: "0.15.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                "property-type": "constant"
            }
        },
        layout_symbol: {
            "symbol-placement": {
                type: "enum",
                values: {
                    point: {
                        doc: "The label is placed at the point where the geometry is located."
                    },
                    line: {
                        doc: "The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."
                    },
                    "line-center": {
                        doc: "The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."
                    }
                },
                default: "point",
                doc: "Label placement relative to its geometry.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "`line-center` value": {
                        js: "0.47.0",
                        android: "6.4.0",
                        ios: "4.3.0",
                        macos: "0.10.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "symbol-spacing": {
                type: "number",
                default: 250,
                minimum: 1,
                units: "pixels",
                doc: "Distance between two symbol anchors.",
                requires: [ {
                    "symbol-placement": "line"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "symbol-avoid-edges": {
                type: "boolean",
                default: !1,
                doc: "If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "symbol-sort-key": {
                type: "number",
                doc: "Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `icon-allow-overlap` or `text-allow-overlap` is `false`, features with a lower sort key will have priority during placement. When `icon-allow-overlap` or `text-allow-overlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.53.0",
                        android: "7.4.0",
                        ios: "4.11.0",
                        macos: "0.14.0"
                    },
                    "data-driven styling": {
                        js: "0.53.0",
                        android: "7.4.0",
                        ios: "4.11.0",
                        macos: "0.14.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "symbol-z-order": {
                type: "enum",
                values: {
                    auto: {
                        doc: "Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."
                    },
                    "viewport-y": {
                        doc: "Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."
                    },
                    source: {
                        doc: "Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data."
                    }
                },
                default: "auto",
                doc: "Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbol-sort-key`.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.49.0",
                        android: "6.6.0",
                        ios: "4.5.0",
                        macos: "0.12.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-allow-overlap": {
                type: "boolean",
                default: !1,
                doc: "If true, the icon will be visible even if it collides with other previously drawn symbols.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-ignore-placement": {
                type: "boolean",
                default: !1,
                doc: "If true, other symbols can be visible even if they collide with the icon.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-optional": {
                type: "boolean",
                default: !1,
                doc: "If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",
                requires: [ "icon-image", "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-rotation-alignment": {
                type: "enum",
                values: {
                    map: {
                        doc: "When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."
                    },
                    viewport: {
                        doc: "Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
                    },
                    auto: {
                        doc: "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
                    }
                },
                default: "auto",
                doc: "In combination with `symbol-placement`, determines the rotation behavior of icons.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "`auto` value": {
                        js: "0.25.0",
                        android: "4.2.0",
                        ios: "3.4.0",
                        macos: "0.3.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-size": {
                type: "number",
                default: 1,
                minimum: 0,
                units: "factor of the original icon size",
                doc: "Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.35.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "icon-text-fit": {
                type: "enum",
                values: {
                    none: {
                        doc: "The icon is displayed at its intrinsic aspect ratio."
                    },
                    width: {
                        doc: "The icon is scaled in the x-dimension to fit the width of the text."
                    },
                    height: {
                        doc: "The icon is scaled in the y-dimension to fit the height of the text."
                    },
                    both: {
                        doc: "The icon is scaled in both x- and y-dimensions."
                    }
                },
                default: "none",
                doc: "Scales the icon to fit around the associated text.",
                requires: [ "icon-image", "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.21.0",
                        android: "4.2.0",
                        ios: "3.4.0",
                        macos: "0.2.1"
                    },
                    "stretchable icons": {
                        js: "1.6.0",
                        android: "9.2.0",
                        ios: "5.8.0",
                        macos: "0.15.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-text-fit-padding": {
                type: "array",
                value: "number",
                length: 4,
                default: [ 0, 0, 0, 0 ],
                units: "pixels",
                doc: "Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",
                requires: [ "icon-image", "text-field", {
                    "icon-text-fit": [ "both", "width", "height" ]
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.21.0",
                        android: "4.2.0",
                        ios: "3.4.0",
                        macos: "0.2.1"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-image": {
                type: "resolvedImage",
                doc: "Name of image in sprite to use for drawing an image background.",
                tokens: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.35.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "icon-rotate": {
                type: "number",
                default: 0,
                period: 360,
                units: "degrees",
                doc: "Rotates the icon clockwise.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.21.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "icon-padding": {
                type: "number",
                default: 2,
                minimum: 0,
                units: "pixels",
                doc: "Size of the additional area around the icon bounding box used for detecting symbol collisions.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-keep-upright": {
                type: "boolean",
                default: !1,
                doc: "If true, the icon may be flipped to prevent it from being rendered upside-down.",
                requires: [ "icon-image", {
                    "icon-rotation-alignment": "map"
                }, {
                    "symbol-placement": [ "line", "line-center" ]
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-offset": {
                type: "array",
                value: "number",
                length: 2,
                default: [ 0, 0 ],
                doc: "Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "icon-anchor": {
                type: "enum",
                values: {
                    center: {
                        doc: "The center of the icon is placed closest to the anchor."
                    },
                    left: {
                        doc: "The left side of the icon is placed closest to the anchor."
                    },
                    right: {
                        doc: "The right side of the icon is placed closest to the anchor."
                    },
                    top: {
                        doc: "The top of the icon is placed closest to the anchor."
                    },
                    bottom: {
                        doc: "The bottom of the icon is placed closest to the anchor."
                    },
                    "top-left": {
                        doc: "The top left corner of the icon is placed closest to the anchor."
                    },
                    "top-right": {
                        doc: "The top right corner of the icon is placed closest to the anchor."
                    },
                    "bottom-left": {
                        doc: "The bottom left corner of the icon is placed closest to the anchor."
                    },
                    "bottom-right": {
                        doc: "The bottom right corner of the icon is placed closest to the anchor."
                    }
                },
                default: "center",
                doc: "Part of the icon placed closest to the anchor.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.40.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    },
                    "data-driven styling": {
                        js: "0.40.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "icon-pitch-alignment": {
                type: "enum",
                values: {
                    map: {
                        doc: "The icon is aligned to the plane of the map."
                    },
                    viewport: {
                        doc: "The icon is aligned to the plane of the viewport."
                    },
                    auto: {
                        doc: "Automatically matches the value of `icon-rotation-alignment`."
                    }
                },
                default: "auto",
                doc: "Orientation of icon when map is pitched.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.39.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-pitch-alignment": {
                type: "enum",
                values: {
                    map: {
                        doc: "The text is aligned to the plane of the map."
                    },
                    viewport: {
                        doc: "The text is aligned to the plane of the viewport."
                    },
                    auto: {
                        doc: "Automatically matches the value of `text-rotation-alignment`."
                    }
                },
                default: "auto",
                doc: "Orientation of text when map is pitched.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.21.0",
                        android: "4.2.0",
                        ios: "3.4.0",
                        macos: "0.2.1"
                    },
                    "`auto` value": {
                        js: "0.25.0",
                        android: "4.2.0",
                        ios: "3.4.0",
                        macos: "0.3.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-rotation-alignment": {
                type: "enum",
                values: {
                    map: {
                        doc: "When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."
                    },
                    viewport: {
                        doc: "Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
                    },
                    auto: {
                        doc: "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
                    }
                },
                default: "auto",
                doc: "In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "`auto` value": {
                        js: "0.25.0",
                        android: "4.2.0",
                        ios: "3.4.0",
                        macos: "0.3.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-field": {
                type: "formatted",
                default: "",
                tokens: !0,
                doc: "Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-font": {
                type: "array",
                value: "string",
                default: [ "Open Sans Regular", "Arial Unicode MS Regular" ],
                doc: "Font stack to use for displaying text.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-size": {
                type: "number",
                default: 16,
                minimum: 0,
                units: "pixels",
                doc: "Font size.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.35.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-max-width": {
                type: "number",
                default: 10,
                minimum: 0,
                units: "ems",
                doc: "The maximum line width for text wrapping.",
                requires: [ "text-field", {
                    "symbol-placement": [ "point" ]
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.40.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-line-height": {
                type: "number",
                default: 1.2,
                units: "ems",
                doc: "Text leading value for multi-line text.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "2.3.0",
                        android: "10.0.0",
                        ios: "10.0.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-letter-spacing": {
                type: "number",
                default: 0,
                units: "ems",
                doc: "Text tracking amount.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.40.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-justify": {
                type: "enum",
                values: {
                    auto: {
                        doc: "The text is aligned towards the anchor position."
                    },
                    left: {
                        doc: "The text is aligned to the left."
                    },
                    center: {
                        doc: "The text is centered."
                    },
                    right: {
                        doc: "The text is aligned to the right."
                    }
                },
                default: "center",
                doc: "Text justification options.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.39.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    },
                    auto: {
                        js: "0.54.0",
                        android: "7.4.0",
                        ios: "4.10.0",
                        macos: "0.14.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-radial-offset": {
                type: "number",
                units: "ems",
                default: 0,
                doc: "Radial offset of text, in the direction of the symbol's anchor. Useful in combination with `text-variable-anchor`, which defaults to using the two-dimensional `text-offset` if present.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.54.0",
                        android: "7.4.0",
                        ios: "4.10.0",
                        macos: "0.14.0"
                    },
                    "data-driven styling": {
                        js: "0.54.0",
                        android: "7.4.0",
                        ios: "4.10.0",
                        macos: "0.14.0"
                    }
                },
                requires: [ "text-field" ],
                "property-type": "data-driven",
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                }
            },
            "text-variable-anchor": {
                type: "array",
                value: "enum",
                values: {
                    center: {
                        doc: "The center of the text is placed closest to the anchor."
                    },
                    left: {
                        doc: "The left side of the text is placed closest to the anchor."
                    },
                    right: {
                        doc: "The right side of the text is placed closest to the anchor."
                    },
                    top: {
                        doc: "The top of the text is placed closest to the anchor."
                    },
                    bottom: {
                        doc: "The bottom of the text is placed closest to the anchor."
                    },
                    "top-left": {
                        doc: "The top left corner of the text is placed closest to the anchor."
                    },
                    "top-right": {
                        doc: "The top right corner of the text is placed closest to the anchor."
                    },
                    "bottom-left": {
                        doc: "The bottom left corner of the text is placed closest to the anchor."
                    },
                    "bottom-right": {
                        doc: "The bottom right corner of the text is placed closest to the anchor."
                    }
                },
                requires: [ "text-field", {
                    "symbol-placement": [ "point" ]
                } ],
                doc: "To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.54.0",
                        android: "7.4.0",
                        ios: "4.10.0",
                        macos: "0.14.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-anchor": {
                type: "enum",
                values: {
                    center: {
                        doc: "The center of the text is placed closest to the anchor."
                    },
                    left: {
                        doc: "The left side of the text is placed closest to the anchor."
                    },
                    right: {
                        doc: "The right side of the text is placed closest to the anchor."
                    },
                    top: {
                        doc: "The top of the text is placed closest to the anchor."
                    },
                    bottom: {
                        doc: "The bottom of the text is placed closest to the anchor."
                    },
                    "top-left": {
                        doc: "The top left corner of the text is placed closest to the anchor."
                    },
                    "top-right": {
                        doc: "The top right corner of the text is placed closest to the anchor."
                    },
                    "bottom-left": {
                        doc: "The bottom left corner of the text is placed closest to the anchor."
                    },
                    "bottom-right": {
                        doc: "The bottom right corner of the text is placed closest to the anchor."
                    }
                },
                default: "center",
                doc: "Part of the text placed closest to the anchor.",
                requires: [ "text-field", {
                    "!": "text-variable-anchor"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.39.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-max-angle": {
                type: "number",
                default: 45,
                units: "degrees",
                doc: "Maximum angle change between adjacent characters.",
                requires: [ "text-field", {
                    "symbol-placement": [ "line", "line-center" ]
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-writing-mode": {
                type: "array",
                value: "enum",
                values: {
                    horizontal: {
                        doc: "If a text's language supports horizontal writing mode, symbols would be laid out horizontally."
                    },
                    vertical: {
                        doc: "If a text's language supports vertical writing mode, symbols would be laid out vertically."
                    }
                },
                doc: "The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either ['horizontal', 'vertical'] or ['vertical', 'horizontal'], the order doesn't affect the placement.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "1.3.0",
                        android: "8.3.0",
                        ios: "5.3.0",
                        macos: "0.15.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-rotate": {
                type: "number",
                default: 0,
                period: 360,
                units: "degrees",
                doc: "Rotates the text clockwise.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.35.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-padding": {
                type: "number",
                default: 2,
                minimum: 0,
                units: "pixels",
                doc: "Size of the additional area around the text bounding box used for detecting symbol collisions.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-keep-upright": {
                type: "boolean",
                default: !0,
                doc: "If true, the text may be flipped vertically to prevent it from being rendered upside-down.",
                requires: [ "text-field", {
                    "text-rotation-alignment": "map"
                }, {
                    "symbol-placement": [ "line", "line-center" ]
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-transform": {
                type: "enum",
                values: {
                    none: {
                        doc: "The text is not altered."
                    },
                    uppercase: {
                        doc: "Forces all letters to be displayed in uppercase."
                    },
                    lowercase: {
                        doc: "Forces all letters to be displayed in lowercase."
                    }
                },
                default: "none",
                doc: "Specifies how to capitalize text, similar to the CSS `text-transform` property.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-offset": {
                type: "array",
                doc: "Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.",
                value: "number",
                units: "ems",
                length: 2,
                default: [ 0, 0 ],
                requires: [ "text-field", {
                    "!": "text-radial-offset"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.35.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "text-allow-overlap": {
                type: "boolean",
                default: !1,
                doc: "If true, the text will be visible even if it collides with other previously drawn symbols.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-ignore-placement": {
                type: "boolean",
                default: !1,
                doc: "If true, other symbols can be visible even if they collide with the text.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-optional": {
                type: "boolean",
                default: !1,
                doc: "If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",
                requires: [ "text-field", "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                "property-type": "constant"
            }
        },
        layout_raster: {
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                "property-type": "constant"
            }
        },
        layout_hillshade: {
            visibility: {
                type: "enum",
                values: {
                    visible: {
                        doc: "The layer is shown."
                    },
                    none: {
                        doc: "The layer is not shown."
                    }
                },
                default: "visible",
                doc: "Whether this layer is displayed.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                "property-type": "constant"
            }
        },
        filter: {
            type: "array",
            value: "*",
            doc: "A filter selects specific features from a layer."
        },
        filter_symbol: {
            type: "boolean",
            doc: 'Expression which determines whether or not to display a symbol. Symbols support dynamic filtering, meaning this expression can use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',
            default: !1,
            transition: !1,
            "property-type": "data-driven",
            expression: {
                interpolated: !1,
                parameters: [ "zoom", "feature", "pitch", "distance-from-center" ]
            }
        },
        filter_fill: {
            type: "boolean",
            doc: 'Expression which determines whether or not to display a polygon. Fill layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',
            default: !1,
            transition: !1,
            "property-type": "data-driven",
            expression: {
                interpolated: !1,
                parameters: [ "zoom", "feature" ]
            }
        },
        filter_line: {
            type: "boolean",
            doc: 'Expression which determines whether or not to display a Polygon or LineString. Line layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',
            default: !1,
            transition: !1,
            "property-type": "data-driven",
            expression: {
                interpolated: !1,
                parameters: [ "zoom", "feature" ]
            }
        },
        filter_circle: {
            type: "boolean",
            doc: 'Expression which determines whether or not to display a circle. Circle layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',
            default: !1,
            transition: !1,
            "property-type": "data-driven",
            expression: {
                interpolated: !1,
                parameters: [ "zoom", "feature" ]
            }
        },
        "filter_fill-extrusion": {
            type: "boolean",
            doc: 'Expression which determines whether or not to display a Polygon. Fill-extrusion layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',
            default: !1,
            transition: !1,
            "property-type": "data-driven",
            expression: {
                interpolated: !1,
                parameters: [ "zoom", "feature" ]
            }
        },
        filter_heatmap: {
            type: "boolean",
            doc: 'Expression used to determine whether a point is being displayed or not. Heatmap layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',
            default: !1,
            transition: !1,
            "property-type": "data-driven",
            expression: {
                interpolated: !1,
                parameters: [ "zoom", "feature" ]
            }
        },
        filter_operator: {
            type: "enum",
            values: {
                "==": {
                    doc: '`["==", key, value]` equality: `feature[key] = value`'
                },
                "!=": {
                    doc: '`["!=", key, value]` inequality: `feature[key] ≠ value`'
                },
                ">": {
                    doc: '`[">", key, value]` greater than: `feature[key] > value`'
                },
                ">=": {
                    doc: '`[">=", key, value]` greater than or equal: `feature[key] ≥ value`'
                },
                "<": {
                    doc: '`["<", key, value]` less than: `feature[key] < value`'
                },
                "<=": {
                    doc: '`["<=", key, value]` less than or equal: `feature[key] ≤ value`'
                },
                in: {
                    doc: '`["in", key, v0, ..., vn]` set inclusion: `feature[key] ∈ {v0, ..., vn}`'
                },
                "!in": {
                    doc: '`["!in", key, v0, ..., vn]` set exclusion: `feature[key] ∉ {v0, ..., vn}`'
                },
                all: {
                    doc: '`["all", f0, ..., fn]` logical `AND`: `f0 ∧ ... ∧ fn`'
                },
                any: {
                    doc: '`["any", f0, ..., fn]` logical `OR`: `f0 ∨ ... ∨ fn`'
                },
                none: {
                    doc: '`["none", f0, ..., fn]` logical `NOR`: `¬f0 ∧ ... ∧ ¬fn`'
                },
                has: {
                    doc: '`["has", key]` `feature[key]` exists'
                },
                "!has": {
                    doc: '`["!has", key]` `feature[key]` does not exist'
                },
                within: {
                    doc: '`["within", object]` feature geometry is within object geometry'
                }
            },
            doc: "The filter operator."
        },
        geometry_type: {
            type: "enum",
            values: {
                Point: {
                    doc: "Filter to point geometries."
                },
                LineString: {
                    doc: "Filter to line geometries."
                },
                Polygon: {
                    doc: "Filter to polygon geometries."
                }
            },
            doc: "The geometry type for the filter to select."
        },
        function: {
            expression: {
                type: "expression",
                doc: "An expression."
            },
            stops: {
                type: "array",
                doc: "An array of stops.",
                value: "function_stop"
            },
            base: {
                type: "number",
                default: 1,
                minimum: 0,
                doc: "The exponential base of the interpolation curve. It controls the rate at which the result increases. Higher values make the result increase more towards the high end of the range. With `1` the stops are interpolated linearly."
            },
            property: {
                type: "string",
                doc: "The name of a feature property to use as the function input.",
                default: "$zoom"
            },
            type: {
                type: "enum",
                values: {
                    identity: {
                        doc: "Return the input value as the output value."
                    },
                    exponential: {
                        doc: "Generate an output by interpolating between stops just less than and just greater than the function input."
                    },
                    interval: {
                        doc: "Return the output value of the stop just less than the function input."
                    },
                    categorical: {
                        doc: "Return the output value of the stop equal to the function input."
                    }
                },
                doc: "The interpolation strategy to use in function evaluation.",
                default: "exponential"
            },
            colorSpace: {
                type: "enum",
                values: {
                    rgb: {
                        doc: "Use the RGB color space to interpolate color values"
                    },
                    lab: {
                        doc: "Use the LAB color space to interpolate color values."
                    },
                    hcl: {
                        doc: "Use the HCL color space to interpolate color values, interpolating the Hue, Chroma, and Luminance channels individually."
                    }
                },
                doc: "The color space in which colors interpolated. Interpolating colors in perceptual color spaces like LAB and HCL tend to produce color ramps that look more consistent and produce colors that can be differentiated more easily than those interpolated in RGB space.",
                default: "rgb"
            },
            default: {
                type: "*",
                required: !1,
                doc: "A value to serve as a fallback function result when a value isn't otherwise available. It is used in the following circumstances:\n* In categorical functions, when the feature value does not match any of the stop domain values.\n* In property and zoom-and-property functions, when a feature does not contain a value for the specified property.\n* In identity functions, when the feature value is not valid for the style property (for example, if the function is being used for a `circle-color` property but the feature property value is not a string or not a valid color).\n* In interval or exponential property and zoom-and-property functions, when the feature value is not numeric.\nIf no default is provided, the style property's default is used in these circumstances."
            }
        },
        function_stop: {
            type: "array",
            minimum: 0,
            maximum: 24,
            value: [ "number", "color" ],
            length: 2,
            doc: "Zoom level and value pair."
        },
        expression: {
            type: "array",
            value: "*",
            minimum: 1,
            doc: "An expression defines a function that can be used for data-driven style properties or feature filters."
        },
        expression_name: {
            doc: "",
            type: "enum",
            values: {
                let: {
                    doc: 'Binds expressions to named variables, which can then be referenced in the result expression using ["var", "variable_name"].',
                    group: "Variable binding",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                var: {
                    doc: 'References variable bound using "let".',
                    group: "Variable binding",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                literal: {
                    doc: "Provides a literal array or object value.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                array: {
                    doc: "Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                at: {
                    doc: "Retrieves an item from an array.",
                    group: "Lookup",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                in: {
                    doc: "Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a [`literal`](#types-literal) expression to hint correct interpretation to the [type system](#type-system).",
                    group: "Lookup",
                    "sdk-support": {
                        "basic functionality": {
                            js: "1.6.0",
                            android: "9.1.0",
                            ios: "5.8.0",
                            macos: "0.15.0"
                        }
                    }
                },
                "index-of": {
                    doc: "Returns the first position at which an item can be found in an array or a substring can be found in a string, or `-1` if the input cannot be found. Accepts an optional index from where to begin the search.",
                    group: "Lookup",
                    "sdk-support": {
                        "basic functionality": {
                            js: "1.10.0",
                            android: "10.0.0",
                            ios: "10.0.0"
                        }
                    }
                },
                slice: {
                    doc: "Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.",
                    group: "Lookup",
                    "sdk-support": {
                        "basic functionality": {
                            js: "1.10.0",
                            android: "10.0.0",
                            ios: "10.0.0"
                        }
                    }
                },
                case: {
                    doc: "Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                match: {
                    doc: 'Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, `["get", "building_type"]`). Each label must be unique, and must be either:\n - a single literal value; or\n - an array of literal values, the values of which must be all strings or all numbers (for example `[100, 101]` or `["c", "b"]`).\n\nThe input matches if any of the values in the array matches using strict equality, similar to the `"in"` operator.\nIf the input type does not match the type of the labels, the result will be the fallback value.',
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                coalesce: {
                    doc: "Evaluates each expression in turn until the first valid value is obtained. Invalid values are `null` and [`'image'`](#types-image) expressions that are unavailable in the style. If all values are invalid, `coalesce` returns the first value listed.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                step: {
                    doc: 'Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.',
                    group: "Ramps, scales, curves",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.42.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                interpolate: {
                    doc: 'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array<number>`, or `color`.\n\nInterpolation types:\n- `["linear"]`: Interpolates linearly between the pair of stops just less than and just greater than the input.\n- `["exponential", base]`: Interpolates exponentially between the stops just less than and just greater than the input. `base` controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.\n- `["cubic-bezier", x1, y1, x2, y2]`: Interpolates using the cubic bezier curve defined by the given control points.',
                    group: "Ramps, scales, curves",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.42.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "interpolate-hcl": {
                    doc: 'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the Hue-Chroma-Luminance color space.',
                    group: "Ramps, scales, curves",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.49.0"
                        }
                    }
                },
                "interpolate-lab": {
                    doc: 'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the CIELAB color space.',
                    group: "Ramps, scales, curves",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.49.0"
                        }
                    }
                },
                ln2: {
                    doc: "Returns mathematical constant ln(2).",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                pi: {
                    doc: "Returns the mathematical constant pi.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                e: {
                    doc: "Returns the mathematical constant e.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                typeof: {
                    doc: "Returns a string describing the type of the given value.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                string: {
                    doc: "Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                number: {
                    doc: "Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                boolean: {
                    doc: "Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                object: {
                    doc: "Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                collator: {
                    doc: "Returns a `collator` for use in locale-dependent comparison operations. The `case-sensitive` and `diacritic-sensitive` options default to `false`. The `locale` argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the `collator` will use a system-defined fallback locale. Use `resolved-locale` to test the results of locale fallback behavior.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.2.0",
                            macos: "0.9.0"
                        }
                    }
                },
                format: {
                    doc: 'Returns a `formatted` string for displaying mixed-format text in the `text-field` property. The input may contain a string literal or expression, including an [`\'image\'`](#types-image) expression. Strings may be followed by a style override object that supports the following properties:\n- `"text-font"`: Overrides the font stack specified by the root layout property.\n- `"text-color"`: Overrides the color specified by the root paint property.\n- `"font-scale"`: Applies a scaling factor on `text-size` as specified by the root layout property.',
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.48.0",
                            android: "6.7.0",
                            ios: "4.6.0",
                            macos: "0.12.0"
                        },
                        "text-font": {
                            js: "0.48.0",
                            android: "6.7.0",
                            ios: "4.6.0",
                            macos: "0.12.0"
                        },
                        "font-scale": {
                            js: "0.48.0",
                            android: "6.7.0",
                            ios: "4.6.0",
                            macos: "0.12.0"
                        },
                        "text-color": {
                            js: "1.3.0",
                            android: "7.3.0",
                            ios: "4.10.0",
                            macos: "0.14.0"
                        },
                        image: {
                            js: "1.6.0",
                            android: "8.6.0",
                            ios: "5.7.0",
                            macos: "0.15.0"
                        }
                    }
                },
                image: {
                    doc: "Returns a [`ResolvedImage`](/mapbox-gl-js/style-spec/types/#resolvedimage) for use in [`icon-image`](/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image), `*-pattern` entries, and as a section in the [`'format'`](#types-format) expression. A [`'coalesce'`](#coalesce) expression containing `image` expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the `'image'` argument.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "1.4.0",
                            android: "8.6.0",
                            ios: "5.7.0",
                            macos: "0.15.0"
                        }
                    }
                },
                "number-format": {
                    doc: "Converts the input number into a string representation using the providing formatting rules. If set, the `locale` argument specifies the locale to use, as a BCP 47 language tag. If set, the `currency` argument specifies an ISO 4217 code to use for currency-style formatting. If set, the `unit` argument specifies a [simple ECMAScript unit](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier) to use for unit-style formatting. If set, the `min-fraction-digits` and `max-fraction-digits` arguments specify the minimum and maximum number of fractional digits to include.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.54.0",
                            android: "8.4.0",
                            ios: "5.4.0",
                            macos: "0.15.0"
                        }
                    }
                },
                "to-string": {
                    doc: 'Converts the input value to a string. If the input is `null`, the result is `""`. If the input is a [`boolean`](#types-boolean), the result is `"true"` or `"false"`. If the input is a number, it is converted to a string as specified by the ["NumberToString" algorithm](https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type) of the ECMAScript Language Specification. If the input is a [`color`](#color), it is converted to a string of the form `"rgba(r,g,b,a)"`, where `r`, `g`, and `b` are numerals ranging from 0 to 255, and `a` ranges from 0 to 1. If the input is an [`\'image\'`](#types-image) expression, `\'to-string\'` returns the image name. Otherwise, the input is converted to a string in the format specified by the [`JSON.stringify`](https://tc39.github.io/ecma262/#sec-json.stringify) function of the ECMAScript Language Specification.',
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "to-number": {
                    doc: 'Converts the input value to a number, if possible. If the input is `null` or `false`, the result is 0. If the input is `true`, the result is 1. If the input is a string, it is converted to a number as specified by the ["ToNumber Applied to the String Type" algorithm](https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type) of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.',
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "to-boolean": {
                    doc: "Converts the input value to a boolean. The result is `false` when then input is an empty string, 0, `false`, `null`, or `NaN`; otherwise it is `true`.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "to-rgba": {
                    doc: "Returns a four-element array containing the input color's red, green, blue, and alpha components, in that order.",
                    group: "Color",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "to-color": {
                    doc: "Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",
                    group: "Types",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                rgb: {
                    doc: "Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.",
                    group: "Color",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                rgba: {
                    doc: "Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.",
                    group: "Color",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                get: {
                    doc: "Retrieves a property value from the current feature's properties, or from another object if a second argument is provided. Returns `null` if the requested property is missing.",
                    group: "Lookup",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                has: {
                    doc: "Tests for the presence of an property value in the current feature's properties, or from another object if a second argument is provided.",
                    group: "Lookup",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                length: {
                    doc: "Returns the length of an array or string.",
                    group: "Lookup",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                properties: {
                    doc: 'Returns the feature properties object.  Note that in some cases, it may be more efficient to use `["get", "property_name"]` directly.',
                    group: "Feature data",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "feature-state": {
                    doc: "Retrieves a property value from the current feature's state. Returns `null` if the requested property is not present on the feature's state. A feature's state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their `id` attribute, which must be an integer or a string that can be cast to an integer. Note that [\"feature-state\"] can only be used with paint properties that support data-driven styling.",
                    group: "Feature data",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.46.0",
                            android: "10.0.0",
                            ios: "10.0.0"
                        }
                    }
                },
                "geometry-type": {
                    doc: "Returns the feature's geometry type: `Point`, `LineString` or `Polygon`. `Multi*` feature types return the singular forms.",
                    group: "Feature data",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                id: {
                    doc: "Returns the feature's id, if it has one.",
                    group: "Feature data",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                zoom: {
                    doc: 'Returns the current zoom level.  Note that in style layout and paint properties, ["zoom"] may only appear as the input to a top-level "step" or "interpolate" expression.',
                    group: "Camera",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                pitch: {
                    doc: 'Returns the current pitch in degrees. `["pitch"]` may only be used in the `filter` expression for a `symbol` layer.',
                    group: "Camera",
                    "sdk-support": {
                        "basic functionality": {
                            js: "2.6.0",
                            android: "10.9.0",
                            ios: "10.9.0"
                        }
                    }
                },
                "distance-from-center": {
                    doc: 'Returns the distance of a `symbol` instance from the center of the map. The distance is measured in pixels divided by the height of the map container. It measures 0 at the center, decreases towards the camera and increase away from the camera. For example, if the height of the map is 1000px, a value of -1 means 1000px away from the center towards the camera, and a value of 1 means a distance of 1000px away from the camera from the center. `["distance-from-center"]` may only be used in the `filter` expression for a `symbol` layer.',
                    group: "Camera",
                    "sdk-support": {
                        "basic functionality": {
                            js: "2.6.0",
                            android: "10.9.0",
                            ios: "10.9.0"
                        }
                    }
                },
                "heatmap-density": {
                    doc: "Returns the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the `heatmap-color` property.",
                    group: "Heatmap",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "line-progress": {
                    doc: "Returns the progress along a gradient line. Can only be used in the `line-gradient` property.",
                    group: "Feature data",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.6.0",
                            macos: "0.12.0"
                        }
                    }
                },
                "sky-radial-progress": {
                    doc: "Returns the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches `sky-gradient-radius`. Can only be used in the `sky-gradient` property.",
                    group: "sky",
                    "sdk-support": {
                        "basic functionality": {
                            js: "2.0.0",
                            ios: "10.0.0",
                            android: "10.0.0"
                        }
                    }
                },
                accumulated: {
                    doc: "Returns the value of a cluster property accumulated so far. Can only be used in the `clusterProperties` option of a clustered GeoJSON source.",
                    group: "Feature data",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.53.0",
                            android: "8.4.0",
                            ios: "5.5.0",
                            macos: "0.15.0"
                        }
                    }
                },
                "+": {
                    doc: "Returns the sum of the inputs.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "*": {
                    doc: "Returns the product of the inputs.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "-": {
                    doc: "For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "/": {
                    doc: "Returns the result of floating point division of the first input by the second.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "%": {
                    doc: "Returns the remainder after integer division of the first input by the second.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "^": {
                    doc: "Returns the result of raising the first input to the power specified by the second.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                sqrt: {
                    doc: "Returns the square root of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.42.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                log10: {
                    doc: "Returns the base-ten logarithm of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                ln: {
                    doc: "Returns the natural logarithm of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                log2: {
                    doc: "Returns the base-two logarithm of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                sin: {
                    doc: "Returns the sine of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                cos: {
                    doc: "Returns the cosine of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                tan: {
                    doc: "Returns the tangent of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                asin: {
                    doc: "Returns the arcsine of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                acos: {
                    doc: "Returns the arccosine of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                atan: {
                    doc: "Returns the arctangent of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                min: {
                    doc: "Returns the minimum value of the inputs.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                max: {
                    doc: "Returns the maximum value of the inputs.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                round: {
                    doc: 'Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, `["round", -1.5]` evaluates to -2.',
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.45.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                abs: {
                    doc: "Returns the absolute value of the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.45.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                ceil: {
                    doc: "Returns the smallest integer that is greater than or equal to the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.45.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                floor: {
                    doc: "Returns the largest integer that is less than or equal to the input.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.45.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                distance: {
                    doc: "Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.",
                    group: "Math",
                    "sdk-support": {
                        "basic functionality": {
                            android: "9.2.0",
                            ios: "5.9.0",
                            macos: "0.16.0"
                        }
                    }
                },
                "==": {
                    doc: "Returns `true` if the input values are equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        },
                        collator: {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.2.0",
                            macos: "0.9.0"
                        }
                    }
                },
                "!=": {
                    doc: "Returns `true` if the input values are not equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        },
                        collator: {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.2.0",
                            macos: "0.9.0"
                        }
                    }
                },
                ">": {
                    doc: "Returns `true` if the first input is strictly greater than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        },
                        collator: {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.2.0",
                            macos: "0.9.0"
                        }
                    }
                },
                "<": {
                    doc: "Returns `true` if the first input is strictly less than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        },
                        collator: {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.2.0",
                            macos: "0.9.0"
                        }
                    }
                },
                ">=": {
                    doc: "Returns `true` if the first input is greater than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        },
                        collator: {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.2.0",
                            macos: "0.9.0"
                        }
                    }
                },
                "<=": {
                    doc: "Returns `true` if the first input is less than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        },
                        collator: {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.2.0",
                            macos: "0.9.0"
                        }
                    }
                },
                all: {
                    doc: "Returns `true` if all the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                any: {
                    doc: "Returns `true` if any of the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "!": {
                    doc: "Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                within: {
                    doc: "Returns `true` if the evaluated feature is fully contained inside a boundary of the input geometry, `false` otherwise. The input value can be a valid GeoJSON of type `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Supported features for evaluation:\n- `Point`: Returns `false` if a point is on the boundary or falls outside the boundary.\n- `LineString`: Returns `false` if any part of a line falls outside the boundary, the line intersects the boundary, or a line's endpoint is on the boundary.",
                    group: "Decision",
                    "sdk-support": {
                        "basic functionality": {
                            js: "1.9.0",
                            android: "9.1.0",
                            ios: "5.8.0",
                            macos: "0.15.0"
                        }
                    }
                },
                "is-supported-script": {
                    doc: "Returns `true` if the input string is expected to render legibly. Returns `false` if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the `mapbox-gl-rtl-text` plugin is not in use in Mapbox GL JS).",
                    group: "String",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.45.0",
                            android: "6.6.0",
                            ios: "4.1.0",
                            macos: "0.8.0"
                        }
                    }
                },
                upcase: {
                    doc: "Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",
                    group: "String",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                downcase: {
                    doc: "Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",
                    group: "String",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                concat: {
                    doc: "Returns a `string` consisting of the concatenation of the inputs. Each input is converted to a string as if by `to-string`.",
                    group: "String",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.41.0",
                            android: "6.0.0",
                            ios: "4.0.0",
                            macos: "0.7.0"
                        }
                    }
                },
                "resolved-locale": {
                    doc: "Returns the IETF language tag of the locale being used by the provided `collator`. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.",
                    group: "String",
                    "sdk-support": {
                        "basic functionality": {
                            js: "0.45.0",
                            android: "6.5.0",
                            ios: "4.2.0",
                            macos: "0.9.0"
                        }
                    }
                }
            }
        },
        fog: {
            range: {
                type: "array",
                default: [ .5, 10 ],
                minimum: -20,
                maximum: 20,
                length: 2,
                value: "number",
                "property-type": "data-constant",
                transition: !0,
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                doc: "The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.",
                example: [ .5, 10 ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.3.0",
                        android: "10.6.0",
                        ios: "10.6.0"
                    }
                }
            },
            color: {
                type: "color",
                "property-type": "data-constant",
                default: "#ffffff",
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "The color of the atmosphere region immediately below the horizon and within the `range` and above the horizon and within `horizon-blend`. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.3.0",
                        android: "10.6.0",
                        ios: "10.6.0"
                    }
                }
            },
            "high-color": {
                type: "color",
                "property-type": "data-constant",
                default: "#245cdf",
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "The color of the atmosphere region above the horizon, `high-color` extends further above the horizon than the `color` property and its spread can be controlled with `horizon-blend`. The opacity can be set to `0` to remove the high atmosphere color contribution.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.9.0",
                        android: "10.6.0",
                        ios: "10.6.0"
                    }
                }
            },
            "space-color": {
                type: "color",
                "property-type": "data-constant",
                default: [ "interpolate", [ "linear" ], [ "zoom" ], 4, "#010b19", 7, "#367ab9" ],
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "The color of the region above the horizon and after the end of the `horizon-blend` contribution. The opacity can be set to `0` to have a transparent background.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.9.0",
                        android: "10.6.0",
                        ios: "10.6.0"
                    }
                }
            },
            "horizon-blend": {
                type: "number",
                "property-type": "data-constant",
                default: [ "interpolate", [ "linear" ], [ "zoom" ], 4, .2, 7, .1 ],
                minimum: 0,
                maximum: 1,
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "Horizon blend applies a smooth fade from the color of the atmosphere to the color of space. A value of zero leaves a sharp transition from atmosphere to space. Increasing the value blends the color of atmosphere into increasingly high angles of the sky.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.3.0",
                        android: "10.6.0",
                        ios: "10.6.0"
                    }
                }
            },
            "star-intensity": {
                type: "number",
                "property-type": "data-constant",
                default: [ "interpolate", [ "linear" ], [ "zoom" ], 5, .35, 6, 0 ],
                minimum: 0,
                maximum: 1,
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "A value controlling the star intensity where `0` will show no stars and `1` will show stars at their maximum intensity.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.9.0",
                        android: "10.6.0",
                        ios: "10.6.0"
                    }
                }
            }
        },
        light: {
            anchor: {
                type: "enum",
                default: "viewport",
                values: {
                    map: {
                        doc: "The position of the light source is aligned to the rotation of the map."
                    },
                    viewport: {
                        doc: "The position of the light source is aligned to the rotation of the viewport."
                    }
                },
                "property-type": "data-constant",
                transition: !1,
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                doc: "Whether extruded geometries are lit relative to the map or viewport.",
                example: "map",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                }
            },
            position: {
                type: "array",
                default: [ 1.15, 210, 30 ],
                length: 3,
                value: "number",
                "property-type": "data-constant",
                transition: !0,
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                doc: "Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0° (0° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0°, directly above, to 180°, directly below).",
                example: [ 1.5, 90, 80 ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                }
            },
            color: {
                type: "color",
                "property-type": "data-constant",
                default: "#ffffff",
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "Color tint for lighting extruded geometries.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                }
            },
            intensity: {
                type: "number",
                "property-type": "data-constant",
                default: .5,
                minimum: 0,
                maximum: 1,
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                }
            }
        },
        projection: {
            name: {
                type: "enum",
                values: {
                    albers: {
                        doc: "An Albers equal-area projection centered on the continental United States. You can configure the projection for a different region by setting `center` and `parallels` properties. You may want to set max bounds to constrain the map to the relevant region."
                    },
                    equalEarth: {
                        doc: "An Equal Earth projection."
                    },
                    equirectangular: {
                        doc: "An Equirectangular projection. This projection is very similar to the Plate Carrée projection."
                    },
                    lambertConformalConic: {
                        doc: "A Lambert conformal conic projection. You can configure the projection for a region by setting `center` and `parallels` properties. You may want to set max bounds to constrain the map to the relevant region."
                    },
                    mercator: {
                        doc: "The Mercator projection is the default projection."
                    },
                    naturalEarth: {
                        doc: "A Natural Earth projection."
                    },
                    winkelTripel: {
                        doc: "A Winkel Tripel projection."
                    },
                    globe: {
                        doc: "A globe projection."
                    }
                },
                default: "mercator",
                doc: "The name of the projection to be used for rendering the map.",
                required: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "2.6.0"
                    }
                }
            },
            center: {
                type: "array",
                length: 2,
                value: "number",
                "property-type": "data-constant",
                minimum: [ -180, -90 ],
                maximum: [ 180, 90 ],
                transition: !1,
                doc: "The reference longitude and latitude of the projection. `center` takes the form of [lng, lat]. This property is only configurable for conic projections (Albers and Lambert Conformal Conic). All other projections are centered on [0, 0].",
                example: [ -96, 37.5 ],
                requires: [ {
                    name: [ "albers", "lambertConformalConic" ]
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.6.0"
                    }
                }
            },
            parallels: {
                type: "array",
                length: 2,
                value: "number",
                "property-type": "data-constant",
                minimum: [ -90, -90 ],
                maximum: [ 90, 90 ],
                transition: !1,
                doc: "The standard parallels of the projection, denoting the desired latitude range with minimal distortion. `parallels` takes the form of [lat0, lat1]. This property is only configurable for conic projections (Albers and Lambert Conformal Conic).",
                example: [ 29.5, 45.5 ],
                requires: [ {
                    name: [ "albers", "lambertConformalConic" ]
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.6.0"
                    }
                }
            }
        },
        terrain: {
            source: {
                type: "string",
                doc: "Name of a source of `raster_dem` type to be used for terrain elevation.",
                required: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                }
            },
            exaggeration: {
                type: "number",
                "property-type": "data-constant",
                default: 1,
                minimum: 0,
                maximum: 1e3,
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.",
                requires: [ "source" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                }
            }
        },
        paint: [ "paint_fill", "paint_line", "paint_circle", "paint_heatmap", "paint_fill-extrusion", "paint_symbol", "paint_raster", "paint_hillshade", "paint_background", "paint_sky" ],
        paint_fill: {
            "fill-antialias": {
                type: "boolean",
                default: !0,
                doc: "Whether or not the fill should be antialiased.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "fill-opacity": {
                type: "number",
                default: 1,
                minimum: 0,
                maximum: 1,
                doc: "The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.21.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "fill-color": {
                type: "color",
                default: "#000000",
                doc: "The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.",
                transition: !0,
                requires: [ {
                    "!": "fill-pattern"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.19.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "fill-outline-color": {
                type: "color",
                doc: "The outline color of the fill. Matches the value of `fill-color` if unspecified.",
                transition: !0,
                requires: [ {
                    "!": "fill-pattern"
                }, {
                    "fill-antialias": !0
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.19.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "fill-translate": {
                type: "array",
                value: "number",
                length: 2,
                default: [ 0, 0 ],
                transition: !0,
                units: "pixels",
                doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "fill-translate-anchor": {
                type: "enum",
                values: {
                    map: {
                        doc: "The fill is translated relative to the map."
                    },
                    viewport: {
                        doc: "The fill is translated relative to the viewport."
                    }
                },
                doc: "Controls the frame of reference for `fill-translate`.",
                default: "map",
                requires: [ "fill-translate" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "fill-pattern": {
                type: "resolvedImage",
                transition: !1,
                doc: "Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.49.0",
                        android: "6.5.0",
                        macos: "0.11.0",
                        ios: "4.4.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            }
        },
        "paint_fill-extrusion": {
            "fill-extrusion-opacity": {
                type: "number",
                default: 1,
                minimum: 0,
                maximum: 1,
                doc: "The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "fill-extrusion-color": {
                type: "color",
                default: "#000000",
                doc: "The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",
                transition: !0,
                requires: [ {
                    "!": "fill-extrusion-pattern"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    },
                    "data-driven styling": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "fill-extrusion-translate": {
                type: "array",
                value: "number",
                length: 2,
                default: [ 0, 0 ],
                transition: !0,
                units: "pixels",
                doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "fill-extrusion-translate-anchor": {
                type: "enum",
                values: {
                    map: {
                        doc: "The fill extrusion is translated relative to the map."
                    },
                    viewport: {
                        doc: "The fill extrusion is translated relative to the viewport."
                    }
                },
                doc: "Controls the frame of reference for `fill-extrusion-translate`.",
                default: "map",
                requires: [ "fill-extrusion-translate" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "fill-extrusion-pattern": {
                type: "resolvedImage",
                transition: !1,
                doc: "Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    },
                    "data-driven styling": {
                        js: "0.49.0",
                        android: "6.5.0",
                        macos: "0.11.0",
                        ios: "4.4.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "fill-extrusion-height": {
                type: "number",
                default: 0,
                minimum: 0,
                units: "meters",
                doc: "The height with which to extrude this layer.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    },
                    "data-driven styling": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "fill-extrusion-base": {
                type: "number",
                default: 0,
                minimum: 0,
                units: "meters",
                doc: "The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",
                transition: !0,
                requires: [ "fill-extrusion-height" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    },
                    "data-driven styling": {
                        js: "0.27.0",
                        android: "5.1.0",
                        ios: "3.6.0",
                        macos: "0.5.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "fill-extrusion-vertical-gradient": {
                type: "boolean",
                default: !0,
                doc: "Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.",
                transition: !1,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.50.0",
                        android: "7.0.0",
                        ios: "4.7.0",
                        macos: "0.13.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "fill-extrusion-ambient-occlusion-intensity": {
                "property-type": "data-constant",
                type: "number",
                private: !0,
                default: 0,
                minimum: 0,
                maximum: 1,
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "Controls the intensity of shading near ground and concave angles between walls. Default value 0.0 disables ambient occlusion and values around 0.3 provide the most plausible results for buildings.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.10.0",
                        android: "10.7.0",
                        ios: "10.7.0"
                    }
                }
            },
            "fill-extrusion-ambient-occlusion-radius": {
                "property-type": "data-constant",
                type: "number",
                private: !0,
                default: 3,
                minimum: 0,
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                transition: !0,
                doc: "Shades area near ground and concave angles between walls where the radius defines only vertical impact. Default value 3.0 corresponds to height of one floor and brings the most plausible results for buildings.",
                requires: [ "fill-extrusion-edge-radius" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.10.0",
                        android: "10.7.0",
                        ios: "10.7.0"
                    }
                }
            }
        },
        paint_line: {
            "line-opacity": {
                type: "number",
                doc: "The opacity at which the line will be drawn.",
                default: 1,
                minimum: 0,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "line-color": {
                type: "color",
                doc: "The color with which the line will be drawn.",
                default: "#000000",
                transition: !0,
                requires: [ {
                    "!": "line-pattern"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.23.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "line-translate": {
                type: "array",
                value: "number",
                length: 2,
                default: [ 0, 0 ],
                transition: !0,
                units: "pixels",
                doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "line-translate-anchor": {
                type: "enum",
                values: {
                    map: {
                        doc: "The line is translated relative to the map."
                    },
                    viewport: {
                        doc: "The line is translated relative to the viewport."
                    }
                },
                doc: "Controls the frame of reference for `line-translate`.",
                default: "map",
                requires: [ "line-translate" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "line-width": {
                type: "number",
                default: 1,
                minimum: 0,
                transition: !0,
                units: "pixels",
                doc: "Stroke thickness.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.39.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "line-gap-width": {
                type: "number",
                default: 0,
                minimum: 0,
                doc: "Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.",
                transition: !0,
                units: "pixels",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "line-offset": {
                type: "number",
                default: 0,
                doc: "The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",
                transition: !0,
                units: "pixels",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.12.1",
                        android: "3.0.0",
                        ios: "3.1.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "line-blur": {
                type: "number",
                default: 0,
                minimum: 0,
                transition: !0,
                units: "pixels",
                doc: "Blur applied to the line, in pixels.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "line-dasharray": {
                type: "array",
                value: "number",
                doc: "Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
                minimum: 0,
                transition: !1,
                units: "line widths",
                requires: [ {
                    "!": "line-pattern"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "2.3.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "line-pattern": {
                type: "resolvedImage",
                transition: !1,
                doc: "Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.49.0",
                        android: "6.5.0",
                        macos: "0.11.0",
                        ios: "4.4.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom", "feature" ]
                },
                "property-type": "data-driven"
            },
            "line-gradient": {
                type: "color",
                doc: 'Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `"lineMetrics": true`.',
                transition: !1,
                requires: [ {
                    "!": "line-pattern"
                }, {
                    source: "geojson",
                    has: {
                        lineMetrics: !0
                    }
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.45.0",
                        android: "6.5.0",
                        ios: "4.4.0",
                        macos: "0.11.0"
                    },
                    "data-driven styling": {}
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "line-progress" ]
                },
                "property-type": "color-ramp"
            },
            "line-trim-offset": {
                type: "array",
                value: "number",
                doc: "The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].",
                length: 2,
                default: [ 0, 0 ],
                minimum: [ 0, 0 ],
                maximum: [ 1, 1 ],
                transition: !1,
                requires: [ {
                    source: "geojson",
                    has: {
                        lineMetrics: !0
                    }
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.9.0",
                        android: "10.5.0",
                        ios: "10.5.0",
                        macos: "10.5.0"
                    }
                },
                "property-type": "constant"
            }
        },
        paint_circle: {
            "circle-radius": {
                type: "number",
                default: 5,
                minimum: 0,
                transition: !0,
                units: "pixels",
                doc: "Circle radius.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.18.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "circle-color": {
                type: "color",
                default: "#000000",
                doc: "The fill color of the circle.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.18.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "circle-blur": {
                type: "number",
                default: 0,
                doc: "Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.20.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "circle-opacity": {
                type: "number",
                doc: "The opacity at which the circle will be drawn.",
                default: 1,
                minimum: 0,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.20.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "circle-translate": {
                type: "array",
                value: "number",
                length: 2,
                default: [ 0, 0 ],
                transition: !0,
                units: "pixels",
                doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "circle-translate-anchor": {
                type: "enum",
                values: {
                    map: {
                        doc: "The circle is translated relative to the map."
                    },
                    viewport: {
                        doc: "The circle is translated relative to the viewport."
                    }
                },
                doc: "Controls the frame of reference for `circle-translate`.",
                default: "map",
                requires: [ "circle-translate" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "circle-pitch-scale": {
                type: "enum",
                values: {
                    map: {
                        doc: "Circles are scaled according to their apparent distance to the camera."
                    },
                    viewport: {
                        doc: "Circles are not scaled."
                    }
                },
                default: "map",
                doc: "Controls the scaling behavior of the circle when the map is pitched.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.21.0",
                        android: "4.2.0",
                        ios: "3.4.0",
                        macos: "0.2.1"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "circle-pitch-alignment": {
                type: "enum",
                values: {
                    map: {
                        doc: "The circle is aligned to the plane of the map."
                    },
                    viewport: {
                        doc: "The circle is aligned to the plane of the viewport."
                    }
                },
                default: "viewport",
                doc: "Orientation of circle when map is pitched.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.39.0",
                        android: "5.2.0",
                        ios: "3.7.0",
                        macos: "0.6.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "circle-stroke-width": {
                type: "number",
                default: 0,
                minimum: 0,
                transition: !0,
                units: "pixels",
                doc: "The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    },
                    "data-driven styling": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "circle-stroke-color": {
                type: "color",
                default: "#000000",
                doc: "The stroke color of the circle.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    },
                    "data-driven styling": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "circle-stroke-opacity": {
                type: "number",
                doc: "The opacity of the circle's stroke.",
                default: 1,
                minimum: 0,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    },
                    "data-driven styling": {
                        js: "0.29.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            }
        },
        paint_heatmap: {
            "heatmap-radius": {
                type: "number",
                default: 30,
                minimum: 1,
                transition: !0,
                units: "pixels",
                doc: "Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. `queryRenderedFeatures` on heatmap layers will return points within this radius.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.41.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    },
                    "data-driven styling": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "heatmap-weight": {
                type: "number",
                default: 1,
                minimum: 0,
                transition: !1,
                doc: "A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.41.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    },
                    "data-driven styling": {
                        js: "0.41.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "heatmap-intensity": {
                type: "number",
                default: 1,
                minimum: 0,
                transition: !0,
                doc: "Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.41.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "heatmap-color": {
                type: "color",
                default: [ "interpolate", [ "linear" ], [ "heatmap-density" ], 0, "rgba(0, 0, 255, 0)", .1, "royalblue", .3, "cyan", .5, "lime", .7, "yellow", 1, "red" ],
                doc: 'Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `["heatmap-density"]` as input.',
                transition: !1,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.41.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    },
                    "data-driven styling": {}
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "heatmap-density" ]
                },
                "property-type": "color-ramp"
            },
            "heatmap-opacity": {
                type: "number",
                doc: "The global opacity at which the heatmap layer will be drawn.",
                default: 1,
                minimum: 0,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.41.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            }
        },
        paint_symbol: {
            "icon-opacity": {
                doc: "The opacity at which the icon will be drawn.",
                type: "number",
                default: 1,
                minimum: 0,
                maximum: 1,
                transition: !0,
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "icon-color": {
                type: "color",
                default: "#000000",
                transition: !0,
                doc: "The color of the icon. This can only be used with [SDF icons](/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "icon-halo-color": {
                type: "color",
                default: "rgba(0, 0, 0, 0)",
                transition: !0,
                doc: "The color of the icon's halo. Icon halos can only be used with [SDF icons](/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "icon-halo-width": {
                type: "number",
                default: 0,
                minimum: 0,
                transition: !0,
                units: "pixels",
                doc: "Distance of halo to the icon outline.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "icon-halo-blur": {
                type: "number",
                default: 0,
                minimum: 0,
                transition: !0,
                units: "pixels",
                doc: "Fade out the halo towards the outside.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "icon-translate": {
                type: "array",
                value: "number",
                length: 2,
                default: [ 0, 0 ],
                transition: !0,
                units: "pixels",
                doc: "Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
                requires: [ "icon-image" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "icon-translate-anchor": {
                type: "enum",
                values: {
                    map: {
                        doc: "Icons are translated relative to the map."
                    },
                    viewport: {
                        doc: "Icons are translated relative to the viewport."
                    }
                },
                doc: "Controls the frame of reference for `icon-translate`.",
                default: "map",
                requires: [ "icon-image", "icon-translate" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-opacity": {
                type: "number",
                doc: "The opacity at which the text will be drawn.",
                default: 1,
                minimum: 0,
                maximum: 1,
                transition: !0,
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "text-color": {
                type: "color",
                doc: "The color with which the text will be drawn.",
                default: "#000000",
                transition: !0,
                overridable: !0,
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "text-halo-color": {
                type: "color",
                default: "rgba(0, 0, 0, 0)",
                transition: !0,
                doc: "The color of the text's halo, which helps it stand out from backgrounds.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "text-halo-width": {
                type: "number",
                default: 0,
                minimum: 0,
                transition: !0,
                units: "pixels",
                doc: "Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "text-halo-blur": {
                type: "number",
                default: 0,
                minimum: 0,
                transition: !0,
                units: "pixels",
                doc: "The halo's fadeout distance towards the outside.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    },
                    "data-driven styling": {
                        js: "0.33.0",
                        android: "5.0.0",
                        ios: "3.5.0",
                        macos: "0.4.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom", "feature", "feature-state" ]
                },
                "property-type": "data-driven"
            },
            "text-translate": {
                type: "array",
                value: "number",
                length: 2,
                default: [ 0, 0 ],
                transition: !0,
                units: "pixels",
                doc: "Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
                requires: [ "text-field" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "text-translate-anchor": {
                type: "enum",
                values: {
                    map: {
                        doc: "The text is translated relative to the map."
                    },
                    viewport: {
                        doc: "The text is translated relative to the viewport."
                    }
                },
                doc: "Controls the frame of reference for `text-translate`.",
                default: "map",
                requires: [ "text-field", "text-translate" ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            }
        },
        paint_raster: {
            "raster-opacity": {
                type: "number",
                doc: "The opacity at which the image will be drawn.",
                default: 1,
                minimum: 0,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "raster-hue-rotate": {
                type: "number",
                default: 0,
                period: 360,
                transition: !0,
                units: "degrees",
                doc: "Rotates hues around the color wheel.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "raster-brightness-min": {
                type: "number",
                doc: "Increase or reduce the brightness of the image. The value is the minimum brightness.",
                default: 0,
                minimum: 0,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "raster-brightness-max": {
                type: "number",
                doc: "Increase or reduce the brightness of the image. The value is the maximum brightness.",
                default: 1,
                minimum: 0,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "raster-saturation": {
                type: "number",
                doc: "Increase or reduce the saturation of the image.",
                default: 0,
                minimum: -1,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "raster-contrast": {
                type: "number",
                doc: "Increase or reduce the contrast of the image.",
                default: 0,
                minimum: -1,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "raster-resampling": {
                type: "enum",
                doc: "The resampling/interpolation method to use for overscaling, also known as texture magnification filter",
                values: {
                    linear: {
                        doc: "(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"
                    },
                    nearest: {
                        doc: "Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"
                    }
                },
                default: "linear",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.47.0",
                        android: "6.3.0",
                        ios: "4.2.0",
                        macos: "0.9.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "raster-fade-duration": {
                type: "number",
                default: 300,
                minimum: 0,
                transition: !1,
                units: "milliseconds",
                doc: "Fade duration when a new tile is added.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            }
        },
        paint_hillshade: {
            "hillshade-illumination-direction": {
                type: "number",
                default: 335,
                minimum: 0,
                maximum: 359,
                doc: "The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.",
                transition: !1,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "hillshade-illumination-anchor": {
                type: "enum",
                values: {
                    map: {
                        doc: "The hillshade illumination is relative to the north direction."
                    },
                    viewport: {
                        doc: "The hillshade illumination is relative to the top of the viewport."
                    }
                },
                default: "viewport",
                doc: "Direction of light source when map is rotated.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "hillshade-exaggeration": {
                type: "number",
                doc: "Intensity of the hillshade",
                default: .5,
                minimum: 0,
                maximum: 1,
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "hillshade-shadow-color": {
                type: "color",
                default: "#000000",
                doc: "The shading color of areas that face away from the light source.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "hillshade-highlight-color": {
                type: "color",
                default: "#FFFFFF",
                doc: "The shading color of areas that faces towards the light source.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "hillshade-accent-color": {
                type: "color",
                default: "#000000",
                doc: "The shading color used to accentuate rugged terrain like sharp cliffs and gorges.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.43.0",
                        android: "6.0.0",
                        ios: "4.0.0",
                        macos: "0.7.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            }
        },
        paint_background: {
            "background-color": {
                type: "color",
                default: "#000000",
                doc: "The color with which the background will be drawn.",
                transition: !0,
                requires: [ {
                    "!": "background-pattern"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "background-pattern": {
                type: "resolvedImage",
                transition: !1,
                doc: "Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "background-opacity": {
                type: "number",
                default: 1,
                minimum: 0,
                maximum: 1,
                doc: "The opacity at which the background will be drawn.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "0.10.0",
                        android: "2.0.1",
                        ios: "2.0.0",
                        macos: "0.1.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            }
        },
        paint_sky: {
            "sky-type": {
                type: "enum",
                values: {
                    gradient: {
                        doc: "Renders the sky with a gradient that can be configured with `sky-gradient-radius` and `sky-gradient`."
                    },
                    atmosphere: {
                        doc: "Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through `sky-atmosphere-sun`."
                    }
                },
                default: "atmosphere",
                doc: "The type of the sky",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "sky-atmosphere-sun": {
                type: "array",
                value: "number",
                length: 2,
                units: "degrees",
                minimum: [ 0, 0 ],
                maximum: [ 360, 180 ],
                transition: !1,
                doc: "Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0° north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0° is directly above, at zenith, and 90° at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                requires: [ {
                    "sky-type": "atmosphere"
                } ],
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "sky-atmosphere-sun-intensity": {
                type: "number",
                requires: [ {
                    "sky-type": "atmosphere"
                } ],
                default: 10,
                minimum: 0,
                maximum: 100,
                transition: !1,
                doc: "Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                "property-type": "data-constant"
            },
            "sky-gradient-center": {
                type: "array",
                requires: [ {
                    "sky-type": "gradient"
                } ],
                value: "number",
                default: [ 0, 0 ],
                length: 2,
                units: "degrees",
                minimum: [ 0, 0 ],
                maximum: [ 360, 180 ],
                transition: !1,
                doc: "Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0° north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0° is directly above, at zenith, and 90° at the horizon.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "sky-gradient-radius": {
                type: "number",
                requires: [ {
                    "sky-type": "gradient"
                } ],
                default: 90,
                minimum: 0,
                maximum: 180,
                transition: !1,
                doc: "The angular distance (measured in degrees) from `sky-gradient-center` up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from `sky-gradient-center`.",
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                expression: {
                    interpolated: !1,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            },
            "sky-gradient": {
                type: "color",
                default: [ "interpolate", [ "linear" ], [ "sky-radial-progress" ], .8, "#87ceeb", 1, "white" ],
                doc: "Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using `sky-radial-progress`. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, `sky-gradient-radius`] centered at the position specified by `sky-gradient-center`.",
                transition: !1,
                requires: [ {
                    "sky-type": "gradient"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    },
                    "data-driven styling": {}
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "sky-radial-progress" ]
                },
                "property-type": "color-ramp"
            },
            "sky-atmosphere-halo-color": {
                type: "color",
                default: "white",
                doc: "A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.",
                transition: !1,
                requires: [ {
                    "sky-type": "atmosphere"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                "property-type": "data-constant"
            },
            "sky-atmosphere-color": {
                type: "color",
                default: "white",
                doc: "A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.",
                transition: !1,
                requires: [ {
                    "sky-type": "atmosphere"
                } ],
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                "property-type": "data-constant"
            },
            "sky-opacity": {
                type: "number",
                default: 1,
                minimum: 0,
                maximum: 1,
                doc: "The opacity of the entire sky layer.",
                transition: !0,
                "sdk-support": {
                    "basic functionality": {
                        js: "2.0.0",
                        ios: "10.0.0",
                        android: "10.0.0"
                    }
                },
                expression: {
                    interpolated: !0,
                    parameters: [ "zoom" ]
                },
                "property-type": "data-constant"
            }
        },
        transition: {
            duration: {
                type: "number",
                default: 300,
                minimum: 0,
                units: "milliseconds",
                doc: "Time allotted for transitions to complete."
            },
            delay: {
                type: "number",
                default: 0,
                minimum: 0,
                units: "milliseconds",
                doc: "Length of time before a transition begins."
            }
        },
        "property-type": {
            "data-driven": {
                type: "property-type",
                doc: "Property is interpolable and can be represented using a property expression."
            },
            "color-ramp": {
                type: "property-type",
                doc: "Property should be specified using a color ramp from which the output color can be sampled based on a property calculation."
            },
            "data-constant": {
                type: "property-type",
                doc: "Property is interpolable but cannot be represented using a property expression."
            },
            constant: {
                type: "property-type",
                doc: "Property is constant across all zoom levels and property values."
            }
        },
        promoteId: {
            "*": {
                type: "string",
                doc: "A name of a feature property to use as ID for feature state."
            }
        }
    }, vn = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {}, xn = {
        exports: {}
    };
    /*! https://mths.be/punycode v1.3.2 by @mathias */    function wn(t, ...e) {
        for (const n of e) for (const e in n) t[e] = n[e];
        return t;
    }
    yn = xn, gn = xn.exports, function(t) {
        var e = gn && !gn.nodeType && gn, n = yn && !yn.nodeType && yn, i = "object" == typeof vn && vn;
        i.global !== i && i.window !== i && i.self !== i || (t = i);
        var r, o, s = 2147483647, a = /^xn--/, l = /[^\x20-\x7E]/, u = /[\x2E\u3002\uFF0E\uFF61]/g, c = {
            overflow: "Overflow: input needs wider integers to process",
            "not-basic": "Illegal input >= 0x80 (not a basic code point)",
            "invalid-input": "Invalid input"
        }, h = Math.floor, d = String.fromCharCode;
        function f(t) {
            throw RangeError(c[t]);
        }
        function p(t, e) {
            for (var n = t.length, i = []; n--; ) i[n] = e(t[n]);
            return i;
        }
        function m(t, e) {
            var n = t.split("@"), i = "";
            return n.length > 1 && (i = n[0] + "@", t = n[1]), i + p((t = t.replace(u, ".")).split("."), e).join(".");
        }
        function y(t) {
            for (var e, n, i = [], r = 0, o = t.length; r < o; ) (e = t.charCodeAt(r++)) >= 55296 && e <= 56319 && r < o ? 56320 == (64512 & (n = t.charCodeAt(r++))) ? i.push(((1023 & e) << 10) + (1023 & n) + 65536) : (i.push(e), 
            r--) : i.push(e);
            return i;
        }
        function g(t) {
            return p(t, (function(t) {
                var e = "";
                return t > 65535 && (e += d((t -= 65536) >>> 10 & 1023 | 55296), t = 56320 | 1023 & t), 
                e + d(t);
            })).join("");
        }
        function b(t, e) {
            return t + 22 + 75 * (t < 26) - ((0 != e) << 5);
        }
        function v(t, e, n) {
            var i = 0;
            for (t = n ? h(t / 700) : t >> 1, t += h(t / e); t > 455; i += 36) t = h(t / 35);
            return h(i + 36 * t / (t + 38));
        }
        function x(t) {
            var e, n, i, r, o, a, l, u, c, d, p, m = [], y = t.length, b = 0, x = 128, w = 72;
            for ((n = t.lastIndexOf("-")) < 0 && (n = 0), i = 0; i < n; ++i) t.charCodeAt(i) >= 128 && f("not-basic"), 
            m.push(t.charCodeAt(i));
            for (r = n > 0 ? n + 1 : 0; r < y; ) {
                for (o = b, a = 1, l = 36; r >= y && f("invalid-input"), ((u = (p = t.charCodeAt(r++)) - 48 < 10 ? p - 22 : p - 65 < 26 ? p - 65 : p - 97 < 26 ? p - 97 : 36) >= 36 || u > h((s - b) / a)) && f("overflow"), 
                b += u * a, !(u < (c = l <= w ? 1 : l >= w + 26 ? 26 : l - w)); l += 36) a > h(s / (d = 36 - c)) && f("overflow"), 
                a *= d;
                w = v(b - o, e = m.length + 1, 0 == o), h(b / e) > s - x && f("overflow"), x += h(b / e), 
                b %= e, m.splice(b++, 0, x);
            }
            return g(m);
        }
        function w(t) {
            var e, n, i, r, o, a, l, u, c, p, m, g, x, w, k, A = [];
            for (g = (t = y(t)).length, e = 128, n = 0, o = 72, a = 0; a < g; ++a) (m = t[a]) < 128 && A.push(d(m));
            for (i = r = A.length, r && A.push("-"); i < g; ) {
                for (l = s, a = 0; a < g; ++a) (m = t[a]) >= e && m < l && (l = m);
                for (l - e > h((s - n) / (x = i + 1)) && f("overflow"), n += (l - e) * x, e = l, 
                a = 0; a < g; ++a) if ((m = t[a]) < e && ++n > s && f("overflow"), m == e) {
                    for (u = n, c = 36; !(u < (p = c <= o ? 1 : c >= o + 26 ? 26 : c - o)); c += 36) A.push(d(b(p + (k = u - p) % (w = 36 - p), 0))), 
                    u = h(k / w);
                    A.push(d(b(u, 0))), o = v(n, x, i == r), n = 0, ++i;
                }
                ++n, ++e;
            }
            return A.join("");
        }
        if (r = {
            version: "1.3.2",
            ucs2: {
                decode: y,
                encode: g
            },
            decode: x,
            encode: w,
            toASCII: function(t) {
                return m(t, (function(t) {
                    return l.test(t) ? "xn--" + w(t) : t;
                }));
            },
            toUnicode: function(t) {
                return m(t, (function(t) {
                    return a.test(t) ? x(t.slice(4).toLowerCase()) : t;
                }));
            }
        }, e && n) if (yn.exports == e) n.exports = r; else for (o in r) r.hasOwnProperty(o) && (e[o] = r[o]); else t.punycode = r;
    }(vn);
    class kn extends Error {
        constructor(t, e) {
            super(e), this.message = e, this.key = t;
        }
    }
    var An = kn;
    class _n {
        constructor(t, e = []) {
            this.parent = t, this.bindings = {};
            for (const [t, n] of e) this.bindings[t] = n;
        }
        concat(t) {
            return new _n(this, t);
        }
        get(t) {
            if (this.bindings[t]) return this.bindings[t];
            if (this.parent) return this.parent.get(t);
            throw new Error(t + " not found in scope.");
        }
        has(t) {
            return !!this.bindings[t] || !!this.parent && this.parent.has(t);
        }
    }
    var Tn = _n;
    const Sn = {
        kind: "null"
    }, Mn = {
        kind: "number"
    }, Pn = {
        kind: "string"
    }, In = {
        kind: "boolean"
    }, jn = {
        kind: "color"
    }, zn = {
        kind: "object"
    }, Fn = {
        kind: "value"
    }, On = {
        kind: "collator"
    }, Cn = {
        kind: "formatted"
    }, En = {
        kind: "resolvedImage"
    };
    function Rn(t, e) {
        return {
            kind: "array",
            itemType: t,
            N: e
        };
    }
    function Nn(t) {
        if ("array" === t.kind) {
            const e = Nn(t.itemType);
            return "number" == typeof t.N ? `array<${e}, ${t.N}>` : "value" === t.itemType.kind ? "array" : `array<${e}>`;
        }
        return t.kind;
    }
    const Dn = [ Sn, Mn, Pn, In, jn, Cn, zn, Rn(Fn), En ];
    function Ln(t, e) {
        if ("error" === e.kind) return null;
        if ("array" === t.kind) {
            if ("array" === e.kind && (0 === e.N && "value" === e.itemType.kind || !Ln(t.itemType, e.itemType)) && ("number" != typeof t.N || t.N === e.N)) return null;
        } else {
            if (t.kind === e.kind) return null;
            if ("value" === t.kind) for (const t of Dn) if (!Ln(t, e)) return null;
        }
        return `Expected ${Nn(t)} but found ${Nn(e)} instead.`;
    }
    function Hn(t, e) {
        return e.some(e => e.kind === t.kind);
    }
    function Un(t, e) {
        return e.some(e => "null" === e ? null === t : "array" === e ? Array.isArray(t) : "object" === e ? t && !Array.isArray(t) && "object" == typeof t : e === typeof t);
    }
    var qn, Vn = {
        transparent: [ 0, 0, 0, 0 ],
        aliceblue: [ 240, 248, 255, 1 ],
        antiquewhite: [ 250, 235, 215, 1 ],
        aqua: [ 0, 255, 255, 1 ],
        aquamarine: [ 127, 255, 212, 1 ],
        azure: [ 240, 255, 255, 1 ],
        beige: [ 245, 245, 220, 1 ],
        bisque: [ 255, 228, 196, 1 ],
        black: [ 0, 0, 0, 1 ],
        blanchedalmond: [ 255, 235, 205, 1 ],
        blue: [ 0, 0, 255, 1 ],
        blueviolet: [ 138, 43, 226, 1 ],
        brown: [ 165, 42, 42, 1 ],
        burlywood: [ 222, 184, 135, 1 ],
        cadetblue: [ 95, 158, 160, 1 ],
        chartreuse: [ 127, 255, 0, 1 ],
        chocolate: [ 210, 105, 30, 1 ],
        coral: [ 255, 127, 80, 1 ],
        cornflowerblue: [ 100, 149, 237, 1 ],
        cornsilk: [ 255, 248, 220, 1 ],
        crimson: [ 220, 20, 60, 1 ],
        cyan: [ 0, 255, 255, 1 ],
        darkblue: [ 0, 0, 139, 1 ],
        darkcyan: [ 0, 139, 139, 1 ],
        darkgoldenrod: [ 184, 134, 11, 1 ],
        darkgray: [ 169, 169, 169, 1 ],
        darkgreen: [ 0, 100, 0, 1 ],
        darkgrey: [ 169, 169, 169, 1 ],
        darkkhaki: [ 189, 183, 107, 1 ],
        darkmagenta: [ 139, 0, 139, 1 ],
        darkolivegreen: [ 85, 107, 47, 1 ],
        darkorange: [ 255, 140, 0, 1 ],
        darkorchid: [ 153, 50, 204, 1 ],
        darkred: [ 139, 0, 0, 1 ],
        darksalmon: [ 233, 150, 122, 1 ],
        darkseagreen: [ 143, 188, 143, 1 ],
        darkslateblue: [ 72, 61, 139, 1 ],
        darkslategray: [ 47, 79, 79, 1 ],
        darkslategrey: [ 47, 79, 79, 1 ],
        darkturquoise: [ 0, 206, 209, 1 ],
        darkviolet: [ 148, 0, 211, 1 ],
        deeppink: [ 255, 20, 147, 1 ],
        deepskyblue: [ 0, 191, 255, 1 ],
        dimgray: [ 105, 105, 105, 1 ],
        dimgrey: [ 105, 105, 105, 1 ],
        dodgerblue: [ 30, 144, 255, 1 ],
        firebrick: [ 178, 34, 34, 1 ],
        floralwhite: [ 255, 250, 240, 1 ],
        forestgreen: [ 34, 139, 34, 1 ],
        fuchsia: [ 255, 0, 255, 1 ],
        gainsboro: [ 220, 220, 220, 1 ],
        ghostwhite: [ 248, 248, 255, 1 ],
        gold: [ 255, 215, 0, 1 ],
        goldenrod: [ 218, 165, 32, 1 ],
        gray: [ 128, 128, 128, 1 ],
        green: [ 0, 128, 0, 1 ],
        greenyellow: [ 173, 255, 47, 1 ],
        grey: [ 128, 128, 128, 1 ],
        honeydew: [ 240, 255, 240, 1 ],
        hotpink: [ 255, 105, 180, 1 ],
        indianred: [ 205, 92, 92, 1 ],
        indigo: [ 75, 0, 130, 1 ],
        ivory: [ 255, 255, 240, 1 ],
        khaki: [ 240, 230, 140, 1 ],
        lavender: [ 230, 230, 250, 1 ],
        lavenderblush: [ 255, 240, 245, 1 ],
        lawngreen: [ 124, 252, 0, 1 ],
        lemonchiffon: [ 255, 250, 205, 1 ],
        lightblue: [ 173, 216, 230, 1 ],
        lightcoral: [ 240, 128, 128, 1 ],
        lightcyan: [ 224, 255, 255, 1 ],
        lightgoldenrodyellow: [ 250, 250, 210, 1 ],
        lightgray: [ 211, 211, 211, 1 ],
        lightgreen: [ 144, 238, 144, 1 ],
        lightgrey: [ 211, 211, 211, 1 ],
        lightpink: [ 255, 182, 193, 1 ],
        lightsalmon: [ 255, 160, 122, 1 ],
        lightseagreen: [ 32, 178, 170, 1 ],
        lightskyblue: [ 135, 206, 250, 1 ],
        lightslategray: [ 119, 136, 153, 1 ],
        lightslategrey: [ 119, 136, 153, 1 ],
        lightsteelblue: [ 176, 196, 222, 1 ],
        lightyellow: [ 255, 255, 224, 1 ],
        lime: [ 0, 255, 0, 1 ],
        limegreen: [ 50, 205, 50, 1 ],
        linen: [ 250, 240, 230, 1 ],
        magenta: [ 255, 0, 255, 1 ],
        maroon: [ 128, 0, 0, 1 ],
        mediumaquamarine: [ 102, 205, 170, 1 ],
        mediumblue: [ 0, 0, 205, 1 ],
        mediumorchid: [ 186, 85, 211, 1 ],
        mediumpurple: [ 147, 112, 219, 1 ],
        mediumseagreen: [ 60, 179, 113, 1 ],
        mediumslateblue: [ 123, 104, 238, 1 ],
        mediumspringgreen: [ 0, 250, 154, 1 ],
        mediumturquoise: [ 72, 209, 204, 1 ],
        mediumvioletred: [ 199, 21, 133, 1 ],
        midnightblue: [ 25, 25, 112, 1 ],
        mintcream: [ 245, 255, 250, 1 ],
        mistyrose: [ 255, 228, 225, 1 ],
        moccasin: [ 255, 228, 181, 1 ],
        navajowhite: [ 255, 222, 173, 1 ],
        navy: [ 0, 0, 128, 1 ],
        oldlace: [ 253, 245, 230, 1 ],
        olive: [ 128, 128, 0, 1 ],
        olivedrab: [ 107, 142, 35, 1 ],
        orange: [ 255, 165, 0, 1 ],
        orangered: [ 255, 69, 0, 1 ],
        orchid: [ 218, 112, 214, 1 ],
        palegoldenrod: [ 238, 232, 170, 1 ],
        palegreen: [ 152, 251, 152, 1 ],
        paleturquoise: [ 175, 238, 238, 1 ],
        palevioletred: [ 219, 112, 147, 1 ],
        papayawhip: [ 255, 239, 213, 1 ],
        peachpuff: [ 255, 218, 185, 1 ],
        peru: [ 205, 133, 63, 1 ],
        pink: [ 255, 192, 203, 1 ],
        plum: [ 221, 160, 221, 1 ],
        powderblue: [ 176, 224, 230, 1 ],
        purple: [ 128, 0, 128, 1 ],
        rebeccapurple: [ 102, 51, 153, 1 ],
        red: [ 255, 0, 0, 1 ],
        rosybrown: [ 188, 143, 143, 1 ],
        royalblue: [ 65, 105, 225, 1 ],
        saddlebrown: [ 139, 69, 19, 1 ],
        salmon: [ 250, 128, 114, 1 ],
        sandybrown: [ 244, 164, 96, 1 ],
        seagreen: [ 46, 139, 87, 1 ],
        seashell: [ 255, 245, 238, 1 ],
        sienna: [ 160, 82, 45, 1 ],
        silver: [ 192, 192, 192, 1 ],
        skyblue: [ 135, 206, 235, 1 ],
        slateblue: [ 106, 90, 205, 1 ],
        slategray: [ 112, 128, 144, 1 ],
        slategrey: [ 112, 128, 144, 1 ],
        snow: [ 255, 250, 250, 1 ],
        springgreen: [ 0, 255, 127, 1 ],
        steelblue: [ 70, 130, 180, 1 ],
        tan: [ 210, 180, 140, 1 ],
        teal: [ 0, 128, 128, 1 ],
        thistle: [ 216, 191, 216, 1 ],
        tomato: [ 255, 99, 71, 1 ],
        turquoise: [ 64, 224, 208, 1 ],
        violet: [ 238, 130, 238, 1 ],
        wheat: [ 245, 222, 179, 1 ],
        white: [ 255, 255, 255, 1 ],
        whitesmoke: [ 245, 245, 245, 1 ],
        yellow: [ 255, 255, 0, 1 ],
        yellowgreen: [ 154, 205, 50, 1 ]
    };
    function $n(t) {
        return (t = Math.round(t)) < 0 ? 0 : t > 255 ? 255 : t;
    }
    function Gn(t) {
        return $n("%" === t[t.length - 1] ? parseFloat(t) / 100 * 255 : parseInt(t));
    }
    function Wn(t) {
        return function(t) {
            return t < 0 ? 0 : t > 1 ? 1 : t;
        }("%" === t[t.length - 1] ? parseFloat(t) / 100 : parseFloat(t));
    }
    function Bn(t, e, n) {
        return n < 0 ? n += 1 : n > 1 && (n -= 1), 6 * n < 1 ? t + (e - t) * n * 6 : 2 * n < 1 ? e : 3 * n < 2 ? t + (e - t) * (2 / 3 - n) * 6 : t;
    }
    try {
        qn = {}.parseCSSColor = function(t) {
            var e, n = t.replace(/ /g, "").toLowerCase();
            if (n in Vn) return Vn[n].slice();
            if ("#" === n[0]) return 4 === n.length ? (e = parseInt(n.substr(1), 16)) >= 0 && e <= 4095 ? [ (3840 & e) >> 4 | (3840 & e) >> 8, 240 & e | (240 & e) >> 4, 15 & e | (15 & e) << 4, 1 ] : null : 7 === n.length && (e = parseInt(n.substr(1), 16)) >= 0 && e <= 16777215 ? [ (16711680 & e) >> 16, (65280 & e) >> 8, 255 & e, 1 ] : null;
            var i = n.indexOf("("), r = n.indexOf(")");
            if (-1 !== i && r + 1 === n.length) {
                var o = n.substr(0, i), s = n.substr(i + 1, r - (i + 1)).split(","), a = 1;
                switch (o) {
                  case "rgba":
                    if (4 !== s.length) return null;
                    a = Wn(s.pop());

                  case "rgb":
                    return 3 !== s.length ? null : [ Gn(s[0]), Gn(s[1]), Gn(s[2]), a ];

                  case "hsla":
                    if (4 !== s.length) return null;
                    a = Wn(s.pop());

                  case "hsl":
                    if (3 !== s.length) return null;
                    var l = (parseFloat(s[0]) % 360 + 360) % 360 / 360, u = Wn(s[1]), c = Wn(s[2]), h = c <= .5 ? c * (u + 1) : c + u - c * u, d = 2 * c - h;
                    return [ $n(255 * Bn(d, h, l + 1 / 3)), $n(255 * Bn(d, h, l)), $n(255 * Bn(d, h, l - 1 / 3)), a ];

                  default:
                    return null;
                }
            }
            return null;
        };
    } catch (t) {}
    class Jn {
        constructor(t, e, n, i = 1) {
            this.r = t, this.g = e, this.b = n, this.a = i;
        }
        static parse(t) {
            if (!t) return;
            if (t instanceof Jn) return t;
            if ("string" != typeof t) return;
            const e = qn(t);
            return e ? new Jn(e[0] / 255 * e[3], e[1] / 255 * e[3], e[2] / 255 * e[3], e[3]) : void 0;
        }
        toString() {
            const [t, e, n, i] = this.toArray();
            return `rgba(${Math.round(t)},${Math.round(e)},${Math.round(n)},${i})`;
        }
        toArray() {
            const {r: t, g: e, b: n, a: i} = this;
            return 0 === i ? [ 0, 0, 0, 0 ] : [ 255 * t / i, 255 * e / i, 255 * n / i, i ];
        }
        toArray01() {
            const {r: t, g: e, b: n, a: i} = this;
            return 0 === i ? [ 0, 0, 0, 0 ] : [ t / i, e / i, n / i, i ];
        }
        toArray01PremultipliedAlpha() {
            const {r: t, g: e, b: n, a: i} = this;
            return [ t, e, n, i ];
        }
    }
    Jn.black = new Jn(0, 0, 0, 1), Jn.white = new Jn(1, 1, 1, 1), Jn.transparent = new Jn(0, 0, 0, 0), 
    Jn.red = new Jn(1, 0, 0, 1), Jn.blue = new Jn(0, 0, 1, 1);
    var Xn = Jn;
    class Yn {
        constructor(t, e, n) {
            this.sensitivity = t ? e ? "variant" : "case" : e ? "accent" : "base", this.locale = n, 
            this.collator = new Intl.Collator(this.locale ? this.locale : [], {
                sensitivity: this.sensitivity,
                usage: "search"
            });
        }
        compare(t, e) {
            return this.collator.compare(t, e);
        }
        resolvedLocale() {
            return new Intl.Collator(this.locale ? this.locale : []).resolvedOptions().locale;
        }
    }
    class Zn {
        constructor(t, e, n, i, r) {
            this.text = t.normalize ? t.normalize() : t, this.image = e, this.scale = n, this.fontStack = i, 
            this.textColor = r;
        }
    }
    class Kn {
        constructor(t) {
            this.sections = t;
        }
        static fromString(t) {
            return new Kn([ new Zn(t, null, null, null, null) ]);
        }
        isEmpty() {
            return 0 === this.sections.length || !this.sections.some(t => 0 !== t.text.length || t.image && 0 !== t.image.name.length);
        }
        static factory(t) {
            return t instanceof Kn ? t : Kn.fromString(t);
        }
        toString() {
            return 0 === this.sections.length ? "" : this.sections.map(t => t.text).join("");
        }
        serialize() {
            const t = [ "format" ];
            for (const e of this.sections) {
                if (e.image) {
                    t.push([ "image", e.image.name ]);
                    continue;
                }
                t.push(e.text);
                const n = {};
                e.fontStack && (n["text-font"] = [ "literal", e.fontStack.split(",") ]), e.scale && (n["font-scale"] = e.scale), 
                e.textColor && (n["text-color"] = [ "rgba" ].concat(e.textColor.toArray())), t.push(n);
            }
            return t;
        }
    }
    class Qn {
        constructor(t) {
            this.name = t.name, this.available = t.available;
        }
        toString() {
            return this.name;
        }
        static fromString(t) {
            return t ? new Qn({
                name: t,
                available: !1
            }) : null;
        }
        serialize() {
            return [ "image", this.name ];
        }
    }
    function ti(t, e, n, i) {
        return "number" == typeof t && t >= 0 && t <= 255 && "number" == typeof e && e >= 0 && e <= 255 && "number" == typeof n && n >= 0 && n <= 255 ? void 0 === i || "number" == typeof i && i >= 0 && i <= 1 ? null : `Invalid rgba value [${[ t, e, n, i ].join(", ")}]: 'a' must be between 0 and 1.` : `Invalid rgba value [${("number" == typeof i ? [ t, e, n, i ] : [ t, e, n ]).join(", ")}]: 'r', 'g', and 'b' must be between 0 and 255.`;
    }
    function ei(t) {
        if (null === t) return !0;
        if ("string" == typeof t) return !0;
        if ("boolean" == typeof t) return !0;
        if ("number" == typeof t) return !0;
        if (t instanceof Xn) return !0;
        if (t instanceof Yn) return !0;
        if (t instanceof Kn) return !0;
        if (t instanceof Qn) return !0;
        if (Array.isArray(t)) {
            for (const e of t) if (!ei(e)) return !1;
            return !0;
        }
        if ("object" == typeof t) {
            for (const e in t) if (!ei(t[e])) return !1;
            return !0;
        }
        return !1;
    }
    function ni(t) {
        if (null === t) return Sn;
        if ("string" == typeof t) return Pn;
        if ("boolean" == typeof t) return In;
        if ("number" == typeof t) return Mn;
        if (t instanceof Xn) return jn;
        if (t instanceof Yn) return On;
        if (t instanceof Kn) return Cn;
        if (t instanceof Qn) return En;
        if (Array.isArray(t)) {
            const e = t.length;
            let n;
            for (const e of t) {
                const t = ni(e);
                if (n) {
                    if (n === t) continue;
                    n = Fn;
                    break;
                }
                n = t;
            }
            return Rn(n || Fn, e);
        }
        return zn;
    }
    function ii(t) {
        const e = typeof t;
        return null === t ? "" : "string" === e || "number" === e || "boolean" === e ? String(t) : t instanceof Xn || t instanceof Kn || t instanceof Qn ? t.toString() : JSON.stringify(t);
    }
    class ri {
        constructor(t, e) {
            this.type = t, this.value = e;
        }
        static parse(t, e) {
            if (2 !== t.length) return e.error(`'literal' expression requires exactly one argument, but found ${t.length - 1} instead.`);
            if (!ei(t[1])) return e.error("invalid value");
            const n = t[1];
            let i = ni(n);
            const r = e.expectedType;
            return "array" !== i.kind || 0 !== i.N || !r || "array" !== r.kind || "number" == typeof r.N && 0 !== r.N || (i = r), 
            new ri(i, n);
        }
        evaluate() {
            return this.value;
        }
        eachChild() {}
        outputDefined() {
            return !0;
        }
        serialize() {
            return "array" === this.type.kind || "object" === this.type.kind ? [ "literal", this.value ] : this.value instanceof Xn ? [ "rgba" ].concat(this.value.toArray()) : this.value instanceof Kn ? this.value.serialize() : this.value;
        }
    }
    var oi = ri, si = class {
        constructor(t) {
            this.name = "ExpressionEvaluationError", this.message = t;
        }
        toJSON() {
            return this.message;
        }
    };
    const ai = {
        string: Pn,
        number: Mn,
        boolean: In,
        object: zn
    };
    class li {
        constructor(t, e) {
            this.type = t, this.args = e;
        }
        static parse(t, e) {
            if (t.length < 2) return e.error("Expected at least one argument.");
            let n, i = 1;
            const r = t[0];
            if ("array" === r) {
                let r, o;
                if (t.length > 2) {
                    const n = t[1];
                    if ("string" != typeof n || !(n in ai) || "object" === n) return e.error('The item type argument of "array" must be one of string, number, boolean', 1);
                    r = ai[n], i++;
                } else r = Fn;
                if (t.length > 3) {
                    if (null !== t[2] && ("number" != typeof t[2] || t[2] < 0 || t[2] !== Math.floor(t[2]))) return e.error('The length argument to "array" must be a positive integer literal', 2);
                    o = t[2], i++;
                }
                n = Rn(r, o);
            } else n = ai[r];
            const o = [];
            for (;i < t.length; i++) {
                const n = e.parse(t[i], i, Fn);
                if (!n) return null;
                o.push(n);
            }
            return new li(n, o);
        }
        evaluate(t) {
            for (let e = 0; e < this.args.length; e++) {
                const n = this.args[e].evaluate(t);
                if (!Ln(this.type, ni(n))) return n;
                if (e === this.args.length - 1) throw new si(`Expected value to be of type ${Nn(this.type)}, but found ${Nn(ni(n))} instead.`);
            }
            return null;
        }
        eachChild(t) {
            this.args.forEach(t);
        }
        outputDefined() {
            return this.args.every(t => t.outputDefined());
        }
        serialize() {
            const t = this.type, e = [ t.kind ];
            if ("array" === t.kind) {
                const n = t.itemType;
                if ("string" === n.kind || "number" === n.kind || "boolean" === n.kind) {
                    e.push(n.kind);
                    const i = t.N;
                    ("number" == typeof i || this.args.length > 1) && e.push(i);
                }
            }
            return e.concat(this.args.map(t => t.serialize()));
        }
    }
    var ui = li;
    class ci {
        constructor(t) {
            this.type = Cn, this.sections = t;
        }
        static parse(t, e) {
            if (t.length < 2) return e.error("Expected at least one argument.");
            const n = t[1];
            if (!Array.isArray(n) && "object" == typeof n) return e.error("First argument must be an image or text section.");
            const i = [];
            let r = !1;
            for (let n = 1; n <= t.length - 1; ++n) {
                const o = t[n];
                if (r && "object" == typeof o && !Array.isArray(o)) {
                    r = !1;
                    let t = null;
                    if (o["font-scale"] && (t = e.parse(o["font-scale"], 1, Mn), !t)) return null;
                    let n = null;
                    if (o["text-font"] && (n = e.parse(o["text-font"], 1, Rn(Pn)), !n)) return null;
                    let s = null;
                    if (o["text-color"] && (s = e.parse(o["text-color"], 1, jn), !s)) return null;
                    const a = i[i.length - 1];
                    a.scale = t, a.font = n, a.textColor = s;
                } else {
                    const o = e.parse(t[n], 1, Fn);
                    if (!o) return null;
                    const s = o.type.kind;
                    if ("string" !== s && "value" !== s && "null" !== s && "resolvedImage" !== s) return e.error("Formatted text type must be 'string', 'value', 'image' or 'null'.");
                    r = !0, i.push({
                        content: o,
                        scale: null,
                        font: null,
                        textColor: null
                    });
                }
            }
            return new ci(i);
        }
        evaluate(t) {
            return new Kn(this.sections.map(e => {
                const n = e.content.evaluate(t);
                return ni(n) === En ? new Zn("", n, null, null, null) : new Zn(ii(n), null, e.scale ? e.scale.evaluate(t) : null, e.font ? e.font.evaluate(t).join(",") : null, e.textColor ? e.textColor.evaluate(t) : null);
            }));
        }
        eachChild(t) {
            for (const e of this.sections) t(e.content), e.scale && t(e.scale), e.font && t(e.font), 
            e.textColor && t(e.textColor);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            const t = [ "format" ];
            for (const e of this.sections) {
                t.push(e.content.serialize());
                const n = {};
                e.scale && (n["font-scale"] = e.scale.serialize()), e.font && (n["text-font"] = e.font.serialize()), 
                e.textColor && (n["text-color"] = e.textColor.serialize()), t.push(n);
            }
            return t;
        }
    }
    class hi {
        constructor(t) {
            this.type = En, this.input = t;
        }
        static parse(t, e) {
            if (2 !== t.length) return e.error("Expected two arguments.");
            const n = e.parse(t[1], 1, Pn);
            return n ? new hi(n) : e.error("No image name provided.");
        }
        evaluate(t) {
            const e = this.input.evaluate(t), n = Qn.fromString(e);
            return n && t.availableImages && (n.available = t.availableImages.indexOf(e) > -1), 
            n;
        }
        eachChild(t) {
            t(this.input);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            return [ "image", this.input.serialize() ];
        }
    }
    const di = {
        "to-boolean": In,
        "to-color": jn,
        "to-number": Mn,
        "to-string": Pn
    };
    class fi {
        constructor(t, e) {
            this.type = t, this.args = e;
        }
        static parse(t, e) {
            if (t.length < 2) return e.error("Expected at least one argument.");
            const n = t[0];
            if (("to-boolean" === n || "to-string" === n) && 2 !== t.length) return e.error("Expected one argument.");
            const i = di[n], r = [];
            for (let n = 1; n < t.length; n++) {
                const i = e.parse(t[n], n, Fn);
                if (!i) return null;
                r.push(i);
            }
            return new fi(i, r);
        }
        evaluate(t) {
            if ("boolean" === this.type.kind) return Boolean(this.args[0].evaluate(t));
            if ("color" === this.type.kind) {
                let e, n;
                for (const i of this.args) {
                    if (e = i.evaluate(t), n = null, e instanceof Xn) return e;
                    if ("string" == typeof e) {
                        const n = t.parseColor(e);
                        if (n) return n;
                    } else if (Array.isArray(e) && (n = e.length < 3 || e.length > 4 ? `Invalid rbga value ${JSON.stringify(e)}: expected an array containing either three or four numeric values.` : ti(e[0], e[1], e[2], e[3]), 
                    !n)) return new Xn(e[0] / 255, e[1] / 255, e[2] / 255, e[3]);
                }
                throw new si(n || `Could not parse color from value '${"string" == typeof e ? e : String(JSON.stringify(e))}'`);
            }
            if ("number" === this.type.kind) {
                let e = null;
                for (const n of this.args) {
                    if (e = n.evaluate(t), null === e) return 0;
                    const i = Number(e);
                    if (!isNaN(i)) return i;
                }
                throw new si(`Could not convert ${JSON.stringify(e)} to number.`);
            }
            return "formatted" === this.type.kind ? Kn.fromString(ii(this.args[0].evaluate(t))) : "resolvedImage" === this.type.kind ? Qn.fromString(ii(this.args[0].evaluate(t))) : ii(this.args[0].evaluate(t));
        }
        eachChild(t) {
            this.args.forEach(t);
        }
        outputDefined() {
            return this.args.every(t => t.outputDefined());
        }
        serialize() {
            if ("formatted" === this.type.kind) return new ci([ {
                content: this.args[0],
                scale: null,
                font: null,
                textColor: null
            } ]).serialize();
            if ("resolvedImage" === this.type.kind) return new hi(this.args[0]).serialize();
            const t = [ "to-" + this.type.kind ];
            return this.eachChild(e => {
                t.push(e.serialize());
            }), t;
        }
    }
    var pi = fi;
    const mi = [ "Unknown", "Point", "LineString", "Polygon" ];
    var yi = class {
        constructor() {
            this.globals = null, this.feature = null, this.featureState = null, this.formattedSection = null, 
            this.R = {}, this.availableImages = null, this.canonical = null, this.featureTileCoord = null, 
            this.featureDistanceData = null;
        }
        id() {
            return this.feature && void 0 !== this.feature.id ? this.feature.id : null;
        }
        geometryType() {
            return this.feature ? "number" == typeof this.feature.type ? mi[this.feature.type] : this.feature.type : null;
        }
        geometry() {
            return this.feature && "geometry" in this.feature ? this.feature.geometry : null;
        }
        canonicalID() {
            return this.canonical;
        }
        properties() {
            return this.feature && this.feature.properties || {};
        }
        distanceFromCenter() {
            if (this.featureTileCoord && this.featureDistanceData) {
                const t = this.featureDistanceData.center, e = this.featureDistanceData.scale, {x: n, y: i} = this.featureTileCoord;
                return this.featureDistanceData.bearing[0] * (n * e - t[0]) + this.featureDistanceData.bearing[1] * (i * e - t[1]);
            }
            return 0;
        }
        parseColor(t) {
            let e = this.R[t];
            return e || (e = this.R[t] = Xn.parse(t)), e;
        }
    };
    class gi {
        constructor(t, e, n, i) {
            this.name = t, this.type = e, this.D = n, this.args = i;
        }
        evaluate(t) {
            return this.D(t, this.args);
        }
        eachChild(t) {
            this.args.forEach(t);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            return [ this.name ].concat(this.args.map(t => t.serialize()));
        }
        static parse(t, e) {
            const n = t[0], i = gi.definitions[n];
            if (!i) return e.error(`Unknown expression "${n}". If you wanted a literal array, use ["literal", [...]].`, 0);
            const r = Array.isArray(i) ? i[0] : i.type, o = Array.isArray(i) ? [ [ i[1], i[2] ] ] : i.overloads, s = o.filter(([e]) => !Array.isArray(e) || e.length === t.length - 1);
            let a = null;
            for (const [i, o] of s) {
                a = new Vi(e.registry, e.path, null, e.scope);
                const s = [];
                let l = !1;
                for (let e = 1; e < t.length; e++) {
                    const n = t[e], r = Array.isArray(i) ? i[e - 1] : i.type, o = a.parse(n, 1 + s.length, r);
                    if (!o) {
                        l = !0;
                        break;
                    }
                    s.push(o);
                }
                if (!l) if (Array.isArray(i) && i.length !== s.length) a.error(`Expected ${i.length} arguments, but found ${s.length} instead.`); else {
                    for (let t = 0; t < s.length; t++) {
                        const e = Array.isArray(i) ? i[t] : i.type, n = s[t];
                        a.concat(t + 1).checkSubtype(e, n.type);
                    }
                    if (0 === a.errors.length) return new gi(n, r, o, s);
                }
            }
            if (1 === s.length) e.errors.push(...a.errors); else {
                const n = (s.length ? s : o).map(([t]) => {
                    return e = t, Array.isArray(e) ? `(${e.map(Nn).join(", ")})` : `(${Nn(e.type)}...)`;
                    var e;
                }).join(" | "), i = [];
                for (let n = 1; n < t.length; n++) {
                    const r = e.parse(t[n], 1 + i.length);
                    if (!r) return null;
                    i.push(Nn(r.type));
                }
                e.error(`Expected arguments of type ${n}, but found (${i.join(", ")}) instead.`);
            }
            return null;
        }
        static register(t, e) {
            gi.definitions = e;
            for (const n in e) t[n] = gi;
        }
    }
    var bi = gi;
    class vi {
        constructor(t, e, n) {
            this.type = On, this.locale = n, this.caseSensitive = t, this.diacriticSensitive = e;
        }
        static parse(t, e) {
            if (2 !== t.length) return e.error("Expected one argument.");
            const n = t[1];
            if ("object" != typeof n || Array.isArray(n)) return e.error("Collator options argument must be an object.");
            const i = e.parse(void 0 !== n["case-sensitive"] && n["case-sensitive"], 1, In);
            if (!i) return null;
            const r = e.parse(void 0 !== n["diacritic-sensitive"] && n["diacritic-sensitive"], 1, In);
            if (!r) return null;
            let o = null;
            return n.locale && (o = e.parse(n.locale, 1, Pn), !o) ? null : new vi(i, r, o);
        }
        evaluate(t) {
            return new Yn(this.caseSensitive.evaluate(t), this.diacriticSensitive.evaluate(t), this.locale ? this.locale.evaluate(t) : null);
        }
        eachChild(t) {
            t(this.caseSensitive), t(this.diacriticSensitive), this.locale && t(this.locale);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            const t = {};
            return t["case-sensitive"] = this.caseSensitive.serialize(), t["diacritic-sensitive"] = this.diacriticSensitive.serialize(), 
            this.locale && (t.locale = this.locale.serialize()), [ "collator", t ];
        }
    }
    function xi(t, e) {
        t[0] = Math.min(t[0], e[0]), t[1] = Math.min(t[1], e[1]), t[2] = Math.max(t[2], e[0]), 
        t[3] = Math.max(t[3], e[1]);
    }
    function wi(t, e) {
        return !(t[0] <= e[0] || t[2] >= e[2] || t[1] <= e[1] || t[3] >= e[3]);
    }
    function ki(t, e) {
        const n = (180 + t[0]) / 360, i = (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + t[1] * Math.PI / 360))) / 360, r = Math.pow(2, e.z);
        return [ Math.round(n * r * 8192), Math.round(i * r * 8192) ];
    }
    function Ai(t, e, n) {
        const i = t[0] - e[0], r = t[1] - e[1], o = t[0] - n[0], s = t[1] - n[1];
        return i * s - o * r == 0 && i * o <= 0 && r * s <= 0;
    }
    function _i(t, e) {
        let n = !1;
        for (let s = 0, a = e.length; s < a; s++) {
            const a = e[s];
            for (let e = 0, s = a.length; e < s - 1; e++) {
                if (Ai(t, a[e], a[e + 1])) return !1;
                (r = a[e])[1] > (i = t)[1] != (o = a[e + 1])[1] > i[1] && i[0] < (o[0] - r[0]) * (i[1] - r[1]) / (o[1] - r[1]) + r[0] && (n = !n);
            }
        }
        var i, r, o;
        return n;
    }
    function Ti(t, e) {
        for (let n = 0; n < e.length; n++) if (_i(t, e[n])) return !0;
        return !1;
    }
    function Si(t, e, n, i) {
        const r = i[0] - n[0], o = i[1] - n[1], s = (t[0] - n[0]) * o - r * (t[1] - n[1]), a = (e[0] - n[0]) * o - r * (e[1] - n[1]);
        return s > 0 && a < 0 || s < 0 && a > 0;
    }
    function Mi(t, e, n) {
        for (const u of n) for (let n = 0; n < u.length - 1; ++n) if (void 0, void 0, 0 != (a = [ (s = u[n + 1])[0] - (o = u[n])[0], s[1] - o[1] ])[0] * (l = [ (r = e)[0] - (i = t)[0], r[1] - i[1] ])[1] - a[1] * l[0] && Si(i, r, o, s) && Si(o, s, i, r)) return !0;
        var i, r, o, s, a, l;
        return !1;
    }
    function Pi(t, e) {
        for (let n = 0; n < t.length; ++n) if (!_i(t[n], e)) return !1;
        for (let n = 0; n < t.length - 1; ++n) if (Mi(t[n], t[n + 1], e)) return !1;
        return !0;
    }
    function Ii(t, e) {
        for (let n = 0; n < e.length; n++) if (Pi(t, e[n])) return !0;
        return !1;
    }
    function ji(t, e, n) {
        const i = [];
        for (let r = 0; r < t.length; r++) {
            const o = [];
            for (let i = 0; i < t[r].length; i++) {
                const s = ki(t[r][i], n);
                xi(e, s), o.push(s);
            }
            i.push(o);
        }
        return i;
    }
    function zi(t, e, n) {
        const i = [];
        for (let r = 0; r < t.length; r++) {
            const o = ji(t[r], e, n);
            i.push(o);
        }
        return i;
    }
    function Fi(t, e, n, i) {
        if (t[0] < n[0] || t[0] > n[2]) {
            const e = .5 * i;
            let r = t[0] - n[0] > e ? -i : n[0] - t[0] > e ? i : 0;
            0 === r && (r = t[0] - n[2] > e ? -i : n[2] - t[0] > e ? i : 0), t[0] += r;
        }
        xi(e, t);
    }
    function Oi(t, e, n, i) {
        const r = 8192 * Math.pow(2, i.z), o = [ 8192 * i.x, 8192 * i.y ], s = [];
        if (!t) return s;
        for (const i of t) for (const t of i) {
            const i = [ t.x + o[0], t.y + o[1] ];
            Fi(i, e, n, r), s.push(i);
        }
        return s;
    }
    function Ci(t, e, n, i) {
        const r = 8192 * Math.pow(2, i.z), o = [ 8192 * i.x, 8192 * i.y ], s = [];
        if (!t) return s;
        for (const n of t) {
            const t = [];
            for (const i of n) {
                const n = [ i.x + o[0], i.y + o[1] ];
                xi(e, n), t.push(n);
            }
            s.push(t);
        }
        if (e[2] - e[0] <= r / 2) {
            (a = e)[0] = a[1] = 1 / 0, a[2] = a[3] = -1 / 0;
            for (const t of s) for (const i of t) Fi(i, e, n, r);
        }
        var a;
        return s;
    }
    class Ei {
        constructor(t, e) {
            this.type = In, this.geojson = t, this.geometries = e;
        }
        static parse(t, e) {
            if (2 !== t.length) return e.error(`'within' expression requires exactly one argument, but found ${t.length - 1} instead.`);
            if (ei(t[1])) {
                const e = t[1];
                if ("FeatureCollection" === e.type) for (let t = 0; t < e.features.length; ++t) {
                    const n = e.features[t].geometry.type;
                    if ("Polygon" === n || "MultiPolygon" === n) return new Ei(e, e.features[t].geometry);
                } else if ("Feature" === e.type) {
                    const t = e.geometry.type;
                    if ("Polygon" === t || "MultiPolygon" === t) return new Ei(e, e.geometry);
                } else if ("Polygon" === e.type || "MultiPolygon" === e.type) return new Ei(e, e);
            }
            return e.error("'within' expression requires valid geojson object that contains polygon geometry type.");
        }
        evaluate(t) {
            if (null != t.geometry() && null != t.canonicalID()) {
                if ("Point" === t.geometryType()) return function(t, e) {
                    const n = [ 1 / 0, 1 / 0, -1 / 0, -1 / 0 ], i = [ 1 / 0, 1 / 0, -1 / 0, -1 / 0 ], r = t.canonicalID();
                    if (!r) return !1;
                    if ("Polygon" === e.type) {
                        const o = ji(e.coordinates, i, r), s = Oi(t.geometry(), n, i, r);
                        if (!wi(n, i)) return !1;
                        for (const t of s) if (!_i(t, o)) return !1;
                    }
                    if ("MultiPolygon" === e.type) {
                        const o = zi(e.coordinates, i, r), s = Oi(t.geometry(), n, i, r);
                        if (!wi(n, i)) return !1;
                        for (const t of s) if (!Ti(t, o)) return !1;
                    }
                    return !0;
                }(t, this.geometries);
                if ("LineString" === t.geometryType()) return function(t, e) {
                    const n = [ 1 / 0, 1 / 0, -1 / 0, -1 / 0 ], i = [ 1 / 0, 1 / 0, -1 / 0, -1 / 0 ], r = t.canonicalID();
                    if (!r) return !1;
                    if ("Polygon" === e.type) {
                        const o = ji(e.coordinates, i, r), s = Ci(t.geometry(), n, i, r);
                        if (!wi(n, i)) return !1;
                        for (const t of s) if (!Pi(t, o)) return !1;
                    }
                    if ("MultiPolygon" === e.type) {
                        const o = zi(e.coordinates, i, r), s = Ci(t.geometry(), n, i, r);
                        if (!wi(n, i)) return !1;
                        for (const t of s) if (!Ii(t, o)) return !1;
                    }
                    return !0;
                }(t, this.geometries);
            }
            return !1;
        }
        eachChild() {}
        outputDefined() {
            return !0;
        }
        serialize() {
            return [ "within", this.geojson ];
        }
    }
    var Ri = Ei;
    function Ni(t) {
        if (t instanceof bi) {
            if ("get" === t.name && 1 === t.args.length) return !1;
            if ("feature-state" === t.name) return !1;
            if ("has" === t.name && 1 === t.args.length) return !1;
            if ("properties" === t.name || "geometry-type" === t.name || "id" === t.name) return !1;
            if (/^filter-/.test(t.name)) return !1;
        }
        if (t instanceof Ri) return !1;
        let e = !0;
        return t.eachChild(t => {
            e && !Ni(t) && (e = !1);
        }), e;
    }
    function Di(t) {
        if (t instanceof bi && "feature-state" === t.name) return !1;
        let e = !0;
        return t.eachChild(t => {
            e && !Di(t) && (e = !1);
        }), e;
    }
    function Li(t, e) {
        if (t instanceof bi && e.indexOf(t.name) >= 0) return !1;
        let n = !0;
        return t.eachChild(t => {
            n && !Li(t, e) && (n = !1);
        }), n;
    }
    class Hi {
        constructor(t, e) {
            this.type = e.type, this.name = t, this.boundExpression = e;
        }
        static parse(t, e) {
            if (2 !== t.length || "string" != typeof t[1]) return e.error("'var' expression requires exactly one string literal argument.");
            const n = t[1];
            return e.scope.has(n) ? new Hi(n, e.scope.get(n)) : e.error(`Unknown variable "${n}". Make sure "${n}" has been bound in an enclosing "let" expression before using it.`, 1);
        }
        evaluate(t) {
            return this.boundExpression.evaluate(t);
        }
        eachChild() {}
        outputDefined() {
            return !1;
        }
        serialize() {
            return [ "var", this.name ];
        }
    }
    var Ui = Hi;
    class qi {
        constructor(t, e = [], n, i = new Tn, r = []) {
            this.registry = t, this.path = e, this.key = e.map(t => `[${t}]`).join(""), this.scope = i, 
            this.errors = r, this.expectedType = n;
        }
        parse(t, e, n, i, r = {}) {
            return e ? this.concat(e, n, i).L(t, r) : this.L(t, r);
        }
        L(t, e) {
            function n(t, e, n) {
                return "assert" === n ? new ui(e, [ t ]) : "coerce" === n ? new pi(e, [ t ]) : t;
            }
            if (null !== t && "string" != typeof t && "boolean" != typeof t && "number" != typeof t || (t = [ "literal", t ]), 
            Array.isArray(t)) {
                if (0 === t.length) return this.error('Expected an array with at least one element. If you wanted a literal array, use ["literal", []].');
                const i = t[0];
                if ("string" != typeof i) return this.error(`Expression name must be a string, but found ${typeof i} instead. If you wanted a literal array, use ["literal", [...]].`, 0), 
                null;
                const r = this.registry[i];
                if (r) {
                    let i = r.parse(t, this);
                    if (!i) return null;
                    if (this.expectedType) {
                        const t = this.expectedType, r = i.type;
                        if ("string" !== t.kind && "number" !== t.kind && "boolean" !== t.kind && "object" !== t.kind && "array" !== t.kind || "value" !== r.kind) if ("color" !== t.kind && "formatted" !== t.kind && "resolvedImage" !== t.kind || "value" !== r.kind && "string" !== r.kind) {
                            if (this.checkSubtype(t, r)) return null;
                        } else i = n(i, t, e.typeAnnotation || "coerce"); else i = n(i, t, e.typeAnnotation || "assert");
                    }
                    if (!(i instanceof oi) && "resolvedImage" !== i.type.kind && function t(e) {
                        if (e instanceof Ui) return t(e.boundExpression);
                        if (e instanceof bi && "error" === e.name) return !1;
                        if (e instanceof vi) return !1;
                        if (e instanceof Ri) return !1;
                        const n = e instanceof pi || e instanceof ui;
                        let i = !0;
                        return e.eachChild(e => {
                            i = n ? i && t(e) : i && e instanceof oi;
                        }), !!i && (Ni(e) && Li(e, [ "zoom", "heatmap-density", "line-progress", "sky-radial-progress", "accumulated", "is-supported-script", "pitch", "distance-from-center" ]));
                    }(i)) {
                        const e = new yi;
                        try {
                            i = new oi(i.type, i.evaluate(e));
                        } catch (t) {
                            return this.error(t.message), null;
                        }
                    }
                    return i;
                }
                return this.error(`Unknown expression "${i}". If you wanted a literal array, use ["literal", [...]].`, 0);
            }
            return this.error(void 0 === t ? "'undefined' value invalid. Use null instead." : "object" == typeof t ? 'Bare objects invalid. Use ["literal", {...}] instead.' : `Expected an array, but found ${typeof t} instead.`);
        }
        concat(t, e, n) {
            const i = "number" == typeof t ? this.path.concat(t) : this.path, r = n ? this.scope.concat(n) : this.scope;
            return new qi(this.registry, i, e || null, r, this.errors);
        }
        error(t, ...e) {
            const n = `${this.key}${e.map(t => `[${t}]`).join("")}`;
            this.errors.push(new An(n, t));
        }
        checkSubtype(t, e) {
            const n = Ln(t, e);
            return n && this.error(n), n;
        }
    }
    var Vi = qi;
    function $i(t, e) {
        const n = t.length - 1;
        let i, r, o = 0, s = n, a = 0;
        for (;o <= s; ) if (a = Math.floor((o + s) / 2), i = t[a], r = t[a + 1], i <= e) {
            if (a === n || e < r) return a;
            o = a + 1;
        } else {
            if (!(i > e)) throw new si("Input is not a number.");
            s = a - 1;
        }
        return 0;
    }
    class Gi {
        constructor(t, e, n) {
            this.type = t, this.input = e, this.labels = [], this.outputs = [];
            for (const [t, e] of n) this.labels.push(t), this.outputs.push(e);
        }
        static parse(t, e) {
            if (t.length - 1 < 4) return e.error(`Expected at least 4 arguments, but found only ${t.length - 1}.`);
            if ((t.length - 1) % 2 != 0) return e.error("Expected an even number of arguments.");
            const n = e.parse(t[1], 1, Mn);
            if (!n) return null;
            const i = [];
            let r = null;
            e.expectedType && "value" !== e.expectedType.kind && (r = e.expectedType);
            for (let n = 1; n < t.length; n += 2) {
                const o = 1 === n ? -1 / 0 : t[n], s = t[n + 1], a = n, l = n + 1;
                if ("number" != typeof o) return e.error('Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.', a);
                if (i.length && i[i.length - 1][0] >= o) return e.error('Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.', a);
                const u = e.parse(s, l, r);
                if (!u) return null;
                r = r || u.type, i.push([ o, u ]);
            }
            return new Gi(r, n, i);
        }
        evaluate(t) {
            const e = this.labels, n = this.outputs;
            if (1 === e.length) return n[0].evaluate(t);
            const i = this.input.evaluate(t);
            if (i <= e[0]) return n[0].evaluate(t);
            const r = e.length;
            return i >= e[r - 1] ? n[r - 1].evaluate(t) : n[$i(e, i)].evaluate(t);
        }
        eachChild(t) {
            t(this.input);
            for (const e of this.outputs) t(e);
        }
        outputDefined() {
            return this.outputs.every(t => t.outputDefined());
        }
        serialize() {
            const t = [ "step", this.input.serialize() ];
            for (let e = 0; e < this.labels.length; e++) e > 0 && t.push(this.labels[e]), t.push(this.outputs[e].serialize());
            return t;
        }
    }
    var Wi = Gi, Bi = Ji;
    function Ji(t, e, n, i) {
        this.cx = 3 * t, this.bx = 3 * (n - t) - this.cx, this.ax = 1 - this.cx - this.bx, 
        this.cy = 3 * e, this.by = 3 * (i - e) - this.cy, this.ay = 1 - this.cy - this.by, 
        this.p1x = t, this.p1y = e, this.p2x = n, this.p2y = i;
    }
    function Xi(t, e, n) {
        return t * (1 - n) + e * n;
    }
    Ji.prototype = {
        sampleCurveX: function(t) {
            return ((this.ax * t + this.bx) * t + this.cx) * t;
        },
        sampleCurveY: function(t) {
            return ((this.ay * t + this.by) * t + this.cy) * t;
        },
        sampleCurveDerivativeX: function(t) {
            return (3 * this.ax * t + 2 * this.bx) * t + this.cx;
        },
        solveCurveX: function(t, e) {
            if (void 0 === e && (e = 1e-6), t < 0) return 0;
            if (t > 1) return 1;
            for (var n = t, i = 0; i < 8; i++) {
                var r = this.sampleCurveX(n) - t;
                if (Math.abs(r) < e) return n;
                var o = this.sampleCurveDerivativeX(n);
                if (Math.abs(o) < 1e-6) break;
                n -= r / o;
            }
            var s = 0, a = 1;
            for (n = t, i = 0; i < 20 && (r = this.sampleCurveX(n), !(Math.abs(r - t) < e)); i++) t > r ? s = n : a = n, 
            n = .5 * (a - s) + s;
            return n;
        },
        solve: function(t, e) {
            return this.sampleCurveY(this.solveCurveX(t, e));
        }
    };
    var Yi = Object.freeze({
        __proto__: null,
        number: Xi,
        color: function(t, e, n) {
            return new Xn(Xi(t.r, e.r, n), Xi(t.g, e.g, n), Xi(t.b, e.b, n), Xi(t.a, e.a, n));
        },
        array: function(t, e, n) {
            return t.map((t, i) => Xi(t, e[i], n));
        }
    });
    const Zi = 6 / 29 * 3 * (6 / 29), Ki = Math.PI / 180, Qi = 180 / Math.PI;
    function tr(t) {
        return t > .008856451679035631 ? Math.pow(t, 1 / 3) : t / Zi + 4 / 29;
    }
    function er(t) {
        return t > 6 / 29 ? t * t * t : Zi * (t - 4 / 29);
    }
    function nr(t) {
        return 255 * (t <= .0031308 ? 12.92 * t : 1.055 * Math.pow(t, 1 / 2.4) - .055);
    }
    function ir(t) {
        return (t /= 255) <= .04045 ? t / 12.92 : Math.pow((t + .055) / 1.055, 2.4);
    }
    function rr(t) {
        const e = ir(t.r), n = ir(t.g), i = ir(t.b), r = tr((.4124564 * e + .3575761 * n + .1804375 * i) / .95047), o = tr((.2126729 * e + .7151522 * n + .072175 * i) / 1);
        return {
            l: 116 * o - 16,
            a: 500 * (r - o),
            b: 200 * (o - tr((.0193339 * e + .119192 * n + .9503041 * i) / 1.08883)),
            alpha: t.a
        };
    }
    function or(t) {
        let e = (t.l + 16) / 116, n = isNaN(t.a) ? e : e + t.a / 500, i = isNaN(t.b) ? e : e - t.b / 200;
        return e = 1 * er(e), n = .95047 * er(n), i = 1.08883 * er(i), new Xn(nr(3.2404542 * n - 1.5371385 * e - .4985314 * i), nr(-.969266 * n + 1.8760108 * e + .041556 * i), nr(.0556434 * n - .2040259 * e + 1.0572252 * i), t.alpha);
    }
    function sr(t, e, n) {
        const i = e - t;
        return t + n * (i > 180 || i < -180 ? i - 360 * Math.round(i / 360) : i);
    }
    const ar = {
        forward: rr,
        reverse: or,
        interpolate: function(t, e, n) {
            return {
                l: Xi(t.l, e.l, n),
                a: Xi(t.a, e.a, n),
                b: Xi(t.b, e.b, n),
                alpha: Xi(t.alpha, e.alpha, n)
            };
        }
    }, lr = {
        forward: function(t) {
            const {l: e, a: n, b: i} = rr(t), r = Math.atan2(i, n) * Qi;
            return {
                h: r < 0 ? r + 360 : r,
                c: Math.sqrt(n * n + i * i),
                l: e,
                alpha: t.a
            };
        },
        reverse: function(t) {
            const e = t.h * Ki, n = t.c;
            return or({
                l: t.l,
                a: Math.cos(e) * n,
                b: Math.sin(e) * n,
                alpha: t.alpha
            });
        },
        interpolate: function(t, e, n) {
            return {
                h: sr(t.h, e.h, n),
                c: Xi(t.c, e.c, n),
                l: Xi(t.l, e.l, n),
                alpha: Xi(t.alpha, e.alpha, n)
            };
        }
    };
    var ur = Object.freeze({
        __proto__: null,
        lab: ar,
        hcl: lr
    });
    class cr {
        constructor(t, e, n, i, r) {
            this.type = t, this.operator = e, this.interpolation = n, this.input = i, this.labels = [], 
            this.outputs = [];
            for (const [t, e] of r) this.labels.push(t), this.outputs.push(e);
        }
        static interpolationFactor(t, e, n, i) {
            let r = 0;
            if ("exponential" === t.name) r = hr(e, t.base, n, i); else if ("linear" === t.name) r = hr(e, 1, n, i); else if ("cubic-bezier" === t.name) {
                const o = t.controlPoints;
                r = new Bi(o[0], o[1], o[2], o[3]).solve(hr(e, 1, n, i));
            }
            return r;
        }
        static parse(t, e) {
            let [n, i, r, ...o] = t;
            if (!Array.isArray(i) || 0 === i.length) return e.error("Expected an interpolation type expression.", 1);
            if ("linear" === i[0]) i = {
                name: "linear"
            }; else if ("exponential" === i[0]) {
                const t = i[1];
                if ("number" != typeof t) return e.error("Exponential interpolation requires a numeric base.", 1, 1);
                i = {
                    name: "exponential",
                    base: t
                };
            } else {
                if ("cubic-bezier" !== i[0]) return e.error("Unknown interpolation type " + String(i[0]), 1, 0);
                {
                    const t = i.slice(1);
                    if (4 !== t.length || t.some(t => "number" != typeof t || t < 0 || t > 1)) return e.error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.", 1);
                    i = {
                        name: "cubic-bezier",
                        controlPoints: t
                    };
                }
            }
            if (t.length - 1 < 4) return e.error(`Expected at least 4 arguments, but found only ${t.length - 1}.`);
            if ((t.length - 1) % 2 != 0) return e.error("Expected an even number of arguments.");
            if (r = e.parse(r, 2, Mn), !r) return null;
            const s = [];
            let a = null;
            "interpolate-hcl" === n || "interpolate-lab" === n ? a = jn : e.expectedType && "value" !== e.expectedType.kind && (a = e.expectedType);
            for (let t = 0; t < o.length; t += 2) {
                const n = o[t], i = o[t + 1], r = t + 3, l = t + 4;
                if ("number" != typeof n) return e.error('Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.', r);
                if (s.length && s[s.length - 1][0] >= n) return e.error('Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.', r);
                const u = e.parse(i, l, a);
                if (!u) return null;
                a = a || u.type, s.push([ n, u ]);
            }
            return "number" === a.kind || "color" === a.kind || "array" === a.kind && "number" === a.itemType.kind && "number" == typeof a.N ? new cr(a, n, i, r, s) : e.error(`Type ${Nn(a)} is not interpolatable.`);
        }
        evaluate(t) {
            const e = this.labels, n = this.outputs;
            if (1 === e.length) return n[0].evaluate(t);
            const i = this.input.evaluate(t);
            if (i <= e[0]) return n[0].evaluate(t);
            const r = e.length;
            if (i >= e[r - 1]) return n[r - 1].evaluate(t);
            const o = $i(e, i), s = cr.interpolationFactor(this.interpolation, i, e[o], e[o + 1]), a = n[o].evaluate(t), l = n[o + 1].evaluate(t);
            return "interpolate" === this.operator ? Yi[this.type.kind.toLowerCase()](a, l, s) : "interpolate-hcl" === this.operator ? lr.reverse(lr.interpolate(lr.forward(a), lr.forward(l), s)) : ar.reverse(ar.interpolate(ar.forward(a), ar.forward(l), s));
        }
        eachChild(t) {
            t(this.input);
            for (const e of this.outputs) t(e);
        }
        outputDefined() {
            return this.outputs.every(t => t.outputDefined());
        }
        serialize() {
            let t;
            t = "linear" === this.interpolation.name ? [ "linear" ] : "exponential" === this.interpolation.name ? 1 === this.interpolation.base ? [ "linear" ] : [ "exponential", this.interpolation.base ] : [ "cubic-bezier" ].concat(this.interpolation.controlPoints);
            const e = [ this.operator, t, this.input.serialize() ];
            for (let t = 0; t < this.labels.length; t++) e.push(this.labels[t], this.outputs[t].serialize());
            return e;
        }
    }
    function hr(t, e, n, i) {
        const r = i - n, o = t - n;
        return 0 === r ? 0 : 1 === e ? o / r : (Math.pow(e, o) - 1) / (Math.pow(e, r) - 1);
    }
    var dr = cr;
    class fr {
        constructor(t, e) {
            this.type = t, this.args = e;
        }
        static parse(t, e) {
            if (t.length < 2) return e.error("Expectected at least one argument.");
            let n = null;
            const i = e.expectedType;
            i && "value" !== i.kind && (n = i);
            const r = [];
            for (const i of t.slice(1)) {
                const t = e.parse(i, 1 + r.length, n, void 0, {
                    typeAnnotation: "omit"
                });
                if (!t) return null;
                n = n || t.type, r.push(t);
            }
            const o = i && r.some(t => Ln(i, t.type));
            return new fr(o ? Fn : n, r);
        }
        evaluate(t) {
            let e, n = null, i = 0;
            for (const r of this.args) {
                if (i++, n = r.evaluate(t), n && n instanceof Qn && !n.available && (e || (e = n), 
                n = null, i === this.args.length)) return e;
                if (null !== n) break;
            }
            return n;
        }
        eachChild(t) {
            this.args.forEach(t);
        }
        outputDefined() {
            return this.args.every(t => t.outputDefined());
        }
        serialize() {
            const t = [ "coalesce" ];
            return this.eachChild(e => {
                t.push(e.serialize());
            }), t;
        }
    }
    var pr = fr;
    class mr {
        constructor(t, e) {
            this.type = e.type, this.bindings = [].concat(t), this.result = e;
        }
        evaluate(t) {
            return this.result.evaluate(t);
        }
        eachChild(t) {
            for (const e of this.bindings) t(e[1]);
            t(this.result);
        }
        static parse(t, e) {
            if (t.length < 4) return e.error(`Expected at least 3 arguments, but found ${t.length - 1} instead.`);
            const n = [];
            for (let i = 1; i < t.length - 1; i += 2) {
                const r = t[i];
                if ("string" != typeof r) return e.error(`Expected string, but found ${typeof r} instead.`, i);
                if (/[^a-zA-Z0-9_]/.test(r)) return e.error("Variable names must contain only alphanumeric characters or '_'.", i);
                const o = e.parse(t[i + 1], i + 1);
                if (!o) return null;
                n.push([ r, o ]);
            }
            const i = e.parse(t[t.length - 1], t.length - 1, e.expectedType, n);
            return i ? new mr(n, i) : null;
        }
        outputDefined() {
            return this.result.outputDefined();
        }
        serialize() {
            const t = [ "let" ];
            for (const [e, n] of this.bindings) t.push(e, n.serialize());
            return t.push(this.result.serialize()), t;
        }
    }
    var yr = mr;
    class gr {
        constructor(t, e, n) {
            this.type = t, this.index = e, this.input = n;
        }
        static parse(t, e) {
            if (3 !== t.length) return e.error(`Expected 2 arguments, but found ${t.length - 1} instead.`);
            const n = e.parse(t[1], 1, Mn), i = e.parse(t[2], 2, Rn(e.expectedType || Fn));
            return n && i ? new gr(i.type.itemType, n, i) : null;
        }
        evaluate(t) {
            const e = this.index.evaluate(t), n = this.input.evaluate(t);
            if (e < 0) throw new si(`Array index out of bounds: ${e} < 0.`);
            if (e >= n.length) throw new si(`Array index out of bounds: ${e} > ${n.length - 1}.`);
            if (e !== Math.floor(e)) throw new si(`Array index must be an integer, but found ${e} instead.`);
            return n[e];
        }
        eachChild(t) {
            t(this.index), t(this.input);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            return [ "at", this.index.serialize(), this.input.serialize() ];
        }
    }
    var br = gr;
    class vr {
        constructor(t, e) {
            this.type = In, this.needle = t, this.haystack = e;
        }
        static parse(t, e) {
            if (3 !== t.length) return e.error(`Expected 2 arguments, but found ${t.length - 1} instead.`);
            const n = e.parse(t[1], 1, Fn), i = e.parse(t[2], 2, Fn);
            return n && i ? Hn(n.type, [ In, Pn, Mn, Sn, Fn ]) ? new vr(n, i) : e.error(`Expected first argument to be of type boolean, string, number or null, but found ${Nn(n.type)} instead`) : null;
        }
        evaluate(t) {
            const e = this.needle.evaluate(t), n = this.haystack.evaluate(t);
            if (null == n) return !1;
            if (!Un(e, [ "boolean", "string", "number", "null" ])) throw new si(`Expected first argument to be of type boolean, string, number or null, but found ${Nn(ni(e))} instead.`);
            if (!Un(n, [ "string", "array" ])) throw new si(`Expected second argument to be of type array or string, but found ${Nn(ni(n))} instead.`);
            return n.indexOf(e) >= 0;
        }
        eachChild(t) {
            t(this.needle), t(this.haystack);
        }
        outputDefined() {
            return !0;
        }
        serialize() {
            return [ "in", this.needle.serialize(), this.haystack.serialize() ];
        }
    }
    var xr = vr;
    class wr {
        constructor(t, e, n) {
            this.type = Mn, this.needle = t, this.haystack = e, this.fromIndex = n;
        }
        static parse(t, e) {
            if (t.length <= 2 || t.length >= 5) return e.error(`Expected 3 or 4 arguments, but found ${t.length - 1} instead.`);
            const n = e.parse(t[1], 1, Fn), i = e.parse(t[2], 2, Fn);
            if (!n || !i) return null;
            if (!Hn(n.type, [ In, Pn, Mn, Sn, Fn ])) return e.error(`Expected first argument to be of type boolean, string, number or null, but found ${Nn(n.type)} instead`);
            if (4 === t.length) {
                const r = e.parse(t[3], 3, Mn);
                return r ? new wr(n, i, r) : null;
            }
            return new wr(n, i);
        }
        evaluate(t) {
            const e = this.needle.evaluate(t), n = this.haystack.evaluate(t);
            if (!Un(e, [ "boolean", "string", "number", "null" ])) throw new si(`Expected first argument to be of type boolean, string, number or null, but found ${Nn(ni(e))} instead.`);
            if (!Un(n, [ "string", "array" ])) throw new si(`Expected second argument to be of type array or string, but found ${Nn(ni(n))} instead.`);
            if (this.fromIndex) {
                const i = this.fromIndex.evaluate(t);
                return n.indexOf(e, i);
            }
            return n.indexOf(e);
        }
        eachChild(t) {
            t(this.needle), t(this.haystack), this.fromIndex && t(this.fromIndex);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            if (null != this.fromIndex && void 0 !== this.fromIndex) {
                const t = this.fromIndex.serialize();
                return [ "index-of", this.needle.serialize(), this.haystack.serialize(), t ];
            }
            return [ "index-of", this.needle.serialize(), this.haystack.serialize() ];
        }
    }
    var kr = wr;
    class Ar {
        constructor(t, e, n, i, r, o) {
            this.inputType = t, this.type = e, this.input = n, this.cases = i, this.outputs = r, 
            this.otherwise = o;
        }
        static parse(t, e) {
            if (t.length < 5) return e.error(`Expected at least 4 arguments, but found only ${t.length - 1}.`);
            if (t.length % 2 != 1) return e.error("Expected an even number of arguments.");
            let n, i;
            e.expectedType && "value" !== e.expectedType.kind && (i = e.expectedType);
            const r = {}, o = [];
            for (let s = 2; s < t.length - 1; s += 2) {
                let a = t[s];
                const l = t[s + 1];
                Array.isArray(a) || (a = [ a ]);
                const u = e.concat(s);
                if (0 === a.length) return u.error("Expected at least one branch label.");
                for (const t of a) {
                    if ("number" != typeof t && "string" != typeof t) return u.error("Branch labels must be numbers or strings.");
                    if ("number" == typeof t && Math.abs(t) > Number.MAX_SAFE_INTEGER) return u.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);
                    if ("number" == typeof t && Math.floor(t) !== t) return u.error("Numeric branch labels must be integer values.");
                    if (n) {
                        if (u.checkSubtype(n, ni(t))) return null;
                    } else n = ni(t);
                    if (void 0 !== r[String(t)]) return u.error("Branch labels must be unique.");
                    r[String(t)] = o.length;
                }
                const c = e.parse(l, s, i);
                if (!c) return null;
                i = i || c.type, o.push(c);
            }
            const s = e.parse(t[1], 1, Fn);
            if (!s) return null;
            const a = e.parse(t[t.length - 1], t.length - 1, i);
            return a ? "value" !== s.type.kind && e.concat(1).checkSubtype(n, s.type) ? null : new Ar(n, i, s, r, o, a) : null;
        }
        evaluate(t) {
            const e = this.input.evaluate(t);
            return (ni(e) === this.inputType && this.outputs[this.cases[e]] || this.otherwise).evaluate(t);
        }
        eachChild(t) {
            t(this.input), this.outputs.forEach(t), t(this.otherwise);
        }
        outputDefined() {
            return this.outputs.every(t => t.outputDefined()) && this.otherwise.outputDefined();
        }
        serialize() {
            const t = [ "match", this.input.serialize() ], e = Object.keys(this.cases).sort(), n = [], i = {};
            for (const t of e) {
                const e = i[this.cases[t]];
                void 0 === e ? (i[this.cases[t]] = n.length, n.push([ this.cases[t], [ t ] ])) : n[e][1].push(t);
            }
            const r = t => "number" === this.inputType.kind ? Number(t) : t;
            for (const [e, i] of n) t.push(1 === i.length ? r(i[0]) : i.map(r)), t.push(this.outputs[e].serialize());
            return t.push(this.otherwise.serialize()), t;
        }
    }
    var _r = Ar;
    class Tr {
        constructor(t, e, n) {
            this.type = t, this.branches = e, this.otherwise = n;
        }
        static parse(t, e) {
            if (t.length < 4) return e.error(`Expected at least 3 arguments, but found only ${t.length - 1}.`);
            if (t.length % 2 != 0) return e.error("Expected an odd number of arguments.");
            let n;
            e.expectedType && "value" !== e.expectedType.kind && (n = e.expectedType);
            const i = [];
            for (let r = 1; r < t.length - 1; r += 2) {
                const o = e.parse(t[r], r, In);
                if (!o) return null;
                const s = e.parse(t[r + 1], r + 1, n);
                if (!s) return null;
                i.push([ o, s ]), n = n || s.type;
            }
            const r = e.parse(t[t.length - 1], t.length - 1, n);
            return r ? new Tr(n, i, r) : null;
        }
        evaluate(t) {
            for (const [e, n] of this.branches) if (e.evaluate(t)) return n.evaluate(t);
            return this.otherwise.evaluate(t);
        }
        eachChild(t) {
            for (const [e, n] of this.branches) t(e), t(n);
            t(this.otherwise);
        }
        outputDefined() {
            return this.branches.every(([t, e]) => e.outputDefined()) && this.otherwise.outputDefined();
        }
        serialize() {
            const t = [ "case" ];
            return this.eachChild(e => {
                t.push(e.serialize());
            }), t;
        }
    }
    var Sr = Tr;
    class Mr {
        constructor(t, e, n, i) {
            this.type = t, this.input = e, this.beginIndex = n, this.endIndex = i;
        }
        static parse(t, e) {
            if (t.length <= 2 || t.length >= 5) return e.error(`Expected 3 or 4 arguments, but found ${t.length - 1} instead.`);
            const n = e.parse(t[1], 1, Fn), i = e.parse(t[2], 2, Mn);
            if (!n || !i) return null;
            if (!Hn(n.type, [ Rn(Fn), Pn, Fn ])) return e.error(`Expected first argument to be of type array or string, but found ${Nn(n.type)} instead`);
            if (4 === t.length) {
                const r = e.parse(t[3], 3, Mn);
                return r ? new Mr(n.type, n, i, r) : null;
            }
            return new Mr(n.type, n, i);
        }
        evaluate(t) {
            const e = this.input.evaluate(t), n = this.beginIndex.evaluate(t);
            if (!Un(e, [ "string", "array" ])) throw new si(`Expected first argument to be of type array or string, but found ${Nn(ni(e))} instead.`);
            if (this.endIndex) {
                const i = this.endIndex.evaluate(t);
                return e.slice(n, i);
            }
            return e.slice(n);
        }
        eachChild(t) {
            t(this.input), t(this.beginIndex), this.endIndex && t(this.endIndex);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            if (null != this.endIndex && void 0 !== this.endIndex) {
                const t = this.endIndex.serialize();
                return [ "slice", this.input.serialize(), this.beginIndex.serialize(), t ];
            }
            return [ "slice", this.input.serialize(), this.beginIndex.serialize() ];
        }
    }
    var Pr = Mr;
    function Ir(t, e) {
        return "==" === t || "!=" === t ? "boolean" === e.kind || "string" === e.kind || "number" === e.kind || "null" === e.kind || "value" === e.kind : "string" === e.kind || "number" === e.kind || "value" === e.kind;
    }
    function jr(t, e, n, i) {
        return 0 === i.compare(e, n);
    }
    function zr(t, e, n) {
        const i = "==" !== t && "!=" !== t;
        return class r {
            constructor(t, e, n) {
                this.type = In, this.lhs = t, this.rhs = e, this.collator = n, this.hasUntypedArgument = "value" === t.type.kind || "value" === e.type.kind;
            }
            static parse(t, e) {
                if (3 !== t.length && 4 !== t.length) return e.error("Expected two or three arguments.");
                const n = t[0];
                let o = e.parse(t[1], 1, Fn);
                if (!o) return null;
                if (!Ir(n, o.type)) return e.concat(1).error(`"${n}" comparisons are not supported for type '${Nn(o.type)}'.`);
                let s = e.parse(t[2], 2, Fn);
                if (!s) return null;
                if (!Ir(n, s.type)) return e.concat(2).error(`"${n}" comparisons are not supported for type '${Nn(s.type)}'.`);
                if (o.type.kind !== s.type.kind && "value" !== o.type.kind && "value" !== s.type.kind) return e.error(`Cannot compare types '${Nn(o.type)}' and '${Nn(s.type)}'.`);
                i && ("value" === o.type.kind && "value" !== s.type.kind ? o = new ui(s.type, [ o ]) : "value" !== o.type.kind && "value" === s.type.kind && (s = new ui(o.type, [ s ])));
                let a = null;
                if (4 === t.length) {
                    if ("string" !== o.type.kind && "string" !== s.type.kind && "value" !== o.type.kind && "value" !== s.type.kind) return e.error("Cannot use collator to compare non-string types.");
                    if (a = e.parse(t[3], 3, On), !a) return null;
                }
                return new r(o, s, a);
            }
            evaluate(r) {
                const o = this.lhs.evaluate(r), s = this.rhs.evaluate(r);
                if (i && this.hasUntypedArgument) {
                    const e = ni(o), n = ni(s);
                    if (e.kind !== n.kind || "string" !== e.kind && "number" !== e.kind) throw new si(`Expected arguments for "${t}" to be (string, string) or (number, number), but found (${e.kind}, ${n.kind}) instead.`);
                }
                if (this.collator && !i && this.hasUntypedArgument) {
                    const t = ni(o), n = ni(s);
                    if ("string" !== t.kind || "string" !== n.kind) return e(r, o, s);
                }
                return this.collator ? n(r, o, s, this.collator.evaluate(r)) : e(r, o, s);
            }
            eachChild(t) {
                t(this.lhs), t(this.rhs), this.collator && t(this.collator);
            }
            outputDefined() {
                return !0;
            }
            serialize() {
                const e = [ t ];
                return this.eachChild(t => {
                    e.push(t.serialize());
                }), e;
            }
        };
    }
    const Fr = zr("==", (function(t, e, n) {
        return e === n;
    }), jr), Or = zr("!=", (function(t, e, n) {
        return e !== n;
    }), (function(t, e, n, i) {
        return !jr(0, e, n, i);
    })), Cr = zr("<", (function(t, e, n) {
        return e < n;
    }), (function(t, e, n, i) {
        return i.compare(e, n) < 0;
    })), Er = zr(">", (function(t, e, n) {
        return e > n;
    }), (function(t, e, n, i) {
        return i.compare(e, n) > 0;
    })), Rr = zr("<=", (function(t, e, n) {
        return e <= n;
    }), (function(t, e, n, i) {
        return i.compare(e, n) <= 0;
    })), Nr = zr(">=", (function(t, e, n) {
        return e >= n;
    }), (function(t, e, n, i) {
        return i.compare(e, n) >= 0;
    }));
    class Dr {
        constructor(t, e, n, i, r, o) {
            this.type = Pn, this.number = t, this.locale = e, this.currency = n, this.unit = i, 
            this.minFractionDigits = r, this.maxFractionDigits = o;
        }
        static parse(t, e) {
            if (3 !== t.length) return e.error("Expected two arguments.");
            const n = e.parse(t[1], 1, Mn);
            if (!n) return null;
            const i = t[2];
            if ("object" != typeof i || Array.isArray(i)) return e.error("NumberFormat options argument must be an object.");
            let r = null;
            if (i.locale && (r = e.parse(i.locale, 1, Pn), !r)) return null;
            let o = null;
            if (i.currency && (o = e.parse(i.currency, 1, Pn), !o)) return null;
            let s = null;
            if (i.unit && (s = e.parse(i.unit, 1, Pn), !s)) return null;
            let a = null;
            if (i["min-fraction-digits"] && (a = e.parse(i["min-fraction-digits"], 1, Mn), !a)) return null;
            let l = null;
            return i["max-fraction-digits"] && (l = e.parse(i["max-fraction-digits"], 1, Mn), 
            !l) ? null : new Dr(n, r, o, s, a, l);
        }
        evaluate(t) {
            return new Intl.NumberFormat(this.locale ? this.locale.evaluate(t) : [], {
                style: (this.currency ? "currency" : this.unit && "unit") || "decimal",
                currency: this.currency ? this.currency.evaluate(t) : void 0,
                unit: this.unit ? this.unit.evaluate(t) : void 0,
                minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(t) : void 0,
                maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(t) : void 0
            }).format(this.number.evaluate(t));
        }
        eachChild(t) {
            t(this.number), this.locale && t(this.locale), this.currency && t(this.currency), 
            this.unit && t(this.unit), this.minFractionDigits && t(this.minFractionDigits), 
            this.maxFractionDigits && t(this.maxFractionDigits);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            const t = {};
            return this.locale && (t.locale = this.locale.serialize()), this.currency && (t.currency = this.currency.serialize()), 
            this.unit && (t.unit = this.unit.serialize()), this.minFractionDigits && (t["min-fraction-digits"] = this.minFractionDigits.serialize()), 
            this.maxFractionDigits && (t["max-fraction-digits"] = this.maxFractionDigits.serialize()), 
            [ "number-format", this.number.serialize(), t ];
        }
    }
    class Lr {
        constructor(t) {
            this.type = Mn, this.input = t;
        }
        static parse(t, e) {
            if (2 !== t.length) return e.error(`Expected 1 argument, but found ${t.length - 1} instead.`);
            const n = e.parse(t[1], 1);
            return n ? "array" !== n.type.kind && "string" !== n.type.kind && "value" !== n.type.kind ? e.error(`Expected argument of type string or array, but found ${Nn(n.type)} instead.`) : new Lr(n) : null;
        }
        evaluate(t) {
            const e = this.input.evaluate(t);
            if ("string" == typeof e) return e.length;
            if (Array.isArray(e)) return e.length;
            throw new si(`Expected value to be of type string or array, but found ${Nn(ni(e))} instead.`);
        }
        eachChild(t) {
            t(this.input);
        }
        outputDefined() {
            return !1;
        }
        serialize() {
            const t = [ "length" ];
            return this.eachChild(e => {
                t.push(e.serialize());
            }), t;
        }
    }
    const Hr = {
        "==": Fr,
        "!=": Or,
        ">": Er,
        "<": Cr,
        ">=": Nr,
        "<=": Rr,
        array: ui,
        at: br,
        boolean: ui,
        case: Sr,
        coalesce: pr,
        collator: vi,
        format: ci,
        image: hi,
        in: xr,
        "index-of": kr,
        interpolate: dr,
        "interpolate-hcl": dr,
        "interpolate-lab": dr,
        length: Lr,
        let: yr,
        literal: oi,
        match: _r,
        number: ui,
        "number-format": Dr,
        object: ui,
        slice: Pr,
        step: Wi,
        string: ui,
        "to-boolean": pi,
        "to-color": pi,
        "to-number": pi,
        "to-string": pi,
        var: Ui,
        within: Ri
    };
    function Ur(t, [e, n, i, r]) {
        e = e.evaluate(t), n = n.evaluate(t), i = i.evaluate(t);
        const o = r ? r.evaluate(t) : 1, s = ti(e, n, i, o);
        if (s) throw new si(s);
        return new Xn(e / 255 * o, n / 255 * o, i / 255 * o, o);
    }
    function qr(t, e) {
        return t in e;
    }
    function Vr(t, e) {
        const n = e[t];
        return void 0 === n ? null : n;
    }
    function $r(t) {
        return {
            type: t
        };
    }
    bi.register(Hr, {
        error: [ {
            kind: "error"
        }, [ Pn ], (t, [e]) => {
            throw new si(e.evaluate(t));
        } ],
        typeof: [ Pn, [ Fn ], (t, [e]) => Nn(ni(e.evaluate(t))) ],
        "to-rgba": [ Rn(Mn, 4), [ jn ], (t, [e]) => e.evaluate(t).toArray() ],
        rgb: [ jn, [ Mn, Mn, Mn ], Ur ],
        rgba: [ jn, [ Mn, Mn, Mn, Mn ], Ur ],
        has: {
            type: In,
            overloads: [ [ [ Pn ], (t, [e]) => qr(e.evaluate(t), t.properties()) ], [ [ Pn, zn ], (t, [e, n]) => qr(e.evaluate(t), n.evaluate(t)) ] ]
        },
        get: {
            type: Fn,
            overloads: [ [ [ Pn ], (t, [e]) => Vr(e.evaluate(t), t.properties()) ], [ [ Pn, zn ], (t, [e, n]) => Vr(e.evaluate(t), n.evaluate(t)) ] ]
        },
        "feature-state": [ Fn, [ Pn ], (t, [e]) => Vr(e.evaluate(t), t.featureState || {}) ],
        properties: [ zn, [], t => t.properties() ],
        "geometry-type": [ Pn, [], t => t.geometryType() ],
        id: [ Fn, [], t => t.id() ],
        zoom: [ Mn, [], t => t.globals.zoom ],
        pitch: [ Mn, [], t => t.globals.pitch || 0 ],
        "distance-from-center": [ Mn, [], t => t.distanceFromCenter() ],
        "heatmap-density": [ Mn, [], t => t.globals.heatmapDensity || 0 ],
        "line-progress": [ Mn, [], t => t.globals.lineProgress || 0 ],
        "sky-radial-progress": [ Mn, [], t => t.globals.skyRadialProgress || 0 ],
        accumulated: [ Fn, [], t => void 0 === t.globals.accumulated ? null : t.globals.accumulated ],
        "+": [ Mn, $r(Mn), (t, e) => {
            let n = 0;
            for (const i of e) n += i.evaluate(t);
            return n;
        } ],
        "*": [ Mn, $r(Mn), (t, e) => {
            let n = 1;
            for (const i of e) n *= i.evaluate(t);
            return n;
        } ],
        "-": {
            type: Mn,
            overloads: [ [ [ Mn, Mn ], (t, [e, n]) => e.evaluate(t) - n.evaluate(t) ], [ [ Mn ], (t, [e]) => -e.evaluate(t) ] ]
        },
        "/": [ Mn, [ Mn, Mn ], (t, [e, n]) => e.evaluate(t) / n.evaluate(t) ],
        "%": [ Mn, [ Mn, Mn ], (t, [e, n]) => e.evaluate(t) % n.evaluate(t) ],
        ln2: [ Mn, [], () => Math.LN2 ],
        pi: [ Mn, [], () => Math.PI ],
        e: [ Mn, [], () => Math.E ],
        "^": [ Mn, [ Mn, Mn ], (t, [e, n]) => Math.pow(e.evaluate(t), n.evaluate(t)) ],
        sqrt: [ Mn, [ Mn ], (t, [e]) => Math.sqrt(e.evaluate(t)) ],
        log10: [ Mn, [ Mn ], (t, [e]) => Math.log(e.evaluate(t)) / Math.LN10 ],
        ln: [ Mn, [ Mn ], (t, [e]) => Math.log(e.evaluate(t)) ],
        log2: [ Mn, [ Mn ], (t, [e]) => Math.log(e.evaluate(t)) / Math.LN2 ],
        sin: [ Mn, [ Mn ], (t, [e]) => Math.sin(e.evaluate(t)) ],
        cos: [ Mn, [ Mn ], (t, [e]) => Math.cos(e.evaluate(t)) ],
        tan: [ Mn, [ Mn ], (t, [e]) => Math.tan(e.evaluate(t)) ],
        asin: [ Mn, [ Mn ], (t, [e]) => Math.asin(e.evaluate(t)) ],
        acos: [ Mn, [ Mn ], (t, [e]) => Math.acos(e.evaluate(t)) ],
        atan: [ Mn, [ Mn ], (t, [e]) => Math.atan(e.evaluate(t)) ],
        min: [ Mn, $r(Mn), (t, e) => Math.min(...e.map(e => e.evaluate(t))) ],
        max: [ Mn, $r(Mn), (t, e) => Math.max(...e.map(e => e.evaluate(t))) ],
        abs: [ Mn, [ Mn ], (t, [e]) => Math.abs(e.evaluate(t)) ],
        round: [ Mn, [ Mn ], (t, [e]) => {
            const n = e.evaluate(t);
            return n < 0 ? -Math.round(-n) : Math.round(n);
        } ],
        floor: [ Mn, [ Mn ], (t, [e]) => Math.floor(e.evaluate(t)) ],
        ceil: [ Mn, [ Mn ], (t, [e]) => Math.ceil(e.evaluate(t)) ],
        "filter-==": [ In, [ Pn, Fn ], (t, [e, n]) => t.properties()[e.value] === n.value ],
        "filter-id-==": [ In, [ Fn ], (t, [e]) => t.id() === e.value ],
        "filter-type-==": [ In, [ Pn ], (t, [e]) => t.geometryType() === e.value ],
        "filter-<": [ In, [ Pn, Fn ], (t, [e, n]) => {
            const i = t.properties()[e.value], r = n.value;
            return typeof i == typeof r && i < r;
        } ],
        "filter-id-<": [ In, [ Fn ], (t, [e]) => {
            const n = t.id(), i = e.value;
            return typeof n == typeof i && n < i;
        } ],
        "filter->": [ In, [ Pn, Fn ], (t, [e, n]) => {
            const i = t.properties()[e.value], r = n.value;
            return typeof i == typeof r && i > r;
        } ],
        "filter-id->": [ In, [ Fn ], (t, [e]) => {
            const n = t.id(), i = e.value;
            return typeof n == typeof i && n > i;
        } ],
        "filter-<=": [ In, [ Pn, Fn ], (t, [e, n]) => {
            const i = t.properties()[e.value], r = n.value;
            return typeof i == typeof r && i <= r;
        } ],
        "filter-id-<=": [ In, [ Fn ], (t, [e]) => {
            const n = t.id(), i = e.value;
            return typeof n == typeof i && n <= i;
        } ],
        "filter->=": [ In, [ Pn, Fn ], (t, [e, n]) => {
            const i = t.properties()[e.value], r = n.value;
            return typeof i == typeof r && i >= r;
        } ],
        "filter-id->=": [ In, [ Fn ], (t, [e]) => {
            const n = t.id(), i = e.value;
            return typeof n == typeof i && n >= i;
        } ],
        "filter-has": [ In, [ Fn ], (t, [e]) => e.value in t.properties() ],
        "filter-has-id": [ In, [], t => null !== t.id() && void 0 !== t.id() ],
        "filter-type-in": [ In, [ Rn(Pn) ], (t, [e]) => e.value.indexOf(t.geometryType()) >= 0 ],
        "filter-id-in": [ In, [ Rn(Fn) ], (t, [e]) => e.value.indexOf(t.id()) >= 0 ],
        "filter-in-small": [ In, [ Pn, Rn(Fn) ], (t, [e, n]) => n.value.indexOf(t.properties()[e.value]) >= 0 ],
        "filter-in-large": [ In, [ Pn, Rn(Fn) ], (t, [e, n]) => function(t, e, n, i) {
            for (;n <= i; ) {
                const r = n + i >> 1;
                if (e[r] === t) return !0;
                e[r] > t ? i = r - 1 : n = r + 1;
            }
            return !1;
        }(t.properties()[e.value], n.value, 0, n.value.length - 1) ],
        all: {
            type: In,
            overloads: [ [ [ In, In ], (t, [e, n]) => e.evaluate(t) && n.evaluate(t) ], [ $r(In), (t, e) => {
                for (const n of e) if (!n.evaluate(t)) return !1;
                return !0;
            } ] ]
        },
        any: {
            type: In,
            overloads: [ [ [ In, In ], (t, [e, n]) => e.evaluate(t) || n.evaluate(t) ], [ $r(In), (t, e) => {
                for (const n of e) if (n.evaluate(t)) return !0;
                return !1;
            } ] ]
        },
        "!": [ In, [ In ], (t, [e]) => !e.evaluate(t) ],
        "is-supported-script": [ In, [ Pn ], (t, [e]) => {
            const n = t.globals && t.globals.isSupportedScript;
            return !n || n(e.evaluate(t));
        } ],
        upcase: [ Pn, [ Pn ], (t, [e]) => e.evaluate(t).toUpperCase() ],
        downcase: [ Pn, [ Pn ], (t, [e]) => e.evaluate(t).toLowerCase() ],
        concat: [ Pn, $r(Fn), (t, e) => e.map(e => ii(e.evaluate(t))).join("") ],
        "resolved-locale": [ Pn, [ On ], (t, [e]) => e.evaluate(t).resolvedLocale() ]
    });
    var Gr = Hr;
    function Wr(t) {
        return {
            result: "success",
            value: t
        };
    }
    function Br(t) {
        return {
            result: "error",
            value: t
        };
    }
    function Jr(t) {
        return !!t.expression && t.expression.interpolated;
    }
    function Xr(t) {
        return t instanceof Number ? "number" : t instanceof String ? "string" : t instanceof Boolean ? "boolean" : Array.isArray(t) ? "array" : null === t ? "null" : typeof t;
    }
    function Yr(t) {
        return "object" == typeof t && null !== t && !Array.isArray(t);
    }
    function Zr(t) {
        return t;
    }
    function Kr(t, e, n) {
        return void 0 !== t ? t : void 0 !== e ? e : void 0 !== n ? n : void 0;
    }
    function Qr(t, e, n, i, r) {
        return Kr(typeof n === r ? i[n] : void 0, t.default, e.default);
    }
    function to(t, e, n) {
        if ("number" !== Xr(n)) return Kr(t.default, e.default);
        const i = t.stops.length;
        if (1 === i) return t.stops[0][1];
        if (n <= t.stops[0][0]) return t.stops[0][1];
        if (n >= t.stops[i - 1][0]) return t.stops[i - 1][1];
        const r = $i(t.stops.map(t => t[0]), n);
        return t.stops[r][1];
    }
    function eo(t, e, n) {
        const i = void 0 !== t.base ? t.base : 1;
        if ("number" !== Xr(n)) return Kr(t.default, e.default);
        const r = t.stops.length;
        if (1 === r) return t.stops[0][1];
        if (n <= t.stops[0][0]) return t.stops[0][1];
        if (n >= t.stops[r - 1][0]) return t.stops[r - 1][1];
        const o = $i(t.stops.map(t => t[0]), n), s = function(t, e, n, i) {
            const r = i - n, o = t - n;
            return 0 === r ? 0 : 1 === e ? o / r : (Math.pow(e, o) - 1) / (Math.pow(e, r) - 1);
        }(n, i, t.stops[o][0], t.stops[o + 1][0]), a = t.stops[o][1], l = t.stops[o + 1][1];
        let u = Yi[e.type] || Zr;
        if (t.colorSpace && "rgb" !== t.colorSpace) {
            const e = ur[t.colorSpace];
            u = (t, n) => e.reverse(e.interpolate(e.forward(t), e.forward(n), s));
        }
        return "function" == typeof a.evaluate ? {
            evaluate(...t) {
                const e = a.evaluate.apply(void 0, t), n = l.evaluate.apply(void 0, t);
                if (void 0 !== e && void 0 !== n) return u(e, n, s);
            }
        } : u(a, l, s);
    }
    function no(t, e, n) {
        return "color" === e.type ? n = Xn.parse(n) : "formatted" === e.type ? n = Kn.fromString(n.toString()) : "resolvedImage" === e.type ? n = Qn.fromString(n.toString()) : Xr(n) === e.type || "enum" === e.type && e.values[n] || (n = void 0), 
        Kr(n, t.default, e.default);
    }
    class io {
        constructor(t, e) {
            this.expression = t, this.H = {}, this.U = new yi, this.q = e ? function(t) {
                return "color" === t.type && (Yr(t.default) || Array.isArray(t.default)) ? new Xn(0, 0, 0, 0) : "color" === t.type ? Xn.parse(t.default) || null : void 0 === t.default ? null : t.default;
            }(e) : null, this.V = e && "enum" === e.type ? e.values : null;
        }
        evaluateWithoutErrorHandling(t, e, n, i, r, o, s, a) {
            return this.U.globals = t, this.U.feature = e, this.U.featureState = n, this.U.canonical = i || null, 
            this.U.availableImages = r || null, this.U.formattedSection = o, this.U.featureTileCoord = s || null, 
            this.U.featureDistanceData = a || null, this.expression.evaluate(this.U);
        }
        evaluate(t, e, n, i, r, o, s, a) {
            this.U.globals = t, this.U.feature = e || null, this.U.featureState = n || null, 
            this.U.canonical = i || null, this.U.availableImages = r || null, this.U.formattedSection = o || null, 
            this.U.featureTileCoord = s || null, this.U.featureDistanceData = a || null;
            try {
                const t = this.expression.evaluate(this.U);
                if (null == t || "number" == typeof t && t != t) return this.q;
                if (this.V && !(t in this.V)) throw new si(`Expected value to be one of ${Object.keys(this.V).map(t => JSON.stringify(t)).join(", ")}, but found ${JSON.stringify(t)} instead.`);
                return t;
            } catch (t) {
                return this.H[t.message] || (this.H[t.message] = !0, "undefined" != typeof console && console.warn(t.message)), 
                this.q;
            }
        }
    }
    function ro(t) {
        return Array.isArray(t) && t.length > 0 && "string" == typeof t[0] && t[0] in Gr;
    }
    function oo(t, e) {
        const n = new Vi(Gr, [], e ? function(t) {
            const e = {
                color: jn,
                string: Pn,
                number: Mn,
                enum: Pn,
                boolean: In,
                formatted: Cn,
                resolvedImage: En
            };
            return "array" === t.type ? Rn(e[t.value] || Fn, t.length) : e[t.type];
        }(e) : void 0), i = n.parse(t, void 0, void 0, void 0, e && "string" === e.type ? {
            typeAnnotation: "coerce"
        } : void 0);
        return i ? Wr(new io(i, e)) : Br(n.errors);
    }
    class so {
        constructor(t, e) {
            this.kind = t, this.G = e, this.isStateDependent = "constant" !== t && !Di(e.expression);
        }
        evaluateWithoutErrorHandling(t, e, n, i, r, o) {
            return this.G.evaluateWithoutErrorHandling(t, e, n, i, r, o);
        }
        evaluate(t, e, n, i, r, o) {
            return this.G.evaluate(t, e, n, i, r, o);
        }
    }
    class ao {
        constructor(t, e, n, i) {
            this.kind = t, this.zoomStops = n, this.G = e, this.isStateDependent = "camera" !== t && !Di(e.expression), 
            this.interpolationType = i;
        }
        evaluateWithoutErrorHandling(t, e, n, i, r, o) {
            return this.G.evaluateWithoutErrorHandling(t, e, n, i, r, o);
        }
        evaluate(t, e, n, i, r, o) {
            return this.G.evaluate(t, e, n, i, r, o);
        }
        interpolationFactor(t, e, n) {
            return this.interpolationType ? dr.interpolationFactor(this.interpolationType, t, e, n) : 0;
        }
    }
    function lo(t, e) {
        if ("error" === (t = oo(t, e)).result) return t;
        const n = t.value.expression, i = Ni(n);
        if (!i && !function(t) {
            return "data-driven" === t["property-type"];
        }(e)) return Br([ new An("", "data expressions not supported") ]);
        const r = Li(n, [ "zoom", "pitch", "distance-from-center" ]);
        if (!r && !function(t) {
            return !!t.expression && t.expression.parameters.indexOf("zoom") > -1;
        }(e)) return Br([ new An("", "zoom expressions not supported") ]);
        const o = function t(e) {
            let n = null;
            if (e instanceof yr) n = t(e.result); else if (e instanceof pr) {
                for (const i of e.args) if (n = t(i), n) break;
            } else (e instanceof Wi || e instanceof dr) && e.input instanceof bi && "zoom" === e.input.name && (n = e);
            return n instanceof An || e.eachChild(e => {
                const i = t(e);
                i instanceof An ? n = i : !n && i ? n = new An("", '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.') : n && i && n !== i && (n = new An("", 'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.'));
            }), n;
        }(n);
        if (!o && !r) return Br([ new An("", '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.') ]);
        if (o instanceof An) return Br([ o ]);
        if (o instanceof dr && !Jr(e)) return Br([ new An("", '"interpolate" expressions cannot be used with this property') ]);
        if (!o) return Wr(new so(i ? "constant" : "source", t.value));
        const s = o instanceof dr ? o.interpolation : void 0;
        return Wr(new ao(i ? "camera" : "composite", t.value, o.labels, s));
    }
    class uo {
        constructor(t, e) {
            this.W = t, this.B = e, wn(this, function t(e, n) {
                const i = "color" === n.type, r = e.stops && "object" == typeof e.stops[0][0], o = r || !(r || void 0 !== e.property), s = e.type || (Jr(n) ? "exponential" : "interval");
                if (i && ((e = wn({}, e)).stops && (e.stops = e.stops.map(t => [ t[0], Xn.parse(t[1]) ])), 
                e.default = Xn.parse(e.default ? e.default : n.default)), e.colorSpace && "rgb" !== e.colorSpace && !ur[e.colorSpace]) throw new Error("Unknown color space: " + e.colorSpace);
                let a, l, u;
                if ("exponential" === s) a = eo; else if ("interval" === s) a = to; else if ("categorical" === s) {
                    a = Qr, l = Object.create(null);
                    for (const t of e.stops) l[t[0]] = t[1];
                    u = typeof e.stops[0][0];
                } else {
                    if ("identity" !== s) throw new Error(`Unknown function type "${s}"`);
                    a = no;
                }
                if (r) {
                    const i = {}, r = [];
                    for (let t = 0; t < e.stops.length; t++) {
                        const n = e.stops[t], o = n[0].zoom;
                        void 0 === i[o] && (i[o] = {
                            zoom: o,
                            type: e.type,
                            property: e.property,
                            default: e.default,
                            stops: []
                        }, r.push(o)), i[o].stops.push([ n[0].value, n[1] ]);
                    }
                    const o = [];
                    for (const e of r) o.push([ i[e].zoom, t(i[e], n) ]);
                    const s = {
                        name: "linear"
                    };
                    return {
                        kind: "composite",
                        interpolationType: s,
                        interpolationFactor: dr.interpolationFactor.bind(void 0, s),
                        zoomStops: o.map(t => t[0]),
                        evaluate: ({zoom: t}, i) => eo({
                            stops: o,
                            base: e.base
                        }, n, t).evaluate(t, i)
                    };
                }
                if (o) {
                    const t = "exponential" === s ? {
                        name: "exponential",
                        base: void 0 !== e.base ? e.base : 1
                    } : null;
                    return {
                        kind: "camera",
                        interpolationType: t,
                        interpolationFactor: dr.interpolationFactor.bind(void 0, t),
                        zoomStops: e.stops.map(t => t[0]),
                        evaluate: ({zoom: t}) => a(e, n, t, l, u)
                    };
                }
                return {
                    kind: "source",
                    evaluate(t, i) {
                        const r = i && i.properties ? i.properties[e.property] : void 0;
                        return void 0 === r ? Kr(e.default, n.default) : a(e, n, r, l, u);
                    }
                };
            }(this.W, this.B));
        }
        static deserialize(t) {
            return new uo(t.W, t.B);
        }
        static serialize(t) {
            return {
                W: t.W,
                B: t.B
            };
        }
    }
    function co(t) {
        if (Array.isArray(t)) return t.map(co);
        if (t instanceof Object && !(t instanceof Number || t instanceof String || t instanceof Boolean)) {
            const e = {};
            for (const n in t) e[n] = co(t[n]);
            return e;
        }
        return function(t) {
            return t instanceof Number || t instanceof String || t instanceof Boolean ? t.valueOf() : t;
        }(t);
    }
    function ho(t) {
        if (!0 === t || !1 === t) return !0;
        if (!Array.isArray(t) || 0 === t.length) return !1;
        switch (t[0]) {
          case "has":
            return t.length >= 2 && "$id" !== t[1] && "$type" !== t[1];

          case "in":
            return t.length >= 3 && ("string" != typeof t[1] || Array.isArray(t[2]));

          case "!in":
          case "!has":
          case "none":
            return !1;

          case "==":
          case "!=":
          case ">":
          case ">=":
          case "<":
          case "<=":
            return 3 !== t.length || Array.isArray(t[1]) || Array.isArray(t[2]);

          case "any":
          case "all":
            for (const e of t.slice(1)) if (!ho(e) && "boolean" != typeof e) return !1;
            return !0;

          default:
            return !0;
        }
    }
    function fo(t) {
        if (!Array.isArray(t)) return !1;
        if (function(t) {
            return "pitch" === t || "distance-from-center" === t;
        }(t[0])) return !0;
        for (let e = 1; e < t.length; e++) if (fo(t[e])) return !0;
        return !1;
    }
    const po = new Set([ "in", "==", "!=", ">", ">=", "<", "<=", "to-boolean" ]);
    function mo(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }
    function yo(t) {
        if (!t) return !0;
        const e = t[0];
        return t.length <= 1 ? "any" !== e : "==" === e ? go(t[1], t[2], "==") : "!=" === e ? xo(go(t[1], t[2], "==")) : "<" === e || ">" === e || "<=" === e || ">=" === e ? go(t[1], t[2], e) : "any" === e ? (n = t.slice(1), 
        [ "any" ].concat(n.map(yo))) : "all" === e ? [ "all" ].concat(t.slice(1).map(yo)) : "none" === e ? [ "all" ].concat(t.slice(1).map(yo).map(xo)) : "in" === e ? bo(t[1], t.slice(2)) : "!in" === e ? xo(bo(t[1], t.slice(2))) : "has" === e ? vo(t[1]) : "!has" === e ? xo(vo(t[1])) : "within" !== e || t;
        var n;
    }
    function go(t, e, n) {
        switch (t) {
          case "$type":
            return [ "filter-type-" + n, e ];

          case "$id":
            return [ "filter-id-" + n, e ];

          default:
            return [ "filter-" + n, t, e ];
        }
    }
    function bo(t, e) {
        if (0 === e.length) return !1;
        switch (t) {
          case "$type":
            return [ "filter-type-in", [ "literal", e ] ];

          case "$id":
            return [ "filter-id-in", [ "literal", e ] ];

          default:
            return e.length > 200 && !e.some(t => typeof t != typeof e[0]) ? [ "filter-in-large", t, [ "literal", e.sort(mo) ] ] : [ "filter-in-small", t, [ "literal", e ] ];
        }
    }
    function vo(t) {
        switch (t) {
          case "$type":
            return !0;

          case "$id":
            return [ "filter-has-id" ];

          default:
            return [ "filter-has", t ];
        }
    }
    function xo(t) {
        return [ "!", t ];
    }
    !function(t) {
        var e = function() {
            var t = function(t, e, n, i) {
                for (n = n || {}, i = t.length; i--; n[t[i]] = e) ;
                return n;
            }, e = [ 1, 12 ], n = [ 1, 13 ], i = [ 1, 9 ], r = [ 1, 10 ], o = [ 1, 11 ], s = [ 1, 14 ], a = [ 1, 15 ], l = [ 14, 18, 22, 24 ], u = [ 18, 22 ], c = [ 22, 24 ], h = {
                trace: function() {},
                yy: {},
                symbols_: {
                    error: 2,
                    JSONString: 3,
                    STRING: 4,
                    JSONNumber: 5,
                    NUMBER: 6,
                    JSONNullLiteral: 7,
                    NULL: 8,
                    JSONBooleanLiteral: 9,
                    TRUE: 10,
                    FALSE: 11,
                    JSONText: 12,
                    JSONValue: 13,
                    EOF: 14,
                    JSONObject: 15,
                    JSONArray: 16,
                    "{": 17,
                    "}": 18,
                    JSONMemberList: 19,
                    JSONMember: 20,
                    ":": 21,
                    ",": 22,
                    "[": 23,
                    "]": 24,
                    JSONElementList: 25,
                    $accept: 0,
                    $end: 1
                },
                terminals_: {
                    2: "error",
                    4: "STRING",
                    6: "NUMBER",
                    8: "NULL",
                    10: "TRUE",
                    11: "FALSE",
                    14: "EOF",
                    17: "{",
                    18: "}",
                    21: ":",
                    22: ",",
                    23: "[",
                    24: "]"
                },
                productions_: [ 0, [ 3, 1 ], [ 5, 1 ], [ 7, 1 ], [ 9, 1 ], [ 9, 1 ], [ 12, 2 ], [ 13, 1 ], [ 13, 1 ], [ 13, 1 ], [ 13, 1 ], [ 13, 1 ], [ 13, 1 ], [ 15, 2 ], [ 15, 3 ], [ 20, 3 ], [ 19, 1 ], [ 19, 3 ], [ 16, 2 ], [ 16, 3 ], [ 25, 1 ], [ 25, 3 ] ],
                performAction: function(t, e, n, i, r, o, s) {
                    var a = o.length - 1;
                    switch (r) {
                      case 1:
                        this.$ = new String(t.replace(/\\(\\|")/g, "$1").replace(/\\n/g, "\n").replace(/\\r/g, "\r").replace(/\\t/g, "\t").replace(/\\v/g, "\v").replace(/\\f/g, "\f").replace(/\\b/g, "\b")), 
                        this.$.J = this.X.first_line;
                        break;

                      case 2:
                        this.$ = new Number(t), this.$.J = this.X.first_line;
                        break;

                      case 3:
                        this.$ = null;
                        break;

                      case 4:
                        this.$ = new Boolean(!0), this.$.J = this.X.first_line;
                        break;

                      case 5:
                        this.$ = new Boolean(!1), this.$.J = this.X.first_line;
                        break;

                      case 6:
                        return this.$ = o[a - 1];

                      case 13:
                        this.$ = {}, Object.defineProperty(this.$, "J", {
                            value: this.X.first_line,
                            enumerable: !1
                        });
                        break;

                      case 14:
                      case 19:
                        this.$ = o[a - 1], Object.defineProperty(this.$, "J", {
                            value: this.X.first_line,
                            enumerable: !1
                        });
                        break;

                      case 15:
                        this.$ = [ o[a - 2], o[a] ];
                        break;

                      case 16:
                        this.$ = {}, this.$[o[a][0]] = o[a][1];
                        break;

                      case 17:
                        this.$ = o[a - 2], o[a - 2][o[a][0]] = o[a][1];
                        break;

                      case 18:
                        this.$ = [], Object.defineProperty(this.$, "J", {
                            value: this.X.first_line,
                            enumerable: !1
                        });
                        break;

                      case 20:
                        this.$ = [ o[a] ];
                        break;

                      case 21:
                        this.$ = o[a - 2], o[a - 2].push(o[a]);
                    }
                },
                table: [ {
                    3: 5,
                    4: e,
                    5: 6,
                    6: n,
                    7: 3,
                    8: i,
                    9: 4,
                    10: r,
                    11: o,
                    12: 1,
                    13: 2,
                    15: 7,
                    16: 8,
                    17: s,
                    23: a
                }, {
                    1: [ 3 ]
                }, {
                    14: [ 1, 16 ]
                }, t(l, [ 2, 7 ]), t(l, [ 2, 8 ]), t(l, [ 2, 9 ]), t(l, [ 2, 10 ]), t(l, [ 2, 11 ]), t(l, [ 2, 12 ]), t(l, [ 2, 3 ]), t(l, [ 2, 4 ]), t(l, [ 2, 5 ]), t([ 14, 18, 21, 22, 24 ], [ 2, 1 ]), t(l, [ 2, 2 ]), {
                    3: 20,
                    4: e,
                    18: [ 1, 17 ],
                    19: 18,
                    20: 19
                }, {
                    3: 5,
                    4: e,
                    5: 6,
                    6: n,
                    7: 3,
                    8: i,
                    9: 4,
                    10: r,
                    11: o,
                    13: 23,
                    15: 7,
                    16: 8,
                    17: s,
                    23: a,
                    24: [ 1, 21 ],
                    25: 22
                }, {
                    1: [ 2, 6 ]
                }, t(l, [ 2, 13 ]), {
                    18: [ 1, 24 ],
                    22: [ 1, 25 ]
                }, t(u, [ 2, 16 ]), {
                    21: [ 1, 26 ]
                }, t(l, [ 2, 18 ]), {
                    22: [ 1, 28 ],
                    24: [ 1, 27 ]
                }, t(c, [ 2, 20 ]), t(l, [ 2, 14 ]), {
                    3: 20,
                    4: e,
                    20: 29
                }, {
                    3: 5,
                    4: e,
                    5: 6,
                    6: n,
                    7: 3,
                    8: i,
                    9: 4,
                    10: r,
                    11: o,
                    13: 30,
                    15: 7,
                    16: 8,
                    17: s,
                    23: a
                }, t(l, [ 2, 19 ]), {
                    3: 5,
                    4: e,
                    5: 6,
                    6: n,
                    7: 3,
                    8: i,
                    9: 4,
                    10: r,
                    11: o,
                    13: 31,
                    15: 7,
                    16: 8,
                    17: s,
                    23: a
                }, t(u, [ 2, 17 ]), t(u, [ 2, 15 ]), t(c, [ 2, 21 ]) ],
                defaultActions: {
                    16: [ 2, 6 ]
                },
                parseError: function(t, e) {
                    if (!e.recoverable) throw new Error(t);
                    this.trace(t);
                },
                parse: function(t) {
                    var e = this, n = [ 0 ], i = [ null ], r = [], o = this.table, s = "", a = 0, l = 0, u = 2, c = 1, h = r.slice.call(arguments, 1), d = Object.create(this.lexer), f = {
                        yy: {}
                    };
                    for (var p in this.yy) Object.prototype.hasOwnProperty.call(this.yy, p) && (f.yy[p] = this.yy[p]);
                    d.setInput(t, f.yy), f.yy.lexer = d, f.yy.parser = this, void 0 === d.yylloc && (d.yylloc = {});
                    var m = d.yylloc;
                    r.push(m);
                    var y = d.options && d.options.ranges;
                    function g() {
                        var t;
                        return "number" != typeof (t = d.lex() || c) && (t = e.symbols_[t] || t), t;
                    }
                    this.parseError = "function" == typeof f.yy.parseError ? f.yy.parseError : Object.getPrototypeOf(this).parseError;
                    for (var b, v, x, w, k, A, _, T = {}; ;) {
                        if (this.defaultActions[v = n[n.length - 1]] ? x = this.defaultActions[v] : (null == b && (b = g()), 
                        x = o[v] && o[v][b]), void 0 === x || !x.length || !x[0]) {
                            var S = "";
                            for (k in _ = [], o[v]) this.terminals_[k] && k > u && _.push("'" + this.terminals_[k] + "'");
                            S = d.showPosition ? "Parse error on line " + (a + 1) + ":\n" + d.showPosition() + "\nExpecting " + _.join(", ") + ", got '" + (this.terminals_[b] || b) + "'" : "Parse error on line " + (a + 1) + ": Unexpected " + (b == c ? "end of input" : "'" + (this.terminals_[b] || b) + "'"), 
                            this.parseError(S, {
                                text: d.match,
                                token: this.terminals_[b] || b,
                                line: d.yylineno,
                                loc: m,
                                expected: _
                            });
                        }
                        if (x[0] instanceof Array && x.length > 1) throw new Error("Parse Error: multiple actions possible at state: " + v + ", token: " + b);
                        switch (x[0]) {
                          case 1:
                            n.push(b), i.push(d.yytext), r.push(d.yylloc), n.push(x[1]), b = null, l = d.yyleng, 
                            s = d.yytext, a = d.yylineno, m = d.yylloc;
                            break;

                          case 2:
                            if (T.$ = i[i.length - (A = this.productions_[x[1]][1])], T.X = {
                                first_line: r[r.length - (A || 1)].first_line,
                                last_line: r[r.length - 1].last_line,
                                first_column: r[r.length - (A || 1)].first_column,
                                last_column: r[r.length - 1].last_column
                            }, y && (T.X.range = [ r[r.length - (A || 1)].range[0], r[r.length - 1].range[1] ]), 
                            void 0 !== (w = this.performAction.apply(T, [ s, l, a, f.yy, x[1], i, r ].concat(h)))) return w;
                            A && (n = n.slice(0, -1 * A * 2), i = i.slice(0, -1 * A), r = r.slice(0, -1 * A)), 
                            n.push(this.productions_[x[1]][0]), i.push(T.$), r.push(T.X), n.push(o[n[n.length - 2]][n[n.length - 1]]);
                            break;

                          case 3:
                            return !0;
                        }
                    }
                    return !0;
                }
            };
            function d() {
                this.yy = {};
            }
            return h.lexer = {
                EOF: 1,
                parseError: function(t, e) {
                    if (!this.yy.parser) throw new Error(t);
                    this.yy.parser.parseError(t, e);
                },
                setInput: function(t, e) {
                    return this.yy = e || this.yy || {}, this.Y = t, this.Z = this.K = this.done = !1, 
                    this.yylineno = this.yyleng = 0, this.yytext = this.matched = this.match = "", this.conditionStack = [ "INITIAL" ], 
                    this.yylloc = {
                        first_line: 1,
                        first_column: 0,
                        last_line: 1,
                        last_column: 0
                    }, this.options.ranges && (this.yylloc.range = [ 0, 0 ]), this.offset = 0, this;
                },
                input: function() {
                    var t = this.Y[0];
                    return this.yytext += t, this.yyleng++, this.offset++, this.match += t, this.matched += t, 
                    t.match(/(?:\r\n?|\n).*/g) ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++, 
                    this.options.ranges && this.yylloc.range[1]++, this.Y = this.Y.slice(1), t;
                },
                unput: function(t) {
                    var e = t.length, n = t.split(/(?:\r\n?|\n)/g);
                    this.Y = t + this.Y, this.yytext = this.yytext.substr(0, this.yytext.length - e), 
                    this.offset -= e;
                    var i = this.match.split(/(?:\r\n?|\n)/g);
                    this.match = this.match.substr(0, this.match.length - 1), this.matched = this.matched.substr(0, this.matched.length - 1), 
                    n.length - 1 && (this.yylineno -= n.length - 1);
                    var r = this.yylloc.range;
                    return this.yylloc = {
                        first_line: this.yylloc.first_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.first_column,
                        last_column: n ? (n.length === i.length ? this.yylloc.first_column : 0) + i[i.length - n.length].length - n[0].length : this.yylloc.first_column - e
                    }, this.options.ranges && (this.yylloc.range = [ r[0], r[0] + this.yyleng - e ]), 
                    this.yyleng = this.yytext.length, this;
                },
                more: function() {
                    return this.Z = !0, this;
                },
                reject: function() {
                    return this.options.backtrack_lexer ? (this.K = !0, this) : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                },
                less: function(t) {
                    this.unput(this.match.slice(t));
                },
                pastInput: function() {
                    var t = this.matched.substr(0, this.matched.length - this.match.length);
                    return (t.length > 20 ? "..." : "") + t.substr(-20).replace(/\n/g, "");
                },
                upcomingInput: function() {
                    var t = this.match;
                    return t.length < 20 && (t += this.Y.substr(0, 20 - t.length)), (t.substr(0, 20) + (t.length > 20 ? "..." : "")).replace(/\n/g, "");
                },
                showPosition: function() {
                    var t = this.pastInput(), e = new Array(t.length + 1).join("-");
                    return t + this.upcomingInput() + "\n" + e + "^";
                },
                test_match: function(t, e) {
                    var n, i, r;
                    if (this.options.backtrack_lexer && (r = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        Z: this.Z,
                        Y: this.Y,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    }, this.options.ranges && (r.yylloc.range = this.yylloc.range.slice(0))), (i = t[0].match(/(?:\r\n?|\n).*/g)) && (this.yylineno += i.length), 
                    this.yylloc = {
                        first_line: this.yylloc.last_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.last_column,
                        last_column: i ? i[i.length - 1].length - i[i.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + t[0].length
                    }, this.yytext += t[0], this.match += t[0], this.matches = t, this.yyleng = this.yytext.length, 
                    this.options.ranges && (this.yylloc.range = [ this.offset, this.offset += this.yyleng ]), 
                    this.Z = !1, this.K = !1, this.Y = this.Y.slice(t[0].length), this.matched += t[0], 
                    n = this.performAction.call(this, this.yy, this, e, this.conditionStack[this.conditionStack.length - 1]), 
                    this.done && this.Y && (this.done = !1), n) return n;
                    if (this.K) {
                        for (var o in r) this[o] = r[o];
                        return !1;
                    }
                    return !1;
                },
                next: function() {
                    if (this.done) return this.EOF;
                    var t, e, n, i;
                    this.Y || (this.done = !0), this.Z || (this.yytext = "", this.match = "");
                    for (var r = this.tt(), o = 0; o < r.length; o++) if ((n = this.Y.match(this.rules[r[o]])) && (!e || n[0].length > e[0].length)) {
                        if (e = n, i = o, this.options.backtrack_lexer) {
                            if (!1 !== (t = this.test_match(n, r[o]))) return t;
                            if (this.K) {
                                e = !1;
                                continue;
                            }
                            return !1;
                        }
                        if (!this.options.flex) break;
                    }
                    return e ? !1 !== (t = this.test_match(e, r[i])) && t : "" === this.Y ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                },
                lex: function() {
                    return this.next() || this.lex();
                },
                begin: function(t) {
                    this.conditionStack.push(t);
                },
                popState: function() {
                    return this.conditionStack.length - 1 > 0 ? this.conditionStack.pop() : this.conditionStack[0];
                },
                tt: function() {
                    return this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1] ? this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules : this.conditions.INITIAL.rules;
                },
                topState: function(t) {
                    return (t = this.conditionStack.length - 1 - Math.abs(t || 0)) >= 0 ? this.conditionStack[t] : "INITIAL";
                },
                pushState: function(t) {
                    this.begin(t);
                },
                stateStackSize: function() {
                    return this.conditionStack.length;
                },
                options: {},
                performAction: function(t, e, n, i) {
                    switch (n) {
                      case 0:
                        break;

                      case 1:
                        return 6;

                      case 2:
                        return e.yytext = e.yytext.substr(1, e.yyleng - 2), 4;

                      case 3:
                        return 17;

                      case 4:
                        return 18;

                      case 5:
                        return 23;

                      case 6:
                        return 24;

                      case 7:
                        return 22;

                      case 8:
                        return 21;

                      case 9:
                        return 10;

                      case 10:
                        return 11;

                      case 11:
                        return 8;

                      case 12:
                        return 14;

                      case 13:
                        return "INVALID";
                    }
                },
                rules: [ /^(?:\s+)/, /^(?:(-?([0-9]|[1-9][0-9]+))(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/, /^(?:"(?:\\[\\"bfnrt/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/, /^(?:\{)/, /^(?:\})/, /^(?:\[)/, /^(?:\])/, /^(?:,)/, /^(?::)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:null\b)/, /^(?:$)/, /^(?:.)/ ],
                conditions: {
                    INITIAL: {
                        rules: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 ],
                        inclusive: !0
                    }
                }
            }, d.prototype = h, h.Parser = d, new d;
        }();
        t.parser = e, t.Parser = e.Parser, t.parse = function() {
            return e.parse.apply(e, arguments);
        };
    }({});
    const wo = {
        StyleExpression: io,
        isExpression: ro,
        isExpressionFilter: ho,
        createExpression: oo,
        createPropertyExpression: lo,
        normalizePropertyExpression: function(t, e) {
            if (Yr(t)) return new uo(t, e);
            if (ro(t)) {
                const n = lo(t, e);
                if ("error" === n.result) throw new Error(n.value.map(t => `${t.key}: ${t.message}`).join(", "));
                return n.value;
            }
            {
                let n = t;
                return "string" == typeof t && "color" === e.type && (n = Xn.parse(t)), {
                    kind: "constant",
                    evaluate: () => n
                };
            }
        },
        ZoomConstantExpression: so,
        ZoomDependentExpression: ao,
        StylePropertyFunction: uo
    }, {isExpression: ko, createExpression: Ao} = wo, _o = {};
    function To(t) {
        if (!0 === t) return function() {
            return !0;
        };
        if (t && t.condition) {
            if ("any" === t.type) {
                const e = t.condition, n = [];
                for (let t = 0; t < e.length; t++) n.push(To(e[t]));
                return (t, e) => {
                    for (let i = 0; i < n.length; i++) if (n[i](t, e)) return !0;
                    return !1;
                };
            }
            const e = To(t.condition);
            if (Ve(t.layer)) return e;
            const n = e => e.layer === t.layer;
            return (t, i) => n(t) && e(t, i);
        }
        if (function t(e) {
            if (!0 === e || !1 === e) return !0;
            if (!Array.isArray(e) || 0 === e.length) return !1;
            switch (e[0]) {
              case "has":
              case "!has":
                return 2 === e.length && ("string" == typeof e[1] || e[1].property && e[1].op);

              case "in":
              case "!in":
                return e.length >= 2 && ("string" == typeof e[1] || e[1].property && e[1].op);

              case "==":
              case "!=":
              case ">":
              case ">=":
              case "<":
              case "<=":
                return 3 === e.length && ("string" == typeof e[1] || e[1].property && e[1].op);

              case "none":
              case "any":
              case "all":
                for (const n of e.slice(1)) if (!t(n) && "boolean" != typeof n) return !1;
                return !0;

              case "contains":
                return !0;

              default:
                return !1;
            }
        }(t)) return new Function("f", "var p = (f && f.properties || {}); return " + jt(t));
        {
            let e = function(t, e = "fill") {
                if (null == t) return {
                    filter: () => !0,
                    needGeometry: !1,
                    needFeature: !1
                };
                ho(t) || (t = yo(t));
                const n = t;
                let i = !0;
                try {
                    i = function(t) {
                        if (!fo(t)) return t;
                        let e = co(t);
                        return function t(e) {
                            let n = !1;
                            const i = [];
                            if ("case" === e[0]) {
                                for (let t = 1; t < e.length - 1; t += 2) n = n || fo(e[t]), i.push(e[t + 1]);
                                i.push(e[e.length - 1]);
                            } else if ("match" === e[0]) {
                                n = n || fo(e[1]);
                                for (let t = 2; t < e.length - 1; t += 2) i.push(e[t + 1]);
                                i.push(e[e.length - 1]);
                            } else if ("step" === e[0]) {
                                n = n || fo(e[1]);
                                for (let t = 1; t < e.length - 1; t += 2) i.push(e[t + 1]);
                            }
                            n && (e.length = 0, e.push("any", ...i));
                            for (let n = 1; n < e.length; n++) t(e[n]);
                        }(e), e = function t(e) {
                            if (!Array.isArray(e)) return e;
                            const n = function(t) {
                                if (po.has(t[0])) for (let e = 1; e < t.length; e++) if (fo(t[e])) return !0;
                                return t;
                            }(e);
                            return !0 === n ? n : n.map(e => t(e));
                        }(e), e;
                    }(n);
                } catch (t) {
                    console.warn(`Failed to extract static filter. Filter will continue working, but at higher memory usage and slower framerate.\nThis is most likely a bug, please report this via https://github.com/mapbox/mapbox-gl-js/issues/new?assignees=&labels=&template=Bug_report.md\nand paste the contents of this message in the report.\nThank you!\nFilter Expression:\n${JSON.stringify(n, null, 2)}\n        `);
                }
                const r = bn["filter_" + e], o = oo(i, r);
                let s = null;
                if ("error" === o.result) throw new Error(o.value.map(t => `${t.key}: ${t.message}`).join(", "));
                s = (t, e, n) => o.value.evaluate(t, e, {}, n);
                let a = null, l = null;
                if (i !== n) {
                    const t = oo(n, r);
                    if ("error" === t.result) throw new Error(t.value.map(t => `${t.key}: ${t.message}`).join(", "));
                    a = (e, n, i, r, o) => t.value.evaluate(e, n, {}, i, void 0, void 0, r, o), l = !Ni(t.value.expression);
                }
                return s = s, {
                    filter: s,
                    dynamicFilter: a || void 0,
                    needGeometry: function t(e) {
                        if (!Array.isArray(e)) return !1;
                        if ("within" === e[0]) return !0;
                        for (let n = 1; n < e.length; n++) if (t(e[n])) return !0;
                        return !1;
                    }(i),
                    needFeature: !!l
                };
            }(t);
            return e = e && e.filter, (t, n) => (_o.zoom = n, e && e(_o, t));
        }
    }
    const So = {
        type: "number",
        "property-type": "data-driven",
        expression: {
            parameters: [ "zoom", "feature" ]
        }
    };
    function Mo(t, e) {
        So.type = e || "number";
        const n = Ao(t, So);
        if ("success" !== n.result) throw new Error(`Invalid maplibre spec expression: ${JSON.stringify(t)} (${n.value})`);
        return n.value;
    }
    function Po(t) {
        return ko(t);
    }
    const Io = {
        lineWidth: 1,
        lineStrokeWidth: 1,
        lineDx: 1,
        lineDy: 1,
        lineOpacity: 1,
        linePatternAnimSpeed: 1,
        markerWidth: 1,
        markerHeight: 1,
        markerDx: 1,
        markerDy: 1,
        markerSpacing: 1,
        markerOpacity: 1,
        markerRotation: 1,
        textWrapWidth: 1,
        textSpacing: 1,
        textSize: 1,
        textHaloRadius: 1,
        textHaloOpacity: 1,
        textDx: 1,
        textDy: 1,
        textOpacity: 1,
        textRotation: 1,
        polygonOpacity: 1
    };
    function jo(t) {
        return Io[t];
    }
    const zo = {
        markerPlacement: 1,
        markerFile: 1,
        mergeOnProperty: 1,
        markerTextFit: 1,
        markerType: 1,
        markerHorizontalAlignment: 1,
        markerVerticalAlignment: 1,
        markerRotationAlignment: 1,
        markerPitchAlignment: 1,
        markerFillPatternFile: 1,
        markerLinePatternFile: 1,
        textName: 1,
        textPlacement: 1,
        textFaceName: 1,
        textStyle: 1,
        textHorizontalAlignment: 1,
        textVerticalAlignment: 1,
        textRotationAlignment: 1,
        textPitchAlignment: 1,
        lineJoin: 1,
        lineCap: 1,
        linePatternFile: 1,
        polygonPatternFile: 1
    }, Fo = {
        lineDasharray: 1,
        markerLineDasharray: 1,
        uvScale: 1,
        uvOffset: 1
    };
    function Oo(t) {
        return zo[t] ? "string" : jo(t) ? "number" : Fo[t] ? "array" : "color";
    }
    var Co = Object.freeze({
        __proto__: null,
        compileStyle: function(t = []) {
            return function t(e) {
                if (!Array.isArray(e)) return t([ e ]);
                const n = [];
                for (let t = 0; t < e.length; t++) {
                    let i;
                    i = !0 === e[t].filter ? function() {
                        return !0;
                    } : To(e[t].filter), n.push(qe({}, e[t], {
                        filter: i
                    }));
                }
                return n;
            }(t = t.map(t => {
                const e = qe({}, t);
                return e.filter && e.filter.value && (e.filter = e.filter.value), e;
            }));
        },
        compileFilter: To,
        createExpression: Mo,
        isExpression: Po,
        isInterpolated: jo,
        getExpressionType: Oo
    });
    const Eo = [], Ro = {}, No = {}, Do = {}, Lo = [];
    class Ho {
        static isAtlasLoaded(t, e = {}) {
            const {iconAtlas: n} = e;
            return !!(!t || n && n.positions[t]);
        }
        static genFnTypes(t) {
            const e = {};
            for (const n in t) if (Po(t[n])) {
                const i = (n + "_Fn_0").trim(), r = (n + "Fn").trim(), o = Oo(n);
                e[i] = Mo(t[n], o), e[r] = (t, n) => {
                    let r;
                    Ro.zoom = t, No.properties = n;
                    try {
                        r = e[i].evaluateWithoutErrorHandling(Ro, No, Do, null, Lo);
                    } catch (t) {
                        return null;
                    }
                    return r;
                };
            } else if (Ze(t[n])) {
                const i = (n + "_Fn_0").trim(), r = (n + "Fn").trim();
                jo(n) ? (e[i] = x(t[n]), e[r] = (t, n) => {
                    const r = e[i](t, n);
                    return Ze(r) ? x(r)(t, n) : r;
                }) : (e[i] = w(t[n]), e[r] = (t, n) => {
                    const r = e[i](t, n);
                    return Ze(r) ? w(r)(t, n) : r;
                });
            }
            return e;
        }
        constructor(t, e, n) {
            this.options = n;
            const i = [];
            this.symbolDef = e, this.symbol = k(e, () => (i[0] = n.zoom, i)), this.styledVectors = [], 
            this.properties = {}, this.et = n.fnTypes || Ho.genFnTypes(this.symbolDef), Ze(this.symbolDef.visible) && (this.nt = x(this.symbolDef.visible)), 
            n.atlas && (this.iconAtlas = n.atlas.iconAtlas, this.glyphAtlas = n.atlas.glyphAtlas), 
            this.features = this.it(t);
        }
        needAltitudeAttribute() {
            return this.options.forceAltitudeAttribute || this.maxPosZ >= Math.pow(2, 17) || this.options.positionType === Float32Array;
        }
        getPositionFormat() {
            return this.needAltitudeAttribute() ? [ {
                type: Int16Array,
                width: 2,
                name: "aPosition"
            }, {
                type: Float32Array,
                width: 1,
                name: "aAltitude"
            } ] : [ {
                type: Int16Array,
                width: 3,
                name: "aPosition"
            } ];
        }
        fillPosition(t, e, n, i) {
            this.needAltitudeAttribute() ? (t.aPosition.push(e, n), t.aAltitude.push(i)) : (fn(Eo, e, n, i), 
            t.aPosition.push(Eo[0], Eo[1], Eo[2]));
        }
        it(t) {
            if (!t.length) return t;
            const e = "__fea_idx".trim();
            let n, i = 0, r = t[i];
            for (;!r.geometry; ) i++, r = t[i];
            if (Array.isArray(r.geometry) && r.properties) {
                let e = r.geometry[0];
                for (;Array.isArray(e); ) e = e[0];
                e instanceof C && (n = t);
            }
            if (!n) if (n = [], Array.isArray(r.geometry)) for (let e = 0; e < t.length; e++) {
                const i = qe({}, t[e]);
                n.push(Ue(i));
            } else for (let i = 0; i < t.length; i++) {
                const r = t[i], o = ke(r);
                for (let t = 0; t < o.length; t++) {
                    const i = o[t];
                    i[e] = r[e], n.push(i);
                }
            }
            if (this.maxPosZ = 0, !this.options.forceAltitudeAttribute) {
                const t = "line" === this.symbolDef.textPlacement;
                let e = 0, i = !1;
                const {textPitchAlignmentFn: r} = this.et;
                !r && t && "map" === this.symbolDef.textPitchAlignment && (i = !0);
                for (let o = 0; o < n.length; o++) {
                    const s = qo(n[o] && n[o].geometry);
                    if (s > e && (e = s), t && !i && r && n[o].properties) {
                        const t = r(null, n[o].properties);
                        "map" === t && (i = t);
                    }
                }
                this.hasMapPitchAlign = i, this.maxPosZ = e;
            }
            const o = this.options.order;
            if (o) {
                const t = [];
                for (let e = 0; e < o.length; e++) o[e] && t.push(To(o[e]));
                n = n.sort((e, n) => {
                    const i = t.length;
                    let r = -1, o = -1;
                    for (let s = 0; s < i && (t[s](e) && (r = s), t[s](n) && (o = s), !(r >= 0 && r < i && o >= 0 && o < i)); s++) ;
                    return r - o;
                });
            }
            return n;
        }
        load(t = 1) {
            const e = "__fea_idx".trim(), n = "_debug_info".trim(), i = this.et, r = this.styledVectors;
            this.count = 0;
            const o = this.features;
            if (!o || !o.length) return Promise.resolve(null);
            const s = {}, a = {}, l = {
                zoom: this.options.zoom
            }, u = [], c = k(this.symbolDef, () => (u[0] = l.zoom, u));
            let h = 0, d = o.length;
            const f = this.options.debugIndex;
            try {
                for (;h < d; h++) {
                    const t = o[h];
                    if (!t || !t.geometry) continue;
                    if (void 0 !== f && t[n].index !== f) continue;
                    t.properties || (t.properties = {}), t.properties.$layer = t.layer, t.properties.$type = t.type;
                    const u = this.createStyledVector(t, c, i, l, s, a);
                    u && u.feature.geometry && (u.featureIdx = void 0 === t[e] ? h : t[e], this.count++, 
                    r.push(u));
                }
            } catch (t) {
                return Promise.reject(t);
            }
            return this.options.atlas ? Promise.resolve(this.pack(t)) : this.loadAtlas(s, a).then(() => this.pack(t));
        }
        loadAtlas(t, e) {
            return new Promise((n, i) => {
                this.fetchAtlas(t, e, (t, e) => {
                    if (t) i(t); else {
                        if (e) {
                            const {icons: t, glyphs: n} = e;
                            if (t && Object.keys(t).length) {
                                for (const e in t) {
                                    const n = t[e], {width: i, height: r, data: o} = n.data;
                                    n.data = new Fe({
                                        width: i,
                                        height: r
                                    }, o);
                                }
                                this.iconAtlas = new Ce(t);
                            }
                            if (n && Object.keys(n).length) {
                                for (const t in n) {
                                    const e = n[t];
                                    for (const t in e) {
                                        const n = e[t], {width: i, height: r, data: o} = n.bitmap;
                                        n.bitmap = new ze({
                                            width: i,
                                            height: r
                                        }, o);
                                    }
                                }
                                this.glyphAtlas = new Ne(n);
                            }
                        }
                        n({
                            glyphAtlas: this.glyphAtlas,
                            iconAtlas: this.iconAtlas
                        });
                    }
                });
            });
        }
        fetchAtlas(t, e, n) {
            Object.keys(t).length > 0 || Object.keys(e).length > 0 ? this.options.requestor(t, e, n) : n();
        }
        pack(t) {
            if (!this.count) return null;
            if (null == t) throw new Error("layout scale is undefined");
            const e = this.createDataPack(this.styledVectors, t);
            if (!e) return null;
            e.properties = this.properties, this.empty && (e.empty = !0);
            const n = e.buffers;
            delete e.buffers;
            const i = {
                data: e,
                buffers: n
            };
            if (this.iconAtlas) {
                const t = i.data.iconAtlas = Uo(this.iconAtlas);
                if (t.glyphMap) for (const e in t.glyphMap) n.push(t.glyphMap[e].data.data.buffer);
                n.push(i.data.iconAtlas.image.data.buffer);
            }
            return this.glyphAtlas && (i.data.glyphAtlas = Uo(this.glyphAtlas), n.push(i.data.glyphAtlas.image.data.buffer)), 
            i;
        }
        createStyledVector(t, e, n, i) {
            return new dn(t, e, n, i);
        }
        createDataPack(t, e) {
            if (!t || !t.length) return null;
            this.maxIndex = 0, this.maxPos = 0, this.maxAltitude = 0;
            const n = this.data = {};
            let i = this.elements = [];
            const r = this.getFormat(Array.isArray(t[0]) ? t[0][0].symbol : t[0].symbol), o = this.needAltitudeAttribute() ? 2 : 3;
            for (let t = 0; t < r.length; t++) n[r[t].name] = [];
            let s = [], a = 0;
            const l = [];
            let u = 0, c = !1, h = !0;
            const d = new Set;
            for (let i = 0, r = t.length; i < r; i++) {
                if (!t[i].feature.geometry) continue;
                const r = Array.isArray(t[i]) ? t[i][0].feature.id : t[i].feature.id;
                h && (void 0 !== No.id ? d && (d.has(No.id) ? h = !1 : d.add(No.id)) : h = !1), 
                $e(r) && (Math.abs(r) > u && (u = Math.abs(r)), r < 0 && (c = !0));
                const f = this.data.aPosition.length;
                if (Array.isArray(t[i])) for (let n = 0; n < t[i].length; n++) this.rt(t[i][n], e); else this.rt(t[i], e);
                const p = (n.aPosition.length - f) / o;
                for (let e = 0; e < p; e++) s.push(t[i].featureIdx), $e(r) && l.push(r);
                a = Math.max(a, t[i].featureIdx);
            }
            if (this.hasElements() && !i.length) return null;
            s = new (He(a))(s), r[0].type = this.options.positionType ? this.options.positionType : Le(this.maxPos);
            const f = this.options.center;
            if (f && (f[0] || f[1])) {
                const t = n.aPosition;
                for (let e = 0; e < t.length; e += o) t[e] -= f[0], t[e + 1] -= f[1];
            }
            const p = function(t, e) {
                const n = {};
                for (let i = 0; i < t.length; i++) {
                    const r = t[i], o = r.type, s = r.name;
                    n[s] = o === Array ? e[s] : new o(e[s]);
                }
                return n;
            }(r, n);
            p.aPickingId = s;
            const m = [];
            for (const t in p) m.push(p[t].buffer);
            i = new (De(this.maxIndex))(i), m.push(i.buffer);
            const y = {
                data: p,
                isIdUnique: h,
                is2D: 0 === this.maxPosZ,
                indices: this.hasElements() ? i : null,
                positionSize: o,
                buffers: m,
                symbolIndex: this.symbolDef.index || {
                    index: 0
                }
            };
            if (this.ot && (y.markerPlacement = this.ot), this.st && (y.textPlacement = this.st), 
            l.length) {
                const t = c ? Le(u) : He(u);
                y.featureIds = new t(l), m.push(y.featureIds.buffer);
            } else y.featureIds = [];
            return y.pickingIdIndiceMap = hn(s, y.indices), y;
        }
        rt(t, e) {
            this.nt && !this.nt(this.options.zoom, t.feature.properties) || this.placeVector(t, e, this.formatWidth);
        }
        addElements(...t) {
            this.maxIndex = Math.max(this.maxIndex, ...t), this.elements.push(...t);
        }
        hasElements() {
            return !0;
        }
        getAltitude(t) {
            const {altitudeProperty: e, defaultAltitude: n, altitudeScale: i} = this.options;
            let r = sn(t, e, n);
            return i && (r *= i), this.maxAltitude = Math.max(this.maxAltitude, Math.abs(r)), 
            r;
        }
        getIconAtlasMaxValue() {
            const t = this.iconAtlas.positions;
            let e = 0;
            for (const n in t) if (Xe(t, n)) {
                const {tl: i, displaySize: r} = t[n], o = Math.max(i[0], i[1], r[0] - 1, r[1] - 1);
                o > e && (e = o);
            }
            return e;
        }
    }
    function Uo(t) {
        let e = t.positions, n = t.image && t.image.format || "alpha";
        if (t instanceof Ce) {
            e = {};
            for (const n in t.positions) {
                const i = t.positions[n];
                e[n] = {
                    paddedRect: i.paddedRect,
                    pixelRatio: i.pixelRatio,
                    tl: i.tl,
                    br: i.br,
                    displaySize: i.displaySize
                };
            }
            n = "rgba";
        }
        const i = t.image;
        return {
            image: {
                width: i.width,
                height: i.height,
                data: i.data,
                format: n
            },
            glyphMap: t.glyphMap,
            positions: e
        };
    }
    function qo(t) {
        if (!t) return 0;
        let e = 0;
        if (Array.isArray(t)) for (let n = 0; n < t.length; n++) if (Array.isArray(t[n])) {
            const i = qo(t[n]);
            i > e && (e = i);
        } else {
            const i = Math.abs(t[n].z || 0);
            i > e && (e = i);
        } else {
            const n = Math.abs(t.z || 0);
            n > e && (e = n);
        }
        return e;
    }
    function Vo(t, e, n, i) {
        const r = "__fn_textSize".trim();
        let o = t.textSize;
        if (Ve(e.textSize)) return [ 16, 16 ];
        t[r] && (o = t[r]);
        const s = [];
        return s[0] = Be(o) ? o(i, n) : o, s[1] = s[0], s;
    }
    function $o(t) {
        const e = t.stops;
        let n = -1 / 0;
        for (let t = 0; t < e.length; t++) {
            let i = e[t][1];
            Ge(e[t][1]) && (i = $o(e[t][1])), i > n && (n = i);
        }
        return n;
    }
    function Go(t, e, n) {
        return [ e || "normal", n || "normal", "24px", t || "monospace" ].join(" ");
    }
    const Wo = /\{[\w-]+(?:\|[\w-]+)*\}/g;
    function Bo(t, e) {
        return We(t) ? t.replace(Wo, (function(t) {
            if (!e) return "";
            if ((t = t.substring(1, t.length - 1)).indexOf("|") > 0) {
                const n = t.split("|");
                for (let t = 0; t < n.length; t++) {
                    const i = e[n[t]];
                    if (!Ve(i)) return i;
                }
                return "";
            }
            const n = e[t];
            return Ve(n) ? "" : Array.isArray(n) ? n.join() : n;
        })) : t;
    }
    var Jo = Object.freeze({
        __proto__: null,
        getSDFFont: Go,
        resolveText: Bo,
        resolveVarNames: function(t) {
            return t.match(Wo);
        },
        resolveExpVarNames: function t(e, n) {
            if (2 !== n.length || "get" !== n[0]) for (let i = 0; i < n.length; i++) 2 === n[i].length && "get" === n[i][0] ? e.push(n[i][1]) : Array.isArray(n[i]) && t(e, n[i]); else e.push(n[1]);
        }
    });
    const Xo = t => t >= 11904 && t <= 12031, Yo = t => t >= 12032 && t <= 12255, Zo = t => t >= 12272 && t <= 12287, Ko = t => t >= 12288 && t <= 12351, Qo = t => t >= 12352 && t <= 12447, ts = t => t >= 12448 && t <= 12543, es = t => t >= 12544 && t <= 12591, ns = t => t >= 12704 && t <= 12735, is = t => t >= 12736 && t <= 12783, rs = t => t >= 12784 && t <= 12799, os = t => t >= 12800 && t <= 13055, ss = t => t >= 13056 && t <= 13311, as = t => t >= 13312 && t <= 19903, ls = t => t >= 19968 && t <= 40959, us = t => t >= 40960 && t <= 42127, cs = t => t >= 42128 && t <= 42191, hs = t => t >= 63744 && t <= 64255, ds = t => t >= 64336 && t <= 65023, fs = t => t >= 65040 && t <= 65055, ps = t => t >= 65072 && t <= 65103, ms = t => t >= 65104 && t <= 65135, ys = t => t >= 65136 && t <= 65279, gs = t => t >= 65280 && t <= 65519;
    function bs(t) {
        return !((t => t >= 1536 && t <= 1791)(t) || (t => t >= 1872 && t <= 1919)(t) || (t => t >= 2208 && t <= 2303)(t) || ds(t) || ys(t));
    }
    function vs(t) {
        return !!(746 === t || 747 === t || !(t < 4352) && (ns(t) || es(t) || ps(t) && !(t >= 65097 && t <= 65103) || hs(t) || ss(t) || Xo(t) || is(t) || !(!Ko(t) || t >= 12296 && t <= 12305 || t >= 12308 && t <= 12319 || 12336 === t) || as(t) || ls(t) || os(t) || (t => t >= 12592 && t <= 12687)(t) || (t => t >= 43360 && t <= 43391)(t) || (t => t >= 55216 && t <= 55295)(t) || (t => t >= 4352 && t <= 4607)(t) || (t => t >= 44032 && t <= 55215)(t) || Qo(t) || Zo(t) || (t => t >= 12688 && t <= 12703)(t) || Yo(t) || rs(t) || ts(t) && 12540 !== t || !(!gs(t) || 65288 === t || 65289 === t || 65293 === t || t >= 65306 && t <= 65310 || 65339 === t || 65341 === t || 65343 === t || t >= 65371 && t <= 65503 || 65507 === t || t >= 65512 && t <= 65519) || !(!ms(t) || t >= 65112 && t <= 65118 || t >= 65123 && t <= 65126) || (t => t >= 5120 && t <= 5759)(t) || (t => t >= 6320 && t <= 6399)(t) || fs(t) || (t => t >= 19904 && t <= 19967)(t) || us(t) || cs(t)));
    }
    function xs(t) {
        return !(vs(t) || function(t) {
            return !!((t => t >= 128 && t <= 255)(t) && (167 === t || 169 === t || 174 === t || 177 === t || 188 === t || 189 === t || 190 === t || 215 === t || 247 === t) || (t => t >= 8192 && t <= 8303)(t) && (8214 === t || 8224 === t || 8225 === t || 8240 === t || 8241 === t || 8251 === t || 8252 === t || 8258 === t || 8263 === t || 8264 === t || 8265 === t || 8273 === t) || (t => t >= 8448 && t <= 8527)(t) || (t => t >= 8528 && t <= 8591)(t) || (t => t >= 8960 && t <= 9215)(t) && (t >= 8960 && t <= 8967 || t >= 8972 && t <= 8991 || t >= 8996 && t <= 9e3 || 9003 === t || t >= 9085 && t <= 9114 || t >= 9150 && t <= 9165 || 9167 === t || t >= 9169 && t <= 9179 || t >= 9186 && t <= 9215) || (t => t >= 9216 && t <= 9279)(t) && 9251 !== t || (t => t >= 9280 && t <= 9311)(t) || (t => t >= 9312 && t <= 9471)(t) || (t => t >= 9632 && t <= 9727)(t) || (t => t >= 9728 && t <= 9983)(t) && !(t >= 9754 && t <= 9759) || (t => t >= 11008 && t <= 11263)(t) && (t >= 11026 && t <= 11055 || t >= 11088 && t <= 11097 || t >= 11192 && t <= 11243) || Ko(t) || ts(t) || (t => t >= 57344 && t <= 63743)(t) || ps(t) || ms(t) || gs(t) || 8734 === t || 8756 === t || 8757 === t || t >= 9984 && t <= 10087 || t >= 10102 && t <= 10131 || 65532 === t || 65533 === t);
        }(t));
    }
    function ws(t) {
        return t >= 1424 && t <= 2303 || ds(t) || ys(t);
    }
    const ks = [ [ 9, 9 ], [ 32, 32 ], [ 5760, 5760 ], [ 8192, 8198 ], [ 8200, 8202 ], [ 8287, 12288 ], [ 6158, 6158 ], [ 8203, 8205 ] ];
    function As(t) {
        for (const e of ks) if (t >= e[0] && t <= e[1]) return !0;
        return !1;
    }
    const _s = {
        "!": "︕",
        "#": "＃",
        $: "＄",
        "%": "％",
        "&": "＆",
        "(": "︵",
        ")": "︶",
        "*": "＊",
        "+": "＋",
        ",": "︐",
        "-": "︲",
        ".": "・",
        "/": "／",
        ":": "︓",
        ";": "︔",
        "<": "︿",
        "=": "＝",
        ">": "﹀",
        "?": "︖",
        "@": "＠",
        "[": "﹇",
        "\\": "＼",
        "]": "﹈",
        "^": "＾",
        lt: "︳",
        "`": "｀",
        "{": "︷",
        "|": "―",
        "}": "︸",
        "~": "～",
        "¢": "￠",
        "£": "￡",
        "¥": "￥",
        "¦": "￤",
        "¬": "￢",
        "¯": "￣",
        "–": "︲",
        "—": "︱",
        "‘": "﹃",
        "’": "﹄",
        "“": "﹁",
        "”": "﹂",
        "…": "︙",
        "‧": "・",
        "₩": "￦",
        "、": "︑",
        "。": "︒",
        "〈": "︿",
        "〉": "﹀",
        "《": "︽",
        "》": "︾",
        "「": "﹁",
        "」": "﹂",
        "『": "﹃",
        "』": "﹄",
        "【": "︻",
        "】": "︼",
        "〔": "︹",
        "〕": "︺",
        "〖": "︗",
        "〗": "︘",
        "！": "︕",
        "（": "︵",
        "）": "︶",
        "，": "︐",
        "－": "︲",
        "．": "・",
        "：": "︓",
        "；": "︔",
        "＜": "︿",
        "＞": "﹀",
        "？": "︖",
        "［": "﹇",
        "］": "﹈",
        "＿": "︳",
        "｛": "︷",
        "｜": "―",
        "｝": "︸",
        "｟": "︵",
        "｠": "︶",
        "｡": "︒",
        "｢": "﹁",
        "｣": "﹂"
    };
    function Ts(t, e, n, i, r, o, s, a, l, u) {
        let c = t.trim();
        2 === u && (c = function(t) {
            let e = "";
            for (let n = 0; n < t.length; n++) {
                const i = t.charCodeAt(n + 1) || null, r = t.charCodeAt(n - 1) || null;
                e += i && xs(i) && !_s[t[n + 1]] || r && xs(r) && !_s[t[n - 1]] || !_s[t[n]] ? t[n] : _s[t[n]];
            }
            return e;
        }(c));
        const h = [], d = {
            positionedGlyphs: h,
            text: c,
            top: a[1],
            bottom: a[1],
            left: a[0],
            right: a[0],
            writingMode: u
        };
        let f;
        return f = function(t, e) {
            const n = [];
            let i = 0;
            for (let r = 0; r < e.length; r++) {
                const o = e[r];
                n.push(t.substring(i, o)), i = o;
            }
            return i < t.length && n.push(t.substring(i, t.length)), n;
        }(c, function(t, e, n, i) {
            if (!n) return [];
            if (!t) return [];
            const r = [], o = function(t, e, n, i) {
                let r = 0;
                for (let n = 0; n < t.length; n++) {
                    const o = i[t.charCodeAt(n)];
                    o && (r += o.metrics.advance + e);
                }
                return r / Math.max(1, Math.ceil(r / n));
            }(t, e, n, i);
            let s = 0;
            for (let n = 0; n < t.length; n++) {
                const l = t.charCodeAt(n), u = i[l];
                u && !Ss[l] && (s += u.metrics.advance + e), n < t.length - 1 && (Ms[l] || !((a = l) < 11904) && (ns(a) || es(a) || ps(a) || hs(a) || ss(a) || Xo(a) || is(a) || Ko(a) || as(a) || ls(a) || os(a) || gs(a) || Qo(a) || Zo(a) || Yo(a) || rs(a) || ts(a) || fs(a) || cs(a) || us(a))) && r.push(js(n + 1, s, o, r, Is(l, t.charCodeAt(n + 1)), !1));
            }
            var a;
            return function t(e) {
                return e ? t(e.priorBreak).concat(e.index) : [];
            }(js(t.length, s, o, r, 0, !0));
        }(c, s, n, e)), function(t, e, n, i, r, o, s, a, l) {
            let u = 0, c = 8, h = 0;
            const d = t.positionedGlyphs, f = "right" === o ? 1 : "left" === o ? 0 : .5;
            for (let t = 0; t < n.length; t++) {
                let r = n[t];
                if (r = r.trim(), !r.length) {
                    c -= i;
                    continue;
                }
                const o = d.length;
                for (let t = 0; t < r.length; t++) {
                    const n = r.charCodeAt(t), i = e[n];
                    i && (vs(n) && 1 !== s ? (32 !== n && d.push({
                        glyph: n,
                        x: u,
                        y: 0,
                        vertical: !0
                    }), u += l + a) : (32 !== n && d.push({
                        glyph: n,
                        x: u,
                        y: c,
                        vertical: !1
                    }), u += i.metrics.advance + a));
                }
                d.length !== o && (h = Math.max(u - a, h), Fs(d, e, o, d.length - 1, f)), u = 0, 
                c -= i;
            }
            const {horizontalAlign: p, verticalAlign: m} = zs(r);
            !function(t, e, n, i, r, o, s) {
                const a = (e - n) * r, l = -(-i * s + .5) * o;
                if (a || l) for (let e = 0; e < t.length; e++) t[e].x += a, t[e].y += l;
            }(d, f, p, m, h, i, n.length);
            const y = n.length * i;
            t.top += -m * y, t.bottom = t.top + y, t.left += -p * h, t.right = t.left + h;
        }(d, e, f, i, r, o, u, s, l), !!h.length && d;
    }
    const Ss = {
        9: !0,
        10: !0,
        11: !0,
        12: !0,
        13: !0,
        32: !0
    }, Ms = {
        10: !0,
        32: !0,
        38: !0,
        40: !0,
        41: !0,
        43: !0,
        45: !0,
        47: !0,
        173: !0,
        183: !0,
        8203: !0,
        8208: !0,
        8211: !0,
        8231: !0
    };
    function Ps(t, e, n, i) {
        const r = Math.pow(t - e, 2);
        return i ? t < e ? r / 2 : 2 * r : r + Math.abs(n) * n;
    }
    function Is(t, e) {
        let n = 0;
        return 10 === t && (n -= 1e4), 40 !== t && 65288 !== t || (n += 50), 41 !== e && 65289 !== e || (n += 50), 
        n;
    }
    function js(t, e, n, i, r, o) {
        let s = null, a = Ps(e, n, r, o);
        for (let t = 0; t < i.length; t++) {
            const l = i[t], u = Ps(e - l.x, n, r, o) + l.badness;
            u <= a && (s = l, a = u);
        }
        return {
            index: t,
            x: e,
            priorBreak: s,
            badness: a
        };
    }
    function zs(t) {
        let e = .5, n = .5;
        switch (t) {
          case "right":
          case "top-right":
          case "bottom-right":
            e = 1;
            break;

          case "left":
          case "top-left":
          case "bottom-left":
            e = 0;
        }
        switch (t) {
          case "bottom":
          case "bottom-right":
          case "bottom-left":
            n = 1;
            break;

          case "top":
          case "top-right":
          case "top-left":
            n = 0;
        }
        return {
            horizontalAlign: e,
            verticalAlign: n
        };
    }
    function Fs(t, e, n, i, r) {
        if (!r) return;
        const o = e[t[i].glyph];
        if (o) {
            const e = (t[i].x + o.metrics.advance) * r;
            if (!e) return;
            for (let r = n; r <= i; r++) t[r].x -= e;
        }
    }
    function Os(t) {
        if (!function(t) {
            for (const e of t) if (ws(e.charCodeAt(0))) return !0;
            return !1;
        }(t)) return t;
        const e = [], n = [], i = [];
        let r = 0, o = 0, s = 1, a = 1;
        for (const l of t) {
            const t = l.codePointAt(0);
            As(t) ? (i.push(l), r++) : (s = ws(t) ? -1 : 1, a !== s ? (o = r, n.length && (a > 0 && n.reverse(), 
            e.push(...n)), i.length && (e.splice(o, 0, ...i), i.length = 0), a = s, n.length = 0) : i.length && (n.push(...i), 
            i.length = 0), n.push(l), r++);
        }
        return i.length && n.push(...i), n.length && (a > 0 && n.reverse(), e.push(...n)), 
        e.reverse().join("");
    }
    const Cs = /\{ *([\w_]+) *\}/g;
    class Es {
        constructor(t, e, n, i, r) {
            this.feature = t, this.symbolDef = e, this.symbol = n, this.options = r, this.ut = this.ct.bind(this), 
            this.et = i;
        }
        ct(t, e) {
            return this.feature.properties[e] || "default";
        }
        getShape(t, e) {
            if (this.ht) return this.ht;
            const {textHorizontalAlignmentFn: n, textVerticalAlignmentFn: i, markerHorizontalAlignmentFn: r, markerVerticalAlignmentFn: o, textWrapWidthFn: s} = this.et;
            let a;
            const l = this.symbol, u = this.getIconAndGlyph(), c = this.feature.properties;
            if (u && u.glyph) {
                const {font: t, text: r} = u.glyph;
                if ("" === r) return null;
                const o = this.size[0] / 24, h = 24, d = l.textKeepUpright, f = "map" === l.textRotationAlignment && "line" === l.textPlacement && !l.isIconText, p = e.glyphMap[t], m = Rs(n ? n(null, c) : l.textHorizontalAlignment, i ? i(null, c) : l.textVerticalAlignment), y = 1.2 * h, g = function(t) {
                    for (let e = 0; e < t.length; e++) if (!bs(t.charAt(e).charCodeAt(0))) return !1;
                    return !0;
                }(r), b = g && l.textLetterSpacing / o || 0, v = [ l.textDx / o || 0, l.textDy / o || 0 ], x = ((s ? s(null, c) : l.textWrapWidth) || 10 * h) / o;
                a = {}, a.horizontal = Ts(r, p, x, y, m, "center", b, v, h, 1), g && f && d && (a.vertical = Ts(r, p, x, y, m, "center", b, v, h, 2));
            } else if (u && u.icon) {
                if (!t.positions[u.icon.url]) return null;
                const e = Rs(r ? r(null, c) : l.markerHorizontalAlignment, o ? o(null, c) : l.markerVerticalAlignment);
                a = function(t, e) {
                    const {horizontalAlign: n, verticalAlign: i} = zs(e), r = -2048 * n, o = -2048 * i;
                    return {
                        image: t,
                        top: o,
                        bottom: o + 2048,
                        left: r,
                        right: r + 2048
                    };
                }(t.positions[u.icon.url], e), this.size || (this.size = a.image.displaySize);
            }
            return this.ht = a, a;
        }
        getIconAndGlyph() {
            if (this.iconGlyph) return this.iconGlyph;
            const {markerFileFn: t, markerTypeFn: e, markerPathFn: n, markerWidthFn: i, markerHeightFn: r, markerFillFn: o, markerFillPatternFileFn: s, markerFillOpacityFn: a, markerTextFitFn: l, markerTextFitPaddingFn: u, markerLineColorFn: c, markerLineWidthFn: h, markerLineOpacityFn: d, markerLineDasharrayFn: f, markerLinePatternFileFn: p, markerPathWidthFn: m, markerPathHeightFn: y, textNameFn: g, textFaceNameFn: b, textStyleFn: w, textWeightFn: k} = this.et, {zoom: A} = this.options, _ = {}, T = this.symbol, S = this.feature.properties, M = t ? t(null, S) : T.markerFile, P = e ? e(null, S) : T.markerType, I = M || P || T.markerPath, j = !Ve(this.symbolDef.textName);
            let z;
            if (I) {
                z = function(t, e, n, i, r, o) {
                    if (Ve(e.markerWidth) && Ve(e.markerHeight)) return null;
                    const s = "__fn_markerWidth".trim(), a = "__fn_markerHeight".trim();
                    let l = e.markerWidth || 0, u = e.markerHeight || 0;
                    return Ge(l) && ("identity" !== l.type ? l = $o(l) : (l = t.markerWidth, t[s] && (l = t[s](i, n)), 
                    Ge(l) && (l = "identity" === l.type ? r(i, n) : $o(l)))), Ge(u) && ("identity" !== u.type ? u = $o(u) : (u = t.markerHeight, 
                    t[a] && (u = t[a](i, n)), Ge(u) && (u = "identity" === u.type ? o(i, n) : $o(u)))), 
                    [ l, u ];
                }(T, this.symbolDef, S, A, i, r) || [ 0, 0 ];
                let t = T.markerTextFit;
                if (l && (t = l(A, S)), t && T.text && "none" !== t) {
                    const e = T.text.textSize;
                    let n = T.text.textName;
                    v(n) && (n = x(n)(A, S));
                    const i = Bo(n, S);
                    if (i) {
                        const n = "__fn_textSize".trim(), r = "__fn_textSize_0".trim();
                        v(e) && !T.text[n] && (T.text[r] = x(e), T.text[n] = (t, e) => {
                            const n = T.text[r](t, e);
                            return v(n) ? x(n)(t, e) : n;
                        });
                        const o = Vo(T.text, T.text, S, A);
                        if ("width" !== t && "both" !== t || (z[0] = o[0] * i.length), "height" !== t && "both" !== t || (z[1] = o[1]), 
                        o[0] && o[1]) {
                            let t = T.markerTextFitPadding || [ 0, 0, 0, 0 ];
                            u && (t = u(A, S)), z[0] += t[1] + t[3], z[1] += t[0] + t[2];
                        }
                    } else z[0] = z[1] = -1;
                }
            }
            if (j && (z = Vo(T, this.symbolDef, S, A)), !z) return _;
            if (z[0] = Math.ceil(z[0]), z[1] = Math.ceil(z[1]), this.size = z, I && z[0] >= 0 && z[1] >= 0) {
                let t;
                if (P) {
                    const e = {};
                    if (e.markerType = P, "path" === P && (e.markerPath = n ? n(null, S) : T.markerPath, 
                    e.markerPathWidth = m ? m(null, S) : T.markerPathWidth, e.markerPathHeight = y ? y(null, S) : T.markerPathHeight), 
                    i) {
                        const t = i(null, S);
                        Ve(t) || (e.markerWidth = t);
                    } else T.markerWidth >= 0 && (e.markerWidth = T.markerWidth);
                    if (r) {
                        const t = r(null, S);
                        Ve(t) || (e.markerHeight = t);
                    } else T.markerHeight >= 0 && (e.markerHeight = T.markerHeight);
                    if (o) {
                        const t = o(null, S);
                        Ve(t) || (e.markerFill = t);
                    } else T.markerFill && (e.markerFill = T.markerFill);
                    if (s) {
                        const t = s(null, S);
                        Ve(t) || (e.markerFillPatternFile = t);
                    } else T.markerFillPatternFile && (e.markerFillPatternFile = T.markerFillPatternFile);
                    if (a) {
                        const t = a(null, S);
                        Ve(t) || (e.markerFillOpacity = t);
                    } else T.markerFillOpacity >= 0 && (e.markerFillOpacity = T.markerFillOpacity);
                    if (c) {
                        const t = c(null, S);
                        Ve(t) || (e.markerLineColor = t);
                    } else T.markerLineColor && (e.markerLineColor = T.markerLineColor);
                    if (h) {
                        const t = h(null, S);
                        Ve(t) || (e.markerLineWidth = t);
                    } else T.markerLineWidth >= 0 && (e.markerLineWidth = T.markerLineWidth);
                    if (d) {
                        const t = d(null, S);
                        Ve(t) || (e.markerLineOpacity = t);
                    } else T.markerLineOpacity >= 0 && (e.markerLineOpacity = T.markerLineOpacity);
                    if (f) {
                        const t = f(null, S);
                        Ve(t) || (e.markerLineDasharray = t);
                    } else T.markerLineDasharray && (e.markerLineDasharray = T.markerLineDasharray);
                    if (p) {
                        const t = p(null, S);
                        Ve(t) || (e.markerLinePatternFile = t);
                    } else T.markerLinePatternFile && (e.markerLinePatternFile = T.markerLinePatternFile);
                    t = "vector://" + JSON.stringify(e);
                } else t = M ? M.replace(Cs, this.ut) : T.markerPath ? function(t, e, n) {
                    if (!t.markerPath) return null;
                    let i = 1;
                    const r = function(t) {
                        const e = {
                            stroke: {
                                stroke: t.markerLineColor,
                                "stroke-width": t.markerLineWidth,
                                "stroke-opacity": t.markerLineOpacity,
                                "stroke-dasharray": null,
                                "stroke-linecap": "butt",
                                "stroke-linejoin": "round"
                            },
                            fill: {
                                fill: t.markerFill,
                                "fill-opacity": t.markerFillOpacity
                            }
                        };
                        return 0 === e.stroke["stroke-width"] && (e.stroke["stroke-opacity"] = 0), e;
                    }(t);
                    $e(t.markerOpacity) && (i = t.markerOpacity), $e(t.opacity) && (i *= t.opacity);
                    const o = {};
                    if (r) {
                        for (const t in r.stroke) Xe(r.stroke, t) && (Ve(r.stroke[t]) || (o[t] = r.stroke[t]));
                        for (const t in r.fill) Xe(r.fill, t) && (Ve(r.fill[t]) || (o[t] = r.fill[t]));
                    }
                    const s = Array.isArray(t.markerPath) ? t.markerPath : [ t.markerPath ];
                    let a;
                    const l = [];
                    for (let t = 0; t < s.length; t++) a = We(s[t]) ? {
                        path: s[t]
                    } : s[t], a = qe({}, a, o), a.d = a.path, delete a.path, l.push(a);
                    const u = [ '<svg version="1.1"', 'xmlns="http://www.w3.org/2000/svg"' ];
                    i < 1 && u.push('opacity="' + i + '"'), t.markerPathWidth && t.markerPathHeight && u.push('viewBox="0 0 ' + t.markerPathWidth + " " + t.markerPathHeight + '"'), 
                    u.push('preserveAspectRatio="none"'), e && u.push('width="' + e + '"'), n && u.push('height="' + n + '"'), 
                    u.push("><defs></defs>");
                    for (let t = 0; t < l.length; t++) {
                        let e = "<path ";
                        for (const n in l[t]) Xe(l[t], n) && (e += " " + n + '="' + l[t][n] + '"');
                        e += "></path>", u.push(e);
                    }
                    return u.push("</svg>"), "data:image/svg+xml;base64," + btoa(u.join(" "));
                }(T, z[0], z[1]) : null;
                _.icon = {
                    url: t,
                    size: z
                };
            }
            if (j) {
                const t = g ? g(this.options.zoom, S) : T.textName;
                if (t || 0 === t) {
                    const e = Go(b ? b(null, S) : T.textFaceName, w ? w(null, S) : T.textStyle, k ? k(null, S) : T.textWeight);
                    let n = Bo(t, S);
                    n && n.length && (n = Os(n), _.glyph = {
                        font: e,
                        text: n
                    });
                }
            }
            return this.iconGlyph = _, _;
        }
    }
    function Rs(t, e) {
        e && "middle" !== e || (e = "center"), t && "middle" !== t || (t = "center");
        let n = "center" !== e ? e : "";
        return n += "center" !== t ? (n.length ? "-" : "") + t : "", n
        /*!
     * From mapbox-gl-js
     * MIT License
     * https://github.com/mapbox/mapbox-gl-js
     */;
    }
    function Ns(t, e, n, i, r) {
        const o = [];
        let s;
        for (let a = 0; a < t.length; a++) {
            const l = t[a];
            let u, c = !1;
            for (let t = 0; t < l.length - 1; t++) {
                let a = l[t], h = l[t + 1];
                a.x < e && h.x < e || (a.x < e ? (s = a, a = new C(e, a.y + (e - a.x) / (h.x - a.x) * (h.y - a.y)).j(), 
                a.z = s.z + (e - s.x) / (h.x - s.x) * (h.z - s.z), c = !0) : h.x < e && (s = h, 
                h = new C(e, a.y + (e - a.x) / (h.x - a.x) * (h.y - a.y)).j(), h.z = a.z + (e - a.x) / (s.x - a.x) * (s.z - a.z), 
                c = !0), a.y < n && h.y < n || (a.y < n ? (s = a, a = new C(a.x + (n - a.y) / (h.y - a.y) * (h.x - a.x), n).j(), 
                a.z = s.z + (n - s.y) / (h.y - s.y) * (h.z - s.z), c = !0) : h.y < n && (s = h, 
                h = new C(a.x + (n - a.y) / (h.y - a.y) * (h.x - a.x), n).j(), h.z = a.z + (n - a.y) / (s.y - a.y) * (s.z - a.z), 
                c = !0), a.x >= i && h.x >= i || (a.x >= i ? (s = a, a = new C(i, a.y + (i - a.x) / (h.x - a.x) * (h.y - a.y)).j(), 
                a.z = s.z + (i - s.x) / (h.x - s.x) * (h.z - s.z), c = !0) : h.x >= i && (s = h, 
                h = new C(i, a.y + (i - a.x) / (h.x - a.x) * (h.y - a.y)).j(), h.z = a.z + (i - a.x) / (s.x - a.x) * (s.z - a.z), 
                c = !0), a.y >= r && h.y >= r || (a.y >= r ? (s = a, a = new C(a.x + (r - a.y) / (h.y - a.y) * (h.x - a.x), r).j(), 
                a.z = s.z + (r - s.y) / (h.y - s.y) * (h.z - s.z), c = !0) : h.y >= r && (s = h, 
                h = new C(a.x + (r - a.y) / (h.y - a.y) * (h.x - a.x), r).j(), h.z = a.z + (r - a.y) / (s.y - a.y) * (s.z - a.z), 
                c = !0), u && a.equals(u[u.length - 1]) || (u = [ a ], o.push(u)), c && (u.clipped = !0), 
                u.push(h)))));
            }
        }
        return o;
    }
    class Ds extends C {
        constructor(t, e, n, i) {
            super(t, e), this.angle = n, void 0 !== i && (this.segment = i);
        }
        clone() {
            return new Ds(this.x, this.y, this.angle, this.segment);
        }
    }
    /*!
     * From mapbox-gl-js
     * MIT License
     * https://github.com/mapbox/mapbox-gl-js
     */    function Ls(t, e, n, i, r) {
        if (void 0 === e.segment) return !0;
        let o = e, s = e.segment + 1, a = 0;
        for (;a > -n / 2; ) {
            if (s--, s < 0) return !1;
            a -= t[s].dist(o), o = t[s];
        }
        a += t[s].dist(t[s + 1]), s++;
        const l = [];
        let u = 0;
        for (;a < n / 2; ) {
            const e = t[s], n = t[s + 1];
            if (!n) return !1;
            let o = t[s - 1].angleTo(e) - e.angleTo(n);
            for (o = Math.abs((o + 3 * Math.PI) % (2 * Math.PI) - Math.PI), l.push({
                distance: a,
                angleDelta: o
            }), u += o; a - l[0].distance > i; ) u -= l.shift().angleDelta;
            if (u > r) return !1;
            s++, a += e.dist(n);
        }
        return !0;
    }
    function Hs(t, e, n, i, r, o, s, a, l, u, c) {
        const h = function(t, e, n) {
            return t ? .6 * e * n : 0;
        }(i, o, s), d = function(t, e) {
            return Math.max(t ? t.right - t.left : 0, e ? e.right - e.left : 0);
        }(i, r), f = 0 === t[0].x || t[0].x === l || 0 === t[0].y || t[0].y === l;
        return e - d * s < e / 4 && (e = d * s + e / 4), function t(e, n, i, r, o, s, a, l, u, c, h) {
            const d = s / 2, f = function(t) {
                let e = 0;
                for (let n = 0; n < t.length - 1; n++) e += t[n].dist(t[n + 1]);
                return e;
            }(e);
            let p = 0, m = n - i, y = [];
            for (let t = 0; t < e.length - 1; t++) {
                const n = e[t], a = e[t + 1], l = n.dist(a), g = a.angleTo(n);
                for (;m + i < p + l; ) {
                    m += i;
                    const b = (m - p) / l, v = Us(n.x, a.x, b), x = Us(n.y, a.y, b), w = Us(n.z || 0, a.z || 0, b);
                    if (v >= 0 && v < u && x >= 0 && x < u && m - d >= 0 && m + d <= f) {
                        const i = new Ds(v, x, g, t);
                        i.z = w, c && (i.axis = [ n.y - x, v - n.x ], i.angleR = w === (n.z || 0) ? 0 : Math.atan(.9 * (w - (n.z || 0)) * h / n.dist(i))), 
                        i.line = e, i.j(), r && !Ls(e, i, s, r, o) || y.push(i);
                    }
                }
                p += l;
            }
            return l || y.length || a || (y = t(e, p / 2, i, r, o, s, a, !0, u, c, h)), y;
        }(t, f ? e / 2 * a % e : (d / 2 + 2 * o) * s * a % e, e, h, n, d * s, f, !1, l, u, c);
    }
    function Us(t, e, n) {
        return t * (1 - n) + e * n;
    }
    function qs(t, e) {
        const n = t.length;
        if (n <= 1) return [ t ];
        const i = [];
        let r, o;
        for (let e = 0; e < n; e++) {
            const n = on(t[e]);
            0 !== n && (t[e].area = Math.abs(n), void 0 === o && (o = n < 0), o === n < 0 ? (r && i.push(r), 
            r = [ t[e] ]) : r.push(t[e]));
        }
        if (r && i.push(r), e > 1) for (let t = 0; t < i.length; t++) i[t].length <= e || (Ht(i[t], e, 1, i[t].length - 1, Vs), 
        i[t] = i[t].slice(0, e));
        return i;
    }
    function Vs(t, e) {
        return e.area - t.area;
    }
    function $s(t, e, n) {
        const i = e.distSqr(n);
        if (0 === i) return t.distSqr(e);
        const r = ((t.x - e.x) * (n.x - e.x) + (t.y - e.y) * (n.y - e.y)) / i;
        return t.distSqr(r < 0 ? e : r > 1 ? n : n.sub(e).A(r).s(e));
    }
    function Gs(t, e = 1, n = !1) {
        let i = 1 / 0, r = 1 / 0, o = -1 / 0, s = -1 / 0;
        const a = t[0];
        for (let t = 0; t < a.length; t++) {
            const e = a[t];
            (!t || e.x < i) && (i = e.x), (!t || e.y < r) && (r = e.y), (!t || e.x > o) && (o = e.x), 
            (!t || e.y > s) && (s = e.y);
        }
        const l = Math.min(o - i, s - r);
        let u = l / 2;
        const c = new Gt(null, Ws);
        if (0 === l) return new C(i, r);
        for (let e = i; e < o; e += l) for (let n = r; n < s; n += l) c.push(new Bs(e + u, n + u, u, t));
        let h = function(t) {
            let e = 0, n = 0, i = 0;
            const r = t[0];
            for (let t = 0, o = r.length, s = o - 1; t < o; s = t++) {
                const o = r[t], a = r[s], l = o.x * a.y - a.x * o.y;
                n += (o.x + a.x) * l, i += (o.y + a.y) * l, e += 3 * l;
            }
            return new Bs(n / e, i / e, 0, t);
        }(t), d = c.length;
        for (;c.length; ) {
            const i = c.pop();
            (i.d > h.d || !h.d) && (h = i, n && console.log("found best %d after %d probes", Math.round(1e4 * i.d) / 1e4, d)), 
            i.max - h.d <= e || (u = i.h / 2, c.push(new Bs(i.p.x - u, i.p.y - u, u, t)), c.push(new Bs(i.p.x + u, i.p.y - u, u, t)), 
            c.push(new Bs(i.p.x - u, i.p.y + u, u, t)), c.push(new Bs(i.p.x + u, i.p.y + u, u, t)), 
            d += 4);
        }
        return n && (console.log("num probes: " + d), console.log("best distance: " + h.d)), 
        h.p;
    }
    function Ws(t, e) {
        return e.max - t.max;
    }
    function Bs(t, e, n, i) {
        this.p = new C(t, e), this.h = n, this.d = function(t, e) {
            let n = !1, i = 1 / 0;
            for (let r = 0; r < e.length; r++) {
                const o = e[r];
                for (let e = 0, r = o.length, s = r - 1; e < r; s = e++) {
                    const r = o[e], a = o[s];
                    r.y > t.y != a.y > t.y && t.x < (a.x - r.x) * (t.y - r.y) / (a.y - r.y) + r.x && (n = !n), 
                    i = Math.min(i, $s(t, r, a));
                }
            }
            return (n ? 1 : -1) * Math.sqrt(i);
        }(this.p, i), this.max = this.d + this.h * Math.SQRT2;
    }
    const Js = 45 * Math.PI / 100;
    function Xs(t, e, n, i, r, o, s, a, l) {
        const {feature: u, size: c, symbol: h} = t, d = c ? 24 : 0, f = i * (c ? c[0] / d : 1);
        if ("line" === o) {
            const t = [];
            let i = u.geometry;
            r && (i = Ns(u.geometry, 0, 0, r, r));
            for (let o = 0; o < i.length; o++) {
                const u = Hs(i[o], s, Js, h.isIconText ? null : n && n.vertical || n && n.horizontal || n, null, d, h.isIconText ? 1 : f, 1, r || 1 / 0, a, l);
                if (h.textPlacement && !h.isIconText) for (let t = 0; t < u.length; t++) u[t].startIndex = e.length / 3;
                if (t.push.apply(t, u), h.textPlacement && !h.isIconText) for (let t = 0; t < i[o].length; t++) e.push(i[o][t].x, i[o][t].y, i[o][t].z || 0);
            }
            return t;
        }
        return function(t, e, n) {
            const i = [];
            if (3 === t.type) {
                const r = qs(t.geometry, 0);
                for (let t = 0; t < r.length; t++) {
                    const o = r[t];
                    if ("vertex" === e) for (let t = 0; t < o.length; t++) {
                        const e = o[t];
                        for (let t = 0; t < e.length; t++) ln(e[t], n) || i.push(e[t]);
                    } else if ("vertex-first" === e) {
                        const t = o[0];
                        t && t[0] && !ln(t[0], n) && i.push(t[0]);
                    } else if ("vertex-last" === e) {
                        const t = o[0];
                        t && t[t.length - 1] && !ln(t[t.length - 1], n) && i.push(t[t.length - 1]);
                    } else {
                        const t = Gs(o, 16);
                        ln(t, n) || i.push(t);
                    }
                }
            } else if (2 === t.type) for (let r = 0; r < t.geometry.length; r++) {
                const o = t.geometry[r];
                if ("vertex" === e) for (let t = 0; t < o.length; t++) ln(o[t], n) || i.push(o[t]); else "vertex-last" === e ? o && o[o.length - 1] && !ln(o[o.length - 1], n) && i.push(o[o.length - 1]) : ln(o[0], n) || i.push(o[0]);
            } else if (1 === t.type) for (let e = 0; e < t.geometry.length; e++) {
                const r = t.geometry[e];
                for (let t = 0; t < r.length; t++) {
                    const e = r[t];
                    ln(e, n) || i.push(e);
                }
            }
            return i;
        }(u, o, r);
    }
    function Ys(t, e) {
        const n = {}, i = {}, r = [];
        let o = 0;
        function s(e) {
            r.push(t[e]), o++;
        }
        function a(t, e, n) {
            const o = i[t];
            return delete i[t], i[e] = o, r[o].geometry[0].pop(), r[o].geometry[0] = r[o].geometry[0].concat(n[0]), 
            o;
        }
        function l(t, e, i) {
            const o = n[e];
            return delete n[e], n[t] = o, r[o].geometry[0].shift(), r[o].geometry[0] = i[0].concat(r[o].geometry[0]), 
            o;
        }
        function u(t, e, n) {
            const i = n ? e[0][e[0].length - 1] : e[0][0];
            return `${t}:${i.x}:${i.y}`;
        }
        for (let c = 0; c < t.length; c++) {
            const h = t[c], d = h.geometry;
            if (!d) continue;
            const f = h.properties[e] ? h.properties[e].toString() : null;
            if (!f) {
                s(c);
                continue;
            }
            const p = u(f, d), m = u(f, d, !0);
            if (p in i && m in n && i[p] !== n[m]) {
                const t = l(p, m, d), e = a(p, m, r[t].geometry);
                delete n[p], delete i[m], i[u(f, r[e].geometry, !0)] = e, r[t].geometry = null;
            } else p in i ? a(p, m, d) : m in n ? l(p, m, d) : (s(c), n[p] = o - 1, i[m] = o - 1);
        }
        return r.filter(t => t.geometry);
    }
    class Zs extends Ho {
        static needMerge(t, e, n) {
            if (!t) return !1;
            let i = "line" === t.textPlacement || "line" === t.markerPlacement;
            return i || (e.textPlacementFn && (i = "line" === e.textPlacementFn(n)), e.markerPlacementFn && (i = "line" === e.markerPlacementFn(n))), 
            t.mergeOnProperty && i;
        }
        static mergeLineFeatures(t, e, n, i) {
            const r = "__index".trim();
            let o = e.textPlacement, s = e.markerPlacement;
            n.textPlacementFn && (o = n.textPlacementFn(i)), n.markerPlacementFn && (s = n.markerPlacementFn(i));
            const a = function(t, e, n, i, r) {
                const o = "__index".trim(), s = Ho.genFnTypes(e), {mergeOnPropertyFn: a} = s;
                if (!e.mergeOnProperty || "line" !== i && "line" !== n) return [];
                if (!(un(l = e.mergeOnProperty) || "string" != typeof l && (null === l.constructor || l.constructor !== String) || "line" !== i && "line" !== n)) return [ {
                    features: t,
                    property: e.mergeOnProperty
                } ];
                var l;
                const u = [], c = {}, h = [];
                for (let s = 0; s < t.length; s++) {
                    t[s][o] = s;
                    const l = t[s].properties = t[s].properties || {};
                    l.$layer = t[s].layer, l.$type = t[s].type;
                    let d = n;
                    "line" !== d && (d = i);
                    const f = a ? a(r, l) : e.mergeOnProperty;
                    "line" !== d || un(f) ? h.push(t[s]) : (void 0 === c[f] && (c[f] = u.length, u.push({
                        features: [],
                        property: f
                    })), u[c[f]].features.push(t[s]));
                }
                return h.length && u.push({
                    features: h
                }), u;
            }(t, e, s, o, i);
            if (a.length) {
                const e = [];
                for (let n = 0; n < a.length; n++) e.push(a[n].property ? Ys(a[n].features, a[n].property) : t);
                if (1 === e.length) return e[0];
                {
                    let t = [];
                    for (let n = 0; n < e.length; n++) t = t.concat(e[n]);
                    return t.sort((t, e) => t[r] - e[r]), t;
                }
            }
        }
        static splitPointSymbol(t, e = 0) {
            const n = [];
            if (Array.isArray(t)) {
                const e = t;
                for (let t = 0; t < e.length; t++) e[t] && n.push(...Zs.splitPointSymbol(e[t], t));
                return n;
            }
            let i = null, r = null;
            for (const e in t) 0 === e.indexOf("marker") ? (i = i || {}, i[e] = t[e]) : 0 === e.indexOf("text") && (r = r || {}, 
            r[e] = t[e]);
            return i && (i.isIconText = !0, t.mergeOnProperty && (i.mergeOnProperty = t.mergeOnProperty), 
            n.push(i)), r && (i && (r.textPlacement = i.markerPlacement, r.textSpacing = i.markerSpacing, 
            r.isIconText = !0), t.mergeOnProperty && (r.mergeOnProperty = t.mergeOnProperty), 
            n.push(r)), void 0 !== t.visible && (i && (i.visible = t.visible), r && (r.visible = t.visible)), 
            i && (i.markerTextFit && r && (i.text = {}, i.text.textName = r.textName, i.text.textSize = r.textSize), 
            i.index = {
                index: e,
                type: 0
            }), r && (r.index = {
                index: e,
                type: 1
            }), n;
        }
        static isAtlasLoaded(t, e) {
            const {icon: n, glyph: i} = t, {iconAtlas: r, glyphAtlas: o} = e;
            if (n && (!r || !r.positions[n.url])) return !1;
            if (i) {
                if (!o || !o.positions[i.font]) return !1;
                const t = o.positions[i.font], {text: e} = i;
                for (let n = 0; n < e.length; n++) if (!t[e.charCodeAt(n)]) return !1;
            }
            return !0;
        }
        constructor(t, e, n) {
            super(t, e, n), this.dt = e.textPlacement, this.et.textPlacementFn && (this.dt = this.et.textPlacementFn(this.options.zoom));
        }
        createStyledVector(t, e, n, i, r, o) {
            const s = new Es(t, this.symbolDef, e, n, i), a = s.getIconAndGlyph();
            if (a.icon && !this.options.atlas) {
                const {url: t, size: e} = a.icon;
                r[t] || (r[t] = a.icon.size), r[t][0] < e[0] && (r[t][0] = e[0]), r[t][1] < e[1] && (r[t][1] = e[1]);
            }
            if (a.glyph && !this.options.atlas) {
                const {font: t, text: e} = a.glyph, n = o[t] = o[t] || {};
                for (let t = 0; t < e.length; t++) n[e.charCodeAt(t)] = 1;
                "line" === this.dt && (o.options = {
                    isCharsCompact: !1
                });
            }
            return this.options.allowEmptyPack || a.icon || a.glyph ? s : null;
        }
        getFormat(t) {
            const e = void 0 !== t.textName, n = e ? this.getPackSDFFormat(t) : this.getPackMarkerFormat();
            e ? n.push(...this.ft()) : n.push(...this.pt());
            const {markerOpacityFn: i, textOpacityFn: r, markerPitchAlignmentFn: o, textPitchAlignmentFn: s, markerRotationAlignmentFn: a, textRotationAlignmentFn: l, markerRotationFn: u, textRotationFn: c, markerAllowOverlapFn: h, textAllowOverlapFn: d, markerIgnorePlacementFn: f, textIgnorePlacementFn: p} = this.et;
            return (i || r) && n.push({
                type: Uint8Array,
                width: 1,
                name: "aColorOpacity"
            }), (o || s) && n.push({
                type: Uint8Array,
                width: 1,
                name: "aPitchAlign"
            }), (a || l) && n.push({
                type: Uint8Array,
                width: 1,
                name: "aRotationAlign"
            }), (u || c) && n.push({
                type: Uint16Array,
                width: 1,
                name: "aRotation"
            }), (h || d || f || p) && n.push({
                type: Uint8Array,
                width: 1,
                name: "aOverlap"
            }), n;
        }
        yt() {
            return this.hasMapPitchAlign;
        }
        ft() {
            const {textFillFn: t, textSizeFn: e, textHaloFillFn: n, textHaloRadiusFn: i, textHaloOpacityFn: r, textDxFn: o, textDyFn: s} = this.et, a = [];
            return t && a.push({
                type: Uint8Array,
                width: 4,
                name: "aTextFill"
            }), e && a.push({
                type: Uint8Array,
                width: 1,
                name: "aTextSize"
            }), n && a.push({
                type: Uint8Array,
                width: 4,
                name: "aTextHaloFill"
            }), i && a.push({
                type: Uint8Array,
                width: 1,
                name: "aTextHaloRadius"
            }), r && a.push({
                type: Uint8Array,
                width: 1,
                name: "aTextHaloOpacity"
            }), o && a.push({
                type: Int8Array,
                width: 1,
                name: "aTextDx"
            }), s && a.push({
                type: Int8Array,
                width: 1,
                name: "aTextDy"
            }), a;
        }
        pt() {
            const {markerWidthFn: t, markerHeightFn: e, markerDxFn: n, markerDyFn: i} = this.et, r = [];
            return t && r.push({
                type: this.options.markerWidthType || Uint8Array,
                width: 1,
                name: "aMarkerWidth"
            }), e && r.push({
                type: this.options.markerHeightType || Uint8Array,
                width: 1,
                name: "aMarkerHeight"
            }), n && r.push({
                type: Int8Array,
                width: 1,
                name: "aMarkerDx"
            }), i && r.push({
                type: Int8Array,
                width: 1,
                name: "aMarkerDy"
            }), r;
        }
        createDataPack() {
            if (!this.iconAtlas && !this.glyphAtlas) {
                if (!this.options.allowEmptyPack) return null;
                this.empty = !0;
            }
            this.lineVertex = [];
            const t = super.createDataPack.apply(this, arguments);
            return t ? (t.lineVertex = new Int16Array(this.lineVertex), t.buffers.push(t.lineVertex.buffer), 
            t) : null;
        }
        placeVector(t, e) {
            const n = t.getShape(this.iconAtlas, this.glyphAtlas);
            if (!this.options.allowEmptyPack && !n) return;
            const i = this.gt(t, n, e);
            if (0 === i.length) return;
            const r = this.data, o = this.needAltitudeAttribute() ? 2 : 3;
            let s = this.data.aPosition.length / o;
            const a = t.symbol, l = t.feature.properties, u = "line" === this.dt && !a.isIconText, c = void 0 !== a.textName, h = c && u && function(t) {
                let e = 0;
                for (let n = 0; n < t.length; n++) if (vs(t.charAt(n).charCodeAt(0))) e = 0; else if (e++, 
                e >= 1) return !1;
                return !0;
            }(t.getIconAndGlyph().glyph.text) ? 1 : 0, {textFillFn: d, textSizeFn: f, textHaloFillFn: p, textHaloRadiusFn: m, textHaloOpacityFn: y, textDxFn: g, textDyFn: b, textPitchAlignmentFn: x, textRotationAlignmentFn: w, textRotationFn: k, textAllowOverlapFn: A, textIgnorePlacementFn: _, textOpacityFn: T, markerWidthFn: S, markerHeightFn: M, markerDxFn: P, markerDyFn: I, markerPitchAlignmentFn: j, markerRotationAlignmentFn: z, markerRotationFn: F, markerAllowOverlapFn: O, markerIgnorePlacementFn: E, markerOpacityFn: R} = this.et;
            let N, D, L, H, U, q, V, $, G, W, B, J, X, Y, Z, K, Q;
            if (c) {
                const e = t.getIconAndGlyph().glyph.font;
                N = function(t, e, n) {
                    const i = t.positionedGlyphs, r = [];
                    for (let o = 0; o < i.length; o++) {
                        const s = i[o], a = n[s.glyph];
                        if (!a) continue;
                        const l = a.rect;
                        if (!l) continue;
                        const u = 4, c = a.metrics.advance / 2, h = a.metrics.height / 2, d = e ? [ s.x + c, 0 ] : [ 0, 0 ], f = e ? [ 0, s.y - h ] : [ s.x + c, s.y - h ], p = a.metrics.left - u - c + f[0], m = a.metrics.top - u + f[1], y = p + l.w, g = m + l.h, b = new C(p, m), v = new C(y, m), x = new C(p, g), w = new C(y, g);
                        if (e && s.vertical) {
                            const t = new C(-c, c), e = -Math.PI / 2, n = new C(5, 0);
                            b.S(e, t).s(n), v.S(e, t).s(n), x.S(e, t).s(n), w.S(e, t).s(n);
                        }
                        r.push({
                            tl: b,
                            tr: v,
                            bl: x,
                            br: w,
                            tex: l,
                            writingMode: t.writingMode,
                            glyphOffset: d
                        });
                    }
                    return r;
                }(n.horizontal, u, this.glyphAtlas.positions[e]), d && (D = d(null, l), D = v(D) ? [ 0, 0, 0, 0 ] : tn([], D)), 
                f && (L = f(this.options.zoom, l), un(L) && (L = 14)), p && (H = p(null, l), H = tn([], H)), 
                m && (U = m(null, l)), y && (q = 255 * y(null, l)), g && (V = g(null, l) || 0), 
                b && ($ = b(null, l) || 0), x && (X = +("map" === x(null, l))), w && (Y = +("map" === w(null, l))), 
                k && (Z = cn(k(null, l), 0, 360) * Math.PI / 180);
            } else N = n ? function(t) {
                const e = t.image, n = t.top - 1 / e.pixelRatio, i = t.left - 1 / e.pixelRatio, r = t.bottom + 1 / e.pixelRatio, o = t.right + 1 / e.pixelRatio;
                let s, a, l, u;
                return s = new C(i, n), a = new C(o, n), l = new C(o, r), u = new C(i, r), [ {
                    tl: s,
                    tr: a,
                    bl: u,
                    br: l,
                    tex: {
                        x: e.tl[0],
                        y: e.tl[1],
                        w: e.displaySize[0],
                        h: e.displaySize[1]
                    },
                    writingMode: void 0,
                    glyphOffset: [ 0, 0 ]
                } ];
            }(n) : function() {
                const t = new C(0, 0), e = new C(0, 0), n = new C(0, 0);
                return [ {
                    tl: t,
                    tr: e,
                    bl: new C(0, 0),
                    br: n,
                    tex: {
                        x: 0,
                        y: 0,
                        w: 0,
                        h: 0
                    },
                    writingMode: void 0,
                    glyphOffset: [ 0, 0 ]
                } ];
            }(), S && (G = S(null, l)), M && (W = M(null, l)), P && (B = P(null, l)), I && (J = I(null, l)), 
            j && (X = +("map" === j(null, l))), z && (Y = +("map" === z(null, l))), F && (Z = cn(F(null, l), 0, 360) * Math.PI / 180);
            const tt = O || A;
            tt && (K = tt(null, l) || 0);
            const et = E || _;
            let nt;
            et && (Q = et(null, l) || 0);
            const it = T || R;
            it && (nt = 255 * it(this.options.zoom, l));
            const rt = this.options.EXTENT, ot = N.length, {altitudeScale: st, altitudeProperty: at, defaultAltitude: lt} = this.options, {altitude: ut} = an(t.feature, st, at, lt);
            for (let t = 0; t < i.length; t++) {
                const e = i[t], n = e.z || ut || 0;
                if (rt !== 1 / 0 && ln(e, rt)) continue;
                const o = e.x, a = e.y, l = N.length;
                for (let t = 0; t < l; t++) {
                    const i = N[t], {tl: l, tr: d, bl: f, br: p, tex: m} = i;
                    this.bt(r, o, a, n, 10 * l.x, 10 * l.y, m.x, m.y + m.h), c && this.vt(r, u, ot, i.glyphOffset, e, h, e.axis, e.angleR), 
                    this.xt(r, D, L, H, U, q, V, $, G, W, B, J, nt, X, Y, Z, K, Q), this.bt(r, o, a, n, 10 * d.x, 10 * d.y, m.x + m.w, m.y + m.h), 
                    c && this.vt(r, u, ot, i.glyphOffset, e, h, e.axis, e.angleR), this.xt(r, D, L, H, U, q, V, $, G, W, B, J, nt, X, Y, Z, K, Q), 
                    this.bt(r, o, a, n, 10 * f.x, 10 * f.y, m.x, m.y), c && this.vt(r, u, ot, i.glyphOffset, e, h, e.axis, e.angleR), 
                    this.xt(r, D, L, H, U, q, V, $, G, W, B, J, nt, X, Y, Z, K, Q), this.bt(r, o, a, n, 10 * p.x, 10 * p.y, m.x + m.w, m.y), 
                    c && this.vt(r, u, ot, i.glyphOffset, e, h, e.axis, e.angleR), this.xt(r, D, L, H, U, q, V, $, G, W, B, J, nt, X, Y, Z, K, Q), 
                    this.addElements(s, s + 1, s + 2), this.addElements(s + 1, s + 2, s + 3), s += 4;
                    const y = Math.max(Math.abs(o), Math.abs(a), Math.abs(n));
                    y > this.maxPos && (this.maxPos = y);
                }
            }
        }
        bt(t, e, n, i, r, o, s, a) {
            this.fillPosition(t, e, n, i), t.aShape.push(r, o), t.aTexCoord.push(s, a);
        }
        vt(t, e, n, i, r, o, s, a) {
            if (t.aCount.push(n), e) {
                t.aGlyphOffset.push(i[0], i[1]), this.yt() && t.aPitchRotation.push(s[0], s[1], a);
                const e = r.startIndex;
                t.aSegment.push(r.segment + e, e, r.line.length), t.aVertical.push(o);
            }
        }
        xt(t, e, n, i, r, o, s, a, l, u, c, h, d, f, p, m, y, g) {
            const {textFillFn: b, textSizeFn: v, textHaloFillFn: x, textHaloRadiusFn: w, textHaloOpacityFn: k, textDxFn: A, textDyFn: _, textPitchAlignmentFn: T, textRotationAlignmentFn: S, textRotationFn: M, textAllowOverlapFn: P, textIgnorePlacementFn: I, textOpacityFn: j, markerWidthFn: z, markerHeightFn: F, markerDxFn: O, markerDyFn: C, markerPitchAlignmentFn: E, markerRotationAlignmentFn: R, markerRotationFn: N, markerAllowOverlapFn: D, markerIgnorePlacementFn: L, markerOpacityFn: H} = this.et;
            b && t.aTextFill.push(...e), v && t.aTextSize.push(n), x && t.aTextHaloFill.push(...i), 
            w && t.aTextHaloRadius.push(r), k && t.aTextHaloOpacity.push(o), A && t.aTextDx.push(s), 
            _ && t.aTextDy.push(a), z && t.aMarkerWidth.push(l), F && t.aMarkerHeight.push(u), 
            O && t.aMarkerDx.push(c), C && t.aMarkerDy.push(h), (H || j) && t.aColorOpacity.push(d), 
            (T || E) && t.aPitchAlign.push(f), (R || S) && t.aRotationAlign.push(p), (N || M) && t.aRotation.push(9362 * m);
            const U = D || P, q = L || I;
            (U || q) && t.aOverlap.push((U ? 8 : 0) + 4 * y + ((q ? 2 : 0) + g)), r > 0 && (this.properties.hasHalo = 1);
        }
        gt(t, e, n) {
            const {feature: i, symbol: r} = t, o = this.wt(t, r), s = i.properties, {markerSpacingFn: a, textSpacingFn: l} = this.et, u = ((a ? a(null, s) : r.markerSpacing) || (l ? l(null, s) : r.textSpacing) || 250) * n, c = this.options.altitudeToTileScale;
            return Xs(t, this.lineVertex, e, n, this.options.EXTENT, o, u, this.yt(), c);
        }
        wt(t, e) {
            let n;
            return n = this.et.markerPlacementFn ? this.et.markerPlacementFn(this.options.zoom, t.feature.properties) : e.markerPlacement || this.dt, 
            this.ot || !e.markerPlacement && !e.isIconText || (this.ot = n), !this.dt || e.isIconText || this.st || (this.st = n), 
            n;
        }
        getPackSDFFormat(t) {
            if ("line" !== this.dt || t.isIconText) return [ ...this.getPositionFormat(), {
                type: Int16Array,
                width: 2,
                name: "aShape"
            }, {
                type: Uint16Array,
                width: 2,
                name: "aTexCoord"
            }, {
                type: Uint8Array,
                width: 1,
                name: "aCount"
            } ];
            {
                const t = [ ...this.getPositionFormat(), {
                    type: Int16Array,
                    width: 2,
                    name: "aShape"
                }, {
                    type: Uint16Array,
                    width: 2,
                    name: "aTexCoord"
                }, {
                    type: Uint8Array,
                    width: 1,
                    name: "aCount"
                }, {
                    type: Int16Array,
                    width: 2,
                    name: "aGlyphOffset"
                }, {
                    type: Uint16Array,
                    width: 3,
                    name: "aSegment"
                }, {
                    type: Uint8Array,
                    width: 1,
                    name: "aVertical"
                } ];
                return this.yt() && t.push({
                    type: Float32Array,
                    width: 3,
                    name: "aPitchRotation"
                }), t;
            }
        }
        getPackMarkerFormat() {
            return [ ...this.getPositionFormat(), {
                type: Int16Array,
                width: 2,
                name: "aShape"
            }, {
                type: Uint16Array,
                width: 2,
                name: "aTexCoord"
            } ];
        }
    }
    class Ks {
        constructor(t) {
            this.x = t.x, this.y = t.y, this.z = t.z || 0;
        }
        clone() {
            return new Ks(this);
        }
        P() {
            return this._(this.mag()), this;
        }
        _(t) {
            return this.x /= t, this.y /= t, this.z /= t, this;
        }
        I() {
            var t = this.y;
            return this.y = this.x, this.x = -t, this;
        }
        mag() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }
        add(t) {
            return this.clone().s(t);
        }
        sub(t) {
            return this.clone().u(t);
        }
        s(t) {
            return this.x += t.x, this.y += t.y, this.z += t.z, this;
        }
        u(t) {
            return this.x -= t.x, this.y -= t.y, this.z -= t.z, this;
        }
        equals(t) {
            return this.x === t.x && this.y === t.y && this.z === t.z;
        }
        mult(t) {
            return this.clone().A(t);
        }
        A(t) {
            return this.x *= t, this.y *= t, this.z *= t, this;
        }
        dist(t) {
            return Math.sqrt(this.distSqr(t));
        }
        distSqr(t) {
            var e = t.x - this.x, n = t.y - this.y, i = t.z - this.z;
            return e * e + n * n + i * i;
        }
        j() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), 
            this;
        }
        angleTo(t) {
            return Math.atan2(this.y - t.y, this.x - t.x);
        }
    }
    const Qs = Math.cos(Math.PI / 180 * 37.5), ta = Math.pow(2, 16) / 1, ea = new C, na = new C, ia = new C;
    class ra extends Ho {
        constructor(t, e, n) {
            super(t, e, n);
            let i = !1;
            const {lineDasharrayFn: r, lineDashColorFn: o} = this.et;
            this.hasGradient = this.symbol.lineGradientProperty, r && (i = function(t, e, n) {
                for (let i = 0; i < t.length; i++) if (n(e, t[i].properties)) return !0;
                return !1;
            }(t, this.options.zoom, r), i && (this.dasharrayFn = r)), this.hasDasharray = aa(this.symbol.lineDasharray) || i, 
            this.hasDasharray && o && (this.dashColorFn = o);
        }
        createStyledVector(t, e, n, i, r) {
            const o = new dn(t, e, n, i), s = o.getLineResource();
            return !this.options.atlas && s && (r[s] = [ 0, 0 ]), o;
        }
        getFormat() {
            const {lineWidthFn: t, lineStrokeWidthFn: e, lineStrokeColorFn: n, lineColorFn: i, lineOpacityFn: r, lineDxFn: o, lineDyFn: s, linePatternAnimSpeedFn: a, linePatternGapFn: l} = this.et, u = [ ...this.getPositionFormat() ];
            if (u.push(this.iconAtlas || this.hasDasharray ? {
                type: Int8Array,
                width: 3,
                name: "aExtrude"
            } : {
                type: Int8Array,
                width: 2,
                name: "aExtrude"
            }), u.push({
                type: this.options.positionType || Uint16Array,
                width: 1,
                name: "aLinesofar"
            }), t && u.push({
                type: Uint8Array,
                width: 1,
                name: "aLineWidth"
            }), e && u.push({
                type: Uint8Array,
                width: 1,
                name: "aLineStrokeWidth"
            }), i && u.push({
                type: Uint8Array,
                width: 4,
                name: "aColor"
            }), n && u.push({
                type: Uint8Array,
                width: 4,
                name: "aStrokeColor"
            }), r && u.push({
                type: Uint8Array,
                width: 1,
                name: "aOpacity"
            }), this.dasharrayFn && u.push({
                type: Uint8Array,
                width: 4,
                name: "aDasharray"
            }), this.dashColorFn && u.push({
                type: Uint8Array,
                width: 4,
                name: "aDashColor"
            }), this.iconAtlas) {
                const t = this.getIconAtlasMaxValue();
                u.push({
                    type: t > 255 ? Uint16Array : Uint8Array,
                    width: 4,
                    name: "aTexInfo"
                });
            }
            return (o || s) && u.push({
                type: Int8Array,
                width: 2,
                name: "aLineDxDy"
            }), (a || l) && u.push({
                type: Int8Array,
                width: 2,
                name: "aLinePattern"
            }), u;
        }
        placeVector(t) {
            const {lineJoinFn: e, lineCapFn: n, lineWidthFn: i, lineHeightFn: r, lineStrokeWidthFn: o, lineStrokeColorFn: s, lineColorFn: a, lineOpacityFn: l, lineDxFn: u, lineDyFn: c, linePatternAnimSpeedFn: h, linePatternGapFn: d} = this.et, f = this.symbol, p = t.feature, m = p.properties;
            let y = f.lineJoin || "miter", g = f.lineCap || "butt";
            if (e && (y = e(this.options.zoom, m) || "miter"), n && (g = n(this.options.zoom, m) || "butt"), 
            i) {
                let t = i(this.options.zoom, m);
                Ve(t) && (t = 4), this.feaLineWidth = +t;
            } else this.feaLineWidth = +f.lineWidth;
            if (r) {
                let t = r(this.options.zoom, m);
                Ve(t) && (t = this.feaLineWidth), this.feaLineHeight = +t;
            } else this.feaLineHeight = +f.lineHeight || this.feaLineWidth;
            if (o) {
                let t = o(this.options.zoom, m);
                Ve(t) && (t = 0), this.feaLineStrokeWidth = t;
            } else this.feaLineStrokeWidth = f.lineStrokeWidth || 0;
            if (a && (this.feaColor = a(this.options.zoom, m) || [ 255, 255, 255, 255 ], this.feaColor = v(this.feaColor) ? [ 0, 0, 0, 0 ] : tn([], this.feaColor)), 
            s && (this.feaStrokeColor = s(this.options.zoom, m) || [ 0, 0, 0, 255 ], this.feaStrokeColor = v(this.feaStrokeColor) ? [ 0, 0, 0, 0 ] : tn([], this.feaStrokeColor)), 
            l) {
                let t = l(this.options.zoom, m);
                Ve(t) && (t = 1), this.feaOpacity = 255 * t;
            }
            if (this.dasharrayFn) {
                let t = this.dasharrayFn(this.options.zoom, m) || [ 0, 0, 0, 0 ];
                if (t.length < 4) {
                    const e = t;
                    1 === t.length ? t = [ e[0], e[0], e[0], e[0] ] : 2 === t.length ? t = [ e[0], e[1], e[0], e[1] ] : 3 === t.length && (t = [ e[0], e[1], e[2], e[2] ]);
                }
                this.feaDash = t;
            }
            if (this.dashColorFn) {
                let t = (this.dashColorFn ? this.dashColorFn(this.options.zoom, m) : this.symbol.lineDashColor) || [ 0, 0, 0, 0 ];
                t = tn([], t), this.feaDashColor = t;
            }
            if (this.iconAtlas) {
                const e = t.getLineResource(), n = this.iconAtlas.glyphMap[e];
                if (this.feaTexInfo = this.feaTexInfo || [ 0, 0, 0, 0 ], n) {
                    const {tl: t, displaySize: n} = this.iconAtlas.positions[e];
                    this.feaTexInfo[0] = t[0] + 1, this.feaTexInfo[1] = t[1] + 1, this.feaTexInfo[2] = n[0] - 3, 
                    this.feaTexInfo[3] = n[1] - 3;
                } else this.feaTexInfo[0] = this.feaTexInfo[1] = this.feaTexInfo[2] = this.feaTexInfo[3] = 0;
            }
            if (u) {
                let t = u(this.options.zoom, m);
                Ve(t) && (t = 0), this.feaLineDx = t;
            }
            if (c) {
                let t = c(this.options.zoom, m);
                Ve(t) && (t = 0), this.feaLineDy = t;
            }
            if (h) {
                let t = h(this.options.zoom, m);
                Ve(t) && (t = 0), 0 !== t && (this.properties.hasPatternAnim = 1), this.feaPatternAnimSpeed = t;
            }
            if (d) {
                let t = d(this.options.zoom, m);
                Ve(t) && (t = 0), this.feaLinePatternGap = t;
            }
            const b = this.options.EXTENT;
            let x = p.geometry;
            if (b !== 1 / 0) {
                x = [];
                const t = [];
                for (let e = 0; e < p.geometry.length; e++) {
                    t[0] = p.geometry[e];
                    const n = Ns(t, -1, -1, b + 1, b + 1);
                    if (3 === p.type && n.length > 1) {
                        const t = n[0], e = n[n.length - 1];
                        ha(t[0], e[e.length - 1]) && (n[0] = e.concat(t.slice(1)), n.length = n.length - 1);
                    }
                    x.push(...n);
                }
            }
            const w = this.needAltitudeAttribute() ? 2 : 3;
            for (let t = 0; t < x.length; t++) this.offset = this.data.aPosition.length / w, 
            this.kt(x[t], p, y, g, 2, 1.05);
        }
        At() {
            return this.iconAtlas && this.feaTexInfo[2] && this.feaTexInfo[3];
        }
        kt(t, e, n, i, r, o) {
            const s = this.At() || aa(this.feaDash) || aa(this.symbol.lineDasharray), a = this.options.isTube;
            a && (t = t.map(t => new Ks(t))), this.overscaling = 1;
            const l = this.options.EXTENT;
            if (this.distance = 0, this.scaledDistance = 0, this.totalDistance = 0, this.prevVertex = null, 
            this.symbol.lineGradientProperty && e.properties && $e(e.properties.mapbox_clip_start) && $e(e.properties.mapbox_clip_end)) {
                this.clipStart = +e.properties.mapbox_clip_start, this.clipEnd = +e.properties.mapbox_clip_end;
                for (let e = 0; e < t.length - 1; e++) this.totalDistance += t[e].dist(t[e + 1]);
                this.updateScaledDistance();
            }
            const u = 3 === e.type && !t.clipped;
            let c = t.length;
            for (;c >= 2 && ha(t[c - 1], t[c - 2]); ) c--;
            let h = 0;
            for (;h < c - 1 && ha(t[h], t[h + 1]); ) h++;
            if (c < (u ? 3 : 2)) return;
            "bevel" === n && (r = 1.05);
            const d = this.overscaling <= 16 ? 15 * l / (512 * this.overscaling) : 0, f = {
                vertexLength: 0,
                primitiveLength: 0,
                currentNormal: null
            };
            let p, m, y, g, b;
            this.e1 = this.e2 = -1, u && (p = t[c - 2], b = t[h].sub(p).P().I());
            for (let e = h; e < c; e++) {
                if (y = e === c - 1 ? u ? t[h + 1] : void 0 : t[e + 1], y && ha(t[e], y)) continue;
                b && (g = b), p && (m = p), p = t[e], b = y ? y.sub(p).P().I() : g, f.dir = m ? p.sub(m).P() : y.sub(p).P(), 
                g = g || b, f.currentNormal = g;
                let l = g.add(b);
                0 === l.x && 0 === l.y || l.P();
                const v = g.x * b.x + g.y * b.y, x = l.x * b.x + l.y * b.y, w = 0 !== x ? 1 / x : 1 / 0, k = 2 * Math.sqrt(2 - 2 * x), A = x < Qs && m && y, _ = g.x * b.y - g.y * b.x > 0;
                if (!a && A && e > h) {
                    const t = p.dist(m);
                    if (t > 2 * d) {
                        const e = p.sub(p.sub(m).A(d / t).j());
                        e.z = p.z, this.updateDistance(m, e), this.addCurrentVertex(e, g, 0, 0, f), m = e;
                    }
                }
                const T = m && y;
                f.middleVertex = T;
                let S = T ? n : u ? "butt" : i;
                if (T && "round" === S && (w < o ? S = "miter" : w <= 2 && (S = "fakeround")), "miter" === S && w > r && !a && (S = "bevel"), 
                "bevel" === S && (w > 2 && (S = "flipbevel"), w < r && (S = "miter")), m && this.updateDistance(m, p), 
                "miter" === S) a ? (this.addCurrentVertex(p, g, 0, 0, f), f.dir = y.sub(p).P(), 
                this.addCurrentVertex(p, b, 0, 0, f)) : (l.A(w), this.addCurrentVertex(p, l, 0, 0, f), 
                s && (f.currentNormal = b, this.addCurrentVertex(p, l, 0, 0, f))); else if ("flipbevel" === S) {
                    if (w > 100) l = b.mult(-1); else {
                        const t = w * g.add(b).mag() / g.sub(b).mag();
                        l.I().A(t * (_ ? -1 : 1));
                    }
                    this.addCurrentVertex(p, l, 0, 0, f), this.addCurrentVertex(p, l.mult(-1), 0, 0, f);
                } else if ("bevel" === S || "fakeround" === S) {
                    const t = -Math.sqrt(w * w - 1), e = _ ? t : 0, n = _ ? 0 : t;
                    if (m && this.addCurrentVertex(p, g, e, n, f), "fakeround" === S) {
                        const t = Math.round(180 * k / Math.PI / 20);
                        for (let e = 1; e < t; e++) {
                            let n = e / t;
                            if (.5 !== n) {
                                const t = n - .5;
                                n += n * t * (n - 1) * ((1.0904 + v * (v * (3.55645 - 1.43519 * v) - 3.2452)) * t * t + (.848013 + v * (.215638 * v - 1.06021)));
                            }
                            const i = b.sub(g).A(n).s(g).P().A(_ ? -1 : 1);
                            this.addHalfVertex(p, i.x, i.y, !1, _, 0, f);
                        }
                    }
                    y && (f.currentNormal = b, this.addCurrentVertex(p, b, -e, -n, f));
                } else if ("butt" === S) this.addCurrentVertex(p, l, 0, 0, f); else if ("square" === S) {
                    const t = m ? 1 : -1;
                    this.addCurrentVertex(p, l, t, t, f);
                } else "round" === S && (m && (this.addCurrentVertex(p, g, 0, 0, f), this.addCurrentVertex(p, g, 1, 1, f, !0)), 
                y && (this.addCurrentVertex(p, b, -1, -1, f, !0), this.addCurrentVertex(p, b, 0, 0, f)));
                if (!a && A && e < c - 1) {
                    const t = p.dist(y);
                    if (t > 2 * d) {
                        const e = p.add(y.sub(p).A(d / t).j());
                        e.z = p.z, this.updateDistance(p, e), this.addCurrentVertex(e, b, 0, 0, f), p = e;
                    }
                }
            }
        }
        addCurrentVertex(t, e, n, i, r, o = !1) {
            const s = e.x + e.y * n, a = e.y - e.x * n, l = e.y * i - e.x, u = -e.y - e.x * i;
            let c = 0, h = 0;
            if (r.middleVertex) {
                ea.x = s, ea.y = a, na.x = l, na.y = u;
                const t = r.currentNormal;
                if (c = ca(t, ea), 0 === n && 0 === i) h = -c; else {
                    const e = ia;
                    e.x = t.x, e.y = t.y, e.A(-1), h = ca(e, na);
                }
            }
            this.addHalfVertex(t, s, a, o, !1, n, r, c), this.addHalfVertex(t, l, u, o, !0, -i, r, h), 
            this.prevVertex && ha(t, this.prevVertex) || (this.prevVertex = t), this.distance > ta / 2 && 0 === this.totalDistance && (this.distance = 0, 
            this.updateScaledDistance(), this.addCurrentVertex(t, e, n, i, r, o));
        }
        addHalfVertex({x: t, y: e, z: n}, i, r, o, s, a, l, u) {
            this.fillData(this.data, t, e, n || 0, i, r, o, s, 1 * this.scaledDistance, u);
            const c = l.vertexLength++;
            this.e1 >= 0 && this.e2 >= 0 && (this.addElements(this.e1, this.e2, c), l.primitiveLength++), 
            s ? this.e2 = c : this.e1 = c;
        }
        fillData(t, e, n, i, r, o, s, a, l, u) {
            const {lineWidthFn: c, lineStrokeWidthFn: h, lineStrokeColorFn: d, lineColorFn: f, lineOpacityFn: p, lineDxFn: m, lineDyFn: y, linePatternAnimSpeedFn: g, linePatternGapFn: b} = this.et;
            this.fillPosition(t, e, n, i);
            let v = 63 * r;
            v = (Math.sign(v) || 1) * ((Math.floor(Math.abs(v)) >> 1 << 1) + +s);
            let x = 63 * o;
            x = (Math.sign(x) || 1) * ((Math.floor(Math.abs(x)) >> 1 << 1) + +a), t.aExtrude.push(v, x), 
            (this.iconAtlas || this.hasDasharray) && t.aExtrude.push(63 * u), t.aLinesofar.push(l), 
            c && t.aLineWidth.push(Math.round(2 * this.feaLineWidth)), h && t.aLineStrokeWidth.push(Math.round(2 * this.feaLineStrokeWidth)), 
            f && t.aColor.push(...this.feaColor), d && t.aStrokeColor.push(...this.feaStrokeColor), 
            p && t.aOpacity.push(this.feaOpacity), this.dasharrayFn && t.aDasharray.push(...this.feaDash), 
            this.dashColorFn && t.aDashColor.push(...this.feaDashColor), this.iconAtlas && t.aTexInfo.push(...this.feaTexInfo), 
            (m || y) && t.aLineDxDy.push(this.feaLineDx || 0, this.feaLineDy || 0), (g || b) && t.aLinePattern.push(127 * (this.feaPatternAnimSpeed || 0), 10 * (this.feaLinePatternGap || 0)), 
            this.maxPos = Math.max(this.maxPos, Math.abs(e) + 1, Math.abs(n) + 1);
        }
        addElements(t, e, n) {
            super.addElements(this.offset + t, this.offset + e, this.offset + n);
        }
        _t(t) {
            const e = this.options.EXTENT, n = this.elements;
            for (let i = 0; i < n.length; i += 3) e !== 1 / 0 && (sa(this.data.aPosition, n[i], n[i + 1], 3, e) || sa(this.data.aPosition, n[i + 1], n[i + 2], 3, e)) || t.push(n[i], n[i + 1], n[i + 2]);
        }
        Tt(t) {
            if (t.length <= 1) return t;
            const e = [], n = this.options.EXTENT;
            let i, r = !0;
            for (i = 0; i < t.length - 1; i++) {
                const o = oa(t[i], t[i + 1], n);
                o && r || (e.push(t[i]), r = o);
            }
            return r || e.push(t[i]), e;
        }
        updateDistance(t, e) {
            if (this.options.isTube) {
                const n = t.dist(e), i = Ke(this.options) * (e.z - t.z);
                this.distance += Math.sqrt(n * n + i * i);
            } else this.distance += t.dist(e);
            this.updateScaledDistance();
        }
        updateScaledDistance() {
            this.scaledDistance = this.totalDistance > 0 ? (this.clipStart + (this.clipEnd - this.clipStart) * this.distance / this.totalDistance) * (ta - 1) : this.distance;
        }
    }
    function oa(t, e, n) {
        return n !== 1 / 0 && (t.x < 0 && e.x < 0 || t.x > n && e.x > n || t.y < 0 && e.y < 0 || t.y > n && e.y > n);
    }
    function sa(t, e, n, i, r) {
        if (r === 1 / 0) return !1;
        const o = Math.floor(.5 * t[e * i]), s = Math.floor(.5 * t[e * i + 1]), a = Math.floor(.5 * t[n * i]), l = Math.floor(.5 * t[n * i + 1]);
        return o === a && (o < 0 || o > r) && s !== l || s === l && (s < 0 || s > r) && o !== a;
    }
    function aa(t) {
        if (!Array.isArray(t)) return !1;
        for (let e = 0; e < t.length; e++) if (t[e]) return !0;
        return !1;
    }
    const la = new C(0, 0), ua = new C(0, 0);
    function ca(t, e) {
        const n = t.mag(), i = e.mag();
        la.x = e.x, la.y = e.y;
        const r = t.angleTo(ua), o = e.angleTo(ua);
        return Math.sign(o - r) * Math.sqrt(i * i - n * n);
    }
    function ha(t, e) {
        return t.equals(e) && t.z === e.z;
    }
    /*!
     * from @turf/bboxClip
     * https://github.com/Turfjs/turf
     * MIT LICENSE
     */    const da = [], fa = [];
    function pa(t, e) {
        var n, i, r, o, s, a, l;
        for (i = 1; i <= 8; i *= 2) {
            for (n = [], o = !(ya(r = t[t.length - 1], e) & i), s = 0; s < t.length; s++) {
                if ((l = !(ya(a = t[s], e) & i)) !== o) {
                    const t = ma(r, a, i, e);
                    n.push(void 0 !== a.x ? new C(t[0], t[1]) : t);
                }
                l && n.push(a), r = a, o = l;
            }
            if (!(t = n).length) break;
        }
        return n;
    }
    function ma(t, e, n, i) {
        return da[0] = void 0 === t.x ? t[0] : t.x, da[1] = void 0 === t.y ? t[1] : t.y, 
        t = da, fa[0] = void 0 === e.x ? e[0] : e.x, fa[1] = void 0 === e.y ? e[1] : e.y, 
        e = fa, 8 & n ? [ t[0] + (e[0] - t[0]) * (i[3] - t[1]) / (e[1] - t[1]), i[3] ] : 4 & n ? [ t[0] + (e[0] - t[0]) * (i[1] - t[1]) / (e[1] - t[1]), i[1] ] : 2 & n ? [ i[2], t[1] + (e[1] - t[1]) * (i[2] - t[0]) / (e[0] - t[0]) ] : 1 & n ? [ i[0], t[1] + (e[1] - t[1]) * (i[0] - t[0]) / (e[0] - t[0]) ] : null;
    }
    function ya(t, e) {
        da[0] = void 0 === t.x ? t[0] : t.x, da[1] = void 0 === t.y ? t[1] : t.y;
        var n = 0;
        return (t = da)[0] < e[0] ? n |= 1 : t[0] > e[2] && (n |= 2), t[1] < e[1] ? n |= 4 : t[1] > e[3] && (n |= 8), 
        n;
    }
    const ga = [ 0, 0, 0, 0 ];
    class ba extends Ho {
        constructor(...t) {
            super(...t), this.lineElements = [];
        }
        createStyledVector(t, e, n, i, r) {
            const o = new dn(t, e, n, i), s = o.getPolygonResource();
            return !this.options.atlas && s && (r[s] = [ 0, 0 ]), o;
        }
        getFormat() {
            const t = [ ...this.getPositionFormat() ], {polygonFillFn: e, polygonOpacityFn: n, uvScaleFn: i, uvOffsetFn: r} = this.et;
            if (this.iconAtlas) {
                const e = this.getIconAtlasMaxValue();
                t.push({
                    type: e > 255 ? Uint16Array : Uint8Array,
                    width: 4,
                    name: "aTexInfo"
                });
            }
            return e && t.push({
                type: Uint8Array,
                width: 4,
                name: "aColor"
            }), n && t.push({
                type: Uint8Array,
                width: 1,
                name: "aOpacity"
            }), i && t.push({
                type: Uint16Array,
                width: 2,
                name: "aUVScale"
            }), r && t.push({
                type: Uint8Array,
                width: 2,
                name: "aUVOffset"
            }), t;
        }
        placeVector(t, e) {
            const n = t.feature;
            this.St(n.geometry, n, e);
        }
        St(t, e) {
            let n, i, r, o;
            const {polygonFillFn: s, polygonOpacityFn: a, uvScaleFn: l, uvOffsetFn: u} = this.et, c = e.properties;
            s && (n = s(this.options.zoom, c) || function(t, e, n, i, r) {
                return t[0] = e, t[1] = n, t[2] = i, t[3] = r, t;
            }([], 255, 255, 255, 255), n = v(n) ? ga : tn([], n)), a && (i = a(this.options.zoom, c), 
            Ve(i) && (i = 1), i *= 255), l && (r = l(this.options.zoom, c), Ve(r) && (r = [ 1, 1 ]), 
            r = [ 255 * r[0], 255 * r[1] ]), u && (o = u(this.options.zoom, c), Ve(o) && (o = [ 0, 0 ]), 
            o = [ 255 * o[0], 255 * o[1] ]);
            const h = !!this.iconAtlas, d = qs(t, 500), f = [ 0, 0 ], p = [ 0, 0 ];
            if (h) {
                const {polygonPatternFileFn: t} = this.et, e = t ? t(null, c) : this.symbol.polygonPatternFile;
                if (this.iconAtlas.glyphMap[e]) {
                    const t = this.iconAtlas.positions[e];
                    f[0] = t.tl[0] + 1, f[1] = t.tl[1] + 1, p[0] = t.displaySize[0] - 3, p[1] = t.displaySize[1] - 3;
                }
            }
            const m = this.needAltitudeAttribute() ? 2 : 3, y = [ -1, -1, e.extent + 1, e.extent + 1 ];
            for (let t = 0; t < d.length; t++) {
                const e = d[t], s = this.data.aPosition.length / m, a = [], l = [];
                for (let t = 0; t < e.length; t++) {
                    let s = e[t];
                    if (this.options.EXTENT !== 1 / 0 && 0 === this.maxPosZ && (s = pa(s, y)), 0 !== s.length) {
                        0 !== t && l.push(a.length / 3);
                        for (let t = 0; t < s.length; t++) {
                            const e = s[t].x, l = s[t].y, u = s[t].z || 0;
                            this.fillPosition(this.data, e, l, u), h && this.data.aTexInfo.push(f[0], f[1], p[0], p[1]), 
                            void 0 !== n && this.data.aColor.push(n[0], n[1], n[2], n[3]), void 0 !== i && this.data.aOpacity.push(i), 
                            void 0 !== r && this.data.aUVScale.push(r[0], r[1]), void 0 !== o && this.data.aUVOffset.push(o[0], o[1]);
                            const c = Math.abs(e), d = Math.abs(l);
                            c > this.maxPos && (this.maxPos = c), d > this.maxPos && (this.maxPos = d), a.push(e, l, u);
                        }
                    }
                }
                let u = xe(a, l, 3);
                if (a.length && !u.length) {
                    const t = [];
                    for (let e = 0; e < a.length; e += 3) t[e] = a[e], t[e + 1] = a[e + 2], t[e + 2] = a[e + 1];
                    if (u = xe(t, l, 3), !u.length) {
                        for (let e = 0; e < a.length; e += 3) t[e] = a[e + 1], t[e + 1] = a[e + 2], t[e + 2] = a[e];
                        u = xe(t, l, 3);
                    }
                }
                for (let t = 0; t < u.length; t += 3) this.addElements(s + u[t], s + u[t + 1], s + u[t + 2]);
            }
        }
    }
    class va {
        constructor(t) {
            this.max = t, this.reset();
        }
        reset() {
            return this.data = {}, this.order = [], this;
        }
        clear() {
            this.reset();
        }
        add(t, e) {
            return this.has(t) ? (this.order.splice(this.order.indexOf(t), 1), this.data[t] = e, 
            this.order.push(t)) : (this.data[t] = e, this.order.push(t), this.order.length > this.max && this.getAndRemove(this.order[0])), 
            this;
        }
        has(t) {
            return t in this.data;
        }
        keys() {
            return this.order;
        }
        getAndRemove(t) {
            if (!this.has(t)) return null;
            const e = this.data[t];
            return delete this.data[t], this.order.splice(this.order.indexOf(t), 1), e;
        }
        get(t) {
            return this.has(t) ? this.data[t] : null;
        }
        remove(t) {
            return this.has(t) ? (delete this.data[t], this.order.splice(this.order.indexOf(t), 1), 
            this) : this;
        }
        setMaxSize(t) {
            for (this.max = t; this.order.length > this.max; ) this.getAndRemove(this.order[0]);
            return this;
        }
    }
    /*!
     * based on @mapbox/tiny-sdf
     * https://github.com/mapbox/tiny-sdf
     * @License BSD 2-Clause
     */    var xa = 1e20;
    function wa(t, e, n, i, r, o, s) {
        this.fontSize = t || 24, this.buffer = void 0 === e ? 3 : e, this.cutoff = i || .25, 
        this.fontFamily = r || "sans-serif", this.fontWeight = o || "normal", this.fontStyle = s || "normal", 
        this.radius = n || 8;
        var a = this.size = this.fontSize + 2 * this.buffer;
        this.canvas = "undefined" == typeof document ? new OffscreenCanvas(a, a) : document.createElement("canvas"), 
        this.canvas.width = this.canvas.height = a, this.ctx = this.canvas.getContext("2d", {
            willReadFrequently: !0
        }), this.ctx.font = this.fontStyle + " " + this.fontWeight + " " + this.fontSize + "px " + this.fontFamily, 
        this.ctx.textBaseline = "middle", this.ctx.fillStyle = "black", this.gridOuter = new Float64Array(a * a), 
        this.gridInner = new Float64Array(a * a), this.f = new Float64Array(a), this.z = new Float64Array(a + 1), 
        this.v = new Uint16Array(a), this.middle = Math.round(a / 2 * (navigator.userAgent.indexOf("Gecko/") >= 0 ? 1.2 : 1));
    }
    function ka(t, e, n, i, r, o) {
        for (var s = 0; s < e; s++) Aa(t, s, e, n, i, r, o);
        for (var a = 0; a < n; a++) Aa(t, a * e, 1, e, i, r, o);
    }
    function Aa(t, e, n, i, r, o, s) {
        var a, l, u, c;
        for (o[0] = 0, s[0] = -xa, s[1] = xa, a = 0; a < i; a++) r[a] = t[e + a * n];
        for (a = 1, l = 0, u = 0; a < i; a++) {
            do {
                u = (r[a] - r[c = o[l]] + a * a - c * c) / (a - c) / 2;
            } while (u <= s[l] && --l > -1);
            o[++l] = a, s[l] = u, s[l + 1] = xa;
        }
        for (a = 0, l = 0; a < i; a++) {
            for (;s[l + 1] < a; ) l++;
            t[e + a * n] = r[c = o[l]] + (a - c) * (a - c);
        }
    }
    wa.prototype.draw = function(t, e, n) {
        this.ctx.clearRect(0, 0, this.size, this.size), this.ctx.textBaseline = "bottom", 
        this.ctx.fillText(t, this.buffer, n - this.buffer + 1);
        for (var i = this.ctx.getImageData(0, 0, e, n), r = new Uint8ClampedArray(e * n), o = 0; o < e * n; o++) {
            var s = i.data[4 * o + 3] / 255;
            this.gridOuter[o] = 1 === s ? 0 : 0 === s ? xa : Math.pow(Math.max(0, .5 - s), 2), 
            this.gridInner[o] = 1 === s ? xa : 0 === s ? 0 : Math.pow(Math.max(0, s - .5), 2);
        }
        for (ka(this.gridOuter, e, n, this.f, this.v, this.z), ka(this.gridInner, e, n, this.f, this.v, this.z), 
        o = 0; o < e * n; o++) {
            var a = Math.sqrt(this.gridOuter[o]) - Math.sqrt(this.gridInner[o]);
            r[o] = Math.round(255 - 255 * (a / this.radius + this.cutoff));
        }
        return r;
    };
    let _a = 0;
    class Ta {
        constructor(t, e = 15, n) {
            this.entries = {}, this.Mt = {}, this.Pt = new va(2048, (function() {})), this.It = t, 
            this.jt = e, this.zt = n;
        }
        getGlyphs(t, e) {
            if (!t || !Object.keys(t).length) return void e(null, {
                glyphs: null
            });
            const n = this.entries, i = t.options;
            let r = !0;
            i && (r = !1 !== i.isCharsCompact), r = r || this.zt;
            const o = (i, o, a) => {
                let l = 0, u = 0;
                for (const e in t) if ("options" !== e) {
                    n[e] = n[e] || {}, o[e] = o[e] || {};
                    for (const c in t[e]) {
                        if (u++, u <= i) continue;
                        const t = e.split(" "), h = r && "normal" === t[0] && !vs(+c), d = e + ":" + c + ":" + h;
                        let f;
                        if (this.Pt.has(d) ? f = this.Pt.get(d) : (f = this.Ft(n[e], t, c, h), this.Pt.add(d, f), 
                        l++), f = Sa(f), o[e][c] = f, a.push(f.bitmap.data.buffer), l > this.jt) return void this.It(s(u, o, a));
                    }
                }
                e(null, {
                    glyphs: o,
                    buffers: a
                });
            };
            function s(t, e, n) {
                return () => {
                    o(t, e, n);
                };
            }
            o(0, {}, []);
        }
        Ft(t, e, n, i) {
            const r = e[0], o = e[1], s = e.slice(3).join(" ");
            let a = t.tinySDF, l = "normal" !== r ? 5 : 2;
            const u = i ? -1 : 2;
            if (!a) {
                let e = "400";
                /bolder/i.test(o) ? e = "1000" : /bold/i.test(o) ? e = "900" : /medium/i.test(o) ? e = "500" : /light/i.test(o) && (e = "200"), 
                a = t.tinySDF = new wa(24, l, 8, .25, s, e, r);
            }
            const c = String.fromCharCode(n), h = a.ctx.measureText(c), d = Math.round(h.width), f = a.draw(String.fromCharCode(n), d + 2 * l, 24 + 2 * l);
            if (_a < 4) {
                const t = "undefined" != typeof document && document.getElementById("sdf-debug-" + _a++);
                t && (t.width = d + 2 * l, t.height = a.canvas.height, t.getContext("2d").drawImage(a.canvas, 0, 0));
            }
            return {
                charCode: n,
                bitmap: {
                    width: d + 2 * l,
                    height: 24 + 2 * l,
                    data: f
                },
                metrics: {
                    width: d,
                    height: 24,
                    left: 0,
                    top: -7 - (l - 2),
                    advance: d + l + u
                }
            };
        }
    }
    function Sa(t) {
        const e = {
            width: t.bitmap.width,
            height: t.bitmap.height,
            data: new Uint8ClampedArray(t.bitmap.data)
        };
        return {
            charCode: t.charCode,
            bitmap: e,
            metrics: qe({}, t.metrics)
        };
    }
    class Ma {
        constructor(t) {
            this.options = t || {}, this.Ot = {}, this.Pt = new va(256, (function() {}));
            const e = document.createElement("canvas");
            this.ctx = e.getContext("2d");
        }
        getIcons(t, n) {
            if (!t || !Object.keys(t).length) return void n(null, {
                icons: null
            });
            const i = Object.keys(t), r = {}, o = [];
            let s = 0, a = 0;
            const l = this;
            function u(t, e) {
                r[t] = l.Ct(t, e), r[t] && "error" !== r[t] ? o.push(r[t].data.data.buffer) : delete r[t], 
                a++, a === s && n(null, {
                    icons: r,
                    buffers: o
                });
            }
            function c(t) {
                const e = l.Ot[t.url];
                for (let n = 0; n < e.length; n++) e[n].call(t, t.url, t.size);
                delete l.Ot[t.url];
            }
            function h() {
                const t = l.ctx;
                let e, n;
                try {
                    e = this.width, n = this.height, this.size[0] = e, this.size[1] = n, l.Et(null, this.size), 
                    e = this.size[0], n = this.size[1], t.canvas.width = e, t.canvas.height = n, t.imageSmoothingEnabled = !1, 
                    t.drawImage(this, 0, 0, e, n);
                    const i = t.getImageData(0, 0, e, n).data;
                    l.Rt(this.url, i, e, n);
                } catch (t) {
                    console.warn(t);
                }
                c(this);
            }
            function d(t) {
                console.warn(`failed loading icon(${this.index}) at "${this.url}"`), console.warn(t), 
                l.options.iconErrorUrl ? this.src = l.options.iconErrorUrl : (l.Rt(this.url), c(this));
            }
            let f, p = !1;
            for (let n = 0; n < i.length; n++) {
                const a = i[n], l = t[a];
                this.Et(a, l);
                const c = this.Ct(a, l);
                if (c && "error" !== c) {
                    r[a] = this.Ct(a, l);
                    continue;
                }
                if ("error" === c) continue;
                let m, y = a;
                if (0 === a.indexOf("vector://") && (m = JSON.parse(a.substring("vector://".length)), 
                "path" === m.markerType && (y = e.Util.getMarkerPathBase64(m, m.markerWidth, m.markerHeight))), 
                0 === a.indexOf("vector://") && "path" !== m.markerType) {
                    f = f || new e.Marker([ 0, 0 ]);
                    const {markerFill: t, markerLineColor: n} = m;
                    t && Array.isArray(t) && (m.markerFill = Pa(t)), n && Array.isArray(n) && (m.markerLineColor = Pa(n)), 
                    delete m.markerHorizontalAlignment, delete m.markerVerticalAlignment, delete m.markerDx, 
                    delete m.markerDy, delete m.markerPlacement, delete m.markerFile, m.markerWidth = l[0], 
                    m.markerHeight = l[1], f.setSymbol(m);
                    const i = f["_getSprite".trim()]();
                    if (i) {
                        const t = i.canvas, e = t.width, n = t.height, s = t.getContext("2d").getImageData(0, 0, e, n).data;
                        r[a] = {
                            data: {
                                data: new Uint8ClampedArray(s),
                                width: e,
                                height: n
                            },
                            url: a
                        }, o.push(r[a].data.data.buffer), this.Rt(a, s, e, n);
                    }
                } else {
                    if (this.Ot[a]) {
                        p = !0, s++, this.Ot[a].push(u);
                        continue;
                    }
                    this.Ot[a] = [], this.Ot[a].push(u);
                    const t = new Image;
                    t.index = n, t.size = l, t.onload = h, t.onerror = d, t.onabort = d, t.url = a, 
                    t.crossOrigin = "Anonymous", p = !0, s++, t.src = y;
                }
            }
            p || n(null, {
                icons: r,
                buffers: o
            });
        }
        Nt(t, e, n) {
            const i = this.Pt.get(t);
            return i && "error" !== i && i.data.width >= e && i.data.height >= n;
        }
        Rt(t, e, n, i) {
            this.Nt(t, n, i) || this.Pt.add(t, e ? {
                data: {
                    data: e,
                    width: n,
                    height: i
                },
                url: t
            } : "error");
        }
        Ct(t, e) {
            if (!this.Nt(t, e[0], e[1])) return null;
            const n = this.Pt.get(t);
            return n ? "error" === n ? n : {
                data: {
                    data: new Uint8ClampedArray(n.data.data),
                    width: n.data.width,
                    height: n.data.height
                },
                url: n.url
            } : null;
        }
        Et(t, e) {
            if (!e[0] || !e[1]) return;
            const n = this.options.maxSize || 2048;
            let [i, r] = e;
            const o = i / r;
            if (t) {
                const e = this.Pt.get(t);
                if (e && "error" !== e) {
                    const {width: t, height: n} = e.data;
                    t > i && (i = t), n > r && (r = n);
                }
            }
            i > n && (r = n / o, i = n), r > n && (i = n * o, r = n), e[0] = Math.floor(i), 
            e[1] = Math.floor(r);
        }
    }
    function Pa(t) {
        return 3 === t.length && t.push(1), t.reduce((t, e, n) => t + (n < 3 ? 255 * e + "," : e + ")"), "rgba(");
    }
    var Ia = Object.freeze({
        __proto__: null,
        clipPolygon: pa,
        calculateSignedArea: on,
        getFeaAltitudeAndHeight: an,
        generatePickingIndiceIndex: hn,
        convertRTLText: Os,
        packPosition: fn,
        unpackPosition: function(t, e, n, i) {
            const r = (Math.sign(e) || 1) * (Math.abs(e) % pn), o = (Math.sign(n) || 1) * (Math.abs(n) % pn), s = Math.floor(Math.abs(e) / pn), a = Math.floor(Math.abs(n) / pn);
            return t[0] = r, t[1] = o, t[2] = Math.sign(i + 1e-5) * (2 * s + a) * mn + i, t;
        },
        convertGeometry: Ue,
        getPosArrayType: Le,
        getUnsignedArrayType: He,
        getIndexArrayType: De
    });
    const ja = {}, za = {}, Fa = [];
    var Oa = Object.freeze({
        __proto__: null,
        loadSymbolFnTypes: function t(e, n) {
            if (!e) return null;
            var i = !1;
            if (Array.isArray(e)) {
                var r, o = [];
                for (let s = 0; s < e.length; s++) (r = t(e[s], n)) ? (o.push(r), i = !0) : o.push(e[s]);
                return i ? o : e;
            }
            var s = {
                __fn_types_loaded: !0
            };
            const a = [];
            for (const t in e) Xe(e, t) && a.push(t);
            const l = function(t) {
                Object.defineProperty(s, t, {
                    get: function() {
                        return this["__fn_" + t] || (this["__fn_" + t] = x(this["_" + t])), this["__fn_" + t].apply(this, n());
                    },
                    set: function(e) {
                        this["_" + t] = e;
                    },
                    configurable: !0,
                    enumerable: !0
                });
            }, u = {}, c = function(t, e) {
                Object.defineProperty(s, t, {
                    get: function() {
                        this["__fn_" + t] || (this["__fn_" + t] = Mo(this["_" + t], e));
                        const i = n()[0];
                        u.zoom = i;
                        try {
                            return this["__fn_" + t].evaluateWithoutErrorHandling(u, ja, za, null, Fa);
                        } catch (t) {
                            return null;
                        }
                    },
                    set: function(e) {
                        this["_" + t] = e;
                    },
                    configurable: !0,
                    enumerable: !0
                });
            };
            for (let t = 0, n = a.length; t < n; t++) {
                const n = a[t];
                if (v(e[n])) i = !0, s["_" + n] = e[n], l(n); else if (Po(e[n])) {
                    i = !0;
                    const t = Oo(n);
                    s["_" + n] = e[n], c(n, t);
                } else s[n] = e[n];
            }
            return i ? s : e;
        }
    });
    const Ca = {
        polygonPatternFile: 1,
        markerFile: 1,
        markerPlacement: 1,
        markerSpacing: 1,
        textName: 1,
        textStyle: 1,
        textFaceName: 1,
        textWeight: 1,
        textPlacement: 1,
        textSpacing: 1,
        lineJoin: 1,
        lineCap: 1,
        linePatternFile: 1
    }, Ea = {
        visible: 1,
        textHorizontalAlignment: 1,
        textVerticalAlignment: 1,
        textWrapWidth: 1,
        markerHorizontalAlignment: 1,
        markerVerticalAlignment: 1
    }, Ra = {
        lineDasharray: 1
    };
    Object.assign(Ea, Ca), Object.assign(Ra, Ca);
    const Na = [ "GeoJSONVectorTileLayer" ];
    class Da extends r.worker.Actor {
        constructor(t, e) {
            super(t);
            const n = e.getMap().id;
            this.Dt = e, this.Lt = n, this.Ht = "vt_" + T();
            const i = e.getJSONType();
            this.Ut = Na.indexOf(i) >= 0, this.qt = {}, this.Vt = new Ma({
                iconErrorUrl: e.options.iconErrorUrl,
                maxSize: e.options.maxIconSize
            });
            const r = !e.getRenderer().isEnableWorkAround("win-intel-gpu-crash");
            this.$t = new Ta(t => {
                e.getMap().getRenderer().callInNextFrame(t);
            }, e.options.glyphSdfLimitPerFrame, r);
        }
        initialize(t) {
            t(null);
        }
        addLayer(t) {
            const e = this.Dt, n = e.getWorkerOptions() || {}, i = this.Ht, r = e.getJSONType(), o = {
                mapId: this.Lt,
                layerId: i,
                command: "addLayer",
                params: {
                    type: r,
                    options: n
                }
            };
            this.Ut ? (void 0 === this.qt[i] && (this.qt[i] = this.getDedicatedWorker()), this.send(o, null, t, this.qt[i])) : this.broadcast(o, null, t);
        }
        abortTile(t, e) {
            const n = this.Ht, i = {
                mapId: this.Lt,
                layerId: n,
                command: "abortTile",
                params: {
                    url: t
                }
            };
            this.Ut ? (void 0 === this.qt[n] && (this.qt[n] = this.getDedicatedWorker()), this.send(i, null, e, this.qt[n])) : this.broadcast(i, null, e);
        }
        removeLayer(t) {
            const e = this.Ht, n = {
                mapId: this.Lt,
                layerId: e,
                command: "removeLayer"
            };
            this.Ut ? (void 0 !== this.qt[e] && this.send(n, null, t, this.qt[e]), delete this.qt[e]) : this.broadcast(n, null, t);
        }
        updateStyle(t, e) {
            const n = this.Ht, i = {
                mapId: this.Lt,
                layerId: n,
                command: "updateStyle",
                params: t
            };
            this.Ut ? void 0 !== this.qt[n] && this.send(i, null, e, this.qt[n]) : this.broadcast(i, null, e);
        }
        updateOptions(t, e) {
            const n = this.Ht, i = {
                mapId: this.Lt,
                layerId: n,
                command: "updateOptions",
                params: t
            };
            this.Ut ? void 0 !== this.qt[n] && this.send(i, null, e, this.qt[n]) : this.broadcast(i, null, e);
        }
        loadTile(t, e) {
            const n = M({}, t);
            n.tileInfo = function(t) {
                const e = {};
                for (const n in t) void 0 !== t[n] && null !== t[n] && (t[n].toJSON ? e[n] = t[n].toJSON() : e[n] = t[n]);
                return e;
            }(t.tileInfo);
            const i = this.Ht, r = {
                mapId: this.Lt,
                layerId: i,
                command: "loadTile",
                params: n
            }, {x: o, y: s} = t.tileInfo, a = (o + s) % this.workers.length;
            this.send(r, null, e, void 0 === this.qt[i] ? this.workers[a].id : this.qt[i]);
        }
        remove() {
            super.remove(), this.qt = {};
        }
        fetchIconGlyphs({icons: t, glyphs: e}, n) {
            this.$t.getGlyphs(e, (e, i) => {
                if (e) throw e;
                const r = i.buffers || [];
                this.Vt.getIcons(t, (t, e) => {
                    if (t) throw t;
                    e.buffers && e.buffers.length && r.push(...e.buffers), n(null, {
                        icons: e.icons,
                        glyphs: i.glyphs
                    }, r);
                });
            });
        }
        setData(t, e) {
            const n = this.Ht, i = {
                mapId: this.Lt,
                layerId: n,
                command: "setData",
                params: {
                    data: t
                }
            };
            this.send(i, null, e, this.qt[n]);
        }
        Gt(t) {
            return t.id;
        }
    }
    const La = {}, Ha = {
        collision: !0,
        fading: !1,
        fadingDuration: 224,
        fadeInDelay: 600,
        fadeOutDelay: 100,
        uniquePlacement: !1,
        depthFunc: "always"
    };
    class Ua {
        constructor(t, e, n) {
            this.Wt = t, this.Bt = e, this.Jt = n || [ 0, 1, 0 ];
        }
        draw(t, e, n, i, r) {
            if (this.Xt || this.Yt(), !this.Zt) {
                this.Zt = this.Wt.buffer(qa(i));
                const t = i / n;
                this.Kt = this.Wt.buffer(Va(i, t));
            }
            if (i !== this.Qt) {
                const t = i / n;
                this.Zt(qa(i)), this.Kt(Va(i, t));
            }
            this.Qt = i;
            let o = this.te;
            if (!o) {
                const t = this.Bt.getDevicePixelRatio() > 1 ? 2 : 1;
                o = this.te = document.createElement("canvas"), o.width = 512 * t, o.height = 64 * t;
                const e = o.getContext("2d");
                e.font = "36px monospace", e.scale(t, t), this.ee = this.Wt.texture({
                    width: o.width,
                    height: o.height,
                    data: o
                });
            }
            const s = o.getContext("2d");
            s.clearRect(0, 0, o.width, o.height), s.fillStyle = `rgba(${this.Jt.map(t => 255 * t).join()})`, 
            s.fillText(t, 20, 36), this.ee({
                width: o.width,
                height: o.height,
                data: o
            }), this.Xt({
                transform: e,
                data: this.Zt,
                texData: this.ne,
                debugLine: 1,
                primitive: "lines",
                framebuffer: r || null,
                image: this.ee,
                count: 8
            }), this.Xt({
                transform: e,
                data: this.Kt,
                texData: this.ne,
                debugLine: 0,
                primitive: "triangle strip",
                framebuffer: r || null,
                image: this.ee,
                count: 4
            });
        }
        delete() {
            this.ee && (this.ee.destroy(), delete this.ee), this.ne && (this.ne.destroy(), delete this.ne), 
            this.Zt && (this.Zt.destroy(), this.Kt.destroy(), delete this.Zt, delete this.Kt), 
            this.Xt && (this.Xt.destroy(), delete this.Xt);
        }
        Yt() {
            this.ne = this.Wt.buffer(new Uint8Array([ 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1 ])), 
            this.Xt = this.Wt({
                vert: "\n                attribute vec2 aPosition;\n                attribute vec2 aTexCoord;\n                uniform mat4 transform;\n\n                varying vec2 vTexCoord;\n                void main()\n                {\n                    gl_Position = transform * vec4(aPosition, 0.0, 1.0);\n                    vTexCoord = aTexCoord;\n                }\n            ",
                frag: "\n                precision mediump float;\n                uniform sampler2D uImage;\n                uniform vec3 uColor;\n                uniform float uOpacity;\n                uniform float uDebugLine;\n\n                varying vec2 vTexCoord;\n\n                void main()\n                {\n                    if (uDebugLine == 1.) {\n                        gl_FragColor = vec4(uColor, 1.0) * uOpacity;\n                    } else {\n                        gl_FragColor = texture2D(uImage, vTexCoord) * uOpacity;\n                    }\n                    gl_FragColor *= gl_FragColor.a;\n                }\n            ",
                attributes: {
                    aPosition: this.Wt.prop("data"),
                    aTexCoord: this.Wt.prop("texData")
                },
                uniforms: {
                    transform: this.Wt.prop("transform"),
                    uColor: this.Jt,
                    uOpacity: 1,
                    uDebugLine: this.Wt.prop("debugLine"),
                    uImage: this.Wt.prop("image")
                },
                count: this.Wt.prop("count"),
                primitive: this.Wt.prop("primitive"),
                depth: {
                    enable: !1,
                    mask: !1
                },
                blend: {
                    enable: !0,
                    func: {
                        src: "one",
                        dst: "one minus src alpha"
                    },
                    equation: "add"
                },
                stencil: {
                    enable: !1
                },
                viewport: {
                    x: 0,
                    y: 0,
                    width: () => this.Bt.getRenderer().canvas.width,
                    height: () => this.Bt.getRenderer().canvas.height
                },
                framebuffer: this.Wt.prop("framebuffer")
            });
        }
    }
    function qa(t) {
        return new Uint16Array([ 0, 0, 0, t, 0, t, t, t, t, t, t, 0, t, 0, 0, 0 ]);
    }
    function Va(t, e) {
        return new Uint16Array([ 0, t - 64 * e, 0, t, 512 * e, t - 64 * e, 512 * e, t ]);
    }
    const $a = new Uint8Array([ 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1 ]), Ga = [];
    class Wa {
        constructor(t, e, i) {
            this.Wt = t;
            (this.ie = new n.reshader.Geometry({
                aPosition: $a
            }, null, $a.length / 2, {
                positionSize: 2
            })).generateBuffers(t), this.re = new n.reshader.Scene, this.oe = [], this.se = 0, 
            this.ae = e, this.Bt = i, this.Yt(t);
        }
        start() {
            this.se = 0, this.re.clear();
        }
        add(t, e, i) {
            const r = this.le(i);
            r.setUniform("ref", t), n.vec3.set(Ga, e, e, 1);
            const o = r.localTransform;
            n.mat4.fromScaling(o, Ga), n.mat4.mul(o, i, o), r.setLocalTransform(o), this.re.addMesh(r);
        }
        render(t) {
            this.ue.render(this.ce, {
                projViewMatrix: this.Bt.projViewMatrix
            }, this.re, t);
        }
        le() {
            const t = this.se++;
            return this.oe[t] || (this.oe[t] = new n.reshader.Mesh(this.ie)), this.oe[t];
        }
        Yt(t) {
            const e = this.ae, i = {
                viewport: {
                    x: 0,
                    y: 0,
                    width: () => e.width,
                    height: () => e.height
                },
                stencil: {
                    enable: !0,
                    mask: 255,
                    func: {
                        cmp: "always",
                        ref: (t, e) => e.ref,
                        mask: 255
                    },
                    op: {
                        fail: "replace",
                        zfail: "replace",
                        zpass: "replace"
                    }
                },
                depth: {
                    enable: !0,
                    func: "always",
                    mask: !1
                },
                colorMask: [ !1, !1, !1, !1 ]
            };
            this.ce = new n.reshader.MeshShader({
                vert: "\n#define SHADER_NAME TILE_STENCIL_VERT\nattribute vec2 aPosition;\nuniform mat4 projViewModelMatrix;\n\nvoid main()\n{\n    gl_Position = projViewModelMatrix * vec4(aPosition, 0.0, 1.0);\n}\n",
                frag: "\n#define SHADER_NAME TILE_STENCIL_FRAG\nvoid main()\n{\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 0.1);\n}\n",
                uniforms: [ {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: function(t, e) {
                        const i = [];
                        return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                    }
                } ],
                extraCommandProps: i
            }), this.ue = new n.reshader.Renderer(t);
        }
        remove() {
            this.ie.dispose();
            for (let t = 0; t < this.oe.length; t++) this.oe[t].dispose();
            this.oe.length = 0, this.ce.dispose();
        }
    }
    const Ba = "__fea_idx".trim();
    function Ja(t, e, n, i, r) {
        const o = {};
        if (function(t) {
            if (!t) return !1;
            for (const e in t) if (void 0 !== t[e] && null !== t[e]) return !0;
            return !1;
        }(t)) {
            for (let s = 0, a = (e || t).length; s < a; s++) {
                let a = e ? t[e[s]] : t[s];
                "id" === r.options.features && r.getFeature && (a = r.getFeature(a), a.layer = n), 
                a.customProps && (a = Ka(a));
                o[e ? e[s] : a[Ba]] = {
                    feature: a,
                    symbol: i
                };
            }
        }
        return o;
    }
    const Xa = "__original_properties", Ya = {
        get: function(t, e) {
            return e in t ? t[e] : t[Xa][e];
        },
        has: function(t, e) {
            return e in t || e in t[Xa];
        }
    }, Za = {};
    function Ka(t) {
        const e = t.properties;
        if (e && e[Xa]) return t;
        const n = t.customProps;
        return n[Xa] = e || Za, t.properties = new Proxy(n, Ya), t;
    }
    const Qa = [], tl = [ 0, 0, 0, 0 ], el = new r.Point(0, 0), nl = {
        color: tl,
        depth: 1,
        stencil: 0
    }, il = t => t.isTerrainSkin(), rl = t => t.isTerrainVector();
    class ol extends r.renderer.TileLayerCanvasRenderer {
        supportRenderMode() {
            return !0;
        }
        constructor(t) {
            super(t), this.ready = !1, this.he = 0, this.de = {}, this.fe = {}, this.pe = {};
        }
        getTileLevelValue(t, e) {
            if (this.isBackTile(t.id)) {
                const n = t.z;
                return n - e >= 0 ? 0 : e - n;
            }
            return 0;
        }
        getWorkerConnection() {
            return this.me;
        }
        getStyleCounter() {
            return this.he;
        }
        setStyle(t) {
            if (this.ye && this.ye.update(), this.me) {
                this.he++, this.ge();
                const e = this.layer.be();
                e.styleCounter = this.he, this.me.updateStyle(e, e => {
                    if (e) throw new Error(e);
                    t || (this.ve = !0, this.xe(), this.setToRedraw()), this.layer.fire("refreshstyle");
                });
            } else this.xe();
        }
        ge() {
            if (this.we) for (const t in this.we) {
                const e = this.we[t];
                e && this.deleteTile(e);
            }
            this.we = this.tilesInView;
            const t = this.tileCache;
            for (const e in this.we) {
                const n = this.we[e];
                n && n.info && t.getAndRemove(n.info.id);
            }
            t.reset(), this.tilesInView = {}, this.tilesLoading = {}, this.de = {}, this._parentTiles = [], 
            this._childTiles = [];
        }
        updateOptions(t) {
            this.me && this.me.updateOptions(this.layer.getWorkerOptions(), e => {
                if (e) throw new Error(e);
                (t.features || t.pickingGeometry || t.altitudeProperty) && (this.clear(), this.ke(), 
                this.xe()), this.setToRedraw();
            });
        }
        updateSceneConfig(t, e, n) {
            const i = 0 === t ? this.Ae() : this._e();
            if (!i || !i[e]) return;
            this.ve = !0;
            const r = this.layer.be(), o = this.layer.Te(t, r);
            i[e].config = o[e].renderPlugin, i[e].updateSceneConfig({
                sceneConfig: n
            }), this.setToRedraw();
        }
        updateDataConfig(t, e, n, i) {
            const r = 0 === t ? this.Ae() : this._e();
            r && r[e] && (this.ve = !0, r[e].updateDataConfig(n, i) ? this.setStyle() : this.setToRedraw());
        }
        updateSymbol(t, e, n) {
            const i = 0 === t ? this.Ae() : this._e();
            if (!i || !i[e]) return !1;
            const r = this.layer.be(), o = this.layer.Te(t, r), s = i[e];
            s.style = o[e];
            const a = s.updateSymbol(n, o[e].symbol);
            return !a && function t(e) {
                if (Array.isArray(e)) {
                    const n = e;
                    for (let e = 0; e < n.length; e++) if (t(n[e])) return !0;
                }
                for (const t in e) if (v(e[t]) || Co.isExpression(e[t])) return !0;
                return !1;
            }(n) && this.setStyle(!0), this.setToRedraw(), a;
        }
        needToRedraw() {
            const t = super.needToRedraw();
            if (!t) {
                const t = this.Se();
                for (let e = 0; e < t.length; e++) if (t[e] && t[e].needToRedraw()) return !0;
            }
            return t;
        }
        needRetireFrames() {
            if (this.ve) return !0;
            const t = this.Se();
            for (let e = 0; e < t.length; e++) if (t[e] && t[e].needToRetireFrames()) return !0;
            return !1;
        }
        needToRefreshTerrainTile() {
            const t = this.Se();
            for (let e = 0; e < t.length; e++) if (t[e] && t[e].needToRefreshTerrainTile()) return !0;
            return !1;
        }
        createContext() {
            const t = this.canvas.gl && this.canvas.gl.wrap;
            if (t) this.gl = this.canvas.gl.wrap(), this.regl = this.canvas.gl.regl; else {
                const {gl: t, regl: e, attributes: n} = this.Me(this.canvas);
                this.gl = t, this.regl = e, this.glOptions = n;
            }
            if (t && (this.canvas.pickingFBO = this.canvas.pickingFBO || this.regl.framebuffer(this.canvas.width, this.canvas.height)), 
            this.pickingFBO = this.canvas.pickingFBO || this.regl.framebuffer(this.canvas.width, this.canvas.height), 
            this.Pe = new Ua(this.regl, this.getMap()), this.Ie(), this.ye = new n.GroundPainter(this.regl, this.layer), 
            !this.consumeTile) {
                const t = this.getMap().VERSION;
                throw new Error(`Incompatible version of maptalks: ${t}, upgrade maptalks >= v1.0.0-rc.14`);
            }
        }
        Me(t) {
            const e = this.layer, i = e.options.glOptions || {
                alpha: !0,
                depth: !0,
                antialias: this.layer.options.antialias
            };
            i.preserveDrawingBuffer = !0, i.stencil = !0;
            const r = this.je(t, i);
            return {
                gl: r,
                attributes: i,
                regl: n.createREGL({
                    gl: r,
                    attributes: i,
                    extensions: [ "ANGLE_instanced_arrays", "OES_element_index_uint", "OES_standard_derivatives" ],
                    optionalExtensions: e.options.glExtensions || [ "OES_vertex_array_object", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_texture_float", "OES_texture_float_linear", "WEBGL_draw_buffers", "EXT_shader_texture_lod", "EXT_frag_depth" ]
                })
            };
        }
        Ie() {
            this.me || (this.me = new Da("@maptalks/vt", this.layer));
            this.me.addLayer((t, e) => {
                this.layer && (this.ready = !0, this.layer.onWorkerReady(t, e), this.layer.fire("workerready"), 
                this.setToRedraw());
            });
        }
        clearCanvas() {
            super.clearCanvas(), this.regl && (this.glOptions.depth ? this.regl.clear({
                color: tl,
                depth: 1,
                stencil: 0
            }) : this.regl.clear({
                color: tl,
                stencil: 0
            }));
        }
        isDrawable() {
            return !0;
        }
        checkResources() {
            return Qa;
        }
        _drawTiles(t, e, n, i, r) {
            if (super._drawTiles(t, e, n, i, r), this.we) if (Object.keys(this.we).length) for (const t in this.we) {
                const e = this.we[t];
                this.tileCache.has(e.id) || this._drawTile(e.info, e.image, r);
            } else this.ze(), delete this.we;
        }
        ze() {
            const t = this.he, e = [], n = [];
            for (const n in this.fe) if (+n !== t) {
                e.push(n);
                this.Ae(n).forEach(t => {
                    t.remove();
                });
            }
            for (const e in this.pe) if (+e !== t) {
                n.push(e);
                this._e(e).forEach(t => {
                    t.remove();
                });
            }
            for (let t = 0; t < e.length; t++) delete this.fe[e[t]];
            for (let t = 0; t < n.length; t++) delete this.pe[n[t]];
        }
        draw(t, e) {
            this.Fe !== t && (this.ve = !1, this.Oe());
            const n = this.layer;
            if (this.prepareCanvas(), !this.ready || !n.ready) return void this.completeRender();
            let i = this.fe[this.he];
            i || (this.xe(), i = this.Ae());
            const r = this._e();
            n.isDefaultRender() || i.length || r.length ? (n.options.collision && (n.clearCollisionIndex(), 
            n.clearBackgroundCollisionIndex()), this.Ce = t, this.Ee = this.Re(this.getMap().getGLRes()), 
            this.Ne = e || {}, this.De(t), super.draw(t), this.Fe !== t && this.Le(t), this.He(t), 
            this.completeRender(), this.Fe = t) : this.completeRender();
        }
        Oe() {
            this.Se().forEach((t, e) => {
                t.renderIndex = e;
            });
        }
        Le() {
            const t = this.Se();
            this.Ue = [];
            let e = +!!this.layer.getGroundConfig().enable;
            t.forEach((t, n) => {
                t.isVisible() && ll(t) && (this.Ue[n] = e, t.needPolygonOffset() && e++);
            }), this.qe = e;
        }
        getFrameTimestamp() {
            return this.Ce;
        }
        drawOnInteracting(t, e, n) {
            this.draw(e, n);
        }
        drawOutline(t) {
            (this.Ve || this.$e) && (this.$e ? this.paintOutlineAll(t) : this.Ve.forEach(e => {
                this[e[0]](t, ...e[1]);
            }));
        }
        getAnalysisMeshes() {
            return this.getShadowMeshes();
        }
        getShadowMeshes() {
            const t = [];
            return this.Ge().forEach(e => {
                if (!e) return;
                if (!this.We(e)) return;
                const n = e.getShadowMeshes();
                if (Array.isArray(n)) for (let e = 0; e < n.length; e++) t.push(n[e]);
            }), t;
        }
        isForeground(t) {
            return !(!this.Be || !this.Be[t.properties.tile.id]);
        }
        isTileNearCamera(t) {
            const e = this.layer;
            let n = e._getTileZoom(this.getMap().getZoom());
            const i = e.getMinZoom(), o = e.getMaxZoom();
            n = r.Util.clamp(n, i, o);
            return n - t.properties.tile.z <= 1;
        }
        isBackTile(t) {
            return !(!this.Je || !this.Je[t]);
        }
        loadTile(t) {
            const {url: e} = t, n = this.de[e];
            if (n) n.keys[t.id] || (n.tiles.push(t), n.keys[t.id] = 1); else {
                const n = this.getTilePointAtTileRes(t.z), i = this.getTileGLScale(t.z);
                this.de[e] = {
                    keys: {},
                    tiles: [ t ]
                }, this.de[e].keys[t.id] = 1;
                const r = this.layer.options.fetchOptions;
                this.me.loadTile({
                    tileInfo: t,
                    glScale: i,
                    zScale: this.Ee,
                    pointAtTileRes: n,
                    fetchOptions: r,
                    styleCounter: this.he
                }, this.Xe.bind(this, e));
            }
            return {};
        }
        getTileGLScale(t) {
            const e = this.getMap();
            return this.layer.getSpatialReference().getResolution(t) / e.getGLRes();
        }
        getTilePointAtTileRes(t) {
            const e = this.getMap(), n = this.layer.getSpatialReference();
            return e.distanceToPointAtRes(100, 100, n.getResolution(t)).x / 1e4;
        }
        Xe(t, e, n) {
            if (!this.de[t]) return;
            if (n && n.canceled) return;
            const i = this.layer, r = i.isDefaultRender(), {tiles: o} = this.de[t];
            if (delete this.de[t], e) {
                if (e.status && 404 === e.status) for (let t = 0; t < o.length; t++) {
                    const e = o[t];
                    this.onTileError(La, e);
                }
                return;
            }
            if (!n) {
                for (let t = 0; t < o.length; t++) {
                    const e = o[t];
                    this.consumeTile({
                        Ye: !0
                    }, e);
                }
                return;
            }
            if (n.style !== this.he) return;
            let s = !1;
            const a = n.features, l = [];
            for (let t = 0; t < n.data.length; t++) {
                const e = n.data[t];
                if (!e || !e.data || !e.styledFeatures.length) continue;
                const {isUpdated: i, layer: r} = this.Ze(0, t, e, a, l);
                l.push(r), i && (s = i);
            }
            for (let t = 0; t < n.featureData.length; t++) {
                const e = n.featureData[t];
                e && e.data && e.styledFeatures.length && this.Ze(1, t, e, a);
            }
            s && i.Ke();
            const u = o[0].z, c = this.layer.getDataSchema(u);
            if (this.Qe(c, n.schema), delete n.features, r && n.data.length !== l.length) {
                const t = n.data;
                n.data = [];
                for (let e = 0; e < t.length; e++) t[e] && t[e].features && n.data.push(t[e]);
            }
            n.layers = l;
            for (let t = 0; t < o.length; t++) {
                const e = o[t];
                if (0 === t && i.options.debugTileData) {
                    const {x: t, y: n, z: r} = e;
                    console.log("tile", {
                        layerId: i.getId(),
                        x: t,
                        y: n,
                        z: r,
                        layers: ul(Object.values(a))
                    });
                }
                const r = 0 === t ? n : sl(n);
                for (let t = 0; t < r.data.length; t++) {
                    if (!r.data[t]) continue;
                    const n = r.data[t].features;
                    for (const t in n) {
                        n[t].tile = e;
                    }
                }
                e.extent = r && r.extent, this.onTileLoad(r, e);
            }
            this.layer.fire("datareceived", {
                url: t
            });
        }
        Ze(t, e, n, i) {
            const {style: r, isUpdated: o} = this.tn(t, e, n.data), s = this.layer, a = s.isDefaultRender(), l = r.symbol, u = Ja(i, n.styledFeatures, e, l, s);
            delete n.styledFeatures, n.features = u;
            let c = n.data;
            return Array.isArray(c) && (c = c[0]), {
                isUpdated: o,
                layer: a ? {
                    layer: c.layer,
                    type: c.type
                } : null
            };
        }
        Qe(t, e) {
            for (const n in e) {
                t[n] || (t[n] = {
                    types: e[n].types,
                    properties: {}
                });
                const i = e[n].properties, r = t[n].properties;
                for (const t in i) (!r[t] || r[t] && "object" !== i[t] && "object" === r[t]) && (r[t] = i[t]);
            }
        }
        tn(t, e, n) {
            Array.isArray(n) && (n = n[0]);
            const i = this.layer;
            let r, o = !1;
            if (i.isDefaultRender() && 0 === t) {
                let t = this.en;
                t || (t = this.en = {});
                const e = n.layer, i = n.type;
                t[e] || (t[e] = []);
                const s = ("plugin_" + i).trim();
                t[e][s] ? r = t[e][s] : (r = this.nn(i), r.filter = n.filter, t[e].push(r), t[e][s] = r, 
                o = !0);
            } else {
                const s = i.be(), a = i.Te(t, s), l = this.Ae();
                if (r = a[e], !r.renderPlugin) {
                    o = !0;
                    const {plugin: t, symbol: i, renderPlugin: s} = this.nn(n.type);
                    l[e] = t, r.symbol = i, r.renderPlugin = s;
                }
            }
            return {
                style: r,
                isUpdated: o
            };
        }
        Se(t) {
            const e = t && t.style;
            let n = this.Ae(e) || [];
            this.layer.isDefaultRender() && this.en && (n = [], t ? t.layers && t.layers.forEach(t => {
                const e = ("plugin_" + t.type).trim();
                n.push(this.en[t.layer][e].plugin);
            }) : Object.keys(this.en).forEach(t => {
                for (let e = 0; e < this.en[t].length; e++) n.push(this.en[t][e].plugin);
            }));
            const i = this._e(e);
            return i && i.length && (n = n.slice(), z(n, i)), n;
        }
        Ge() {
            if (this.layer.isDefaultRender() && this.en) {
                const t = [];
                return Object.keys(this.en).forEach(e => {
                    for (let n = 0; n < this.en[e].length; n++) t.push(this.en[e][n].plugin);
                }), t;
            }
            const t = [];
            for (const e in this.fe) t.push(...this.fe[e]);
            for (const e in this.pe) t.push(...this.pe[e]);
            return t;
        }
        Ae(t) {
            return j(t) && (t = this.he), this.fe[t] || Qa;
        }
        _e(t) {
            return j(t) && (t = this.he), this.pe[t] || Qa;
        }
        De(t, e) {
            const n = !!this.rn, i = this.layer.isDefaultRender() && this.en, r = this.Ne;
            this.Ge().forEach((o, s) => {
                if (!o || e && !e(o)) return;
                if (!this.We(s)) return;
                const a = this.regl, l = this.gl, u = i ? o.defaultSymbol : o.style && o.style.symbol, c = {
                    regl: a,
                    layer: this.layer,
                    symbol: u,
                    gl: l,
                    isRenderingTerrain: n,
                    sceneConfig: o.config ? o.config.sceneConfig : null,
                    dataConfig: o.config ? o.config.dataConfig : null,
                    pluginIndex: s,
                    timestamp: t
                };
                r && M(c, r), o.startFrame(c);
            });
        }
        He(t) {
            const e = this.Ne, n = e.renderMode, i = e && e.renderTarget && e.renderTarget.fbo, r = this.getMap().cameraPosition, o = this.Ge(), s = !!this.rn;
            this.layer.options.collision ? o.forEach(e => {
                if (!this.We(e) || !ll(e)) return;
                if (n && "default" !== n && !e.supportRenderMode(n)) return;
                if (s && !rl(e)) return;
                const i = this.sn(e, 0, r, t);
                e.prepareRender(i), e.updateCollision(i);
            }) : o.forEach(e => {
                if (!this.We(e) || !ll(e)) return;
                if (n && "default" !== n && !e.supportRenderMode(n)) return;
                if (s && !rl(e)) return;
                const i = this.sn(e, 0, r, t);
                e.prepareRender(i);
            });
            const a = !e.timestamp || e.isFinalRender, l = this.Fe !== e.timestamp;
            let u = !1;
            if (l) {
                const e = -this.layer.getPolygonOffset(), n = this.sn(null, e, r, t);
                n.offsetFactor = n.offsetUnits = e, this.ye.paint(n);
            }
            o.forEach((e, o) => {
                if (!this.an(e)) return;
                if (n && "default" !== n && !e.supportRenderMode(n)) return;
                if (s && !rl(e)) return;
                this.regl.clear({
                    stencil: 255,
                    fbo: i
                }), this.isEnableTileStencil() && e.painter && !e.painter.needClearStencil() && this.un(i);
                const a = this.Ue[o] || 0, l = this.sn(e, a, r, t), c = e.endFrame(l);
                c && c.redraw && this.setToRedraw(), u = !0;
            }), u && this.layer.fire("canvasisdirty"), a && this.cn();
        }
        getPolygonOffsetCount() {
            return this.qe || 0;
        }
        cn() {
            if (this.layer.options.debug) {
                const t = this.Ne, e = [], i = this.getMap().projViewMatrix;
                for (const r in this.tilesInView) {
                    const o = this.tilesInView[r].info, s = o.transform, a = this.tilesInView[r].image.extent, l = t && t.renderTarget;
                    if (s && a) {
                        const t = this.getDebugInfo(o.id), r = n.mat4.multiply(e, i, s), u = this.layer.options.tileSize;
                        this.Pe.draw(t, r, u, a, l && l.fbo);
                    }
                }
            }
        }
        an(t) {
            if (!t) return !0;
            const e = this.Ne, n = this.We(t), i = e && e.states && e.states.includesChanged, r = this.hn(t.painter.scene.getMeshes());
            return !n || !i && !r ? 0 : r ? 2 : 1;
        }
        sn(t, e, n, i) {
            const r = !!this.rn, o = r && t && il(t), s = this.regl, a = this.gl, l = {
                regl: s,
                layer: this.layer,
                gl: a,
                isRenderingTerrain: r,
                isRenderingTerrainSkin: o,
                sceneConfig: t && t.config.sceneConfig,
                pluginIndex: t && t.renderIndex,
                polygonOffsetIndex: e,
                cameraPosition: n,
                timestamp: i
            }, u = this.Ne;
            return u && M(l, u), l;
        }
        hn(t) {
            if (!t) return !1;
            const e = this.Ne && this.Ne.sceneFilter;
            return e ? t.filter(t => e(t) || t.properties.hlBloomMesh && e(t.properties.hlBloomMesh)).length > 0 : t.length > 0;
        }
        un(t) {
            const e = this.isEnableTileStencil(), n = this.getCurrentTileZoom();
            let i = this.dn;
            i || (i = this.dn = new Wa(this.regl, this.canvas, this.getMap())), i.start();
            const {tiles: r} = this.pn;
            let {parentTiles: o, childTiles: s} = this.pn, a = 1;
            s = s.sort(al);
            for (let t = 0; t < s.length; t++) this.mn(s[t].info, e ? a : this.getTileLevelValue(s[t].info.z, n)), 
            a++;
            o = o.sort(al);
            for (let t = 0; t < o.length; t++) this.mn(o[t].info, e ? a : this.getTileLevelValue(o[t].info.z, n)), 
            a++;
            const l = r.sort(al);
            for (let t = l.length - 1; t >= 0; t--) this.mn(l[t].info, e ? a : this.getTileLevelValue(l[t].info.z, n)), 
            a++;
            i.render(t);
        }
        mn(t, e) {
            const n = el.set(t.extent2d.xmin, t.extent2d.ymax), i = t.transform = t.transform || this.calculateTileMatrix(n, t.z, t.extent);
            t.stencilRef = e, this.dn.add(e, t.extent, i);
        }
        onDrawTileStart(t) {
            super.onDrawTileStart(t);
            const {tiles: e, childTiles: n, parentTiles: i} = t;
            this.Be = {}, this.Je = {};
            for (let t = 0; t < e.length; t++) this.Be[e[t].info.id] = 1;
            for (let t = 0; t < n.length; t++) this.Je[n[t].info.id] = 1;
            for (let t = 0; t < i.length; t++) this.Je[i[t].info.id] = 1;
            this.pn = t;
        }
        isEnableTileStencil() {
            const t = this.Se();
            for (let e = 0; e < t.length; e++) if (t[e] && t[e].painter && !t[e].painter.isOnly2D()) return !1;
            return !0;
        }
        setTerrainHelper(t) {
            this.rn = t;
        }
        getTerrainHelper() {
            return this.rn;
        }
        drawTileOnTerrain(t, e) {
            ol.prototype.drawTile.call(this, t, e);
        }
        createTerrainTexture(t, e) {
            const n = this.regl, i = n.texture({
                min: "nearest",
                mag: "nearest",
                type: "uint8",
                width: t,
                height: e,
                flipY: !0
            });
            this.yn || (this.yn = n.renderbuffer({
                width: t,
                height: e,
                format: "depth24 stencil8"
            }));
            const r = {
                width: t,
                height: e,
                colors: [ i ],
                colorFormat: "rgba"
            };
            return r.depthStencil = this.yn, n.framebuffer(r);
        }
        renderTerrainSkin(t, e, n, i, r, o) {
            const s = this.Fe, a = this.Ne;
            this.Ne = {
                renderTarget: {
                    fbo: i
                }
            }, this.De(s), this.gn(r, n, i), o && this.bn(o, n, i), this.Ne = a;
        }
        gn(t, e, n) {
            nl.framebuffer = n, this.regl.clear(nl);
            for (let i = 0; i < t.length; i++) this.bn(t[i], e, n);
        }
        bn(t, e, n) {
            this.Ne.viewport = function(t, e) {
                const {extent2d: n, res: i, offset: r} = e, o = t.info.res / i, {info: s} = t, a = s.offset, l = s.extent2d.getWidth() * o, u = s.extent2d.getHeight() * o, c = s.extent2d.xmin * o, h = s.extent2d.ymax * o, d = c - n.xmin, f = n.ymax - h, p = r[0] - a[0], m = a[1] - r[1];
                return {
                    x: d + p,
                    y: n.getHeight() - (f + m + u),
                    width: l,
                    height: u
                };
            }(t, e);
            const {info: i, image: r} = t;
            this.drawTile(i, r, il), this.vn(n);
        }
        vn(t) {
            const e = this.Ge(), n = this.getMap().cameraPosition, i = this.Fe || 0;
            this.layer.options.collision ? e.forEach(t => {
                if (!this.We(t) || !ll(t)) return;
                if (!il(t) || !this.layer.options.awareOfTerrain) return;
                const e = this.sn(t, 0, n, i);
                e.isRenderingTerrainSkin = !0, t.prepareRender(e), t.updateCollision(e);
            }) : e.forEach(t => {
                if (!this.We(t) || !ll(t)) return;
                if (!il(t) || !this.layer.options.awareOfTerrain) return;
                const e = this.sn(t, 0, n, i);
                e.isRenderingTerrainSkin = !0, t.prepareRender(e);
            }), e.forEach((e, n) => {
                if (!this.an(e) || !il(e)) return;
                this.regl.clear({
                    stencil: 255,
                    framebuffer: t
                });
                const i = this.Ue[n] || 0, r = this.sn(e, i, [ 0, 0, 0 ], this.Fe);
                r.isRenderingTerrainSkin = !0, e.endFrame(r);
            });
        }
        drawTile(t, e, n) {
            if (!e.cache) return;
            const i = !!this.rn, r = e.cache, o = el.set(t.extent2d.xmin, t.extent2d.ymax), s = t.transform = t.transform || this.calculateTileMatrix(o, t.z, t.extent), a = t.tileTranslationMatrix = t.tileTranslationMatrix || this.calculateTileTranslationMatrix(o, t.z), l = t.terrainTransform = t.terrainTransform || this.calculateTerrainTileMatrix(o, t.z, t.extent), u = [];
            z(u, e.data), z(u, e.featureData);
            this.Se(e).forEach((o, c) => {
                if (!o || n && !n(o)) return;
                if (!u[c]) return;
                if (!r[c]) return;
                const h = i && il(o), d = this.regl, f = this.gl, p = {
                    regl: d,
                    layer: this.layer,
                    gl: f,
                    sceneConfig: o.config.sceneConfig,
                    pluginIndex: c,
                    tileCache: r[c],
                    tileData: u[c],
                    tileTransform: h ? l : s,
                    tileVectorTransform: s,
                    tileTranslationMatrix: a,
                    tileExtent: e.extent,
                    timestamp: this.Ce,
                    tileInfo: t,
                    tileZoom: this._tileZoom,
                    bloom: this.Ne && this.Ne.bloom,
                    isRenderingTerrain: i,
                    isRenderingTerrainSkin: h
                }, m = o.paintTile(p);
                !this.ve && (m.retire || m.redraw) && o.supportRenderMode("taa") && (this.ve = !0), 
                m.redraw && this.setToRedraw();
            }), e && e.style === this.he && this.xn(t), this.setCanvasUpdated();
        }
        wn(t, e) {
            if (!e.loadTime || e.Ye) return;
            let n = e.cache;
            n || (n = e.cache = {});
            const i = !!this.rn, r = el.set(t.extent2d.xmin, t.extent2d.ymax), o = t.transform = t.transform || this.calculateTileMatrix(r, t.z, e.extent), s = t.tileTranslationMatrix = t.tileTranslationMatrix || this.calculateTileTranslationMatrix(r, t.z), a = t.terrainTransform = t.terrainTransform || this.calculateTerrainTileMatrix(r, t.z, t.extent), l = [];
            z(l, e.data), z(l, e.featureData);
            this.Se(e).forEach((r, u) => {
                if (!r) return;
                if (!l[u]) return;
                const c = i && il(r), h = this.regl, d = this.gl;
                n[u] || (n[u] = {});
                const f = {
                    regl: h,
                    layer: this.layer,
                    gl: d,
                    sceneConfig: r.config.sceneConfig,
                    pluginIndex: u,
                    tileCache: n[u],
                    tileData: l[u],
                    tileTransform: c ? a : o,
                    tileVectorTransform: o,
                    isRenderingTerrain: i,
                    isRenderingTerrainSkin: c,
                    tileTranslationMatrix: s,
                    tileExtent: e.extent,
                    timestamp: this.Ce,
                    tileInfo: t,
                    tileZoom: this._tileZoom
                }, p = r.createTile(f);
                n[u].geometry && (e.data[u] = 1), !this.ve && p.retire && r.supportRenderMode("taa") && (this.ve = !0);
            });
        }
        checkTileInQueue(t) {
            return t.style === this.he;
        }
        pick(t, e, n) {
            const i = [];
            if (!this.layer.isVisible()) return i;
            return this.Se().forEach(r => {
                if (!r) return;
                if (!this.We(r)) return;
                const o = r.pick(t, e, n.tolerance);
                o && (o.type = r.getType(), i.push(o));
            }), i;
        }
        deleteTile(t) {
            if (t) {
                if (t.image && !t.image.Ye) {
                    const e = t.image && t.image.style, n = this.Ae(e);
                    n && n.forEach((e, n) => {
                        e && e.deleteTile({
                            pluginIndex: n,
                            regl: this.regl,
                            layer: this.layer,
                            gl: this.gl,
                            tileCache: t.image.cache ? t.image.cache[n] : {},
                            tileInfo: t.info,
                            tileData: t.image
                        });
                    }), t.image.cache = {};
                }
                super.deleteTile(t);
            }
        }
        abortTileLoading(t, e) {
            e && e.url && (this.me && this.me.abortTile(e.url), delete this.de[e.url]), super.abortTileLoading(t, e);
        }
        resizeCanvas(t) {
            super.resizeCanvas(t);
            const e = this.canvas;
            e && (!this.pickingFBO || this.pickingFBO.width === e.width && this.pickingFBO.height === e.height || (this.pickingFBO.resize(e.width, e.height), 
            this.Se().forEach(t => {
                t && t.resize(e.width, e.height);
            })));
        }
        onRemove() {
            this.dn && this.dn.remove(), this.me && (this.me.removeLayer(t => {
                if (t) throw t;
            }), this.me.remove(), delete this.me), this.pickingFBO && (this.canvas.pickingFBO || this.pickingFBO.destroy(), 
            delete this.pickingFBO), this.Pe && this.Pe.delete(), this.yn && (this.yn.destroy(), 
            delete this.yn), super.onRemove && super.onRemove(), this.ke();
        }
        ke() {
            this.Ge().forEach(t => {
                t.remove();
            }), this.plugins = {};
        }
        hitDetect(t) {
            if (!this.gl || !this.layer.options.hitDetect) return !1;
            const e = this.gl, n = new Uint8Array(4), i = this.canvas.height;
            return e.readPixels(t.x, i - t.y, 1, 1, e.RGBA, e.UNSIGNED_BYTE, n), n[3] > 0;
        }
        xe() {
            const {style: t, featureStyle: e} = this.layer.be(), n = t.map((t, e) => {
                const n = t.renderPlugin;
                if (!n) return null;
                if (!n.type) throw new Error("invalid plugin type for style at " + e);
                const i = this.kn(n);
                return i.styleCounter = this.he, i.style = t, i;
            }), i = [];
            e.forEach((t, e) => {
                const n = t.renderPlugin;
                if (!n) return null;
                if (!n.type) throw new Error("invalid plugin type for features at " + e);
                const r = this.kn(n);
                return r.style = t, r.styleCounter = this.he, i.push(r), r;
            });
            const r = this.he;
            if (this.fe[r] = n, this.pe[r] = i, this.layer.fire("pluginsinited"), this.An && this.An.size || this.layer.An) {
                this.layer.An && this.layer._n();
                this.getMap().getRenderer().callInNextFrame(() => {
                    this.Se().forEach(t => {
                        t.highlight(this.An);
                    });
                });
            }
            return n;
        }
        kn(t) {
            const e = this.layer.constructor.getPlugins()[t.type];
            if (!e) throw new Error(`Plugin for (${t.type}) is not loaded.`);
            const n = new e;
            return n.config = t, n.config.sceneConfig || (n.config.sceneConfig = {}), n;
        }
        je(t, e) {
            const n = [ "webgl", "experimental-webgl" ];
            let i = null;
            for (let r = 0; r < n.length; ++r) {
                try {
                    i = t.getContext(n[r], e);
                } catch (t) {}
                if (i) break;
            }
            return i;
        }
        Re(t) {
            return O(t, this.getMap());
        }
        debugFBO(t, e) {
            const n = document.getElementById(t), i = e.width, r = e.height;
            n.width = i, n.height = r;
            const o = n.getContext("2d"), s = this.regl.read({
                framebuffer: e
            }), a = r / 2 | 0, l = 4 * i;
            for (let t = 0; t < s.length; t++) s[t] *= 255;
            const u = new Uint8Array(4 * i);
            for (let t = 0; t < a; ++t) {
                const e = t * l, n = (r - t - 1) * l;
                u.set(s.subarray(e, e + l)), s.copyWithin(e, n, n + l), s.set(u, n);
            }
            const c = new ImageData(i, r);
            c.data.set(s), o.putImageData(c, 0, 0);
        }
        nn(t) {
            let e;
            switch (t) {
              case "native-line":
                e = {
                    type: "native-line",
                    dataConfig: {
                        type: "native-line",
                        only2D: !0
                    }
                };
                break;

              case "native-point":
                e = {
                    type: "native-point",
                    dataConfig: {
                        type: "native-point",
                        only2D: !0
                    }
                };
                break;

              case "fill":
                e = {
                    type: "fill",
                    dataConfig: {
                        type: "fill",
                        only2D: !0
                    },
                    sceneConfig: {
                        antialias: !0
                    }
                };
                break;

              default:
                e = null;
            }
            const n = function(t) {
                switch (t) {
                  case "native-point":
                    return {
                        markerFill: "#f00",
                        markerSize: 6,
                        markerOpacity: .5
                    };

                  case "native-line":
                    return {
                        lineColor: "#bbb",
                        lineOpacity: .5
                    };

                  case "fill":
                    return {
                        polygonFill: "#00f",
                        polygonOpacity: .6
                    };
                }
                return null;
            }(t), i = this.kn(e);
            return i.defaultSymbol = n, {
                plugin: i,
                symbol: n,
                renderPlugin: e
            };
        }
        We() {
            return !0;
        }
        isEnableWorkAround(t) {
            return "win-intel-gpu-crash" === t && (this.layer.options.workarounds["win-intel-gpu-crash"] && function(t) {
                const e = t.getExtension("WEBGL_debug_renderer_info");
                if (e && "undefined" != typeof navigator) {
                    const n = t.getParameter(e.UNMASKED_RENDERER_WEBGL), i = "Win32" === navigator.platform || "Win64" === navigator.platform;
                    if (n && n.toLowerCase().indexOf("intel") >= 0 && i) return !0;
                }
                return !1;
            }(this.gl));
        }
        getZScale() {
            return this.Ee;
        }
        outline(t, e) {
            e && (Array.isArray(e) || (e = [ e ]), this.Ve || (this.Ve = []), this.Ve.push([ "paintOutline", [ t, e ] ]), 
            this.setToRedraw());
        }
        outlineFeatures(t) {
            t && (Array.isArray(t) || (t = [ t ]), this.Ve || (this.Ve = []), this.Ve.push([ "paintOutline", [ null, t ] ]), 
            this.setToRedraw());
        }
        outlineBatch(t) {
            this.Ve || (this.Ve = []), this.Ve.push([ "paintBatchOutline", [ t ] ]), this.setToRedraw();
        }
        outlineAll() {
            this.$e = !0, this.setToRedraw();
        }
        paintOutlineAll(t) {
            const e = this.Se();
            for (let n = 0; n < e.length; n++) e[n].outlineAll(t);
        }
        paintOutline(t, e, n) {
            if (!j(e)) {
                const i = e, r = this.Se();
                if (!r[i] || r[i].painter && !r[i].painter.isVisible()) return;
                return void r[i].outline(t, n);
            }
            const i = this.Se();
            for (let e = 0; e < n.length; e++) {
                const r = n[e];
                for (let e = 0; e < i.length; e++) i[e].style && i[e].style.id === r && i[e].outline(t, [ r ]);
            }
        }
        paintBatchOutline(t, e) {
            const n = this.Se();
            !n[e] || n[e].painter && !n[e].painter.isVisible() || n[e].outlineAll(t);
        }
        cancelOutline() {
            delete this.Ve, delete this.$e, this.setToRedraw();
        }
        setZIndex() {
            return this.setToRedraw(), this.ve = !0, super.setZIndex.apply(this, arguments);
        }
        consumeTile(t, e) {
            t.Ye && this.xn(e), super.consumeTile(t, e), this.wn(e, t);
        }
        onTileError(t, e) {
            this.xn(e), super.onTileError(t, e);
        }
        xn(t) {
            const {id: e} = t;
            if (this.we && this.we[e]) {
                const t = this.we[e];
                this.deleteTile(t), delete this.we[e];
            }
        }
        highlight(t) {
            if (this.An || (this.An = new Map), Array.isArray(t)) for (let e = 0; e < t.length; e++) j(t[e].name) && !j(t[e].id) && (t[e] = M({}, t[e]), 
            t[e].name = t[e].id), this.An.set(t[e].name, t[e]); else j(t.name) && !j(t.id) && ((t = M({}, t)).name = t.id), 
            this.An.set(t.name, t);
            this.Se().forEach(t => {
                t.highlight(this.An);
            });
        }
        cancelHighlight(t) {
            if (Array.isArray(t)) for (let e = 0; e < t.length; e++) this.An.delete(t[e]); else this.An.delete(t);
            this.Se().forEach(t => {
                t.highlight(this.An);
            });
        }
        cancelAllHighlight() {
            delete this.An;
            this.Se().forEach(t => {
                t.cancelAllHighlight();
            });
        }
    }
    function sl(t) {
        let e;
        Array.isArray(t.data) ? (e = [], z(e, t.data)) : (e = {}, M(e, t.data));
        const n = M({}, t);
        return n.data = e, n;
    }
    function al(t, e) {
        return e.info.z - t.info.z;
    }
    function ll(t) {
        const e = t.painter && t.painter.scene && t.painter.scene.getMeshes();
        return e && e.length;
    }
    function ul(t) {
        const e = {};
        for (let n = 0; n < t.length; n++) {
            const i = t[n].layer || "default";
            e[i] || (e[i] = []), e[i].push(t[n]);
        }
        return e;
    }
    ol.include({
        calculateTileMatrix: function() {
            const t = new Array(3), e = new Array(3), i = new Array(3);
            return function(r, o, s) {
                const a = this.getTileGLScale(o), l = r, u = this.layer.options.tileSize, c = n.mat4.identity([]);
                return n.mat4.scale(c, c, n.vec3.set(t, a, a, this.Ee)), n.mat4.translate(c, c, n.vec3.set(e, l.x, l.y, 0)), 
                n.mat4.scale(c, c, n.vec3.set(i, u / s, -u / s, 1)), c;
            };
        }(),
        calculateTerrainTileMatrix: function() {
            const t = new Array(3);
            return function(e, i, r) {
                const o = n.mat4.identity([]), s = r / 2;
                return n.mat4.scale(o, o, n.vec3.set(t, 1 / s, -1 / s, 0)), n.mat4.translate(o, o, n.vec3.set(t, -s, -s, 0)), 
                o;
            };
        }(),
        calculateTileTranslationMatrix: function() {
            const t = new Array(3);
            return function(e, i) {
                const r = this.getTileGLScale(i), o = e, s = n.mat4.identity([]);
                return n.mat4.translate(s, s, n.vec3.set(t, o.x * r, o.y * r, 0)), s;
            };
        }()
    });
    var cl = Array.isArray, hl = Object.keys, dl = Object.prototype.hasOwnProperty, fl = function t(e, n) {
        if (e === n) return !0;
        if (e && n && "object" == typeof e && "object" == typeof n) {
            var i, r, o, s = cl(e), a = cl(n);
            if (s && a) {
                if ((r = e.length) != n.length) return !1;
                for (i = r; 0 != i--; ) if (!t(e[i], n[i])) return !1;
                return !0;
            }
            if (s != a) return !1;
            var l = e instanceof Date, u = n instanceof Date;
            if (l != u) return !1;
            if (l && u) return e.getTime() == n.getTime();
            var c = e instanceof RegExp, h = n instanceof RegExp;
            if (c != h) return !1;
            if (c && h) return e.toString() == n.toString();
            var d = hl(e);
            if ((r = d.length) !== hl(n).length) return !1;
            for (i = r; 0 != i--; ) if (!dl.call(n, d[i])) return !1;
            for (i = r; 0 != i--; ) if (!t(e[o = d[i]], n[o])) return !1;
            return !0;
        }
        return e != e && n != n;
    };
    function pl(t, e, n) {
        for (let i = 0; i < t.length; i++) {
            const r = t[i], o = M({}, r), {renderPlugin: s} = r, a = M({}, s);
            a.sceneConfig && !Object.keys(a.sceneConfig).length && delete a.sceneConfig;
            let l = -1;
            for (let t = n.length - 1; t >= 0; t--) if (fl(a, n[t])) {
                l = t;
                break;
            }
            l < 0 && (l = n.length, n.push(a)), o.renderPlugin = l, e.push(o);
        }
    }
    const ml = "function" == typeof fetch && "function" == typeof AbortController, yl = {
        jsonp: function(t, e) {
            const n = "_maptalks_jsonp_" + T();
            t.match(/\?/) ? t += "&callback=" + n : t += "?callback=" + n;
            let i = document.createElement("script");
            return i.type = "text/javascript", i.src = t, window[n] = function(t) {
                e(null, t), document.getElementsByTagName("head")[0].removeChild(i), i = null, delete window[n];
            }, document.getElementsByTagName("head")[0].appendChild(i), this;
        },
        get: function(t, e, n) {
            if (I(e)) {
                const t = n;
                n = e, e = t;
            }
            (e = e || {}).method && (e.method = e.method.toUpperCase());
            const i = "POST" === e.method;
            if (ml) {
                const i = new AbortController, r = e;
                return r.signal = i.signal, r.referrerPolicy = r.referrerPolicy || "origin", r.method = r.method || "GET", 
                fetch(t, r).then(i => {
                    const r = this.Tn(i, e.returnJSON, e.responseType);
                    r.message ? (r.url = t, n(r)) : r.then(t => {
                        "arraybuffer" === e.responseType ? n(null, {
                            data: t,
                            cacheControl: i.headers.get("Cache-Control"),
                            expires: i.headers.get("Expires"),
                            contentType: i.headers.get("Content-Type")
                        }) : n(null, t);
                    }).catch(t => {
                        t.code && t.code === DOMException.ABORT_ERR || (console.error(t), n(t));
                    });
                }).catch(t => {
                    t.code && t.code === DOMException.ABORT_ERR || (console.error(t), n(t));
                }), i;
            }
            {
                const r = yl.Sn(n);
                if (r.open(e.method || "GET", t, !0), e) {
                    for (const t in e.headers) r.setRequestHeader(t, e.headers[t]);
                    r.withCredentials = "include" === e.credentials, e.responseType && (r.responseType = e.responseType);
                }
                return r.send(i ? e.body : null), r;
            }
        },
        Tn: (t, e, n) => 200 !== t.status ? {
            status: t.status,
            statusText: t.statusText,
            message: `incorrect http request with status code(${t.status}): ${t.statusText}`
        } : "arraybuffer" === n ? t.arrayBuffer() : e ? t.json() : t.text(),
        Mn: function(t, e) {
            return function() {
                if (4 === t.readyState) if (200 === t.status) if ("arraybuffer" === t.responseType) {
                    0 === t.response.byteLength ? e({
                        status: 200,
                        statusText: t.statusText,
                        message: "http status 200 returned without content."
                    }) : e(null, {
                        data: t.response,
                        cacheControl: t.getResponseHeader("Cache-Control"),
                        expires: t.getResponseHeader("Expires"),
                        contentType: t.getResponseHeader("Content-Type")
                    });
                } else e(null, t.responseText); else e({
                    status: t.status,
                    statusText: t.statusText,
                    message: `incorrect http request with status code(${t.status}): ${t.statusText}`
                });
            };
        },
        Sn: function(t) {
            let e;
            try {
                e = new XMLHttpRequest;
            } catch (t) {
                try {
                    e = new ActiveXObject("Msxml2.XMLHTTP");
                } catch (t) {
                    try {
                        e = new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (t) {}
                }
            }
            return e.onreadystatechange = yl.Mn(e, t), e;
        },
        getArrayBuffer(t, e, n) {
            if (I(e)) {
                const t = n;
                n = e, e = t;
            }
            return e || (e = {}), e.responseType = "arraybuffer", yl.get(t, e, n);
        },
        getJSON: function(t, e, n) {
            if (I(e)) {
                const t = n;
                n = e, e = t;
            }
            const i = function(t, e) {
                const i = "string" == typeof e ? JSON.parse(e) : e || null;
                n(t, i);
            };
            return e && e.jsonp ? yl.jsonp(t, i) : ((e = e || {}).returnJSON = !0, yl.get(t, e, i));
        }
    }, gl = new r.Point(0, 0), bl = new r.Coordinate(0, 0), vl = new r.Coordinate(0, 0), xl = [ 0, 0 ], wl = {
        renderer: "gl",
        altitudeProperty: "altitude",
        forceRenderOnZooming: !0,
        forceRenderOnMoving: !0,
        forceRenderOnRotating: !0,
        tileSize: 512,
        tileSystem: [ 1, -1, -6378137 * Math.PI, 6378137 * Math.PI ],
        features: !1,
        schema: !1,
        cascadeTiles: !0,
        collision: !0,
        picking: !0,
        pickingPoint: !1,
        pickingGeometry: !1,
        glyphSdfLimitPerFrame: 15,
        tileLimitPerFrame: 1,
        maxCacheSize: 72,
        antialias: !1,
        iconErrorUrl: null,
        collisionFrameLimit: 1.5,
        defaultRendering: !0,
        textGamma: 1,
        maxIconSize: 254,
        workarounds: {
            "win-intel-gpu-crash": !1
        },
        pyramidMode: 1,
        styleScale: 1,
        spatialReference: "preset-vt-3857",
        enableAltitude: !0,
        fadeAnimation: !1,
        debugTileData: !1,
        fetchOptions: null,
        awareOfTerrain: !0
    };
    class kl extends r.TileLayer {
        constructor(t, e) {
            super(t, e), this.VERSION = kl.VERSION;
            const n = e && e.style;
            this.setStyle(n);
        }
        onAdd() {
            const t = this.getMap(), e = this.getSpatialReference().toJSON().projection, n = t.getSpatialReference().toJSON().projection;
            if ((e && e.toLowerCase()) !== (n && n.toLowerCase())) throw new Error(`VectorTileLayer's projection(${e}) must be the same with map(${n}).`);
        }
        onWorkerReady() {}
        onConfig(t) {
            const e = this.getRenderer();
            e && e.updateOptions(t);
        }
        getWorkerOptions() {
            const t = this.getMap();
            return {
                debug: this.options.debug,
                debugTile: this.options.debugTile,
                altitudeProperty: this.options.altitudeProperty,
                tileSize: this.options.tileSize,
                baseRes: t.getGLRes(),
                style: this.isDefaultRender() ? {
                    style: [],
                    featureStyle: []
                } : this.be(),
                features: this.options.debugTileData || this.options.features,
                schema: this.options.schema,
                pickingGeometry: this.options.pickingGeometry
            };
        }
        setStyle(t) {
            if (t && (P(t) || t.url)) {
                const e = t, n = e.lastIndexOf("/"), i = n < 0 ? "." : e.substring(0, n);
                return this.ready = !1, yl.getJSON(t.url ? t.url : t, t.url ? t : {}, (t, n) => {
                    if (t) throw this.setStyle([]), t;
                    let r;
                    n.style ? (r = n, r.$root || (r.$root = i)) : r = {
                        $root: i,
                        style: n
                    }, this.options.style = e, this.Pn(r);
                }), this;
            }
            return this.options.style = t, this.Pn(t), this;
        }
        In(t, e, n, i, r) {
            const o = i / this.options.tileSize, s = gl.set(n.x + e.x / o, n.y - e.y / o);
            return this.getMap()._pointToPrjAtRes(s, r, t);
        }
        queryTilePointTerrain(t, e, n, i) {
            const r = this.getRenderer(), o = r && r.getTerrainHelper();
            if (!r || !o) return xl[0] = 0, xl[1] = 0, xl;
            const s = this.In(vl, t, e, n, i);
            return o.queryTerrainByProjCoord(s);
        }
        Pn(t) {
            if (this.jn = null, t && t.$root) {
                let e = t.$root;
                e && "/" === e[e.length - 1] && (e = e.substring(0, e.length - 1)), this.jn = e, 
                this.ct = function(t) {
                    return "{$root}" === t ? e : null;
                };
            }
            this.ready = !0, t = t || [], Array.isArray(t) ? t = {
                style: t
            } : t.renderPlugin && (t = {
                style: [ t ]
            }), t = function(t) {
                if (!t.plugins) return t;
                const {plugins: e, styles: n} = t;
                let {style: i, featureStyle: r} = n;
                i = i || [], r = r || [];
                const o = new Array(i.length);
                for (let t = 0; t < i.length; t++) o[t] = M({}, i[t]), o[t].renderPlugin = e[i[t].renderPlugin];
                const s = new Array(r.length);
                for (let t = 0; t < r.length; t++) s[t] = M({}, r[t]), s[t].renderPlugin = e[r[t].renderPlugin];
                const a = {
                    style: o,
                    featureStyle: s
                };
                return t.$root && (a.$root = t.$root), a;
            }(t = JSON.parse(JSON.stringify(t))), this.zn = t.featureStyle || [], this.Fn = function(t) {
                if (!t || !Array.isArray(t)) return [];
                const e = [];
                for (let n = 0; n < t.length; n++) {
                    const i = t[n].style;
                    if (i && Array.isArray(i) && i.length) for (let r = 0; r < i.length; r++) {
                        const o = M({}, t[n], i[r]);
                        i[r].On = e.length, delete o.style, e.push(o);
                    } else e.push(M({}, t[n]));
                }
                return e;
            }(t.featureStyle), this.Cn = t.style || [];
            const e = t.background || {};
            this.En = {
                enable: e.enable || !1,
                color: _l(e.color) || [ 0, 0, 0, 0 ],
                opacity: Tl(e.opacity, 1),
                patternFile: e.patternFile,
                depthRange: e.depthRange
            }, this.validateStyle(), this.ct && this.Rn(), this.Ke();
            const n = this.getRenderer();
            n && n.setStyle(), this.fire("setstyle", {
                style: this.getStyle(),
                computedStyle: this.getComputedStyle()
            });
        }
        getPolygonOffsetCount() {
            const t = this.getRenderer();
            return t ? t.getPolygonOffsetCount() : 0;
        }
        getPolygonOffset() {
            return this.Nn || 0;
        }
        setPolygonOffset(t, e) {
            return this.Nn = t, this.Dn = e, this;
        }
        getTotalPolygonOffset() {
            return this.Dn;
        }
        outlineAll() {
            const t = this.getRenderer();
            return t ? (t.outlineAll(), this) : this;
        }
        outline(t, e) {
            const n = this.getRenderer();
            return n ? (n.outline(t, e), this) : this;
        }
        outlineBatch(t) {
            const e = this.getRenderer();
            return e ? (e.outlineBatch(t), this) : this;
        }
        outlineFeatures(t) {
            const e = this.getRenderer();
            return e ? (e.outlineFeatures(t), this) : this;
        }
        cancelOutline() {
            const t = this.getRenderer();
            return t ? (t.cancelOutline(), this) : this;
        }
        highlight(t) {
            this.Ln(t);
            const e = this.getRenderer();
            return e ? (e.highlight(t), this) : (this.An || (this.An = []), this.An.push(t), 
            this);
        }
        Ln(t) {
            if (Array.isArray(t)) for (let e = 0; e < t.length; e++) this.Ln(t[e]); else {
                if (t.filter) {
                    if (!this.options.features) throw new Error("options.features must be turned on to support filter in highlight");
                    if (!t.name) throw new Error("A name is required for highlight with filter");
                }
                if (j(t.filter) && j(t.id)) throw new Error("id or filter must be provided for highlight");
            }
        }
        _n() {
            if (this.An) {
                for (let t = 0; t < this.An.length; t++) this.highlight(this.An[t]);
                delete this.An;
            }
        }
        cancelHighlight(t) {
            const e = this.getRenderer();
            return e ? (e.cancelHighlight(t), this) : this;
        }
        cancelAllHighlight() {
            const t = this.getRenderer();
            return t ? (t.cancelAllHighlight(), this) : this;
        }
        Rn() {
            r.Util.convertStylePath(this.Cn, this.ct), r.Util.convertStylePath(this.Fn, this.ct);
        }
        updateSceneConfig(t, e) {
            return this.Hn(0, t, e);
        }
        updateFeatureSceneConfig(t, e, n) {
            return this.Hn(1, t, n, e);
        }
        Hn(t, e, n, i) {
            const r = this.Te(t);
            if (!r) return this;
            let o, s = e;
            if (r[e].renderPlugin.sceneConfig || (r[e].renderPlugin.sceneConfig = {}), M(r[e].renderPlugin.sceneConfig, n), 
            void 0 !== i) {
                Sl(this.zn, e, i), s = this.zn[e].style[i].On;
                const t = r[s].renderPlugin;
                t.sceneConfig || (t.sceneConfig = {}), o = t.sceneConfig;
            } else Ml(r, e), o = r[e].renderPlugin.sceneConfig;
            if (M(o, n), Array.isArray(this.options.style)) {
                const t = this.options.style[e].renderPlugin;
                t.sceneConfig || (t.sceneConfig = {}), M(t.sceneConfig, n);
            } else {
                const r = this.Te(t, this.options.style);
                let o;
                void 0 !== i ? (Sl(r, e, i), o = r[e].style[i].renderPlugin) : (Ml(r, e), o = r[e].renderPlugin), 
                o.sceneConfig || (o.sceneConfig = {}), M(o.sceneConfig, n);
            }
            const a = this.getRenderer();
            return a && a.updateSceneConfig(t, s, n), 0 === t ? this.fire("updatesceneconfig", {
                index: e,
                sceneConfig: n
            }) : 1 === t && this.fire("updatefeaturesceneconfig", {
                index: e,
                styleIdx: i,
                sceneConfig: n
            }), this;
        }
        updateDataConfig(t, e) {
            return this.Un(0, t, e);
        }
        updateFeatureDataConfig(t, e, n) {
            return this.Un(1, t, n, e);
        }
        Un(t, e, n, i) {
            const r = this.Te(t);
            if (!r) return this;
            let o, s = e;
            void 0 !== i ? (Sl(this.zn, e, i), s = this.zn[e].style[i].On, o = r[s].renderPlugin.dataConfig) : (Ml(r, e), 
            o = r[e].renderPlugin.dataConfig);
            const a = M({}, o);
            if (M(o, n), Array.isArray(this.options.style)) M(this.options.style[e].renderPlugin.dataConfig, n); else {
                const r = this.Te(t, this.options.style);
                let o;
                void 0 !== i ? (Sl(r, e, i), o = r[e].style[i].renderPlugin) : (Ml(r, e), o = r[e].renderPlugin), 
                o.dataConfig || (o.dataConfig = {}), M(o.dataConfig, n);
            }
            const l = this.getRenderer();
            return l && l.updateDataConfig(t, s, n, a), 0 === t ? this.fire("updatedataconfig", {
                index: e,
                dataConfig: n
            }) : 1 === t && this.fire("updatefeaturedataconfig", {
                index: e,
                styleIdx: i,
                dataConfig: n
            }), this;
        }
        updateSymbol(t, e) {
            return P(t) && (t = this.qn(t)), this.Vn(0, t, e);
        }
        updateFeatureSymbol(t, e, n) {
            return this.Vn(1, t, n, e);
        }
        Vn(t, e, n, i) {
            const o = this.Te(t);
            if (!o) return this;
            let s = e;
            void 0 !== i && (Sl(this.zn, e, i), s = this.zn[e].style[i].On);
            const a = o[s];
            if (!a) throw new Error("No style defined at " + e);
            const l = this, u = this.ct;
            function c(n, o, s) {
                if (!n) return !1;
                u && (n = JSON.parse(JSON.stringify(n)), r.Util.parseSymbolPath(n, u));
                const a = Object.keys(n);
                let c = !1;
                for (let t = 0; t < a.length; t++) {
                    const e = a[t];
                    if (Al(o[e]) || Al(n[e])) {
                        c = !0;
                        break;
                    }
                }
                for (const t in n) F(n, t) && (!r.Util.isObject(n[t]) || Array.isArray(n[t]) || n[t].stops ? o[t] = n[t] : (o[t] || (o[t] = {}), 
                M(o[t], n[t])));
                let h = l.options.style;
                if (P(h)) return c;
                Array.isArray(h) || (h = l.Te(t, l.options.style));
                const d = JSON.parse(JSON.stringify(o));
                return void 0 !== i ? (Sl(h, e, i), void 0 === s ? h[e].style[i].symbol = d : h[e].style[i].symbol[s] = d) : (Ml(h, e), 
                void 0 === s ? h[e].symbol = d : h[e].symbol[s] = d), c;
            }
            const h = this.getRenderer();
            if (!h) return c(), this.Ke(), this;
            let d = !1;
            const f = a.symbol;
            if (Array.isArray(n)) for (let t = 0; t < n.length; t++) {
                const e = c(n[t], f[t], t);
                e && (d = e);
            } else c(n, f);
            return this.Ke(), d ? h.setStyle() : (d = h.updateSymbol(t, s, n), d && h.setStyle()), 
            0 === t ? this.fire("updatesymbol", {
                index: e,
                symbol: n
            }) : 1 === t && this.fire("updatefeaturesymbol", {
                index: e,
                featureStyleIndex: i,
                symbol: n
            }), this;
        }
        Te(t, e) {
            if (e) {
                return 0 === t ? e.style : e.featureStyle;
            }
            return 0 === t ? this.Cn : this.Fn;
        }
        isDefaultRender() {
            return !!this.$n && this.options.defaultRendering;
        }
        validateStyle() {
            this.$n = !1;
            let t = this.Cn;
            this.options.style || (this.$n = !0, t = this.Cn = []), Array.isArray(t) || (t = this.Cn = [ t ]);
            for (let e = 0; e < t.length; e++) {
                let n = t[e].filter;
                if (n && n.value && (n = n.value), void 0 !== n && "default" !== n && !0 !== n && !Array.isArray(n) && void 0 === n.condition) throw new Error(`Invalid filter at ${e} : ${JSON.stringify(n)}`);
            }
        }
        getStyle() {
            return this.options.style ? JSON.parse(JSON.stringify(this.options.style)) : null;
        }
        qn(t) {
            const e = this.Cn;
            if (!e) return -1;
            for (let n = 0; n < e.length; n++) if (e[n].name === t) return n;
            throw new Error("No style defined with name: " + t);
        }
        getGroundConfig() {
            this.Gn || (this.Gn = {
                enable: !0,
                renderPlugin: {
                    type: "fill",
                    sceneConfig: {}
                },
                symbol: {
                    polygonFill: [ 0, 0, 0, 0 ],
                    polygonOpacity: 1
                }
            });
            const t = this.be().background || {};
            return this.Gn.enable = t.enable, this.Gn.symbol.polygonFill = t.color, this.Gn.symbol.polygonOpacity = t.opacity, 
            this.Gn.symbol.polygonPatternFile = t.patternFile, this.Gn.renderPlugin.sceneConfig.depthRange = t.depthRange, 
            this.Gn;
        }
        getComputedStyle() {
            return JSON.parse(JSON.stringify(this.be()));
        }
        be() {
            return {
                background: this.En,
                style: this.Cn || [],
                featureStyle: this.Fn || []
            };
        }
        identify(t, e = {}) {
            const n = this.getMap(), i = this.getRenderer();
            if (!n || !i) return [];
            const o = n.coordToContainerPoint(new r.Coordinate(t));
            return this.identifyAtPoint(o, e);
        }
        identifyAtPoint(t, e = {}) {
            const n = this.getMap(), i = this.getRenderer();
            if (!n || !i) return [];
            const r = n.getDevicePixelRatio(), o = i.pick(t.x * r, t.y * r, e);
            return this.options.features && "id" !== this.options.features ? this.Wn(o) : o;
        }
        Wn(t) {
            if (!this.getRenderer()) return t;
            const e = this._getTileConfig(), n = this.getSpatialReference();
            for (let i = 0; i < t.length; i++) {
                let r = t[i];
                if (!r || !r.data) continue;
                const {tile: o} = r.data, {x: s, y: a, z: l, extent: u} = o, c = n.getResolution(l), h = e.getTilePointNW(s, a, c), d = r.data.feature && r.data.feature.geometry;
                if (d) {
                    r.data = M({}, r.data), r.data.feature = M({}, r.data.feature);
                    const t = r.data.feature.type;
                    r.data.feature.type = "Feature", r.data.feature.geometry = this.Bn(t, d, h, u, c);
                }
            }
            return t;
        }
        Bn(t, e, n, i, r) {
            let o, s;
            if (1 === t) e.length <= 1 ? (o = "Point", s = this.Jn(e, n, i, r)[0] || []) : (o = "MultiPoint", 
            s = this.Jn(e, n, i, r)); else if (2 === t) e.length <= 1 ? (o = "LineString", s = this.Jn(e, n, i, r)[0] || []) : (o = "MultiLineString", 
            s = this.Jn(e, n, i, r)); else if (3 === t) {
                let t;
                s = [];
                let a = 0;
                for (let o = 0; o < e.length; o++) {
                    Ia.calculateSignedArea(e[o]) > 0 && (a++, t && t.length && s.push(t), t = []), t.push(this.Jn(e[o], n, i, r));
                }
                t.length && s.push(t), a <= 1 ? (o = "Polygon", s = s[0]) : o = "MultiPolygon";
            }
            return {
                type: o,
                coordinates: s
            };
        }
        Jn(t, e, n, i) {
            const r = n / this.options.tileSize, o = this.getMap(), s = [];
            for (let a = 0; a < t.length; a++) Array.isArray(t[a]) ? s.push(this.Jn(t[a], e, n, i)) : (gl.x = e.x + t[a].x / r, 
            gl.y = e.y - t[a].y / r, o.pointAtResToCoord(gl, i, bl), s.push(bl.toArray()));
            return s;
        }
        getBackgroundCollisionIndex() {
            return this.Xn || (this.Xn = new r.CollisionIndex), this.Xn;
        }
        clearBackgroundCollisionIndex() {
            return this.Xn && this.Xn.clear(), this;
        }
        getDataSchema(t) {
            return this.Yn || (this.Yn = {}), j(t) || this.Yn[t] || (this.Yn[t] = {}), j(t) ? this.Yn : this.Yn[t];
        }
        onRemove() {
            super.onRemove();
        }
        static fromJSON(t) {
            return t && "VectorTileLayer" === t.type ? new kl(t.id, t.options) : null;
        }
        Ke() {}
        static registerPlugin(t) {
            kl.plugins || (kl.plugins = {}), kl.plugins[t.type] = t;
        }
        static getPlugins() {
            return kl.plugins || {};
        }
        static compressStyleJSON(t) {
            return Array.isArray(t) && t.length ? function(t) {
                Array.isArray(t) && (t = {
                    style: t,
                    featureStyle: []
                });
                const e = [], n = [], i = [];
                pl(t.style, e, i), pl(t.featureStyle, n, i);
                const r = {
                    plugins: i,
                    styles: {
                        style: e,
                        featureStyle: n
                    }
                };
                return t.$root && (r.$root = t.$root), r;
            }(t) : t;
        }
    }
    function Al(t) {
        return !(!t || !t.properties);
    }
    function _l(t) {
        return t ? (Array.isArray(t) || (t = Pt(t).unitArray()), 3 === t.length && t.push(1), 
        t) : null;
    }
    function Tl(t, e) {
        return null == t ? e : t;
    }
    function Sl(t, e, n) {
        if (!t[e] || !t[e].style || !t[e].style[n]) throw new Error(`No plugin defined at feature style of ${e} - ${n}`);
    }
    function Ml(t, e) {
        if (!t[e]) throw new Error("No plugin defined at style of " + e);
    }
    kl.prototype._getTileZoom = function(t) {
        return t = Math.floor(t), r.TileLayer.prototype._getTileZoom.call(this, t);
    }, kl.registerJSONType("VectorTileLayer"), kl.mergeOptions(wl), kl.registerRenderer("gl", ol), 
    kl.registerRenderer("canvas", null);
    class Pl extends kl {
        getTileUrl(t, e, n) {
            const i = this.getMap().getResolution(n);
            return super.getTileUrl(t, e, function(t) {
                return 19 - Math.log(t / Il) / Math.LN2;
            }(i));
        }
        static fromJSON(t) {
            return t && "MapboxVectorTileLayer" === t.type ? new Pl(t.id, t.options) : null;
        }
    }
    Pl.registerJSONType("MapboxVectorTileLayer");
    const Il = 12756274 * Math.PI / (256 * Math.pow(2, 20));
    class jl extends kl {
        constructor(t, e = {}) {
            e.spatialReference = null, super(t, e), this.setData(e.data);
        }
        getWorkerOptions() {
            const t = super.getWorkerOptions();
            let e = this.options.data;
            return e = P(e) || e && e.url ? Fl(e) : this.features, t.data = e, t.tileBuffer = this.options.tileBuffer, 
            t.extent = this.options.extent, t.hasAltitude = this.options.enableAltitude, t.simplifyTolerance = this.options.simplifyTolerance, 
            t.projection = this.getSpatialReference().getProjection().code, t;
        }
        _initTileConfig() {
            const t = this.getSpatialReference();
            t && t.getProjection() && "EPSG:4326" === t.getProjection().code && (this.options.tileSystem = [ 1, -1, -180, 90 ]), 
            super._initTileConfig();
        }
        setData(t) {
            if (this.options.data = t, t && (P(t) || t.url)) {
                return !!this.getRenderer() && this.Zn(), this;
            }
            return this.Kn(t), this.Zn(), this;
        }
        Kn(t) {
            if (this.options.convertFn) {
                t = new Function("data", this.options.convertFn + "\nreturn convert(data)")(t);
            }
            return this.features = t, this.Qn(), this;
        }
        Zn() {
            const t = this.getRenderer();
            if (t) {
                const e = t.getWorkerConnection();
                if (e) {
                    let n = this.options.data;
                    n = P(n) || n.url ? Fl(n) : this.features, e.setData(n, (e, n) => {
                        t.clear(), this.onWorkerReady(null, n), t.setToRedraw();
                    });
                }
            }
        }
        getExtent() {
            return this.ti;
        }
        onWorkerReady(t, e) {
            t ? this.fire("dataerror", {
                error: t
            }) : (e && (e.extent && this.ei(e.extent), e.idMap && (this.ni = e.idMap)), this.fire("dataload", {
                extent: e && e.extent
            }));
        }
        ei(t) {
            this.ti = new r.Extent(...t);
        }
        ii(t, e) {
            P(t) ? yl.getJSON(t, e) : yl.getJSON(t.url, t, e);
        }
        getData() {
            return this.features || null;
        }
        getTileUrl(t, e, n) {
            return this.getId() + "," + t + "," + e + "," + n;
        }
        getFeature(t) {
            return this.ni[t];
        }
        static fromJSON(t) {
            return t && "GeoJSONVectorTileLayer" === t.type ? new jl(t.id, t.options) : null;
        }
        Qn() {
            if (!this.features) return;
            if (this.features = JSON.parse(JSON.stringify(this.features)), !this.features) return;
            let t = 0;
            this.ni = {};
            const e = this.features;
            Array.isArray(e) ? e.forEach(e => {
                e && (void 0 !== e.id && null !== e.id || (e.id = t++), this.ni[e.id] = e);
            }) : e.features && e.features.forEach(e => {
                e && (void 0 !== e.id && null !== e.id || (e.id = t++), this.ni[e.id] = e);
            });
        }
    }
    function zl(t) {
        let e = document.createElement("a");
        return e.href = t, t = e.href, e = null, t;
    }
    function Fl(t) {
        return t.url ? t.url = zl(t.url) : t = zl(t), t;
    }
    jl.registerJSONType("GeoJSONVectorTileLayer"), jl.mergeOptions({
        features: "id",
        tileBuffer: 64,
        extent: 8192,
        pyramidMode: 1,
        simplifyTolerance: 3
    });
    class Ol extends r.OverlayLayer {
        static registerPainter(t, e) {
            Ol.painters || (Ol.painters = {}), Ol.painters[t] = e;
        }
        static get3DPainterClass(t) {
            return Ol.painters[t];
        }
        updateSymbol(t, e) {
            if (!this.options.style) throw new Error("can't call update symbol when style is not set");
            const n = Array.isArray(this.options.style) ? this.options.style : this.options.style.style;
            if (!n[t]) throw new Error("invalid style at " + t);
            return M(n[t].symbol, e), this.setStyle(this.options.style), this;
        }
        getPolygonOffsetCount() {
            return 1;
        }
        getPolygonOffset() {
            return this.Nn || 0;
        }
        setPolygonOffset(t, e) {
            return this.Nn = t, this.Dn = e, this;
        }
        getTotalPolygonOffset() {
            return this.Dn;
        }
        identify(t, e = {}) {
            const n = this.getMap(), i = this.getRenderer();
            if (!n || !i) return [];
            const o = n.coordToContainerPoint(new r.Coordinate(t));
            return this.identifyAtPoint(o, e);
        }
        identifyAtPoint(t, e = {}) {
            const n = this.getMap(), i = this.getRenderer();
            if (!n || !i) return [];
            const r = this.getMap().getDevicePixelRatio();
            return i.pick(t.x * r, t.y * r, e);
        }
        getComputedStyle() {
            return {
                style: this.getStyle() || []
            };
        }
        outlineAll() {
            const t = this.getRenderer();
            return t ? (t.outlineAll(), this) : this;
        }
        outline(t) {
            if (!Array.isArray(t) || !t.length) return this;
            const e = this.getRenderer();
            return e ? (e.outline(t), this) : this;
        }
        cancelOutline() {
            const t = this.getRenderer();
            return t ? (t.cancelOutline(), this) : this;
        }
        toJSON() {
            const t = {
                type: this.getJSONType(),
                id: this.getId(),
                options: this.config(),
                geometries: []
            }, e = this.getGeometries();
            for (let n = 0, i = e.length; n < i; n++) {
                const i = e[n].toJSON();
                t.geometries.push(i);
            }
            return t;
        }
    }
    Ol.mergeOptions({
        picking: !0,
        renderer: "gl",
        collision: !1,
        textGamma: 1,
        geometryEvents: !0,
        styleScale: 1,
        forceRenderOnZooming: !0,
        forceRenderOnMoving: !0,
        forceRenderOnRotating: !0,
        meshRenderOrder: 0,
        enableBloom: !1,
        workarounds: {
            "win-intel-gpu-crash": !0
        }
    });
    const Cl = {
        markerFile: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerFile"
        },
        markerWidth: {
            type: "identity",
            default: 20,
            property: "_symbol_markerWidth"
        },
        markerHeight: {
            type: "identity",
            default: 20,
            property: "_symbol_markerHeight"
        },
        markerPathWidth: {
            type: "identity",
            default: 20,
            property: "_symbol_markerPathWidth"
        },
        markerPathHeight: {
            type: "identity",
            default: 20,
            property: "_symbol_markerPathHeight"
        },
        markerDx: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerDx"
        },
        markerDy: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerDy"
        },
        markerType: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerType"
        },
        markerPath: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerPath"
        },
        markerFill: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerFill"
        },
        markerFillPatternFile: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerFillPatternFile"
        },
        markerFillOpacity: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerFillOpacity"
        },
        markerLineColor: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerLineColor"
        },
        markerLineWidth: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerLineWidth"
        },
        markerLineOpacity: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerLineOpacity"
        },
        markerLineDasharray: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerLineDasharray"
        },
        markerLinePatternFile: {
            type: "identity",
            default: void 0,
            property: "_symbol_markerLinePatternFile"
        },
        markerVerticalAlignment: {
            type: "identity",
            default: "top",
            property: "_symbol_markerVerticalAlignment"
        },
        markerHorizontalAlignment: {
            type: "identity",
            default: "middle",
            property: "_symbol_markerHorizontalAlignment"
        },
        markerOpacity: {
            type: "identity",
            default: 1,
            property: "_symbol_markerOpacity"
        },
        markerPitchAlignment: {
            type: "identity",
            default: "viewport",
            property: "_symbol_markerPitchAlignment"
        },
        markerRotationAlignment: {
            type: "identity",
            default: "viewport",
            property: "_symbol_markerRotationAlignment"
        },
        markerRotation: {
            type: "identity",
            default: 0,
            property: "_symbol_markerRotation"
        },
        markerAllowOverlap: {
            type: "identity",
            default: 0,
            property: "_symbol_markerAllowOverlap"
        },
        markerIgnorePlacement: {
            type: "identity",
            default: 0,
            property: "_symbol_markerIgnorePlacement"
        },
        markerTextFit: {
            type: "identity",
            default: null,
            property: "_symbol_markerTextFit"
        },
        markerSpacing: {
            type: "identity",
            default: 250,
            property: "_symbol_markerSpacing"
        },
        markerTextFitPadding: {
            type: "identity",
            default: null,
            property: "_symbol_markerTextFitPadding"
        },
        markerPlacement: {
            type: "identity",
            default: "point",
            property: "_symbol_markerPlacement"
        }
    }, El = {
        textName: {
            type: "identity",
            default: void 0,
            property: "_symbol_textName"
        },
        textFaceName: {
            type: "identity",
            default: void 0,
            property: "_symbol_textFaceName"
        },
        textWeight: {
            type: "identity",
            default: void 0,
            property: "_symbol_textWeight"
        },
        textStyle: {
            type: "identity",
            default: void 0,
            property: "_symbol_textStyle"
        },
        textWrapWidth: {
            type: "identity",
            default: void 0,
            property: "_symbol_textWrapWidth"
        },
        textHorizontalAlignment: {
            type: "identity",
            default: void 0,
            property: "_symbol_textHorizontalAlignment"
        },
        textVerticalAlignment: {
            type: "identity",
            default: void 0,
            property: "_symbol_textVerticalAlignment"
        },
        textFill: {
            type: "identity",
            default: void 0,
            property: "_symbol_textFill"
        },
        textSize: {
            type: "identity",
            default: void 0,
            property: "_symbol_textSize"
        },
        textHaloRadius: {
            type: "identity",
            default: void 0,
            property: "_symbol_textHaloRadius"
        },
        textHaloFill: {
            type: "identity",
            default: void 0,
            property: "_symbol_textHaloFill"
        },
        textHaloOpacity: {
            type: "identity",
            default: 1,
            property: "_symbol_textHaloOpacity"
        },
        textDx: {
            type: "identity",
            default: void 0,
            property: "_symbol_textDx"
        },
        textDy: {
            type: "identity",
            default: void 0,
            property: "_symbol_textDy"
        },
        textOpacity: {
            type: "identity",
            default: 1,
            property: "_symbol_textOpacity"
        },
        textPitchAlignment: {
            type: "identity",
            default: "viewport",
            property: "_symbol_textPitchAlignment"
        },
        textRotationAlignment: {
            type: "identity",
            default: "viewport",
            property: "_symbol_textRotationAlignment"
        },
        textRotation: {
            type: "identity",
            default: 0,
            property: "_symbol_textRotation"
        },
        textAllowOverlap: {
            type: "identity",
            default: 0,
            property: "_symbol_textAllowOverlap"
        },
        textIgnorePlacement: {
            type: "identity",
            default: 0,
            property: "_symbol_textIgnorePlacement"
        },
        textSpacing: {
            type: "identity",
            default: 250,
            property: "_symbol_textSpacing"
        },
        textPlacement: {
            type: "identity",
            default: "point",
            property: "_symbol_textPlacement"
        }
    }, Rl = {
        lineWidth: {
            type: "identity",
            default: 2,
            property: "_symbol_lineWidth"
        },
        lineStrokeWidth: {
            type: "identity",
            default: 0,
            property: "_symbol_lineStrokeWidth"
        },
        lineColor: {
            type: "identity",
            default: [ 1, 1, 1, 1 ],
            property: "_symbol_lineColor"
        },
        lineStrokeColor: {
            type: "identity",
            default: [ 0, 0, 0, 0 ],
            property: "_symbol_lineStrokeColor"
        },
        lineDx: {
            type: "identity",
            default: 0,
            property: "_symbol_lineDx"
        },
        lineDy: {
            type: "identity",
            default: 0,
            property: "_symbol_lineDy"
        },
        linePatternFile: {
            type: "identity",
            default: void 0,
            property: "_symbol_linePatternFile"
        },
        linePatternAnimSpeed: {
            type: "identity",
            default: 0,
            property: "_symbol_linePatternAnimSpeed"
        },
        linePatternGap: {
            type: "identity",
            default: 0,
            property: "_symbol_linePatternGap"
        },
        lineOpacity: {
            type: "identity",
            default: 1,
            property: "_symbol_lineOpacity"
        },
        lineJoin: {
            type: "identity",
            default: void 0,
            property: "_symbol_lineJoin"
        },
        lineCap: {
            type: "identity",
            default: void 0,
            property: "_symbol_lineCap"
        },
        lineDasharray: {
            type: "identity",
            default: void 0,
            property: "_symbol_lineDasharray"
        },
        lineDashColor: {
            type: "identity",
            default: void 0,
            property: "_symbol_lineDashColor"
        }
    }, Nl = new r.Point(0, 0), Dl = "_vector3dlayer_id", Ll = "_line_gradient_property".trim();
    function Hl(t, e, n) {
        const i = "__fea_idx".trim(), o = t.getMap(), s = o.getGLRes();
        let a = t.getCoordinates();
        const l = [];
        let u = 1;
        if (t instanceof r.Marker || t instanceof r.MultiPoint) {
            t instanceof r.Marker && (a = [ a ]);
            for (let t = 0; t < a.length; t++) o.coordToPointAtRes(a[t], s, Nl), l.push([ Nl.x, Nl.y, a[t].z || 0 ]);
        } else if (t instanceof r.LineString || t instanceof r.MultiLineString) {
            u = 2, t instanceof r.LineString && (a = [ a ]);
            for (let t = 0; t < a.length; t++) {
                l[t] = [];
                for (let e = 0; e < a[t].length; e++) o.coordToPointAtRes(a[t][e], s, Nl), l[t].push([ Nl.x, Nl.y, a[t][e].z || 0 ]);
            }
        } else if (t instanceof r.Polygon || t instanceof r.MultiPolygon) {
            u = 3, t instanceof r.Polygon && (a = [ a ]);
            let e = 0;
            for (let t = 0; t < a.length; t++) for (let n = 0; n < a[t].length; n++) {
                l[e] = [];
                for (let i = 0; i < a[t][n].length; i++) o.coordToPointAtRes(a[t][n][i], s, Nl), 
                l[e].push([ Nl.x, Nl.y, a[t][n][i].z || 0 ]);
                e++;
            }
        }
        const c = t.getProperties() ? Object.assign({}, t.getProperties()) : {}, h = t._getInternalSymbol(), d = n ? Array.isArray(n) ? n[0][i] : n[i] : e.id++;
        if (Array.isArray(h) && h.length) {
            const r = [], o = h.length;
            for (let s = 0; s < o; s++) {
                const a = s === o - 1 ? c : M({}, c), f = Ul(h[s], a);
                for (const t in h[s]) if (F(h[s], t)) {
                    a[("_symbol_" + t).trim()] = h[s][t];
                }
                f && (h[s].lineGradientProperty = f);
                const p = n && n[s] ? n[s][i] : e.pickingId++, m = {
                    type: u,
                    id: d,
                    properties: a,
                    visible: t.isVisible(),
                    geometry: l,
                    extent: 1 / 0
                };
                m[i] = p, r.push(m);
            }
            return r;
        }
        if (h) {
            const t = Ul(h, c);
            for (const t in h) if (F(h, t)) {
                c[("_symbol_" + t).trim()] = h[t];
            }
            t && (h.lineGradientProperty = t);
        }
        const f = n ? n.id : e.pickingId++, p = {
            type: u,
            id: d,
            properties: c,
            visible: t.isVisible(),
            geometry: l,
            extent: 1 / 0
        };
        return p[i] = f, p;
    }
    function Ul(t, e) {
        const n = t.lineGradientProperty;
        return n && (e[Ll] = e[n], e.mapbox_clip_start = 0, e.mapbox_clip_end = 1, delete e[n]), 
        n;
    }
    let ql = 1;
    const Vl = "_symbol_".trim(), $l = "__fea_idx".trim();
    let Gl = new Float32Array(1);
    class Wl extends r.renderer.CanvasRenderer {
        constructor(...t) {
            super(...t), this.features = {}, this.ri = {}, this.se = 0, this.oi = {}, this.si = {}, 
            this.ai = {}, this.li = {}, this.ui = {}, this.ci = !0, this.hi = {
                id: 0,
                pickingId: 0
            }, this.di = M({}, Cl, El), this.fi = {};
        }
        hasNoAARendering() {
            return !0;
        }
        needToRedraw() {
            const t = super.needToRedraw();
            return t || (this.painter && this.painter.needToRedraw() || this.mi && this.mi.needToRedraw() || this.yi && this.yi.needToRedraw());
        }
        draw(t, e) {
            const n = this.layer;
            if (this.prepareCanvas(), this.Ee = this.Re(this.getMap().getGLRes()), this.ci) this.buildMesh(), 
            this.gi(), this.bi(), this.fi = {}, this.vi = !1, this.ci = !1, this.xi = !1; else if (this.vi) {
                const t = this.atlas, e = this.wi, n = this.ki;
                delete this.atlas, delete this.wi, delete this.ki, this.buildMesh(t), this.gi(e), 
                this.bi(n), this.vi = !1, this.xi = !1;
            } else if (this.xi) {
                const t = this.ki;
                delete this.ki, this.bi(t), this.xi = !1;
            }
            if (!this.meshes && !this.Ai && !this._i) return void this.completeRender();
            this.Ti && (this.Si(), this.Ti = !1), this.Mi(), this.Ce = t, this.Ne = e || {};
            const i = this.Ne.renderMode, r = !i || "default" === i, o = this.Pi();
            let s = 0;
            0 === this.layer.options.meshRenderOrder && this.Ii(o, s++, i), this._i && (r || this.yi.supportRenderMode(i)) && (this.yi.startFrame(o), 
            this.yi.addMesh(this._i, null, {
                bloom: this.Ne.bloom
            }), this.yi.prepareRender(o), o.polygonOffsetIndex = s++, this.yi.render(o)), 1 === this.layer.options.meshRenderOrder && this.Ii(o, s++, i), 
            this.Ai && (r || this.mi.supportRenderMode(i)) && (n.options.collision && n.clearCollisionIndex(), 
            this.mi.startFrame(o), this.mi.addMesh(this.Ai, null, {
                bloom: this.Ne.bloom
            }), this.mi.prepareRender(o), n.options.collision && this.mi.updateCollision(o), 
            this.mi.render(o)), (r || e && e.isFinalRender) && (this.completeRender(), this.layer.fire("canvasisdirty"));
        }
        Ii(t, e, n) {
            const i = !n || "default" === n;
            this.painter && this.meshes && (i || this.painter.supportRenderMode(n)) && (this.painter.startFrame(t), 
            this.painter.addMesh(this.meshes, null, {
                bloom: t && t.bloom
            }), this.painter.prepareRender(t), t.polygonOffsetIndex = e++, this.painter.render(t));
        }
        supportRenderMode() {
            return !0;
        }
        isForeground() {
            return !0;
        }
        Pi() {
            const t = {
                regl: this.regl,
                layer: this.layer,
                symbol: this.ji,
                gl: this.gl,
                sceneConfig: this.layer.options.sceneConfig,
                pluginIndex: 0,
                cameraPosition: this.getMap().cameraPosition,
                timestamp: this.getFrameTimestamp()
            };
            return this.Ne && M(t, this.Ne), t;
        }
        drawOnInteracting(t, e, n) {
            this.draw(e, n);
        }
        getFrameTimestamp() {
            return this.Ce;
        }
        zi(t, e) {
            (t = t || e) === e && (e = null);
            const n = [], i = [ 0, 0, 0, 0 ];
            this.layer._sortGeometries();
            const r = this.layer.getGeometries();
            for (let o = 0; o < r.length; o++) {
                const s = r[o][Dl];
                if (!this.features[s]) continue;
                const a = this.features[s];
                if (Array.isArray(a)) for (let r = 0; r < a.length; r++) {
                    const o = a[r], s = o[$l];
                    (!t || t[s] || e && (!e || e[s])) && (o.visible || (this.Ti = !0), this.Fi(o.geometry, i), 
                    n.push(o));
                } else {
                    a.visible || (this.Ti = !0);
                    const r = a[$l];
                    if (t && !t[r] && (!e || e && !e[r])) continue;
                    this.Fi(a.geometry, i), n.push(a);
                }
            }
            if (n.length || (this.meshes && this.painter && (this.painter.deleteMesh(this.meshes), 
            delete this.meshes), this.Ai && (this.mi.deleteMesh(this.Ai), delete this.Ai), this._i && (this.yi.deleteMesh(this._i), 
            delete this._i)), i[3] && (i[0] /= i[3], i[1] /= i[3]), isNaN(i[0]) || isNaN(i[1])) throw new Error("invalid geometry coordinates for " + this.layer.getJSONType());
            return {
                features: n,
                center: i
            };
        }
        buildMesh() {}
        createVectorPacks(t, e, n, i, r, o) {
            if (!t || !i || !i.length) return Promise.resolve(null);
            return new e(i, n, {
                zoom: this.getMap().getZoom(),
                EXTENT: 1 / 0,
                requestor: this.requestor,
                atlas: r,
                center: o,
                positionType: Float32Array
            }).load();
        }
        createMesh(t, e, i, r, o, s) {
            const a = [], l = [];
            return this.createVectorPacks(t, e, i, r, o, s).then(e => {
                if (!e) return null;
                const o = t.createGeometries([ e.data ], Ja(r, null, 0, i, this.layer));
                for (let t = 0; t < o.length; t++) this.Oi(o[t].geometry);
                const u = n.mat4.identity([]);
                n.mat4.translate(u, u, n.vec3.set(l, s[0], s[1], 0)), n.mat4.scale(u, u, n.vec3.set(a, 1, 1, this.Ee));
                const c = t.createMeshes(o, u, {
                    tilePoint: [ s[0], s[1] ]
                });
                for (let t = 0; t < c.length; t++) {
                    const e = c[t];
                    e.properties.level = 0;
                    const n = e.defines;
                    n.ENABLE_TILE_STENCIL = 1, e.setDefines(n), e.properties.meshKey = this.layer.getId();
                }
                return {
                    meshes: c,
                    atlas: {
                        iconAtlas: e.data.iconAtlas
                    }
                };
            });
        }
        Fi(t, e) {
            for (let n = 0; n < t.length; n++) if (Array.isArray(t[n][0])) for (let i = 0; i < t[n].length; i++) if (Array.isArray(t[n][i][0])) for (let r = 0; r < t[n][i].length; r++) isNaN(+t[n][i][r][0]) || isNaN(+t[n][i][r][1]) || (e[0] += t[n][i][r][0], 
            e[1] += t[n][i][r][1], e[3] += 1); else isNaN(+t[n][i][0]) || isNaN(+t[n][i][1]) || (e[0] += t[n][i][0], 
            e[1] += t[n][i][1], e[3] += 1); else isNaN(+t[n][0]) || isNaN(+t[n][1]) || (e[0] += t[n][0], 
            e[1] += t[n][1], e[3] += 1);
        }
        Oi(t) {
            const e = this.getMap(), n = t.properties;
            Object.defineProperty(n, "tileResolution", {
                enumerable: !0,
                get: function() {
                    return e.getGLRes();
                }
            }), n.tileRatio = 1, n.z = 1, n.tileExtent = 1, n.elements = t.elements, n.aPickingId = t.data.aPickingId;
        }
        Ci(t) {
            return "win-intel-gpu-crash" === t && (this.layer.options.workarounds["win-intel-gpu-crash"] && Jl(this.gl));
        }
        prepareRequestors() {
            if (this.Vt) return;
            const t = this.layer;
            this.Vt = new Ma({
                iconErrorUrl: t.options.iconErrorUrl
            });
            const e = !this.Ci("win-intel-gpu-crash");
            this.$t = new Ta(e => {
                t.getMap().getRenderer().callInNextFrame(e);
            }, t.options.glyphSdfLimitPerFrame, e), this.requestor = this.Ei.bind(this), this.Ri = this.Ni.bind(this);
        }
        Ei(t, e, n) {
            const i = [];
            this.Vt.getIcons(t, (t, e) => {
                if (t) throw t;
                e.buffers && i.push(...e.buffers), n(null, {
                    icons: e.icons
                }, i);
            });
        }
        Ni(t, e, n) {
            this.$t.getGlyphs(e, (e, i) => {
                if (e) throw e;
                const r = i.buffers || [];
                this.Vt.getIcons(t, (t, e) => {
                    if (t) throw t;
                    e.buffers && e.buffers.length && r.push(...e.buffers), n(null, {
                        icons: e.icons,
                        glyphs: i.glyphs
                    }, r);
                });
            });
        }
        gi(t) {
            const e = Object.keys(this.ai), i = Object.keys(this.li);
            if (!e.length && !i.length) return void (this.Ai && (this.mi.deleteMesh(this.Ai), 
            delete this.Ai));
            const {features: r, center: o} = this.zi(this.ai, this.li), s = [], a = [];
            for (let t = 0; t < r.length; t++) {
                const e = r[t][$l];
                this.ai[e] && s.push(r[t]), this.li[e] && a.push(r[t]);
            }
            if (!s.length && !a.length) return void (this.Ai && (this.mi.deleteMesh(this.Ai), 
            delete this.Ai));
            const l = this.Ti;
            this.Di = o;
            const u = this.Li(s, a, t, o);
            this.wi = {};
            const c = [], h = [];
            this.Hi = !0, Promise.all(u).then(t => {
                if (this.Ai && (this.mi.deleteMesh(this.Ai), delete this.Ai), !t || !t.length) return void this.setToRedraw();
                const e = this.mi.createGeometries(t.map(t => (t && t.data && (t.data.isIdUnique = !0), 
                t && t.data)), this.oi);
                for (let n = 0; n < e.length; n++) this.Oi(e[n].geometry, t[n] && t[n].data);
                const i = t[0] && t[0].data.iconAtlas, r = t[0] && t[0].data.glyphAtlas || t[1] && t[1].data.glyphAtlas;
                i && (this.wi.iconAtlas = i), r && (this.wi.glyphAtlas = r);
                const s = n.mat4.identity([]);
                n.mat4.translate(s, s, n.vec3.set(h, o[0], o[1], 0)), n.mat4.scale(s, s, n.vec3.set(c, 1, 1, this.Ee));
                const a = this.mi.createMeshes(e, s);
                for (let t = 0; t < a.length; t++) a[t].geometry.properties.originElements = a[t].geometry.properties.elements.slice(), 
                a[t].properties.level = 0, a[t].material.set("flipY", 1), a[t].properties.meshKey = ql++;
                this.Ai = a, l && (this.Ti = !0), this.Hi = !1, this.setToRedraw();
            });
        }
        Si() {
            if (this.Ai && (this.Ui(this.Ai[0], this.ai), this.Ui(this.Ai[1], this.li)), this._i) for (let t = 0; t < this._i.length; t++) this.Ui(this._i[t], this.ui);
            if (this.meshes) for (let t = 0; t < this.meshes.length; t++) this.Ui(this.meshes[t], this.oi);
        }
        Ui(t, e) {
            if (!t) return;
            const {aPickingId: n, originElements: i} = t.geometry.properties, r = [];
            for (let t = 0; t < i.length; t++) {
                const o = n[i[t]];
                e[o] && e[o].feature.visible && r.push(i[t]);
            }
            const o = t.geometry.properties.elements = new i.constructor(r);
            t.geometry.setElements(o);
        }
        Li(t, e, n, i) {
            const r = {
                zoom: this.getMap().getZoom(),
                EXTENT: 1 / 0,
                requestor: this.Ri,
                atlas: n,
                center: i,
                positionType: Float32Array,
                defaultAltitude: 0,
                forceAltitudeAttribute: !0,
                markerWidthType: Uint16Array,
                markerHeightType: Uint16Array
            }, o = M({}, r);
            r.allowEmptyPack = 1;
            return Zs.splitPointSymbol(this.di).map((n, i) => new Zs(0 === i ? t : e, n, 0 === i ? r : o).load());
        }
        updateMesh() {}
        qi(t) {
            const e = t._getInternalSymbol(), n = {
                zoom: this.getMap().getZoom()
            }, i = this.Vi(t);
            if (!this.Ai) return !1;
            let r = this.features[i];
            Array.isArray(r) || (r = [ r ]);
            const o = [], s = [], a = [], l = this.getMap().getZoom();
            let u, c;
            u = Array.isArray(e) ? e.map(t => t ? k(t, () => (o[0] = l, o)) : t) : k(e, () => (o[0] = l, 
            o)), c = Array.isArray(e) ? e.map(t => t ? Ho.genFnTypes(t) : t) : Ho.genFnTypes(e);
            for (let t = 0; t < r.length; t++) {
                if (!r[t]) continue;
                const i = Array.isArray(e) ? e[t] : e, o = Array.isArray(u) ? u[t] : u, s = Array.isArray(c) ? c[t] : c, a = new Es(r, i, o, s, n).getIconAndGlyph();
                if (!this.wi || !Zs.isAtlasLoaded(a, this.wi)) return this.$i(), this.setToRedraw(), 
                !1;
            }
            for (let t = 0; t < r.length; t++) {
                const e = r[t][$l];
                this.ai[e] && s.push(r[t]), this.li[e] && a.push(r[t]);
            }
            const h = r[0].id, d = this.Li(s, a, this.wi, this.Di), f = this.Ai;
            return Promise.all(d).then(t => {
                for (let e = 0; e < t.length; e++) {
                    if (!t[e]) continue;
                    t[e].data && (t[e].data.isIdUnique = !0);
                    const n = f[e], i = n.geometry.properties.aFeaIds.indexOf(h);
                    if (i < 0) continue;
                    const r = t[e].data.featureIds.length;
                    for (const o in t[e].data.data) {
                        if ("aPickingId" === o) continue;
                        const s = t[e].data.data[o];
                        n.geometry.updateSubData(o, s, i * s.length / r);
                    }
                }
                this.setToRedraw();
            }), !0;
        }
        Gi(t) {
            return this.Wi(t, this._i, this.ki, this.Bi, this.yi, ra, Rl, this.Ji);
        }
        Wi(t, e, n, i, r, o, s, a) {
            if (!e) return !1;
            if (!n) return this.$i(), this.setToRedraw(), !1;
            const l = t._getInternalSymbol(), u = {
                zoom: this.getMap().getZoom()
            }, c = t[Dl];
            let h = this.features[c];
            Array.isArray(h) || (h = [ h ]);
            const d = [];
            for (let t = 0; t < h.length; t++) {
                const e = h[t];
                if (!e) continue;
                const i = Array.isArray(l) ? l[t] : l, r = Ho.genFnTypes(i), s = new dn(h, i, r, u), a = o === ra ? s.getLineResource() : s.getPolygonResource();
                if (!Ho.isAtlasLoaded(a, n[t])) return this.$i(), this.setToRedraw(), !1;
                d.push(e);
            }
            const f = h[0].id, p = a.call(this, d);
            for (let t = 0; t < p.length; t++) if (p[t].length) {
                const n = e.filter(e => e.feaGroupIndex === t);
                if (!n.length) return this.$i(), this.setToRedraw(), !1;
                if (n[0].geometry.properties.aFeaIds.indexOf(f) < 0) return this.$i(), this.setToRedraw(), 
                !1;
            }
            const m = M({}, s), y = p.map(t => this.createVectorPacks(r, o, m, t, n[0], i));
            return Promise.all(y).then(t => {
                for (let n = 0; n < t.length; n++) {
                    let i;
                    if (Array.isArray(e)) {
                        for (let t = 0; t < e.length; t++) if (e[t].feaGroupIndex === n) {
                            i = e[t];
                            break;
                        }
                    } else i = e;
                    if (!i) continue;
                    const r = i.geometry.properties.aFeaIds, o = r.indexOf(f);
                    if (!(o < 0)) {
                        if (t[n]) {
                            const e = t[n].data.featureIds.length, r = t[n].data.data;
                            for (const t in r) if (F(r, t)) {
                                const n = r[t];
                                i.geometry.updateSubData(t, n, o * n.length / e);
                            }
                        } else {
                            let t = o + 1;
                            for (;r[t] === f; ) t++;
                            const e = t - o, n = i.geometry.desc.positionSize;
                            Gl.length !== 3 * e && (Gl = new Float32Array(e * n), Gl.fill(-1 / 0, 0)), i.geometry.updateSubData(i.geometry.desc.positionAttribute, Gl, o * n);
                        }
                        this.layer.fire("updatemesh"), this.setToRedraw();
                    }
                }
            }), !0;
        }
        bi(t) {
            if (!Object.keys(this.ui).length) return void (this._i && (this.yi.deleteMesh(this._i), 
            delete this._i));
            const {features: e, center: n} = this.zi(this.ui);
            if (!e.length) return;
            const i = this.Ti;
            this.Bi = n;
            const r = this.Ji(e), o = M({}, Rl), s = r.map((e, i) => this.createMesh(this.yi, ra, o, e, t && t[i], n));
            this.Xi = !0, Promise.all(s).then(t => {
                this._i && this.yi.deleteMesh(this._i);
                const e = [], n = [];
                for (let i = 0; i < t.length; i++) {
                    const r = t[i] && t[i].meshes;
                    if (r) {
                        for (let t = 0; t < r.length; t++) {
                            const n = r[t];
                            n.feaGroupIndex = i, e.push(n), n.geometry.properties.originElements = n.geometry.properties.elements.slice();
                        }
                        n[i] = t[i].atlas;
                    }
                }
                this._i = e, this.ki = n, i && (this.Ti = i), this.Xi = !1, this.setToRedraw();
            });
        }
        Ji(t) {
            const e = (Vl + "lineDasharray").trim(), n = (Vl + "linePatternFile").trim(), i = [], r = [], o = [];
            for (let s = 0; s < t.length; s++) {
                const a = t[s], l = a.properties && a.properties[e];
                l && tu(l) ? o.push(a) : a.properties && a.properties[n] ? r.push(a) : i.push(a);
            }
            return [ r, o, i ];
        }
        Yi() {
            this.vi = !0, this.setToRedraw();
        }
        $i() {
            this.ci = !0, this.setToRedraw();
        }
        Zi(t) {
            const e = this.layer.getId();
            for (let n = 0; n < t.length; n++) {
                const i = t[n];
                let r = !1;
                for (let t = 0; t < this.GeometryTypes.length; t++) if (i instanceof this.GeometryTypes[t]) {
                    r = !0;
                    break;
                }
                if (!r) throw new Error(`${i.getJSONType()} can't be added to ${this.layer.getJSONType()}(id:${e}).`);
                this.Vi(i);
            }
        }
        Vi(t) {
            void 0 === t[Dl] && (t[Dl] = this.se++);
            const e = t[Dl];
            this.features[e] && this.Ki(e), this.features[e] = Hl(t, this.hi, this.features[e]);
            const n = this.features[e];
            return this.Qi(n, e), this.ri[e] = t, e;
        }
        Qi(t, e) {
            if (!t) return;
            const n = Array.isArray(t) ? t[0].id : t.id;
            if (this.si[n] = t, Array.isArray(t)) for (let n = 0; n < t.length; n++) {
                const i = t[n][$l];
                t[n][Dl] = e, this.oi[i] = {
                    feature: t[n]
                }, this.oi[i][Dl] = e;
                const r = {
                    feature: t[n]
                };
                Xl(t[n]) && (this.ai[i] = r), Yl(t[n]) && (this.li[i] = r), Ql(t[n]) && (this.ui[i] = r);
            } else {
                t[Dl] = e;
                const n = {
                    feature: t
                }, i = t[$l];
                Xl(t) && (this.ai[i] = n), Yl(t) && (this.li[i] = n), Ql(t) && (this.ui[i] = n), 
                this.oi[i] = n;
            }
        }
        Ki(t) {
            const e = this.features[t];
            if (e) if (Array.isArray(e)) for (let t = 0; t < e.length; t++) {
                const n = e[t][$l], i = e[t].id;
                delete this.si[i], delete this.oi[n], delete this.ai[n], delete this.li[n], delete this.ui[n];
            } else {
                const t = e[$l], n = e.id;
                delete this.si[n], delete this.oi[t], delete this.ai[t], delete this.li[t], delete this.ui[t];
            }
        }
        pick(t, e, n) {
            const i = [];
            if (!this.layer.isVisible()) return i;
            return [ this.painter, this.mi, this.yi ].forEach(r => {
                if (!r) return;
                const o = r.pick(t, e, n.tolerance);
                if (o && o.data && o.data.feature) {
                    const t = o.data.feature;
                    i.push(this.ri[t[Dl]]);
                }
            }), i;
        }
        er(t) {
            const e = t[Dl], n = this.features[e];
            return Array.isArray(n) ? n[0][$l] : n[$l];
        }
        Mi() {
            let t = !1;
            for (const e in this.fi) {
                const n = this.fi[e], i = this.er(n);
                if (!this.Hi && (this.ai[i] || this.li[i])) {
                    const e = this.qi(n);
                    t = t || e;
                }
                if (!this.Xi && this.ui[i]) {
                    const e = this.Gi(n);
                    t = t || e;
                }
                if (!this.nr) {
                    const e = this.updateMesh(n);
                    t = t || e;
                }
            }
            this.fi = {}, t && (Bl(this), this.layer.fire("partialupdate"));
        }
        ir(t) {
            this.Vi(t), this.$i(), Bl(this);
        }
        onGeometryAdd(t) {
            this.setToRedraw(), this.canvas && t && t.length && (this.Zi(t), this.$i(), Bl(this));
        }
        onGeometryRemove(t) {
            if (t && t.length) {
                for (let e = 0; e < t.length; e++) {
                    const n = t[e][Dl];
                    void 0 !== n && (delete this.ri[n], this.Ki(n), delete this.features[n]);
                }
                this.$i(), Bl(this);
            }
        }
        onGeometrySymbolChange(t) {
            const e = t.target._getParent() || t.target, n = t.properties;
            for (const t in n) if (F(n, t) && Ra[t]) return void this.ir(e);
            const i = e[Dl], r = e._getInternalSymbol(), o = this.features[i];
            if (this.Vi(e), o) if (function(t, e) {
                return Array.isArray(t) ? !!Array.isArray(e) && t.length === e.length : !Array.isArray(e);
            }(r, o)) {
                if (Array.isArray(r)) for (let t = 0; t < r.length; t++) {
                    if (!eu(r[t], o[t])) return void this.ir(e);
                } else if (!eu(r, o)) return void this.ir(e);
                this.onGeometryPositionChange(t);
            } else this.ir(e); else this.ir(e);
        }
        onGeometryShapeChange(t) {
            const e = t.target._getParent() || t.target, n = Hl(e, {
                id: 0
            }).geometry, i = e[Dl], r = this.features[i];
            if (function t(e, n) {
                if (e.length !== n.length) return !1;
                if (Array.isArray(e[0]) && Array.isArray(n[0])) {
                    for (let i = 0; i < e.length; i++) if (!t(e[0], n[0])) return !1;
                } else if (Array.isArray(e[0]) || Array.isArray(n[0])) return !1;
                return !0;
            }(n, (Array.isArray(r) ? r[0] : r).geometry)) return this._i && (this.xi = !0), 
            void this.onGeometryPositionChange(t);
            this.Zi([ e ]), this.Yi(), Bl(this);
        }
        onGeometryPositionChange(t) {
            const e = t.target._getParent() || t.target, n = e[Dl];
            this.Zi([ e ]), this.fi[n] = e, Bl(this);
        }
        onGeometryZIndexChange() {
            this.$i();
        }
        onGeometryShow(t) {
            this.rr(t);
        }
        onGeometryHide(t) {
            this.rr(t);
        }
        rr(t) {
            const e = t.target, n = e[Dl], i = this.features[n];
            if (i) {
                const t = e.isVisible();
                if (Array.isArray(i)) {
                    if (t === i[0].visible) return;
                    for (let e = 0; e < i.length; e++) i[e].visible = t;
                } else {
                    if (t === i.visible) return;
                    i.visible = t;
                }
                this.or(), Bl(this);
            }
        }
        or() {
            this.Ti = !0;
        }
        onGeometryPropertiesChange(t) {
            const e = t.target, n = e[Dl];
            this.features[n] = Hl(e, this.hi), this.Qi(this.features[n], n), this.$i(), Bl(this);
        }
        createContext() {
            const t = this.canvas.gl && this.canvas.gl.wrap;
            t ? (this.gl = this.canvas.gl.wrap(), this.regl = this.canvas.gl.regl) : this.Me(), 
            t && (this.canvas.pickingFBO = this.canvas.pickingFBO || this.regl.framebuffer(this.canvas.width, this.canvas.height)), 
            this.prepareRequestors(), this.pickingFBO = this.canvas.pickingFBO || this.regl.framebuffer(this.canvas.width, this.canvas.height), 
            this.painter = this.createPainter();
            const e = Ol.get3DPainterClass("icon"), n = M({}, Cl, El);
            this.sr(n, "markerBloom"), this.sr(n, "textBloom");
            const i = M({}, Ha, this.layer.options.sceneConfig || {});
            this.mi = new e(this.regl, this.layer, n, i, 0), this.mi.setTextShaderDefines({
                REVERSE_MAP_ROTATION_ON_PITCH: 1
            });
            const r = Ol.get3DPainterClass("line"), o = M({}, Rl);
            this.sr(o, "lineBloom"), this.yi = new r(this.regl, this.layer, o, this.layer.options.sceneConfig, 0), 
            this.layer.getGeometries() && this.onGeometryAdd(this.layer.getGeometries());
        }
        sr(t, e) {
            const n = this.layer;
            Object.defineProperty(t, e, {
                enumerable: !0,
                get: function() {
                    return n && n.options.enableBloom;
                }
            });
        }
        createPainter() {}
        Me() {
            const t = this.layer.options.glOptions || {
                alpha: !0,
                depth: !0,
                stencil: !0,
                antialias: !1
            };
            t.preserveDrawingBuffer = !0, t.stencil = !0, this.glOptions = t, this.gl = this.gl || this.je(this.canvas, t), 
            this.regl = n.createREGL({
                gl: this.gl,
                attributes: t,
                extensions: n.reshader.Constants.WEBGL_EXTENSIONS,
                optionalExtensions: n.reshader.Constants.WEBGL_OPTIONAL_EXTENSIONS
            });
        }
        je(t, e) {
            const n = [ "webgl", "experimental-webgl" ];
            let i = null;
            for (let r = 0; r < n.length; ++r) {
                try {
                    i = t.getContext(n[r], e);
                } catch (t) {}
                if (i) break;
            }
            return i;
        }
        clearCanvas() {
            super.clearCanvas(), this.regl && this.regl.clear({
                color: [ 0, 0, 0, 0 ],
                depth: 1,
                stencil: 255
            });
        }
        resizeCanvas(t) {
            super.resizeCanvas(t);
            const e = this.canvas;
            e && (!this.pickingFBO || this.pickingFBO.width === e.width && this.pickingFBO.height === e.height || this.pickingFBO.resize(e.width, e.height), 
            this.painter && this.painter.resize(e.width, e.height));
        }
        onRemove() {
            super.onRemove(), this.painter && this.painter.delete(), this.mi && this.mi.delete(), 
            this.yi && this.yi.delete();
        }
        drawOutline(t) {
            if (this.$e && (this.painter && this.painter.outlineAll(t), this.mi.outlineAll(t), 
            this.yi.outlineAll(t)), this.ar) for (let e = 0; e < this.ar.length; e++) this.painter && this.painter.outline(t, this.ar[e]), 
            this.mi.outline(t, this.ar[e]), this.yi.outline(t, this.ar[e]);
        }
        outlineAll() {
            this.$e = !0, this.setToRedraw();
        }
        outline(t) {
            this.ar || (this.ar = []);
            const e = [];
            for (let n = 0; n < t.length; n++) {
                const i = this.layer.getGeometryById(t[n]);
                if (i) {
                    const t = this.features[i[Dl]];
                    if (Array.isArray(t)) for (let n = 0; n < t.length; n++) e.push(t[n].id); else e.push(t.id);
                }
            }
            this.ar.push(e), this.setToRedraw();
        }
        cancelOutline() {
            delete this.$e, delete this.ar, this.setToRedraw();
        }
        isEnableWorkAround(t) {
            return "win-intel-gpu-crash" === t && (this.layer.options.workarounds["win-intel-gpu-crash"] && Jl(this.gl));
        }
        Re(t) {
            return O(t, this.getMap());
        }
    }
    function Bl(t) {
        t.setToRedraw();
    }
    function Jl(t) {
        const e = t.getExtension("WEBGL_debug_renderer_info");
        if (e && "undefined" != typeof navigator) {
            const n = t.getParameter(e.UNMASKED_RENDERER_WEBGL), i = "Win32" === navigator.platform || "Win64" === navigator.platform;
            if (n && n.toLowerCase().indexOf("intel") >= 0 && i) return !0;
        }
        return !1;
    }
    function Xl({properties: t}) {
        const e = (Vl + "markerFile").trim(), n = (Vl + "markerType").trim();
        return t[e] || t[n];
    }
    function Yl({properties: t}) {
        return t[(Vl + "textName").trim()];
    }
    const Zl = (Vl + "lineWidth").trim(), Kl = "_line_gradient_property".trim();
    function Ql(t) {
        return 2 === t.type && !t.properties[Kl] && void 0 !== t.properties[Zl] || 3 === t.type && void 0 !== t.properties[Zl];
    }
    function tu(t) {
        if (!Array.isArray(t)) return 0;
        let e = 0;
        for (let n = 0; n < t.length; n++) e += t[n];
        return e;
    }
    function eu(t, e) {
        if (Object.keys(t).sort().join() !== Object.keys(e.properties || {}).filter(t => 0 === t.indexOf(Vl)).map(t => t.substring(Vl.length)).sort().join()) return !1;
        for (const n in t) if (F(t, n)) {
            const i = (Vl + n).trim();
            if (v(t[n]) !== v(e.properties[i])) return !1;
        }
        return !0;
    }
    function nu(t, e, n) {
        if (!t || t.type !== e) return null;
        const i = new n(t.id, t.options), o = t.geometries, s = [];
        for (let t = 0; t < o.length; t++) {
            const e = r.Geometry.fromJSON(o[t]);
            e && s.push(e);
        }
        return i.addGeometry(s), i;
    }
    const iu = {
        glyphSdfLimitPerFrame: 15,
        iconErrorUrl: null,
        workarounds: {
            "win-intel-gpu-crash": !0
        },
        collision: !1,
        collisionFrameLimit: 1,
        sceneConfig: Ha
    };
    class ru extends Ol {
        static fromJSON(t) {
            return nu(t, "PointLayer", ru);
        }
    }
    ru.mergeOptions(iu), ru.registerJSONType("PointLayer"), ru.registerRenderer("canvas", null);
    ru.registerRenderer("gl", class extends Wl {
        constructor(...t) {
            super(...t), this.GeometryTypes = [ r.Marker, r.MultiPoint ];
        }
        onGeometryAdd(t) {
            t && (Array.isArray(t) ? t.forEach(t => {
                t.options.maxMarkerWidth = t.options.maxMarkerHeight = 255;
            }) : t.options.maxMarkerWidth = t.options.maxMarkerHeight = 255, super.onGeometryAdd(t));
        }
    });
    class ou extends Ol {
        static fromJSON(t) {
            return nu(t, "LineStringLayer", ou);
        }
    }
    ou.mergeOptions({
        meshRenderOrder: 1
    }), ou.registerJSONType("LineStringLayer");
    const su = "_line_gradient_property".trim();
    ou.registerRenderer("gl", class extends Wl {
        constructor(...t) {
            super(...t), this.GeometryTypes = [ r.LineString, r.MultiLineString ];
        }
        createPainter() {
            const t = Ol.get3DPainterClass("line-gradient");
            this.painterSymbol = M({}, {
                lineGradientProperty: su
            }, Rl), this.sr(this.painterSymbol, "lineBloom");
            return new t(this.regl, this.layer, this.painterSymbol, this.layer.options.sceneConfig, 0);
        }
        buildMesh() {
            let {features: t, center: e} = this.zi();
            if (t = t.filter(t => !!t.properties[su]), !t.length) return;
            const n = this.Ti;
            this.lr = e;
            const i = M({}, this.painterSymbol), r = this.createMesh(this.painter, ra, i, t, null, e);
            this.nr = !0, r.then(t => {
                this.meshes && this.painter.deleteMesh(this.meshes);
                const e = [], i = t && t.meshes;
                if (i) {
                    e.push(...i);
                    for (let t = 0; t < i.length; t++) i[t].feaGroupIndex = 0, i[t].geometry.properties.originElements = i[t].geometry.properties.elements.slice();
                }
                this.meshes = e, n && (this.Ti = n), this.nr = !1, this.setToRedraw();
            });
        }
    }), ou.registerRenderer("canvas", null);
    class au extends Ol {
        static fromJSON(t) {
            return nu(t, "PolygonLayer", au);
        }
    }
    au.registerJSONType("PolygonLayer");
    const lu = {
        polygonFill: {
            type: "identity",
            default: void 0,
            property: "_symbol_polygonFill"
        },
        polygonPatternFile: {
            type: "identity",
            default: void 0,
            property: "_symbol_polygonPatternFile"
        },
        polygonOpacity: {
            type: "identity",
            default: 1,
            property: "_symbol_polygonOpacity"
        },
        uvScale: {
            type: "identity",
            default: [ 1, 1 ],
            property: "_symbol_uvScale"
        },
        uvOffset: {
            type: "identity",
            default: [ 0, 0 ],
            property: "_symbol_uvOffset"
        }
    };
    au.registerRenderer("gl", class extends Wl {
        constructor(...t) {
            super(...t), this.PackClass = ba, this.GeometryTypes = [ r.Polygon, r.MultiPolygon ];
        }
        buildMesh(t) {
            const {features: e, center: n} = this.zi();
            if (!e.length) return;
            const i = this.Ti;
            this.lr = n;
            const r = this.ur(e), o = M({}, lu), s = r.map((e, i) => this.createMesh(this.painter, ba, o, e, t && t[i], n));
            this.nr = !0, Promise.all(s).then(t => {
                this.meshes && this.painter.deleteMesh(this.meshes);
                const e = [], n = [];
                for (let i = 0; i < t.length; i++) {
                    const r = t[i] && t[i].meshes;
                    if (r) {
                        e.push(...r);
                        for (let t = 0; t < r.length; t++) r[t].feaGroupIndex = i, r[t].geometry.properties.originElements = r[t].geometry.properties.elements.slice(), 
                        1 === i && (r[t].transparent = !0);
                        n[i] = t[i].atlas;
                    }
                }
                this.meshes = e, this.atlas = n, i && (this.Ti = i), this.nr = !1, this.setToRedraw();
            });
        }
        ur(t) {
            const e = [], n = [];
            for (let i = 0; i < t.length; i++) {
                const r = t[i];
                r.properties && r.properties._symbol_polygonOpacity < 1 ? n.push(r) : e.push(r);
            }
            return [ e, n ];
        }
        createPainter() {
            const t = Ol.get3DPainterClass("fill");
            this.painterSymbol = M({}, lu), this.sr(this.painterSymbol, "polygonBloom");
            return new t(this.regl, this.layer, this.painterSymbol, this.layer.options.sceneConfig, 0);
        }
        updateMesh(t) {
            return this.Wi(t, this.meshes, this.atlas, this.lr, this.painter, ba, lu, this.ur);
        }
    }), au.registerRenderer("canvas", null);
    /*!
    * Contains code from jquery.easing
    * BSD License
    * https://github.com/gdsmith/jquery.easing/
    */
    var uu = Math.pow, cu = Math.sqrt, hu = Math.sin, du = Math.cos, fu = Math.PI, pu = 1.70158, mu = 1.525 * pu, yu = 2 * fu / 3, gu = 2 * fu / 4.5;
    function bu(t) {
        var e = 7.5625, n = 2.75;
        return t < 1 / n ? e * t * t : t < 2 / n ? e * (t -= 1.5 / n) * t + .75 : t < 2.5 / n ? e * (t -= 2.25 / n) * t + .9375 : e * (t -= 2.625 / n) * t + .984375;
    }
    function vu(t, e) {
        switch (t = t.toLowerCase()) {
          case "swing":
            return function(t) {
                return xu(t);
            }(e);

          case "easeinquad":
            return xu(e);

          case "easeoutquad":
            return function(t) {
                return 1 - (1 - t) * (1 - t);
            }(e);

          case "easeinoutquad":
            return function(t) {
                return t < .5 ? 2 * t * t : 1 - uu(-2 * t + 2, 2) / 2;
            }(e);

          case "easeincubic":
            return function(t) {
                return t * t * t;
            }(e);

          case "easeoutcubic":
            return function(t) {
                return 1 - uu(1 - t, 3);
            }(e);

          case "easeinoutcubic":
            return function(t) {
                return t < .5 ? 4 * t * t * t : 1 - uu(-2 * t + 2, 3) / 2;
            }(e);

          case "easeinquart":
            return function(t) {
                return t * t * t * t;
            }(e);

          case "easeoutquart":
            return function(t) {
                return 1 - uu(1 - t, 4);
            }(e);

          case "easeinoutquart":
            return function(t) {
                return t < .5 ? 8 * t * t * t * t : 1 - uu(-2 * t + 2, 4) / 2;
            }(e);

          case "easeinquint":
            return function(t) {
                return t * t * t * t * t;
            }(e);

          case "easeoutquint":
            return function(t) {
                return 1 - uu(1 - t, 5);
            }(e);

          case "easeinoutquint":
            return function(t) {
                return t < .5 ? 16 * t * t * t * t * t : 1 - uu(-2 * t + 2, 5) / 2;
            }(e);

          case "easeinsine":
            return function(t) {
                return 1 - du(t * fu / 2);
            }(e);

          case "easeoutsine":
            return function(t) {
                return hu(t * fu / 2);
            }(e);

          case "easeinoutsine":
            return function(t) {
                return -(du(fu * t) - 1) / 2;
            }(e);

          case "easeinexpo":
            return function(t) {
                return 0 === t ? 0 : uu(2, 10 * t - 10);
            }(e);

          case "easeoutexpo":
            return function(t) {
                return 1 === t ? 1 : 1 - uu(2, -10 * t);
            }(e);

          case "easeinoutexpo":
            return function(t) {
                return 0 === t ? 0 : 1 === t ? 1 : t < .5 ? uu(2, 20 * t - 10) / 2 : (2 - uu(2, -20 * t + 10)) / 2;
            }(e);

          case "easeincirc":
            return function(t) {
                return 1 - cu(1 - uu(t, 2));
            }(e);

          case "easeoutcirc":
            return function(t) {
                return cu(1 - uu(t - 1, 2));
            }(e);

          case "easeinoutcirc":
            return function(t) {
                return t < .5 ? (1 - cu(1 - uu(2 * t, 2))) / 2 : (cu(1 - uu(-2 * t + 2, 2)) + 1) / 2;
            }(e);

          case "easeinelastic":
            return function(t) {
                return 0 === t ? 0 : 1 === t ? 1 : -uu(2, 10 * t - 10) * hu((10 * t - 10.75) * yu);
            }(e);

          case "easeoutelastic":
            return function(t) {
                return 0 === t ? 0 : 1 === t ? 1 : uu(2, -10 * t) * hu((10 * t - .75) * yu) + 1;
            }(e);

          case "easeinoutelastic":
            return function(t) {
                return 0 === t ? 0 : 1 === t ? 1 : t < .5 ? -uu(2, 20 * t - 10) * hu((20 * t - 11.125) * gu) / 2 : uu(2, -20 * t + 10) * hu((20 * t - 11.125) * gu) / 2 + 1;
            }(e);

          case "easeinback":
            return function(t) {
                return 2.70158 * t * t * t - pu * t * t;
            }(e);

          case "easeoutback":
            return function(t) {
                return 1 + 2.70158 * uu(t - 1, 3) + pu * uu(t - 1, 2);
            }(e);

          case "easeinoutback":
            return function(t) {
                return t < .5 ? uu(2 * t, 2) * (7.189819 * t - mu) / 2 : (uu(2 * t - 2, 2) * ((mu + 1) * (2 * t - 2) + mu) + 2) / 2;
            }(e);

          case "easeinbounce":
            return function(t) {
                return 1 - bu(1 - t);
            }(e);

          case "easeoutbounce":
            return function(t) {
                return bu(t);
            }(e);

          case "easeinoutbounce":
            return function(t) {
                return t < .5 ? (1 - bu(1 - 2 * t)) / 2 : (1 + bu(2 * t - 1)) / 2;
            }
            /*!
        Feature Filter by

        (c) mapbox 2016 and maptalks 2018
        www.mapbox.com | www.maptalks.org
        License: MIT, header required.
    */ (e);
        }
        throw new Error("Unsupported easing function:" + t);
    }
    function xu(t) {
        return t * t;
    }
    const wu = [ "Unknown", "Point", "LineString", "Polygon", "MultiPoint", "MultiLineString", "MultiPolygon", "GeometryCollection" ];
    function ku(t) {
        if (!t) return "true";
        const e = t[0];
        if (t.length <= 1) return "any" === e ? "false" : "true";
        return `(${"==" === e ? _u(t[1], t[2], "===", !1) : "!=" === e ? _u(t[1], t[2], "!==", !1) : "<" === e || ">" === e || "<=" === e || ">=" === e ? _u(t[1], t[2], e, !0) : "any" === e ? Su(t.slice(1), "||") : "all" === e ? Su(t.slice(1), "&&") : "none" === e ? Iu(Su(t.slice(1), "||")) : "in" === e ? Mu(t[1], t.slice(2)) : "!in" === e ? Iu(Mu(t[1], t.slice(2))) : "has" === e ? Pu(t[1]) : "!has" === e ? Iu(Pu(t[1])) : "contains" === e ? function(t, e, n) {
            const i = Au(t);
            return void 0 !== n ? `(${i} + '').indexOf("${e}") === ${n}` : `(${i} + '').indexOf("${e}") >= 0`;
        }(t[1], t[2], t[3]) : "true"})`;
    }
    function Au(t) {
        return "$" === t[0] ? "f." + t.substring(1) : "p[" + JSON.stringify(t) + "]";
    }
    function _u(t, e, n, i) {
        if ("object" == typeof (r = t) && r && t.op) return function(t, e, n, i) {
            const r = t.property, o = t.op;
            let s = Au(r);
            return "length" !== o ? (console.error(`not support ${o} op`), "false") : (s = `((${s}+='').length)`, 
            Tu(s, r, e, n, i));
        }(t, e, n, i);
        var r;
        return Tu(Au(t), t, e, n, i);
    }
    function Tu(t, e, n, i, r) {
        const o = "$type" === e ? wu.indexOf(n) : JSON.stringify(n);
        return (r ? `typeof ${t}=== typeof ${o}&&` : "") + t + i + o;
    }
    function Su(t, e) {
        return t.map(ku).join(e);
    }
    function Mu(t, e) {
        "$type" === t && (e = e.map(t => wu.indexOf(t)));
        const n = JSON.stringify(e.sort(ju)), i = Au(t);
        return e.length <= 200 ? `${n}.indexOf(${i}) !== -1` : `function(v, a, i, j) {\n        while (i <= j) { var m = (i + j) >> 1;\n            if (a[m] === v) return true; if (a[m] > v) j = m - 1; else i = m + 1;\n        }\n    return false; }(${i}, ${n},0,${e.length - 1})`;
    }
    function Pu(t) {
        return "$id" === t ? '"id" in f' : JSON.stringify(t) + " in p";
    }
    function Iu(t) {
        return `!(${t})`;
    }
    function ju(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }
    function zu() {}
    const Fu = zu.prototype;
    Fu.getType = function() {
        return Object.getPrototypeOf(this).constructor.type;
    }, Fu.isVisible = function() {
        throw new Error("to be implemented.");
    }, Fu.prepareRender = function() {
        throw new Error("to be implemented.");
    }, Fu.updateCollision = function() {
        throw new Error("to be implemented.");
    }, Fu.supportRenderMode = function() {
        throw new Error("to be implemented.");
    }, Fu.startFrame = function() {
        throw new Error("to be implemented.");
    }, Fu.endFrame = function() {
        throw new Error("to be implemented.");
    }, Fu.paintTile = function() {
        throw new Error("to be implemented.");
    }, Fu.getShadowMeshes = function() {
        throw new Error("to be implemented.");
    }, Fu.updateSceneConfig = function() {
        throw new Error("to be implemented.");
    }, Fu.updateDataConfig = function() {
        throw new Error("to be implemented.");
    }, Fu.updateSymbol = function() {
        throw new Error("to be implemented.");
    }, Fu.pick = function() {
        throw new Error("to be implemented.");
    }, Fu.resize = function() {
        throw new Error("to be implemented.");
    }, Fu.deleteTile = function() {
        throw new Error("to be implemented.");
    }, Fu.remove = function() {
        throw new Error("to be implemented.");
    }, Fu.needToRedraw = function() {
        throw new Error("to be implemented.");
    }, Fu.needToRetireFrames = function() {
        throw new Error("to be implemented.");
    }, Fu.outline = function() {
        throw new Error("to be implemented.");
    }, Fu.outlineAll = function() {
        throw new Error("to be implemented.");
    }, Fu.needPolygonOffset = function() {
        throw new Error("to be implemented.");
    }, Fu.constructor = zu;
    const Ou = Object.prototype.hasOwnProperty;
    function Cu(t) {
        t.registerPlugin(this);
    }
    zu.extend = function(t, e) {
        const n = function() {
            this.init && this.init();
        }, i = Object.create(Fu);
        i.constructor = n, n.prototype = i, n.type = t;
        for (const t in e) Ou.call(e, t) && (n.prototype[t] = e[t]);
        return n.registerAt = Cu.bind(n), n;
    };
    const Eu = {
        redraw: !1,
        retire: !1
    }, Ru = [];
    let Nu = 1;
    function Du(t, e) {
        return zu.extend(t, {
            init: function() {
                this.cr = {};
            },
            isVisible() {
                return this.painter && this.painter.isVisible();
            },
            supportRenderMode: function(t) {
                return this.painter.supportRenderMode(t);
            },
            startFrame: function(t) {
                const n = t.layer, i = t.regl, r = t.sceneConfig, o = t.dataConfig, s = t.symbol;
                let a = this.painter;
                if (!a) {
                    const l = t.pluginIndex;
                    a = this.painter = new e(i, n, s, r, l, o);
                }
                this.cr || (this.cr = {});
                const l = r.excludes;
                this.hr ? l !== this.hr && (this.dr = l ? new Function("f", "var p = (f && f.properties || {}); return " + ku(l)) : null, 
                this.hr = l) : l && (this.hr = l), a.startFrame(t), this.pr = {};
            },
            updateCollision: function(t) {
                const e = this.painter;
                return e && e.isVisible() ? e.updateCollision(t) : null;
            },
            prepareRender: function(t) {
                const e = this.painter;
                return e && e.isVisible() ? e.prepareRender(t) : null;
            },
            endFrame: function(t) {
                const e = this.painter;
                return e && e.isVisible() ? e.render(t) : null;
            },
            getShadowMeshes() {
                const t = this.painter;
                return t && t.getShadowMeshes && t.getShadowMeshes() || Ru;
            },
            createTile: function(t) {
                const {tileCache: e, tileData: n} = t;
                let i = !1;
                const r = this.painter;
                if (!r) return {
                    retire: i
                };
                const o = this.mr(t);
                let s = e.geometry;
                if (!s) {
                    const o = n.features, a = n.data;
                    if (!a || !a.length) return {
                        retire: i
                    };
                    const l = a;
                    if (this.painter.colorSymbol && !function(t) {
                        if (!t) return !0;
                        for (const e in t) return !1;
                        return !0;
                    }(o)) for (let t = 0; t < a.length; t++) {
                        const e = this.yr(o, a[t].data.aPickingId, a[t].indices, a[t].data.aPosition, a[t].positionSize);
                        a[t].data.aColor = e;
                    }
                    s = e.geometry = r.createGeometries(l, o);
                    for (let e = 0; e < s.length; e++) s[e] && s[e].geometry && (i = !0, s[e].geometry.properties.features = o, 
                    this.Oi(s[e].geometry, t));
                }
                let a = this.le(o);
                if (!a) {
                    const {meshes: e, retire: n} = this.gr(s, t);
                    i || (i = n), a = e;
                }
                return {
                    retire: i
                };
            },
            gr(t, e) {
                const {layer: n, tileInfo: i, tileExtent: r, tileTransform: o, tileTranslationMatrix: s, tileVectorTransform: a, tileZoom: l, sceneConfig: u} = e;
                let c = !1;
                const h = this.painter, d = [ i.extent2d.xmin, i.extent2d.ymax ], f = h.createMeshes(t, o, {
                    tileExtent: r,
                    tilePoint: d,
                    tileZoom: l,
                    tileTranslationMatrix: s,
                    tileVectorTransform: a
                }, e);
                if (f.length) {
                    const t = n.getRenderer().isEnableTileStencil();
                    for (let n = 0; n < f.length; n++) f[n] && (c = !0, this.vr(f[n], o, e.timestamp, Nu++, t));
                    u.animation && (f.xr = e.timestamp);
                    const i = this.mr(e);
                    this.cr[i] = f;
                }
                return {
                    meshes: f,
                    retire: c
                };
            },
            paintTile: function(t) {
                const {tileCache: e, tileInfo: n, tileZoom: i, sceneConfig: r} = t, o = this.painter;
                if (!o) return Eu;
                let s = e.geometry;
                if (!s) return Eu;
                let a = !1;
                const l = this.mr(t);
                let u = this.le(l);
                if (!u) {
                    const {meshes: e, retire: n} = this.gr(s, t);
                    a || (a = n), u = e;
                }
                if (!u.length) return Eu;
                const c = o.getTileLevelValue(n, i);
                u.forEach(t => {
                    t.properties.tile = n, t.properties.level = c;
                });
                let h = !1;
                if (!this.pr[l]) {
                    let e = null, n = r.animation;
                    if (n) {
                        const i = t.sceneConfig.animationDuration || 800, r = (t.timestamp - u.xr) / i, o = u[0].properties.createTime;
                        u.xr - o < i && r < 1 && (!0 !== n && 1 !== n || (n = "linear"), e = "linear" === n ? r : vu(n, r), 
                        h = !0);
                    }
                    o.addMesh(u, e, t), this.pr[l] = 1;
                }
                return {
                    redraw: h,
                    retire: a
                };
            },
            vr: function(t, e, n, i, r) {
                if (t.properties.tileTransform = e, t.properties.createTime = n, t.properties.meshKey = i, 
                t.needUpdateShadow = !0, r) {
                    const e = t.defines || {};
                    e.ENABLE_TILE_STENCIL = 1, t.setDefines(e), Object.defineProperty(t.uniforms, "stencilRef", {
                        enumerable: !0,
                        get: function() {
                            return t.properties.tile ? t.properties.tile.stencilRef : 255;
                        }
                    });
                }
            },
            Oi: function(t, e) {
                const {layer: n, tileInfo: i} = e, r = n.getMap(), o = (n.getSpatialReference ? n.getSpatialReference() : r.getSpatialReference()).getResolution(i.z), s = e.tileExtent / n.options.tileSize;
                t.properties.tileResolution = o, t.properties.tileRatio = s, t.properties.z = i.z, 
                t.properties.tileExtent = e.tileExtent;
            },
            updateSceneConfig: function(t) {
                const e = this.painter;
                e && e.updateSceneConfig(t.sceneConfig);
            },
            updateDataConfig: function(t, e) {
                const n = this.painter;
                return !n || n.updateDataConfig(t, e);
            },
            updateSymbol: function(t, e) {
                const n = this.painter;
                if (!n) return !1;
                if (n.shouldDeleteMeshOnUpdateSymbol(t)) {
                    if (this.cr) for (const t in this.cr) n.deleteMesh(this.cr[t], !0);
                    delete this.cr, delete this.pr;
                }
                return n.updateSymbol(t, e);
            },
            pick: function(t, e, n) {
                return this.painter && this.painter.pick ? this.painter.pick(t, e, n) : null;
            },
            deleteTile: function(t) {
                if (!this.cr) return;
                const e = this.mr(t), n = this.cr[e];
                n && this.painter && this.painter.deleteMesh(n), delete this.cr[e], this.pr && delete this.pr[e];
            },
            remove: function() {
                const t = this.painter;
                if (t && this.cr) {
                    for (const e in this.cr) t.deleteMesh(this.cr[e]);
                    t.delete(), delete this.painter;
                }
                delete this.cr, delete this.pr;
            },
            resize: function(t, e) {
                const n = this.painter;
                n && n.resize(t, e);
            },
            needToRedraw: function() {
                return !!this.painter && this.painter.needToRedraw();
            },
            needToRetireFrames: function() {
                return !!this.painter && this.painter.needToRetireFrames();
            },
            needToRefreshTerrainTile: function() {
                return !!this.painter && this.painter.needToRefreshTerrainTile();
            },
            isTerrainSkin: function() {
                return !!this.painter && this.painter.isTerrainSkin();
            },
            isTerrainVector: function() {
                return !!this.painter && this.painter.isTerrainVector();
            },
            yr: function(t, e, n, i, r = 3) {
                if (!i || !t || !e.length) return null;
                const o = new Uint8Array(i.length / r * 4);
                let s, a;
                const l = this.painter.colorSymbol, u = {};
                let c;
                for (let n = 0, i = e.length; n < i; n++) {
                    const i = e[n];
                    if (s = t[i].symbol, a = u[i], !a) if (l) {
                        let e;
                        e = "function" == typeof l ? l(t[i].feature && t[i].feature.properties) : l, e = Pt(e), 
                        a = u[i] = e.array();
                    } else a = u[i] = [ 255, 255, 255 ];
                    c = 4 * n, o[c] = a[0], o[c + 1] = a[1], o[c + 2] = a[2], o[c + 3] = 255 * (s[this.painter.opacitySymbol] || 1);
                }
                return o;
            },
            mr: function(t) {
                const e = t.tileInfo;
                return e.meshKey || (e.meshKey = Nu++), e.meshKey;
            },
            le: function(t) {
                return this.cr[t];
            },
            wr(t, e) {
                if (Array.isArray(t)) t.forEach((t, n) => {
                    const {features: i} = t.properties;
                    this.kr(t, e[n], i);
                }); else {
                    const {features: n} = t.properties;
                    this.kr(t, Array.isArray(e) ? e[0] : e, n);
                }
            },
            kr(t, e, n) {
                const i = e.featureIndexes || e.data.featureIndexes;
                if (i) if (this.dr) {
                    const r = e.indices;
                    let o = null, s = !1;
                    const a = [];
                    for (let t = 0; t < r.length; t++) {
                        const e = n[i[r[t]]];
                        null !== o && o === r[t] || (s = this.dr(e.feature), o = r[t]), s || a.push(r[t]);
                    }
                    t.setElements(new e.indices.constructor(a));
                } else t.setElements(e.indices);
            },
            outline(t, e) {
                const n = this.painter;
                n && n.outline(t, e);
            },
            outlineAll(t) {
                const e = this.painter;
                e && e.outlineAll(t);
            },
            needPolygonOffset() {
                const t = this.painter;
                return t && t.needPolygonOffset();
            },
            highlight(t) {
                const e = this.painter;
                return e && e.highlight(t);
            },
            cancelAllHighlight() {
                const t = this.painter;
                return t && t.cancelAllHighlight();
            }
        });
    }
    class Lu {
        constructor() {
            this.Ar = 1;
        }
        write(t, e) {
            const n = t.gl, i = this.Ar++;
            return t.stencilFunc(n.ALWAYS, i, 255), t.draw(e), i;
        }
        start(t) {
            const e = t.gl;
            e.clearStencil(255), e.clear(e.STENCIL_BUFFER_BIT), this.Ar = 1, t.start();
        }
        end(t) {
            t.end();
        }
    }
    function Hu(t) {
        for (let e = 1; e < arguments.length; e++) {
            const n = arguments[e];
            for (const e in n) t[e] = n[e];
        }
        return t;
    }
    function Uu(t, e, n) {
        return Math.min(n, Math.max(e, t));
    }
    function qu(t, e, n) {
        if (t === n || t === e) return t;
        const i = n - e;
        return ((t - e) % i + i) % i + e;
    }
    function Vu(t) {
        return null == t;
    }
    function $u(t) {
        return JSON.parse(JSON.stringify(t));
    }
    function Gu(t, e, n, i, r, o) {
        Object.defineProperty(t, e, {
            enumerable: !0,
            get: function() {
                const t = Vu(n[i]) || v(n[i]) ? r : n[i];
                return o ? o(t) : t;
            }
        });
    }
    const Wu = [];
    function Bu(t) {
        for (let e = 0; e < t.length; e++) Wu[e] = t[e], Wu[e] *= 255;
        return 3 === t.length && (Wu[3] = 255), Wu;
    }
    function Ju(t, e = 4) {
        return Xu.bind(this, t, e);
    }
    function Xu(t, e, n) {
        if (Array.isArray(n)) return 3 === n.length && 4 === e && n.push(1), n;
        if (t && t[n]) return t[n];
        if (void 0 !== n.r && void 0 !== n.g && void 0 !== n.b && void 0 !== n.a) {
            return [ n.r, n.g, n.b, n.a ];
        }
        const i = Pt(n).unitArray();
        return 3 === i.length && 4 === e && i.push(1), t && (t[n] = i), i;
    }
    function Yu(t, e, n, i) {
        if (t.fill) t.fill(e, n, i); else for (let r = n; r < i; r++) t[r] = e;
    }
    function Zu(t) {
        return "number" == typeof t && !isNaN(t);
    }
    function Ku(t) {
        return t && (t.markerFile || t.markerType) && void 0 !== t.textName;
    }
    function Qu(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e);
    }
    function tc(t) {
        const e = [ t[0] ];
        let n = t[0];
        for (let i = 1; i < t.length; i++) t[i] !== n && (e.push(t[i]), n = t[i]);
        return e;
    }
    function ec(t) {
        return !t || (void 0 !== t.empty || (t.empty = function(t) {
            for (const e in t) return !1;
            return !0;
        }(t)), t.empty);
    }
    const nc = "_fn_type_";
    function ic(t, e, n) {
        if (!ec(t.properties.features)) for (let i = 0; i < n.length; i++) {
            const {symbolName: r} = n[i];
            (t._r = t._r || {})[r] = e[r], rc(t, e, n[i]);
        }
    }
    function rc(t, e, n) {
        const i = function(t) {
            const e = t.properties;
            let n = e.aPickingId;
            n || (n = e.aPickingId = new t.data.aPickingId.constructor(t.data.aPickingId));
            return n;
        }(t), {attrName: r, symbolName: o, related: s} = n;
        let a = t.data[r];
        return a ? fc(e[o]) || function(t, e) {
            if (!Array.isArray(t)) return !1;
            for (let n = 0; n < t.length; n++) if (fc(e[t[n]])) return !0;
            return !1;
        }(s, e) ? (fc(e[o]) && oc(t, e, n), a) : (a && a.buffer && a.buffer.destroy && a.buffer.destroy(), 
        delete t.data[r], sc(t, r), null) : fc(e[o]) ? (a = t.data[r] = new n.type(n.width * i.length), 
        function(t, e, n, i) {
            const {attrName: r} = i, o = (nc + r + "Index").trim();
            oc(e, n, i);
            const s = e.properties[o];
            hc(e, s, i);
        }(a, t, e, n), a) : null;
    }
    function oc(t, e, n) {
        const {attrName: i, symbolName: r} = n, o = t.properties, s = (nc + i + "Index").trim(), a = (nc + i).trim();
        if (o[s] && o[a]) return;
        const l = function(t) {
            if (!t) return cc;
            const e = [];
            for (let n = 0; n < t.length; n++) v(t[n][1]) && !x(t[n][1]).isZoomConstant && e.push(t[n][0]);
            return e;
        }(e[r].stops), u = "identity" === e[r].type && rn.checkIfIdentityZoomDependent(r, e[r].property, o.features);
        if (!u && !l.length) return void sc(t, i);
        const {features: c, aPickingId: h} = o, d = function(t, e, n, i, r) {
            const o = [];
            let s = 0, a = e[0];
            for (let l = 1, u = e.length; l < u; l++) e[l] === a && l !== u - 1 || ((r || uc(t[a].feature, n, i)) && o.push(s, l === u - 1 ? u : l), 
            a = e[l], s = l);
            return o;
        }(c, h, e[r].property, l, u);
        if (!d.length) return void sc(t, i);
        const f = t.data[i];
        o[s] = d, o[a] = f.BYTES_PER_ELEMENT ? new f.constructor(f) : new n.type(f.length);
    }
    function sc(t, e) {
        const n = t.properties, i = (nc + e + "Index").trim(), r = (nc + e).trim();
        delete n[i], delete n[r];
    }
    function ac(t, e, n, i, r) {
        if (!i) return;
        const o = i.geometry;
        if (!o) return;
        if (!ec(o.properties.features)) {
            for (let s = 0; s < n.length; s++) {
                const a = n[s], l = a.attrName;
                if (!lc(o, e, a)) {
                    const {aPickingId: t} = o.properties;
                    if (!t || o.Tr === r) continue;
                    const e = (nc + l + "Index").trim(), n = o.properties[e];
                    if (!n) continue;
                    hc(o, n, a);
                    continue;
                }
                const u = rc(o, e, a), c = a.define;
                if (u) {
                    const e = (nc + l + "Index").trim();
                    if (hc(o, o.properties[e], a), c) {
                        const t = i.defines;
                        t[c] = 1, i.setDefines(t);
                    }
                    o.generateBuffers(t);
                } else if (c) {
                    const t = i.defines;
                    t[c] && (delete t[c], i.setDefines(t));
                }
            }
            o.Tr = r;
        }
    }
    function lc(t, e, n) {
        const i = e[n.symbolName], r = t._r;
        return i !== r[n.symbolName] && (r[n.symbolName] = i, !0);
    }
    function uc(t, e, n) {
        for (let i = 0; i < n.length; i++) if ("$" === e[0] && t[e.substring(1)] === n[i] || t.properties[e] === n[i]) return !0;
        return !1;
    }
    const cc = [];
    function hc(t, e, n) {
        const {attrName: i, evaluate: r} = n, {aPickingId: o, features: s} = t.properties;
        let a;
        if (e) {
            const n = (nc + i).trim();
            a = t.properties[n];
            const l = a.length / o.length, u = e.length;
            for (let n = 0; n < u; n += 2) {
                const i = e[n], u = e[n + 1];
                let c = s[o[i]];
                c && c.feature && dc(a, c, r, i, u, l, t);
            }
        } else {
            if (a = t.data[i], function(t) {
                return Array.isArray(t) || t.constructor === Float32Array || t.constructor === Float64Array || t.constructor === Uint8Array || t.constructor === Int8Array || t.constructor === Uint16Array || t.constructor === Int16Array || t.constructor === Uint32Array || t.constructor === Int32Array || t.constructor === Uint8ClampedArray;
            }(a)) a.dirty = !0; else {
                const e = (nc + i).trim();
                a = t.properties[e], a || (a = t.properties[e] = new n.type(n.width * o.length), 
                a.dirty = !0);
            }
            const e = a.length / o.length, l = o.length;
            let u = 0;
            for (let n = 0; n < l; n++) {
                if (o[n] === o[u] && n < l - 1) continue;
                let i = s[o[u]];
                i && i.feature && (dc(a, i, r, u, n === l - 1 ? l : n, e, t), u = n);
            }
        }
        a.dirty && (t.updateData(i, a), a.dirty = !1);
    }
    function dc(t, e, n, i, r, o, s) {
        const a = (e = e.feature).properties || {};
        void 0 === a.$layer && (e.properties || (e.properties = a), a.$layer = e.layer, 
        a.$type = e.type);
        const l = n(a, s, t, i * o);
        if (Array.isArray(l)) {
            let e = !1;
            for (let n = 0; n < o; n++) if (t[i * o + n] !== l[n]) {
                e = !0;
                break;
            }
            if (e) {
                for (let e = i * o; e < r * o; e += o) t.set(l, e);
                t.dirty = !0;
            }
        } else t[i] !== l && (Yu(t, l, i, r), t.dirty = !0);
    }
    function fc(t) {
        return rn.isFnTypeSymbol(t);
    }
    const {loginIBLResOnCanvas: pc, logoutIBLResOnCanvas: mc, getIBLResOnCanvas: yc} = n.reshader.pbr.PBRUtils, gc = [], bc = [], vc = new r.Point(0, 0), xc = new r.Point(0, 0), wc = [], kc = t => 0 === t.properties.level, Ac = t => t.properties.level > 0;
    class _c {
        constructor(t, e, i, r, o, s) {
            this.Sr = !0, this.regl = t, this.layer = e, this.canvas = t._gl.canvas, this.sceneConfig = r || {}, 
            this.dataConfig = s || {}, this.pluginIndex = o, this.scene = new n.reshader.Scene, 
            this.pickingFBO = e.getRenderer().pickingFBO, this.Mr = new Lu, this.level0Filter = kc, 
            this.levelNFilter = Ac, this.loginTextureCache(), this.symbolDef = Array.isArray(i) ? i.map(t => $u(t)) : [ $u(i) ], 
            this.Pr(), this.pickingViewport = {
                x: 0,
                y: 0,
                width: () => this.canvas ? this.canvas.width : 1,
                height: () => this.canvas ? this.canvas.height : 1
            }, this.sortByCommandKey = Tc.bind(this), this.colorCache = {};
        }
        getMap() {
            return this.layer ? this.layer.getMap() : null;
        }
        getTileLevelValue(t, e) {
            const n = this.layer.getRenderer();
            return n.getTileLevelValue && n.getTileLevelValue(t, e) || 0;
        }
        isVisible() {
            const {minZoom: t, maxZoom: e} = this.sceneConfig, n = this.getMap().getZoom();
            if (!Vu(t) && n < t) return !1;
            if (!Vu(e) && n > e) return !1;
            const i = this.nt;
            if (i.length) for (let t = 0; t < i.length; t++) if (i[t] && !i[t].isFeatureConstant) return !0;
            const r = this.getSymbols();
            for (let t = 0; t < r.length; t++) {
                const e = r[t].visible;
                if (!1 !== e && 0 !== e) return !0;
            }
            return !1;
        }
        isMeshVisible(t) {
            const e = t && t.properties && t.properties.symbolIndex;
            if (!e) return !1;
            const n = this.nt, i = e.index;
            let r;
            if (n[i]) {
                if (!n[i].isFeatureConstant) return !0;
                r = n[i](this.getMap().getZoom());
            } else r = this.getSymbol(e).visible;
            return !1 !== r && 0 !== r;
        }
        isAnimating() {
            return !1;
        }
        needToRedraw() {
            return this.isAnimating() || this.Ir;
        }
        needToRetireFrames() {
            return this.ve;
        }
        needToRefreshTerrainTile() {
            return this.isAnimating();
        }
        isTerrainSkin() {
            return this.layer.options.awareOfTerrain;
        }
        isTerrainVector() {
            return !1;
        }
        fillIncludes(t, e, n) {
            const i = n && n.includes;
            if (i) for (const r in i) i[r] && (n[r].uniformDeclares && e.push(...n[r].uniformDeclares), 
            n[r].defines && Hu(t, n[r].defines));
        }
        setIncludeUniformValues(t, e) {
            const n = e && e.includes;
            if (n) for (const i in n) n[i] && e[i].renderUniforms && Hu(t, e[i].renderUniforms);
        }
        createGeometries(t, e) {
            if (!t.length) return wc;
            const n = [];
            for (let i = 0; i < t.length; i++) if (t[i]) if (void 0 !== t[i].ref) n[t[i].ref] ? n.push({
                geometry: n[t[i].ref].geometry,
                symbolIndex: t[i].symbolIndex,
                ref: t[i].ref
            }) : n.push(null); else {
                t[i] && !t[i].is2D && (this.Sr = !1);
                const r = this.createGeometry(t[i], e, i);
                if (r && r.geometry) {
                    const o = r.geometry.properties, {pickingIdMap: s, idPickingMap: a, hasFeaIds: l} = this.jr(t[i]);
                    l && (o.feaIdPickingMap = s, o.feaPickingIdMap = a), o.symbolIndex = r.symbolIndex, 
                    o.features = e, this.postCreateGeometry(r, n);
                }
                n.push(r);
            }
            return n;
        }
        isOnly2D() {
            return this.Sr;
        }
        postCreateGeometry() {}
        jr(t) {
            if (!t) return {};
            if (Array.isArray(t) && !(t = t[0])) return {};
            const e = t.featureIds, n = {}, i = {}, r = e && e.length;
            if (r) for (let r = 0; r < e.length; r++) {
                const o = t.data.aPickingId[r];
                void 0 === n[o] && (n[o] = e[r], i[e[r]] || (i[e[r]] = []), i[e[r]].push(t.data.aPickingId[r]));
            }
            return {
                hasFeaIds: r,
                idPickingMap: n,
                pickingIdMap: i
            };
        }
        createGeometry() {
            throw new Error("not implemented");
        }
        createMeshes(t, e, n, i) {
            const r = this.layer.options.awareOfTerrain, o = [];
            for (let s = 0; s < t.length; s++) {
                if (!t[s]) continue;
                if (r && i && i.isRenderingTerrain && this.isTerrainVector()) {
                    const e = t[s];
                    this.zr(e && e.geometry, i);
                }
                let a = this.createMesh(t[s], e, n, i || {});
                Array.isArray(a) ? (a = a.filter(t => !!t), o.push(...a)) : a && o.push(a);
            }
            return o;
        }
        createMesh() {
            throw new Error("not implemented");
        }
        getAltitudeOffsetMatrix() {
            const t = 100 * (this.dataConfig.altitudeOffset || 0), e = n.mat4.identity([]);
            return n.vec3.set(bc, 0, 0, t), n.mat4.translate(e, e, bc), e;
        }
        isBloom(t) {
            return !!this.getSymbol(t.properties.symbolIndex).bloom;
        }
        addMesh(t, e, n) {
            t = t.filter(t => this.isMeshVisible(t));
            const i = !(!n || !n.bloom);
            t.forEach(t => {
                const e = this.isBloom(t) && i;
                t.bloom = e;
                let r = !1;
                const o = t.defines || {};
                !!o.HAS_BLOOM !== e && (r = !0, e ? o.HAS_BLOOM = 1 : delete o.HAS_BLOOM), t.geometry.data.aTerrainAltitude && this.zr(t.geometry, n), 
                t.geometry.data.aTerrainAltitude && !o.HAS_TERRAIN_ALTITUDE && (o.HAS_TERRAIN_ALTITUDE = 1, 
                r = !0), r && t.setDefines(o), this.Fr(t);
            }), this.scene.addMesh(t);
        }
        updateCollision() {}
        render(t) {
            return this.pluginIndex = t.pluginIndex, this.polygonOffsetIndex = t.polygonOffsetIndex, 
            this.paint(t);
        }
        prepareRender(t) {
            if (this.Fe === t.timestamp) return;
            if (this.Fe = t.timestamp, !this.createFnTypeConfig) return;
            const e = this.scene.getMeshes();
            if (!e || !e.length) return;
            const n = this.getMap().getZoom();
            for (let t = 0; t < e.length; t++) {
                if (!e[t] || !e[t].geometry) continue;
                const {symbolIndex: i} = e[t].properties, r = this.getSymbolDef(i);
                if (!r) continue;
                const o = this.getFnTypeConfig(i);
                ac(this.regl, r, o, e[t], n);
            }
        }
        paint(t) {
            const e = this.layer.getMap();
            if (!e) return {
                redraw: !1
            };
            this.Or = t;
            const n = this.getUniformValues(e, t);
            return this.callShader(n, t), {
                redraw: this.Ir
            };
        }
        setToRedraw(t) {
            t && (this.ve = t), this.Ir = !0;
        }
        callShader(t, e) {
            this.callCurrentTileShader(t, e), this.callBackgroundTileShader(t, e);
        }
        callCurrentTileShader(t, e) {
            this.shader && (this.shader.filter = e && e.sceneFilter ? [ this.level0Filter, e.sceneFilter ] : this.level0Filter), 
            this.callRenderer(this.shader, t, e);
        }
        callBackgroundTileShader(t, e) {
            this.shader && (this.shader.filter = e && e.sceneFilter ? [ this.levelNFilter, e.sceneFilter ] : this.levelNFilter), 
            this.scene.getMeshes().sort(Sc), this.callRenderer(this.shader, t, e);
        }
        callRenderer(t, e, n) {
            const i = this.scene.getMeshes(), r = [];
            i.forEach(t => {
                t.properties.hlBloomMesh && n && n.bloom && r.push(t.properties.hlBloomMesh), r.push(t);
            }), this.scene.setMeshes(r), this.renderer.render(t, e, this.scene, this.getRenderFBO(n)), 
            this.scene.setMeshes(i);
        }
        getRenderFBO(t) {
            return t && t.renderTarget && t.renderTarget.fbo;
        }
        needPolygonOffset() {
            return !1;
        }
        getPolygonOffset() {
            const t = this.layer;
            return {
                factor: (e, n) => {
                    if (n.meshConfig.ssr) return 1;
                    return -(t.getPolygonOffset() + (this.polygonOffsetIndex || 0));
                },
                units: (e, n) => n.meshConfig.ssr ? 1 : -(t.getPolygonOffset() + (this.polygonOffsetIndex || 0))
            };
        }
        getBlendFunc() {
            return {
                src: () => this.sceneConfig.blendSrc || "src alpha",
                dst: () => this.sceneConfig.blendDst || "one minus src alpha"
            };
        }
        pick(t, e, n = 3) {
            if (!this.layer.options.picking || !1 === this.sceneConfig.picking) return null;
            if (!this.pickingFBO || !this.picking) return null;
            const i = this.getMap(), r = this.getUniformValues(i);
            for (let o = 0; o < this.picking.length; o++) {
                const s = this.picking[o];
                s.render(this.scene.getMeshes(), r, !0);
                let a = {};
                s.getRenderedMeshes().length && (a = s.pick(t, e, n, r, {
                    viewMatrix: i.viewMatrix,
                    projMatrix: i.projMatrix,
                    returnPoint: this.layer.options.pickingPoint && !1 !== this.sceneConfig.pickingPoint,
                    logDepthBufFC: 2 / (Math.log(i.cameraFar + 1) / Math.LN2)
                }));
                const {meshId: l, pickingId: u, point: c} = a, h = (0 === l || l) && s.getMeshAt(l);
                if (!h || !h.geometry) continue;
                let d = h.geometry.properties;
                d.features || (d = h.properties), c && c.length && (c[0] = Math.round(1e5 * c[0]) / 1e5, 
                c[1] = Math.round(1e5 * c[1]) / 1e5, c[2] = Math.round(1e5 * c[2]) / 1e5);
                return {
                    data: this.Cr(d && d.features && d.features[u]),
                    point: c,
                    coordinate: a.coordinate,
                    plugin: this.pluginIndex
                };
            }
            return null;
        }
        Cr(t) {
            const e = t && t.feature;
            if (!e || !e.customProps) return t;
            const n = Hu({}, t);
            return n.feature = Hu({}, t.feature), delete n.feature.customProps, n.feature.properties = Hu({}, e.properties, e.properties[Xa]), 
            delete n.feature.properties[Xa], n;
        }
        updateSceneConfig() {}
        updateDataConfig() {
            return !0;
        }
        deleteMesh(t, e) {
            if (t) if (this.scene.removeMesh(t), Array.isArray(t)) for (let i = 0; i < t.length; i++) {
                if (!t[i].isValid()) continue;
                const r = t[i].geometry;
                !e && r && r.dispose(), t[i].material && t[i].material.dispose(), t[i].dispose(), 
                n.HighlightUtil.deleteHighlightBloomMesh(t[i]);
            } else {
                if (!t.isValid()) return;
                !e && t.geometry && t.geometry.dispose(), t.material && t.material.dispose(), t.dispose(), 
                n.HighlightUtil.deleteHighlightBloomMesh(t);
            }
        }
        startFrame(t) {
            this.Er || (this.init(t), this.Er = !0), this.Fe !== t.timestamp && (this.Ir = !1, 
            this.ve = !1), this.scene.clear();
        }
        resize() {}
        delete() {
            if (this.scene.clear(), this.shader && this.shader.dispose(), this.picking) {
                for (let t = 0; t < this.picking.length; t++) this.picking[t].dispose();
                delete this.picking;
            }
            if (this.Rr) {
                for (let t = 0; t < this.Rr.length; t++) this.Rr[t].dispose();
                delete this.Rr;
            }
            this.logoutTextureCache();
        }
        updateSymbol(t, e) {
            const n = this.supportRenderMode("taa");
            Array.isArray(t) || (t = [ t ], e = [ e ]);
            let i = !1;
            for (let n = 0; n < t.length; n++) if (t[n]) {
                const r = this.Nr(n, t[n], e[n]);
                r && (i = r);
            }
            return delete this.Dr, this.setToRedraw(n), i;
        }
        Lr(t, e) {
            for (const n in e) if (Qu(e, n)) {
                if (rn.isFnTypeSymbol(e[n]) && !this.layer.options.features && (!t[n] || t[n].property !== e[n].property)) return !0;
                if (Ea[n] && !fl(e[n], t[n])) return !0;
            }
            return !1;
        }
        Nr(t, e, n) {
            if (!this.Hr) return !1;
            const i = this.Lr(this.symbolDef[t] || {}, n);
            this.symbolDef[t] = $u(n);
            const r = this.Hr[t];
            for (const t in r) delete r[t];
            const o = this.getMap(), s = [], a = Oa.loadSymbolFnTypes(this.symbolDef[t], () => (s[0] = o.getZoom(), 
            s));
            for (const t in a) {
                const e = Object.getOwnPropertyDescriptor(a, t);
                e.get ? Object.defineProperty(r, t, {
                    get: e.get,
                    set: e.set,
                    configurable: !0,
                    enumerable: !0
                }) : r[t] = a[t];
            }
            return v(n.visible) && (this.nt[t] = x(n.visible)), i;
        }
        getSymbolDef(t) {
            return this.symbolDef[t.index];
        }
        getSymbols() {
            return this.Hr;
        }
        getSymbol(t) {
            const e = t.index;
            return this.Hr[e];
        }
        Pr() {
            const t = this.getMap(), e = [], n = () => (e[0] = t.getZoom(), e);
            this.Hr = [], this.nt = [];
            for (let t = 0; t < this.symbolDef.length; t++) this.Hr[t] = Oa.loadSymbolFnTypes(Hu({}, this.symbolDef[t]), n), 
            this.symbolDef[t] && v(this.symbolDef[t].visible) && (this.nt[t] = x(this.symbolDef[t].visible));
        }
        getFnTypeConfig(t) {
            this.Dr || (this.Dr = []);
            const e = t.index;
            if (!this.Dr[e]) {
                const n = this.getSymbolDef(t), i = this.getMap();
                this.Dr[e] = this.createFnTypeConfig(i, n);
            }
            return this.Dr[e];
        }
        Ur() {
            delete this.Dr;
        }
        loginTextureCache() {
            const t = "__gl_textures".trim(), e = this.getMap();
            e[t] || (e[t] = {
                count: 0
            }), e[t].count++;
        }
        logoutTextureCache() {
            const t = "__gl_textures".trim(), e = this.getMap(), n = this.qr;
            if (n) for (const i in n) Qu(n, i) && e[t][i] && (e[t][i].count--, e[t][i].count <= 0 && delete e[t][i]);
            e[t].count--, e[t].count <= 0 && (e[t] = {});
        }
        getCachedTexture(t) {
            const e = "__gl_textures".trim(), n = this.getMap()[e][t];
            return n ? n.data : null;
        }
        addCachedTexture(t, e) {
            const n = "__gl_textures".trim(), i = this.getMap();
            let r = i[n][t];
            r ? r.data = e : r = i[n][t] = {
                data: e,
                count: 0
            }, this.qr || (this.qr = {}), r.data.then || this.qr[t] || (r.count++, this.qr[t] = 1);
        }
        disposeCachedTexture(t) {
            let e;
            if (e = "string" == typeof t ? t : t.url, !this.qr || !this.qr[e]) return;
            const n = "__gl_textures".trim();
            delete this.qr[e];
            const i = this.getMap();
            i[n][e] && (i[n][e].count--, i[n][e].count <= 0 && delete i[n][e]);
        }
        shouldDeleteMeshOnUpdateSymbol() {
            return !1;
        }
        needClearStencil() {
            return !1;
        }
        supportRenderMode(t) {
            return "taa" === t || "fxaa" === t;
        }
        Vr(t) {
            const e = this.scene.getMeshes();
            if (!e.length) return;
            const i = e.map(t => ({
                transform: t.localTransform,
                level: t.properties.level,
                mesh: t
            })).sort(this.$r), r = this.getMap().projViewMatrix;
            this.Mr.start(t);
            const o = {};
            for (let e = 0; e < i.length; e++) {
                const s = i[e].mesh;
                let a = o[s.properties.tile.id];
                void 0 === a && (n.mat4.multiply(gc, r, i[e].transform), a = this.Mr.write(t, gc), 
                o[s.properties.tile.id] = a), s.setUniform("ref", a);
            }
            this.Mr.end(t), this.regl.Gr();
        }
        $r(t, e) {
            return e.level - t.level;
        }
        outline(t, e) {
            const n = {};
            for (let i = 0; i < e.length; i++) Vu(e[i]) || n[e[i]] || (this.Wr(t, e[i]), n[e[i]] = 1);
        }
        Wr(t, e) {
            if (!this.picking) return;
            if (this.Br || (this.Br = new n.reshader.Scene), !this.Rr && (this.Jr(), !this.Rr)) return void console.warn(`Plugin at ${this.pluginIndex} doesn't support outline.`);
            const i = this.getUniformValues(this.getMap(), this.Or), r = this.Xr(e);
            if (r.length) for (let n = 0; n < r.length; n++) {
                const o = r[n].geometry.properties.feaIdPickingMap;
                if (o) {
                    const s = o[e];
                    if (s) {
                        const e = {};
                        this.Br.setMeshes(r[n]);
                        for (let n = 0; n < s.length; n++) {
                            const r = s[n];
                            if (!e[r]) {
                                e[r] = 1, i.highlightPickingId = r;
                                for (let e = 0; e < this.Rr.length; e++) this.renderer.render(this.Rr[e], i, this.Br, t);
                            }
                        }
                    }
                }
            }
        }
        Xr(t) {
            const e = [], n = this.scene.getMeshes();
            for (let i = 0; i < n.length; i++) {
                const r = n[i], o = r.geometry.properties.feaIdPickingMap;
                o && void 0 !== o[t] && e.push(r);
            }
            return e;
        }
        outlineAll(t) {
            if (!this.picking) return;
            if (!this.Rr && (this.Jr(), !this.Rr)) return void console.warn(`Plugin at ${this.pluginIndex} doesn't support outline.`);
            const e = this.getUniformValues(this.getMap(), this.Or);
            e.highlightPickingId = -1;
            for (let n = 0; n < this.Rr.length; n++) this.renderer.render(this.Rr[n], e, this.scene, t);
        }
        Jr() {
            if (!this.picking) return;
            const t = this.layer.getRenderer().canvas;
            this.Rr = [];
            for (let e = 0; e < this.picking.length; e++) {
                const i = this.picking[e].getPickingVert(), r = {
                    ENABLE_PICKING: 1,
                    HAS_PICKING_ID: 1
                }, o = this.picking[e].getUniformDeclares().slice(0);
                void 0 !== o.uPickingId && (r.HAS_PICKING_ID = 2), this.Rr[e] = new n.reshader.MeshShader({
                    vert: i,
                    frag: "precision highp float;\nuniform float highlightPickingId;\nvarying float vPickingId;\nvoid main() {\n  if(highlightPickingId < .0 || floor(highlightPickingId + .5) == floor(vPickingId + .5)) {\n    gl_FragColor = vec4(1.);\n  } else {\n    discard;\n  }\n}",
                    uniforms: o,
                    defines: r,
                    extraCommandProps: {
                        viewport: {
                            x: 0,
                            y: 0,
                            width: () => t.width,
                            height: () => t.height
                        },
                        depth: {
                            enable: !0,
                            mask: !1,
                            func: "always"
                        },
                        blend: {
                            enable: !0,
                            func: {
                                src: "src alpha",
                                dst: "one minus src alpha"
                            },
                            equation: "add"
                        }
                    }
                }), this.Rr[e].filter = this.picking[e].filter;
            }
        }
        hasIBL() {
            const t = this.getMap().getLightManager();
            return !!(t && t.getAmbientResource());
        }
        updateIBLDefines(t) {
            const e = t.shaderDefines;
            let n = !1;
            this.hasIBL() ? e[[ "HAS_IBL_LIGHTING" ]] || (e.HAS_IBL_LIGHTING = 1, n = !0) : e[[ "HAS_IBL_LIGHTING" ]] && (delete e.HAS_IBL_LIGHTING, 
            n = !0), n && (t.shaderDefines = e);
        }
        getIBLRes() {
            const t = this.layer.getRenderer().canvas;
            return yc(t);
        }
        createIBLTextures() {
            const t = this.layer.getRenderer().canvas;
            pc(t, this.regl, this.getMap()), this.setToRedraw(!0), this.layer.fire("iblupdated");
        }
        disposeIBLTextures() {
            const t = this.layer.getRenderer().canvas;
            mc(t, this.getMap());
        }
        evaluateInFnTypeConfig(t, e, n, i, r) {
            let o = this.Yr;
            o || (o = this.Yr = {});
            const s = function(t) {
                let e = 0;
                const n = t && t.length || 0;
                if (!n) return e;
                let i;
                for (let r = 0; r < n; r++) i = t.charCodeAt(r), e = (e << 5) - e + i, e &= e;
                return e;
            }(JSON.stringify(t));
            let a = o[s];
            return a || (a = o[s] = r ? w(t) : x(t)), a(n.getZoom(), i);
        }
        highlight(t) {
            this.An = t, this.Zr = this.layer.getRenderer().getFrameTimestamp(), this.setToRedraw(!0);
        }
        cancelAllHighlight() {
            this.An = null, this.Zr = this.layer.getRenderer().getFrameTimestamp(), this.setToRedraw(!0);
        }
        Kr(t, e) {
            const {featureIds: n, pickingIdIndiceMap: i} = e;
            t.properties.aFeaIds = n, t.properties.pickingIdIndiceMap = i;
        }
        Fr(t) {
            const {pickingIdIndiceMap: e} = t.geometry.properties, i = this.An ? function(t, e, n) {
                const {aPickingId: i, feaIdPickingMap: r, features: o} = t.geometry.properties, s = new Map, a = n.keys();
                for (const t of a) {
                    const a = n.get(t);
                    if (a) if (Vu(a.id)) {
                        if (a.filter) {
                            let t = null;
                            for (let n = 0; n < i.length; n++) {
                                i[n] !== t && (t = i[n]);
                                const r = o[t];
                                a.filter(r && r.feature, e) && s.set(t, a);
                            }
                        }
                    } else {
                        const t = r[a.id];
                        if (!t || !t.length) continue;
                        for (let e = 0; e < t.length; e++) s.set(t[e], a);
                    }
                }
                return s;
            }(t, this.layer, this.An) : null;
            n.HighlightUtil.highlightMesh(this.regl, t, i, this.Zr, e);
        }
        zr(t, e) {
            if (!t) return;
            let n = t.properties.aAnchor;
            if (!n) {
                const {aPosition: e} = t.data;
                n = t.properties.aAnchor = e.slice(0);
            }
            let i = t.properties.aTerrainAltitude;
            i || (i = t.properties.aTerrainAltitude = new Float32Array(n.length / t.desc.positionSize)), 
            t.data.aTerrainAltitude ? i.dirty && t.updateData("aTerrainAltitude", i) : t.data.aTerrainAltitude = i, 
            i.dirty = !1, this.Qr(i, n, e.tileInfo, 0, i.length - 1);
        }
        Qr(t, e, n, i, r) {
            const {res: o, extent: s, extent2d: a} = n, {xmin: l, ymax: u} = a, c = vc.set(l, u), h = e.length / t.length;
            let d = t.queryResult;
            d || (d = t.queryResult = new Map);
            for (let n = i; n <= r; n++) {
                xc.set(e[n * h], e[n * h + 1]);
                const i = xc[0] + xc[1] * s;
                let r = d.get(i);
                if (r || 0 === r) {
                    t[n] !== r && (t[n] = r, t.dirty = !0);
                    continue;
                }
                const a = this.layer.queryTilePointTerrain(xc, c, s, o);
                r = a[0] || 0, t[n] !== r && (t[n] = r, t.dirty = !0), a[1] && d.set(i, r);
            }
        }
    }
    function Tc(t, e) {
        const n = t && t.getCommandKey(this.regl) || "", i = e && e.getCommandKey(this.regl) || "";
        return n.localeCompare(i);
    }
    function Sc(t, e) {
        return t.properties.level - e.properties.level;
    }
    class Mc extends _c {
        createGeometry(t, e) {
            if (!t.data) return {
                geometry: null,
                symbolIndex: t.symbolIndex
            };
            t.iconAtlas && t.iconAtlas.image && (t.iconAtlas.image.dataType = t.type, t.iconAtlas.image.type = "icon"), 
            t.glyphAtlas && t.glyphAtlas.image && (t.glyphAtlas.image.type = "glyph");
            const i = Hu({}, t.data), r = new n.reshader.Geometry(i, t.indices, 0, {
                primitive: this.getPrimitive(),
                positionSize: t.positionSize
            });
            return r.properties = {
                features: e
            }, t.iconAtlas && (r.properties.iconAtlas = t.iconAtlas.image), t.glyphAtlas && (r.properties.glyphAtlas = t.glyphAtlas.image), 
            ec(e) || (r.properties.aFeaIds = t.featureIds, this.Kr(r, t)), t.markerPlacement && (r.properties.markerPlacement = t.markerPlacement), 
            t.textPlacement && (r.properties.textPlacement = t.textPlacement), Hu(r.properties, t.properties), 
            {
                geometry: r,
                symbolIndex: t.symbolIndex
            };
        }
        getPrimitive() {
            return "triangles";
        }
        getRenderFBO(t) {
            return t && t.renderTarget && t.renderTarget.fbo;
        }
        supportRenderMode(t) {
            return "noAa" === t;
        }
        drawDebugAtlas(t) {
            if (document.getElementById("MAPTALKS_ICON_DEBUG")) {
                const e = document.getElementById("MAPTALKS_ICON_DEBUG");
                let n;
                if (e.width = t.width, e.height = t.height, e.style.width = t.width + "px", e.style.height = t.height + "px", 
                "alpha" === t.format) {
                    n = new Uint8ClampedArray(4 * t.data.length);
                    for (let e = 0; e < t.data.length; e++) n[4 * e + 3] = t.data[e];
                } else n = new Uint8ClampedArray(t.data);
                const i = e.getContext("2d");
                i.imageSmoothingEnabled = !1, i.putImageData(new ImageData(n, t.width, t.height), 0, 0);
            }
        }
    }
    var Pc = "#include <gl2_vert>\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\nuniform mat4 projViewModelMatrix;\n#include <fbo_picking_vert>\n#include <vt_position_vert>\nvoid main() {\n  vec3 c = unpackVTPosition();\n  gl_Position = projViewModelMatrix * vec4(c, 1.);\n  fbo_picking_setData(gl_Position.w, true);\n}";
    function Ic(t, e, n) {
        const i = e, r = {
            width: i.width,
            height: i.height,
            data: i.data,
            format: i.format,
            mag: "linear",
            min: "linear",
            flipY: n,
            premultiplyAlpha: !0
        };
        if ("icon" === e.type) {
            const t = "point" !== e.dataType ? "repeat" : "clamp";
            r.wrapS = t, r.wrapT = t;
        }
        return t.texture(r);
    }
    const jc = n.mat4.identity([]), zc = {
        polygonFill: [ 1, 1, 1, 1 ],
        polygonOpacity: 1,
        uvScale: [ 1, 1 ],
        uvOffset: [ 0, 0 ]
    };
    class Fc extends Mc {
        prepareSymbol(t) {
            const e = t.polygonFill;
            Array.isArray(e) && (3 === e.length && e.push(1), t.polygonFill = e.map(t => 255 * t));
        }
        supportRenderMode(t) {
            return this.sceneConfig.antialias || void 0 === this.sceneConfig.antialias ? "fxaa" === t || "fxaaBeforeTaa" === t : super.supportRenderMode(t);
        }
        isBloom(t) {
            return !!this.getSymbol(t.properties.symbolIndex).polygonBloom;
        }
        needPolygonOffset() {
            return !0;
        }
        createMesh(t, e, i) {
            const {tilePoint: r} = i, {geometry: o, symbolIndex: s, ref: a} = t, l = o.data.aPosition instanceof Int16Array, u = {
                tileExtent: o.properties.tileExtent,
                tileRatio: o.properties.tileRatio
            }, c = this.getSymbol(s);
            if (Gu(u, "polygonFill", c, "polygonFill", zc.polygonFill, Ju(this.colorCache)), 
            Gu(u, "polygonOpacity", c, "polygonOpacity", zc.polygonOpacity), Gu(u, "uvScale", c, "uvScale", zc.uvScale), 
            Gu(u, "uvOffset", c, "uvOffset", zc.uvOffset), void 0 === a) {
                const t = this.getSymbolDef(s), e = this.getFnTypeConfig(s);
                ic(o, t, e), o.generateBuffers(this.regl);
            }
            const h = o.properties.iconAtlas;
            if (h && o.data.aTexInfo) {
                const t = this.getMap();
                u.tilePoint = r, Object.defineProperty(u, "tileScale", {
                    enumerable: !0,
                    get: function() {
                        return o.properties.tileResolution / t.getResolution();
                    }
                }), u.polygonPatternFile = Ic(this.regl, h, !1), u.atlasSize = [ h.width, h.height ], 
                this.drawDebugAtlas(h);
            }
            const d = new n.reshader.Material(u, zc), f = new n.reshader.Mesh(o, d, {
                castShadow: !1,
                picking: !0
            }), p = {};
            return h && o.data.aTexInfo && (p.HAS_PATTERN = 1), o.data.aAltitude && (p.HAS_ALTITUDE = 1), 
            o.data.aColor && (p.HAS_COLOR = 1), o.data.aOpacity && (p.HAS_OPACITY = 1), o.data.aUVScale && (p.HAS_UV_SCALE = 1), 
            o.data.aUVOffset && (p.HAS_UV_OFFSET = 1), l && (p.IS_VT = 1), f.setDefines(p), 
            f.setLocalTransform(e), f.properties.symbolIndex = s, f;
        }
        createFnTypeConfig(t, e) {
            const n = w(e.polygonFill), i = x(e.polygonOpacity), r = x(e.uvScale), o = x(e.uvOffset), s = new Uint8Array(1), a = new Uint16Array(1);
            return [ {
                attrName: "aColor",
                symbolName: "polygonFill",
                type: Uint8Array,
                width: 4,
                define: "HAS_COLOR",
                evaluate: (e, i) => {
                    let r = n(t.getZoom(), e);
                    return v(r) && (r = this.evaluateInFnTypeConfig(r, i, t, e, !0)), Array.isArray(r) || (r = this.colorCache[r] = this.colorCache[r] || Pt(r).unitArray()), 
                    r = Bu(r), r;
                }
            }, {
                attrName: "aOpacity",
                symbolName: "polygonOpacity",
                type: Uint8Array,
                width: 1,
                define: "HAS_OPACITY",
                evaluate: (e, n) => {
                    let r = i(t.getZoom(), e);
                    return v(r) && (r = this.evaluateInFnTypeConfig(r, n, t, e)), s[0] = 255 * r, s[0];
                }
            }, {
                attrName: "aUVScale",
                symbolName: "uvScale",
                type: Uint16Array,
                width: 2,
                define: "HAS_UV_SCALE",
                evaluate: e => {
                    let n = r(t.getZoom(), e);
                    return a[0] = 10 * n, a[0];
                }
            }, {
                attrName: "aUVOffset",
                symbolName: "uvOffset",
                type: Uint8Array,
                width: 2,
                define: "HAS_UV_OFFSET",
                evaluate: e => {
                    let n = o(t.getZoom(), e);
                    return s[0] = 255 * n, s[0];
                }
            } ];
        }
        paint(t) {
            t.states && t.states.includesChanged.shadow && (this.shader.dispose(), this.eo(t)), 
            super.paint(t);
        }
        init(t) {
            const e = this.regl, i = this.canvas, r = {
                x: (t, e) => e.viewport ? e.viewport.x : 0,
                y: (t, e) => e.viewport ? e.viewport.y : 0,
                width: (t, e) => e.viewport ? e.viewport.width : i ? i.width : 1,
                height: (t, e) => e.viewport ? e.viewport.height : i ? i.height : 1
            };
            this.renderer = new n.reshader.Renderer(e);
            const o = !!(t && t.isRenderingTerrain && this.isTerrainSkin()), s = this.layer.getRenderer(), a = {
                viewport: r,
                stencil: {
                    enable: () => !(o || !s.isEnableTileStencil || !s.isEnableTileStencil()),
                    func: {
                        cmp: () => s.isEnableTileStencil && s.isEnableTileStencil() ? "=" : "<=",
                        ref: (t, e) => s.isEnableTileStencil && s.isEnableTileStencil() ? e.stencilRef : e.level
                    },
                    op: {
                        fail: "keep",
                        zfail: "keep",
                        zpass: () => s.isEnableTileStencil && s.isEnableTileStencil() ? "zero" : "replace"
                    }
                },
                depth: {
                    enable: !0,
                    range: this.sceneConfig.depthRange || [ 0, 1 ],
                    mask: (t, e) => {
                        if (!Vu(this.sceneConfig.depthMask)) return !!this.sceneConfig.depthMask;
                        if (e.meshConfig.transparent) return !1;
                        const n = e.polygonOpacity;
                        return !(Zu(n) && n < 1);
                    },
                    func: this.sceneConfig.depthFunc || "<="
                },
                blend: {
                    enable: !0,
                    func: this.getBlendFunc(),
                    equation: "add"
                },
                polygonOffset: {
                    enable: !0,
                    offset: this.getPolygonOffset()
                }
            };
            if (this.eo(t, a), this.pickingFBO) {
                const t = [];
                this.picking = [ new n.reshader.FBORayPicking(this.renderer, {
                    vert: Pc,
                    uniforms: [ {
                        name: "projViewModelMatrix",
                        type: "function",
                        fn: function(e, i) {
                            return n.mat4.multiply(t, i.projViewMatrix, i.modelMatrix), t;
                        }
                    } ],
                    extraCommandProps: a
                }, this.pickingFBO, this.getMap()) ];
            }
        }
        eo(t, e) {
            const i = [], r = [ {
                name: "projViewModelMatrix",
                type: "function",
                fn: function(t, e) {
                    return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                }
            } ], o = {};
            this.fillIncludes(o, r, t), this.shader = new n.reshader.MeshShader({
                vert: "#define SHADER_NAME FILL\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\n#ifdef HAS_COLOR\nattribute vec4 aColor;\nvarying vec4 vColor;\n#endif\n#ifdef HAS_OPACITY\nattribute float aOpacity;\nvarying float vOpacity;\n#endif\nuniform mat4 projViewModelMatrix;\n#ifndef IS_VT\nuniform mat4 modelMatrix;\n#endif\n#ifdef HAS_PATTERN\nattribute vec4 aTexInfo;\nuniform vec2 tilePoint;\n#ifdef IS_VT\nuniform float tileRatio;\nuniform float tileScale;\n#else\nuniform float glScale;\n#endif\n#ifdef HAS_UV_SCALE\nattribute vec2 aUVScale;\nvarying vec2 vUVScale;\n#endif\n#ifdef HAS_UV_OFFSET\nattribute vec2 aUVOffset;\nvarying vec2 vUVOffset;\n#endif\nvarying vec2 vTexCoord;\nvarying vec4 vTexInfo;\nvec2 c(vec2 d, vec2 e) {\n  vTexInfo = vec4(aTexInfo.xy, e);\n#ifdef IS_VT\nfloat f = d.x / e.x;\n  float h = d.y / e.y;\n  return vec2(f, h);\n#else\nfloat f = (d.x - tilePoint.x) * glScale / e.x;\n  float h = (d.y - tilePoint.y) * glScale / e.y;\n  return vec2(f, -h);\n#endif\n}\n#endif\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\n#include <vsm_shadow_vert>\n#endif\n#include <vt_position_vert>\n#include <highlight_vert>\nvoid main() {\n  vec3 i = unpackVTPosition();\n  vec4 j = vec4(i, 1.);\n  gl_Position = projViewModelMatrix * j;\n#ifdef HAS_PATTERN\nvec2 k = aTexInfo.zw + 1.;\n#ifdef IS_VT\nvec2 l = mod((tilePoint) * tileScale * vec2(1., -1.) / k, 1.);\n  vTexCoord = l + c(i.xy * tileScale / tileRatio, k);\n#else\nvec4 m = modelMatrix * j;\n  vTexCoord = c(m.xy, k);\n#endif\n#ifdef HAS_UV_SCALE\nvUVScale = aUVScale / 255.;\n#endif\n#ifdef HAS_UV_OFFSET\nvUVOffset = aUVOffset / 255.;\n#endif\n#endif\n#ifdef HAS_COLOR\nvColor = aColor / 255.;\n#endif\nhighlight_setVarying();\n#ifdef HAS_OPACITY\nvOpacity = aOpacity / 255.;\n#endif\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\nshadow_computeShadowPars(j);\n#endif\n}",
                frag: "#define SHADER_NAME FILL\nprecision mediump float;\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\n#include <vsm_shadow_frag>\n#endif\n#ifdef HAS_PATTERN\n#ifdef HAS_UV_SCALE\nvarying vec2 vUVScale;\n#else\nuniform vec2 uvScale;\n#endif\n#ifdef HAS_UV_OFFSET\nvarying vec2 vUVOffset;\n#else\nuniform vec2 uvOffset;\n#endif\n#endif\n#ifdef HAS_PATTERN\nuniform sampler2D polygonPatternFile;\nuniform vec2 atlasSize;\nvarying vec2 vTexCoord;\nvarying vec4 vTexInfo;\nvec2 c() {\n  \n#ifdef HAS_UV_SCALE\nvec2 d = vUVScale;\n#else\nvec2 d = uvScale;\n#endif\n#ifdef HAS_UV_OFFSET\nvec2 e = vUVOffset;\n#else\nvec2 e = uvOffset;\n#endif\nvec2 f = mod(vTexCoord * d + e, 1.);\n  vec2 h = vTexInfo.xy;\n  vec2 i = vTexInfo.zw;\n  return (h + f * i) / atlasSize;\n}\n#endif\n#ifdef HAS_COLOR\nvarying vec4 vColor;\n#else\nuniform vec4 polygonFill;\n#endif\n#include <highlight_frag>\n#ifdef HAS_OPACITY\nvarying float vOpacity;\n#else\nuniform lowp float polygonOpacity;\n#endif\nuniform float tileExtent;\nvoid main() {\n  \n#ifdef HAS_COLOR\nvec4 j = vColor;\n#else\nvec4 j = polygonFill;\n#endif\n#ifdef HAS_PATTERN\nif(vTexInfo.z * vTexInfo.w > 1.) {\n    vec2 f = c();\n    j = texture2D(polygonPatternFile, f);\n  }\n#endif\n#ifdef HAS_OPACITY\ngl_FragColor = j * vOpacity;\n#else\ngl_FragColor = j * polygonOpacity;\n#endif\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\nfloat k = shadow_computeShadow();\n  gl_FragColor.rgb = shadow_blend(gl_FragColor.rgb, k);\n#endif\ngl_FragColor = highlight_blendColor(gl_FragColor);\n}",
                uniforms: r,
                defines: o,
                extraCommandProps: e
            });
        }
        getUniformValues(t, e) {
            const n = e && e.isRenderingTerrainSkin, i = {
                projViewMatrix: n ? jc : t.projViewMatrix,
                glScale: e && e.isRenderingTerrainSkin ? 1 : 1 / t.getGLScale(),
                viewport: n && e && e.viewport
            };
            return this.setIncludeUniformValues(i, e), i;
        }
    }
    var Oc = "#define SHADER_NAME LINE\n#define AA_CLIP_LIMIT 2.0\n#define AA_LINE_WIDTH 16.0\n#define DEVICE_PIXEL_RATIO 1.0\n#define ANTIALIASING 1.0 / DEVICE_PIXEL_RATIO / 2.0\n#define EXTRUDE_SCALE 63.0\n#define EXTRUDE_MOD 64.0\n#define MAX_LINE_DISTANCE 65535.0\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\n#if defined(HAS_PATTERN) || defined(HAS_DASHARRAY)\nattribute vec3 aExtrude;\n#else\nattribute vec2 aExtrude;\n#endif\n#if defined(HAS_PATTERN) || defined(HAS_DASHARRAY) || defined(HAS_GRADIENT) || defined(HAS_TRAIL)\nattribute float aLinesofar;\nvarying highp float vLinesofar;\n#endif\nuniform float cameraToCenterDistance;\n#if defined(HAS_STROKE_WIDTH)\nattribute float aLineStrokeWidth;\n#else\nuniform float lineStrokeWidth;\n#endif\nuniform mat4 positionMatrix;\nuniform mat4 projViewModelMatrix;\nuniform mat4 modelMatrix;\nuniform float tileResolution;\nuniform float resolution;\nuniform float tileRatio;\nuniform float isRenderingTerrain;\n#if defined(HAS_LINE_DX) || defined(HAS_LINE_DY)\nattribute vec2 aLineDxDy;\n#endif\n#ifndef HAS_LINE_DX\nuniform float lineDx;\n#endif\n#ifndef HAS_LINE_DY\nuniform float lineDy;\n#endif\nuniform vec2 canvasSize;\nuniform float layerScale;\nvarying vec2 vNormal;\nvarying vec2 vWidth;\nvarying float vGammaScale;\n#ifndef ENABLE_TILE_STENCIL\nvarying vec2 vPosition;\n#endif\n#ifdef USE_LINE_OFFSET\nattribute vec2 aExtrudeOffset;\n#endif\n#ifdef HAS_LINE_WIDTH\nattribute float aLineWidth;\n#else\nuniform float lineWidth;\n#endif\n#ifndef PICKING_MODE\n#ifndef HAS_GRADIENT\n#ifdef HAS_COLOR\nattribute vec4 aColor;\nvarying vec4 vColor;\n#endif\n#ifdef HAS_PATTERN\n#if defined(HAS_PATTERN_ANIM) || defined(HAS_PATTERN_GAP)\nattribute vec2 aLinePattern;\n#endif\n#ifdef HAS_PATTERN_ANIM\nvarying float vLinePatternAnimSpeed;\n#endif\n#ifdef HAS_PATTERN_GAP\nvarying float vLinePatternGap;\n#endif\nattribute vec4 aTexInfo;\nvarying vec4 vTexInfo;\n#endif\n#ifdef HAS_DASHARRAY\n#ifdef HAS_DASHARRAY_ATTR\nattribute vec4 aDasharray;\nvarying vec4 vDasharray;\n#endif\n#ifdef HAS_DASHARRAY_COLOR\nattribute vec4 aDashColor;\nvarying vec4 vDashColor;\n#endif\n#endif\n#endif\n#ifdef HAS_STROKE_COLOR\nattribute vec4 aStrokeColor;\nvarying vec4 vStrokeColor;\n#endif\n#ifdef HAS_OPACITY\nattribute float aOpacity;\nvarying float vOpacity;\n#endif\n#ifdef HAS_GRADIENT\nattribute float aGradIndex;\nvarying float vGradIndex;\n#endif\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\n#include <vsm_shadow_vert>\n#endif\n#include <highlight_vert>\n#else\n#include <fbo_picking_vert>\n#endif\nvarying vec3 vVertex;\n#include <vt_position_vert>\nvoid main() {\n  vec3 c = unpackVTPosition();\n  float d = mod(abs(aExtrude.x), 2.);\n  float e = mod(abs(aExtrude.y), 2.);\n  vNormal = vec2(d, e * 2. - 1.);\n  vec4 f = vec4(c, 1.);\n  vec4 h = projViewModelMatrix * positionMatrix * f;\n  if(isRenderingTerrain == 1.) {\n    vVertex = (positionMatrix * f).xyz;\n  } else {\n    vVertex = (modelMatrix * positionMatrix * f).xyz;\n  }\n#ifdef HAS_STROKE_WIDTH\nfloat i = aLineStrokeWidth / 2. * layerScale;\n#else\nfloat i = lineStrokeWidth;\n#endif\n#ifdef HAS_LINE_WIDTH\nfloat j = aLineWidth / 2. * layerScale;\n#else\nfloat j = lineWidth * layerScale;\n#endif\nfloat k = j / 2. + i;\n  float l = sign(i) * j / 2.;\n  float m = l + sign(l) * ANTIALIASING;\n  float n = k + sign(k) * ANTIALIASING;\n#ifdef USE_LINE_OFFSET\nvec2 o = lineOffset * (vNormal.y * (aExtrude.xy - aExtrudeOffset) + aExtrudeOffset);\n  vec2 u = (n * aExtrude.xy + o) / EXTRUDE_SCALE;\n#else\nvec2 v = aExtrude.xy / EXTRUDE_SCALE;\n  vec2 u = n * v;\n#endif\nfloat A;\n  if(isRenderingTerrain == 1.) {\n    A = 1.;\n  } else {\n    A = tileResolution / resolution;\n  }\n  vec4 B = vec4(c + vec3(u, .0) * tileRatio / A, 1.);\n  gl_Position = projViewModelMatrix * positionMatrix * B;\n  if(isRenderingTerrain == .0) {\n    float C = min(AA_CLIP_LIMIT / canvasSize.x, AA_CLIP_LIMIT / canvasSize.y);\n    float D = distance(gl_Position.xy / gl_Position.w, h.xy / h.w) - C;\n    if(D * j < .0) {\n      float E = -D / C;\n      float F = E * E * E * E * AA_LINE_WIDTH;\n      u += F * v;\n      n += F / 6.;\n      B = vec4(c + vec3(u, .0) * tileRatio / A, 1.);\n      gl_Position = projViewModelMatrix * positionMatrix * B;\n    }\n  }\n#ifdef HAS_LINE_DX\nfloat G = aLineDxDy[0];\n#else\nfloat G = lineDx;\n#endif\n#ifdef HAS_LINE_DY\nfloat H = aLineDxDy[1];\n#else\nfloat H = lineDy;\n#endif\nfloat I = gl_Position.w;\n  gl_Position.xy += vec2(G, H) * 2. / canvasSize * I;\n#ifndef PICKING_MODE\nvWidth = vec2(n, m);\n  if(isRenderingTerrain == 1.) {\n    vGammaScale = 1.;\n  } else {\n    vGammaScale = I / cameraToCenterDistance;\n  }\n#ifndef ENABLE_TILE_STENCIL\nvPosition = c.xy;\n#ifdef USE_LINE_OFFSET\nvPosition += tileRatio * o / EXTRUDE_SCALE;\n#endif\n#endif\n#if defined(HAS_PATTERN) || defined(HAS_DASHARRAY) || defined(HAS_GRADIENT)\n#ifdef HAS_GRADIENT\nvLinesofar = aLinesofar / MAX_LINE_DISTANCE;\n  vGradIndex = aGradIndex;\n#else\nfloat J = aLinesofar - k * aExtrude.z / EXTRUDE_SCALE / A * tileRatio;\n  vLinesofar = J / tileRatio * A;\n#endif\n#endif\n#ifndef HAS_GRADIENT\n#ifdef HAS_COLOR\nvColor = aColor;\n#endif\n#ifdef HAS_DASHARRAY\n#ifdef HAS_DASHARRAY_ATTR\nvDasharray = aDasharray;\n#endif\n#ifdef HAS_DASHARRAY_COLOR\nvDashColor = aDashColor / 255.;\n#endif\n#endif\n#ifdef HAS_PATTERN\nvTexInfo = vec4(aTexInfo.xy, aTexInfo.zw + 1.);\n#ifdef HAS_PATTERN_ANIM\nvLinePatternAnimSpeed = aLinePattern[0] / 127.;\n#endif\n#ifdef HAS_PATTERN_GAP\nvLinePatternGap = aLinePattern[1] / 10.0;\n#endif\n#endif\n#endif\n#ifdef HAS_STROKE_COLOR\nvStrokeColor = aStrokeColor;\n#endif\n#ifdef HAS_OPACITY\nvOpacity = aOpacity / 255.;\n#endif\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\nshadow_computeShadowPars(B);\n#endif\nhighlight_setVarying();\n#else\nfbo_picking_setData(I, true);\n#endif\n}";
    const Cc = n.mat4.identity([]), Ec = [];
    class Rc extends Mc {
        prepareSymbol(t) {
            const e = t.lineColor;
            Array.isArray(e) && (3 === e.length && e.push(1), t.lineColor = e.map(t => 255 * t));
            const n = t.lineStrokeColor;
            Array.isArray(n) && (3 === n.length && n.push(1), t.lineStrokeColor = n.map(t => 255 * t));
            const i = t.lineDashColor;
            Array.isArray(i) && (3 === i.length && i.push(1), t.lineDashColor = i.map(t => 255 * t));
        }
        isAnimating() {
            if (this.no) return !0;
            const t = this.getSymbols(), e = this.sceneConfig.trailAnimation;
            if (e && e.enable) return !0;
            for (let e = 0; e < t.length; e++) if (t[e].linePatternFile && t[e].linePatternAnimSpeed) return !0;
            return !1;
        }
        needToRedraw() {
            return !!super.needToRedraw() || !!this.isAnimating();
        }
        isBloom(t) {
            return !!this.getSymbol(t.properties.symbolIndex).lineBloom;
        }
        needPolygonOffset() {
            return !0;
        }
        createMesh(t, e) {
            if (!t.geometry) return null;
            const {geometry: i, symbolIndex: r, ref: o} = t, s = this.getSymbolDef(r);
            if (void 0 === o) {
                ic(i, s, this.getFnTypeConfig(r));
            }
            const a = this.getSymbol(r), l = {
                tileResolution: i.properties.tileResolution,
                tileRatio: i.properties.tileRatio,
                tileExtent: i.properties.tileExtent
            };
            this.setLineUniforms(a, l), Gu(l, "lineColor", a, "lineColor", "#fff", Ju(this.colorCache)), 
            Gu(l, "linePatterGapColor", a, "linePatterGapColor", [ 0, 0, 0, 0 ], Ju(this.colorCache)), 
            Gu(l, "lineStrokeColor", a, "lineStrokeColor", [ 0, 0, 0, 0 ], Ju(this.colorCache)), 
            Gu(l, "lineDasharray", a, "lineDasharray", [ 0, 0, 0, 0 ], t => {
                let e;
                if (t && t.length) {
                    const n = t;
                    1 === t.length ? e = [ n[0], n[0], n[0], n[0] ] : 2 === t.length ? e = [ n[0], n[1], n[0], n[1] ] : 3 === t.length ? e = [ n[0], n[1], n[2], n[2] ] : 4 === t.length ? e = t : t.length > 4 && (e = t.slice(0, 4));
                }
                return e || [ 0, 0, 0, 0 ];
            }), Gu(l, "lineDashColor", a, "lineDashColor", [ 0, 0, 0, 0 ], Ju(this.colorCache));
            const u = i.properties.iconAtlas, c = i.data.aPosition instanceof Int16Array;
            u && (l.linePatternFile = Ic(this.regl, u, !1), l.atlasSize = u ? [ u.width, u.height ] : [ 0, 0 ], 
            l.flipY = c ? -1 : 1, this.drawDebugAtlas(u)), void 0 === o && i.generateBuffers(this.regl);
            const h = new n.reshader.Material(l), d = new n.reshader.Mesh(i, h, {
                castShadow: !1,
                picking: !0
            });
            d.setLocalTransform(e), d.positionMatrix = this.getAltitudeOffsetMatrix();
            const f = {};
            return u && (f.HAS_PATTERN = 1), d.properties.symbolIndex = r, this.io(d, f), i.data.aColor && (f.HAS_COLOR = 1), 
            i.data.aStrokeColor && (f.HAS_STROKE_COLOR = 1), this.setMeshDefines(f, i, s), i.data.aAltitude && (f.HAS_ALTITUDE = 1), 
            d.setDefines(f), d;
        }
        addMesh(...t) {
            delete this.no;
            const e = t[0];
            Array.isArray(e) && e.forEach(t => {
                this.ro(t);
            }), super.addMesh(...t);
        }
        ro(t) {
            if (!t.geometry.aLineWidth && t.material.get("lineWidth") <= 0 || !t.geometry.aOpacity && t.material.get("lineOpacity") <= 0) return;
            const e = t.defines;
            this.io(t, e), t.setDefines(e), t.geometry.properties.hasPatternAnim && (this.no = 1);
        }
        io(t, e) {
            const n = t.geometry, i = this.getSymbol(t.properties.symbolIndex);
            n.data.aDasharray || Array.isArray(i.lineDasharray) && i.lineDasharray.reduce((t, e) => t + e, 0) > 0 ? (e.HAS_DASHARRAY = 1, 
            n.data.aDasharray && (e.HAS_DASHARRAY_ATTR = 1), n.data.aDashColor && (e.HAS_DASHARRAY_COLOR = 1)) : e.HAS_DASHARRAY && delete e.HAS_DASHARRAY;
        }
        setLineUniforms(t, e) {
            Gu(e, "lineWidth", t, "lineWidth", 2), Gu(e, "lineOpacity", t, "lineOpacity", 1), 
            Gu(e, "lineStrokeWidth", t, "lineStrokeWidth", 0), Gu(e, "lineBlur", t, "lineBlur", .7), 
            Gu(e, "lineOffset", t, "lineOffset", 0), Gu(e, "lineDx", t, "lineDx", 0), Gu(e, "lineDy", t, "lineDy", 0), 
            Gu(e, "linePatternAnimSpeed", t, "linePatternAnimSpeed", 0), Gu(e, "linePatternGap", t, "linePatternGap", 0);
        }
        setMeshDefines(t, e, n) {
            e.data.aOpacity && (t.HAS_OPACITY = 1), e.data.aLineWidth && (t.HAS_LINE_WIDTH = 1), 
            e.data.aLineStrokeWidth && (t.HAS_STROKE_WIDTH = 1), fc(n.lineDx) && (t.HAS_LINE_DX = 1), 
            fc(n.lineDy) && (t.HAS_LINE_DY = 1), fc(n.linePatternAnimSpeed) && (t.HAS_PATTERN_ANIM = 1), 
            fc(n.linePatternGap) && (t.HAS_PATTERN_GAP = 1);
        }
        paint(t) {
            t.states && t.states.includesChanged.shadow && (this.shader.dispose(), this.createShader(t)), 
            super.paint(t);
        }
        createFnTypeConfig(t, e) {
            const n = w(e.lineColor), i = w(e.aLinePatternAnimSpeed), r = w(e.aLinePatternGap), o = this.createShapeFnTypeConfigs(t, e), s = new Int8Array(2);
            return [ {
                attrName: "aColor",
                symbolName: "lineColor",
                type: Uint8Array,
                width: 4,
                define: "HAS_COLOR",
                evaluate: (e, i) => {
                    let r = n(t.getZoom(), e);
                    return v(r) && (r = this.evaluateInFnTypeConfig(r, i, t, e, !0)), Array.isArray(r) || (r = this.colorCache[r] = this.colorCache[r] || Pt(r).unitArray()), 
                    r = Bu(r), r;
                }
            }, {
                attrName: "aLinePattern",
                symbolName: "linePatternAnimSpeed",
                type: Int8Array,
                width: 2,
                related: [ "linePatternGap" ],
                define: "HAS_LINE_PATTERN",
                evaluate: (e, n, r, o) => {
                    let a = i(t.getZoom(), e);
                    return Vu(a) && (a = 0), 0 !== a && (n.properties.hasPatternAnim = 1), s[0] = a / 127, 
                    s[1] = r[o + 1], s[0];
                }
            }, {
                attrName: "aLinePattern",
                symbolName: "linePatternGap",
                type: Int8Array,
                width: 2,
                related: [ "linePatternAnimSpeed" ],
                define: "HAS_LINE_PATTERN",
                evaluate: (e, n, i, o) => {
                    let a = r(t.getZoom(), e);
                    return Vu(a) && (a = 0), s[1] = 10 * a, s[0] = i[o], s[0];
                }
            } ].concat(o);
        }
        createShapeFnTypeConfigs(t, e) {
            const n = x(e.lineWidth), i = x(e.lineOpacity), r = x(e.lineStrokeWidth), o = x(e.lineDx), s = x(e.lineDy), a = new Uint16Array(1), l = new Int8Array(1);
            return [ {
                attrName: "aLineWidth",
                symbolName: "lineWidth",
                type: Uint8Array,
                width: 1,
                define: "HAS_LINE_WIDTH",
                evaluate: (e, i) => {
                    let r = n(t.getZoom(), e);
                    return v(r) && (r = this.evaluateInFnTypeConfig(r, i, t, e)), a[0] = Math.round(2 * r), 
                    a[0];
                }
            }, {
                attrName: "aLineStrokeWidth",
                symbolName: "lineStrokeWidth",
                type: Uint8Array,
                width: 1,
                define: "HAS_STROKE_WIDTH",
                evaluate: e => {
                    const n = r(t.getZoom(), e);
                    return a[0] = Math.round(2 * n), a[0];
                }
            }, {
                attrName: "aLineDxDy",
                symbolName: "lineDx",
                type: Int8Array,
                width: 2,
                define: "HAS_LINE_DX",
                evaluate: e => {
                    const n = o(t.getZoom(), e);
                    return l[0] = n, l[0];
                }
            }, {
                attrName: "aLineDxDy",
                symbolName: "lineDy",
                type: Int8Array,
                width: 2,
                define: "HAS_LINE_DY",
                evaluate: e => {
                    const n = s(t.getZoom(), e);
                    return l[0] = n, l[0];
                }
            }, {
                attrName: "aOpacity",
                symbolName: "lineOpacity",
                type: Uint8Array,
                width: 1,
                define: "HAS_OPACITY",
                evaluate: (e, n) => {
                    let r = i(t.getZoom(), e);
                    return v(r) && (r = this.evaluateInFnTypeConfig(r, n, t, e)), a[0] = 255 * r, a[0];
                }
            } ];
        }
        updateSceneConfig(t) {
            t.trailAnimation && this.createShader(this.oo);
        }
        init(t) {
            const e = this.regl;
            this.renderer = new n.reshader.Renderer(e), this.createShader(t), this.pickingFBO && (this.picking = [ new n.reshader.FBORayPicking(this.renderer, {
                vert: "#define PICKING_MODE 1\n" + Oc,
                uniforms: [ {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: function(t, e) {
                        const i = [];
                        return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                    }
                } ],
                extraCommandProps: this.getExtraCommandProps()
            }, this.pickingFBO, this.getMap()) ]);
        }
        createShader(t) {
            this.oo = t;
            const e = [], i = {};
            this.fillIncludes(i, e, t), this.sceneConfig.trailAnimation && this.sceneConfig.trailAnimation.enable && (i.HAS_TRAIL = 1), 
            e.push({
                name: "projViewModelMatrix",
                type: "function",
                fn: function(t, e) {
                    const i = [];
                    return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                }
            }), this.shader = new n.reshader.MeshShader({
                vert: Oc,
                frag: "#define SHADER_NAME LINE\n#define DEVICE_PIXEL_RATIO 1.0\nprecision highp float;\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\n#include <vsm_shadow_frag>\n#endif\nuniform lowp float blendSrcIsOne;\nuniform lowp float lineBlur;\nuniform float isRenderingTerrain;\n#ifdef HAS_COLOR\nvarying vec4 vColor;\n#else\nuniform lowp vec4 lineColor;\n#endif\n#include <highlight_frag>\n#ifdef HAS_STROKE_COLOR\nvarying vec4 vStrokeColor;\n#else\nuniform lowp vec4 lineStrokeColor;\n#endif\n#ifdef HAS_OPACITY\nvarying float vOpacity;\n#else\nuniform lowp float lineOpacity;\n#endif\n#ifdef HAS_PATTERN\nuniform sampler2D linePatternFile;\nuniform vec2 atlasSize;\nuniform float flipY;\n#ifdef HAS_PATTERN_ANIM\nvarying float vLinePatternAnimSpeed;\n#else\nuniform float linePatternAnimSpeed;\n#endif\n#ifdef HAS_PATTERN_GAP\nvarying float vLinePatternGap;\n#else\nuniform float linePatternGap;\n#endif\nuniform vec4 linePatterGapColor;\nvarying vec4 vTexInfo;\nvec2 c(vec2 d) {\n  vec2 e = mod(d, 1.);\n  vec2 f = vTexInfo.xy;\n  vec2 h = vTexInfo.zw;\n  return (f + e * h) / atlasSize;\n}\n#endif\nvarying vec2 vNormal;\nvarying vec2 vWidth;\nvarying float vGammaScale;\n#ifndef ENABLE_TILE_STENCIL\nvarying vec2 vPosition;\n#endif\nuniform float tileExtent;\n#ifdef HAS_DASHARRAY\n#ifdef HAS_DASHARRAY_ATTR\nvarying vec4 vDasharray;\n#else\nuniform vec4 lineDasharray;\n#endif\n#ifdef HAS_DASHARRAY_COLOR\nvarying vec4 vDashColor;\n#else\nuniform vec4 lineDashColor;\n#endif\n#endif\n#if defined(HAS_PATTERN) || defined(HAS_DASHARRAY) || defined(HAS_GRADIENT) || defined(HAS_TRAIL)\nvarying highp float vLinesofar;\n#endif\n#ifdef HAS_TRAIL\nuniform float trailSpeed;\nuniform float trailLength;\nuniform float trailCircle;\n#endif\n#if defined(HAS_TRAIL) || defined(HAS_PATTERN)\nuniform float currentTime;\n#endif\nfloat i(float j, float k) {\n  float l = k / 2.;\n  float m = abs(j - l);\n  float n = (.1 + 1. / DEVICE_PIXEL_RATIO) * vGammaScale;\n  return clamp(min(m + n, l - m) / n, .0, 1.);\n}\nvarying vec3 vVertex;\nuniform vec3 cameraPosition;\nuniform float cameraToCenterDistance;\nvoid main() {\n  \n#ifndef ENABLE_TILE_STENCIL\nfloat o = sign(tileExtent - min(tileExtent, abs(vPosition.x))) * sign(1. + sign(vPosition.x)) * sign(tileExtent - min(tileExtent, abs(vPosition.y))) * sign(1. + sign(vPosition.y));\n  if(o == .0) {\n    discard;\n  }\n#endif\n#if defined(HAS_PATTERN) || defined(HAS_DASHARRAY) || defined(HAS_GRADIENT) || defined(HAS_TRAIL)\nfloat u = vLinesofar;\n#endif\nfloat v = length(vNormal) * vWidth.s;\n#ifdef HAS_PATTERN\nvec2 h = vTexInfo.zw;\n  float A = sign(h.x * h.y);\n  float B = mix(lineBlur, .0, A);\n#else\nfloat B = lineBlur;\n#endif\nfloat n = (B + 1. / DEVICE_PIXEL_RATIO) * vGammaScale;\n  float C = clamp(min(v - (vWidth.t - n), vWidth.s - v) / n, .0, 1.);\n#ifdef HAS_COLOR\nvec4 D = vColor / 255.;\n#else\nvec4 D = lineColor;\n#endif\n#ifdef HAS_PATTERN\nif(A == 1.) {\n    \n#ifdef HAS_PATTERN_GAP\nfloat E = vLinePatternGap;\n#else\nfloat E = linePatternGap;\n#endif\n#ifdef HAS_PATTERN_ANIM\nfloat F = vLinePatternAnimSpeed;\n#else\nfloat F = linePatternAnimSpeed;\n#endif\nfloat G = ceil(h.x * vWidth.s * 2. / h.y);\n    float H = G * (1. + E);\n    u += mod(currentTime * -F * .2, H);\n    float I = mod(u / H, 1.);\n    float J = mod((flipY * vNormal.y + 1.) / 2., 1.);\n    vec4 K = texture2D(linePatternFile, c(vec2(I * (1. + E), J)));\n    float L = clamp(sign(1. / (1. + E) - I) + .000001, .0, 1.);\n    K = mix(linePatterGapColor, K, L);\n    D *= K;\n  }\n#endif\n#ifdef HAS_DASHARRAY\n#ifdef HAS_DASHARRAY_ATTR\nvec4 M = vDasharray;\n#else\nvec4 M = lineDasharray;\n#endif\n#ifdef HAS_DASHARRAY_COLOR\nvec4 N = vDashColor;\n#else\nvec4 N = lineDashColor;\n#endif\nfloat k = M[0] + M[1] + M[2] + M[3];\n  float j = mod(u, k);\n  float O = max(sign(M[0] - j), .0);\n  float P = j - M[0] - M[1];\n  float Q = max(sign(P), .0) * max(sign(M[2] - P), .0);\n  float R = O + Q;\n  float S = i(j, M[0]);\n  float T = i(P, M[2]);\n  float U = S * O + T * Q;\n  D = D * (1. - U) + N * U;\n#endif\n#ifdef HAS_STROKE_COLOR\nvec4 V = vStrokeColor / 255.;\n#else\nvec4 V = lineStrokeColor;\n#endif\nV = mix(D, V, sign(vWidth.t));\n  D = V * C + max(sign(vWidth.t - v), .0) * D * (1. - C);\n#ifdef HAS_TRAIL\nfloat W = mod(u - currentTime * trailSpeed * .1, trailCircle);\n  float X = W < trailLength ? mix(.0, 1., W / trailLength) : .0;\n  D *= X;\n#endif\n#ifdef HAS_OPACITY\nfloat Y = vOpacity;\n#else\nfloat Y = lineOpacity;\n#endif\ngl_FragColor = D * Y;\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\nfloat Z = shadow_computeShadow();\n  gl_FragColor.rgb = shadow_blend(gl_FragColor.rgb, Z);\n#endif\nfloat ba;\n  if(isRenderingTerrain == 1.) {\n    ba = 1.;\n  } else {\n    ba = clamp(cameraToCenterDistance * 1.5 / distance(vVertex, cameraPosition), .0, 1.);\n  }\n  if(blendSrcIsOne == 1.) {\n    gl_FragColor *= gl_FragColor.a;\n  }\n  gl_FragColor *= ba;\n  gl_FragColor = highlight_blendColor(gl_FragColor);\n}",
                uniforms: e,
                defines: i,
                extraCommandProps: this.getExtraCommandProps()
            });
        }
        getExtraCommandProps() {
            const t = this.layer.getRenderer().isEnableTileStencil && this.layer.getRenderer().isEnableTileStencil(), e = this.canvas;
            return {
                viewport: {
                    x: (t, e) => e.viewport ? e.viewport.x : 0,
                    y: (t, e) => e.viewport ? e.viewport.y : 0,
                    width: (t, n) => n.viewport ? n.viewport.width : e ? e.width : 1,
                    height: (t, n) => n.viewport ? n.viewport.height : e ? e.height : 1
                },
                stencil: {
                    enable: !1,
                    func: {
                        cmp: () => t ? "=" : "<=",
                        ref: (e, n) => t ? n.stencilRef : n.level
                    },
                    op: {
                        fail: "keep",
                        zfail: "keep",
                        zpass: () => t ? "zero" : "replace"
                    }
                },
                depth: {
                    enable: !0,
                    range: this.sceneConfig.depthRange || [ 0, 1 ],
                    mask: this.sceneConfig.depthMask || !1,
                    func: this.sceneConfig.depthFunc || "<="
                },
                blend: {
                    enable: !0,
                    func: this.getBlendFunc(),
                    equation: "add"
                },
                polygonOffset: {
                    enable: !0,
                    offset: this.getPolygonOffset()
                }
            };
        }
        getBlendFunc() {
            return {
                src: () => this.sceneConfig.blendSrc || "one",
                dst: () => this.sceneConfig.blendDst || "one minus src alpha"
            };
        }
        getUniformValues(t, e) {
            const i = e && e.isRenderingTerrainSkin, r = this.layer.options.tileSize, o = i ? Cc : t.projViewMatrix, s = t.viewMatrix, a = t.cameraToCenterDistance, l = t.getResolution(), u = n.vec2.set(Ec, t.width, t.height);
            i && n.vec2.set(u, r, r);
            const c = this.sceneConfig.trailAnimation || {}, h = {
                layerScale: this.layer.options.styleScale || 1,
                projViewMatrix: o,
                viewMatrix: s,
                cameraToCenterDistance: a,
                resolution: l,
                canvasSize: u,
                trailSpeed: c.speed || 1,
                trailLength: c.trailLength || 500,
                trailCircle: c.trailCircle || 1e3,
                currentTime: this.layer.getRenderer().getFrameTimestamp() || 0,
                blendSrcIsOne: +!("one" !== this.sceneConfig.blendSrc),
                cameraPosition: t.cameraPosition,
                viewport: i && e && e.viewport,
                isRenderingTerrain: +!!i
            };
            return this.setIncludeUniformValues(h, e), h;
        }
    }
    class Nc extends Rc {
        postCreateGeometry(t) {
            const {symbolIndex: e, geometry: n} = t, {features: i} = n.properties, r = this.getSymbol(e).lineGradientProperty, o = n.data.aPickingId, s = new Uint8Array(o.length), a = [];
            let l = o[0];
            const u = i[l].feature.properties;
            a.push(u && u[r] || 0);
            for (let t = 1; t < o.length; t++) o[t] !== l && (l = o[t], a.push(u && u[r] || 0)), 
            s[t] = a.length - 1;
            n.data.aGradIndex = s, n.properties.gradients = a;
        }
        createMesh(t, e) {
            const {geometry: i, symbolIndex: r, ref: o} = t, s = this.getSymbolDef(r);
            if (void 0 === o) {
                ic(i, s, this.getFnTypeConfig(r));
            }
            const a = {
                tileResolution: i.properties.tileResolution,
                tileRatio: i.properties.tileRatio,
                tileExtent: i.properties.tileExtent
            }, l = this.getSymbol(r);
            this.setLineUniforms(l, a);
            const u = i.properties.gradients;
            let c = 2 * u.length;
            Lc(c) || (c = Hc(c));
            const h = this.regl.texture({
                width: 256,
                height: c,
                data: Dc(u),
                format: "rgba",
                mag: "linear",
                min: "linear",
                flipY: !1
            });
            a.lineGradientTexture = h, a.lineGradientTextureHeight = h.height, void 0 === o && i.generateBuffers(this.regl);
            const d = new n.reshader.Material(a), f = new n.reshader.Mesh(i, d, {
                castShadow: !1,
                picking: !0
            });
            f.setLocalTransform(e);
            const p = {
                HAS_GRADIENT: 1
            };
            return this.setMeshDefines(p, i, s), f.setDefines(p), f.properties.symbolIndex = r, 
            f;
        }
        createFnTypeConfig(t, e) {
            return this.createShapeFnTypeConfigs(t, e);
        }
        createShader(t) {
            this.oo = t;
            const e = [], i = {};
            this.fillIncludes(i, e, t), this.sceneConfig.trailAnimation && this.sceneConfig.trailAnimation.enable && (i.HAS_TRAIL = 1);
            const r = [];
            e.push({
                name: "projViewModelMatrix",
                type: "function",
                fn: function(t, e) {
                    return n.mat4.multiply(r, e.projViewMatrix, e.modelMatrix), r;
                }
            }), this.shader = new n.reshader.MeshShader({
                vert: Oc,
                frag: "#define SHADER_NAME LINE_GRADIENT\n#define DEVICE_PIXEL_RATIO 1.0\n#define MAX_LINE_COUNT 128.0\nprecision mediump float;\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\n#include <vsm_shadow_frag>\n#endif\n#ifdef HAS_OPACITY\nvarying float vOpacity;\n#else\nuniform lowp float lineOpacity;\n#endif\nuniform lowp float lineBlur;\nuniform float lineGradientTextureHeight;\nuniform float tileExtent;\nuniform sampler2D lineGradientTexture;\nvarying vec2 vNormal;\nvarying vec2 vWidth;\nvarying float vGammaScale;\nvarying highp float vLinesofar;\nvarying float vGradIndex;\n#ifndef ENABLE_TILE_STENCIL\nvarying vec2 vPosition;\n#endif\n#ifdef HAS_TRAIL\nuniform float trailSpeed;\nuniform float trailLength;\nuniform float trailCircle;\nuniform float currentTime;\n#endif\n#include <highlight_frag>\nvoid main() {\n  \n#ifndef ENABLE_TILE_STENCIL\nfloat c = sign(tileExtent - min(tileExtent, abs(vPosition.x))) * sign(1. + sign(vPosition.x)) * sign(tileExtent - min(tileExtent, abs(vPosition.y))) * sign(1. + sign(vPosition.y));\n  if(c == .0) {\n    discard;\n  }\n#endif\nfloat d = length(vNormal) * vWidth.s;\n  float e = (lineBlur + 1. / DEVICE_PIXEL_RATIO) * vGammaScale;\n  float f = clamp(min(d - (vWidth.t - e), vWidth.s - d) / e, .0, 1.);\n  float h = vLinesofar;\n  vec4 i = texture2D(lineGradientTexture, vec2(h, (vGradIndex * 2. + .5) / lineGradientTextureHeight)) * f;\n  i *= max(sign(MAX_LINE_COUNT - vGradIndex), .0);\n#ifdef HAS_TRAIL\nfloat j = mod(h - currentTime * trailSpeed * .1, trailCircle);\n  float k = j < trailLength ? mix(.0, 1., j / trailLength) : .0;\n  i *= k;\n#endif\n#ifdef HAS_OPACITY\nfloat l = vOpacity;\n#else\nfloat l = lineOpacity;\n#endif\ngl_FragColor = i * l;\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\nfloat m = shadow_computeShadow();\n  gl_FragColor.rgb = shadow_blend(gl_FragColor.rgb, m);\n#endif\ngl_FragColor = highlight_blendColor(gl_FragColor);\n}",
                uniforms: e,
                defines: i,
                extraCommandProps: this.getExtraCommandProps()
            });
        }
    }
    function Dc(t) {
        t.length > 128 && (console.warn("Line count in a tile exceeds maximum limit (128) for line-gradient render plugin."), 
        t = t.slice(0, 128));
        const e = document.createElement("canvas"), n = e.getContext("2d");
        e.width = 256, e.height = 2 * t.length, Lc(e.height) || (e.height = Hc(2 * t.length));
        for (let e = 0; e < t.length; e++) {
            const i = t[e], r = n.createLinearGradient(0, 0, 256, 0);
            for (let t = 0; t < i.length; t += 2) r.addColorStop(+i[t], i[t + 1]);
            n.fillStyle = r;
            const o = e % 256;
            n.fillRect(0, 2 * o, 256, 2 * o + 2);
        }
        return n.canvas;
    }
    function Lc(t) {
        return 0 == (t & t - 1) && 0 !== t;
    }
    function Hc(t) {
        return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2));
    }
    class Uc {
        constructor(t) {
            this.oe = t || [], this.properties = {};
        }
        set meshes(t) {
            this.oe = t;
        }
        get meshes() {
            return this.oe;
        }
    }
    const qc = 224, Vc = 600, $c = 100, Gc = new Uint8Array(1), Wc = [], Bc = {
        collides: 0,
        boxes: []
    };
    class Jc extends Mc {
        createGeometry(...t) {
            const e = super.createGeometry(...t);
            if (!e || !e.geometry) return e;
            const {geometry: n} = e, i = t[0];
            return n.properties.collideIds = i.featureIds && i.featureIds.length && i.isIdUnique ? i.featureIds : i.data.aPickingId, 
            n.properties.uniqueCollideIds = tc(n.properties.collideIds), e;
        }
        supportRenderMode(t) {
            const e = this.sceneConfig.renderToPointRenderTarget;
            return e || void 0 === e ? "point" === t : "fxaa" === t || "fxaaAfterTaa" === t;
        }
        startMeshCollision(t) {
            const {meshKey: e} = t.properties, {renderer: n} = this.so, i = n.isForeground(t instanceof Uc ? t.meshes[0] : t);
            if (t.properties.isForeground = i, t instanceof Uc && t.meshes.length) for (let e = 0; e < t.meshes.length; e++) t.meshes[e].properties.isForeground = i;
            this.ao = performance.now(), this.lo = this.uo(), this.co = this.ho(e);
        }
        endMeshCollision(t) {
            const e = this.do.tags[t];
            if (this.lo && e && this.co) {
                const t = this.getMap();
                e.anchor0 = t.containerPointToCoord(this.fo), e.anchor1 = t.containerPointToCoord(this.po), 
                e.anchor0.z = t.getZoom(), e.anchor0.width = t.width, e.anchor0.height = t.height;
            }
            this.getMap().collisionFrameTime += performance.now() - this.ao;
        }
        ho(t) {
            const e = this.getMap(), n = e.getZoom(), [i, r] = this.mo(t);
            return !i || !r || i.z !== n || i.width !== e.width || i.height !== e.height || i.distanceTo(this.fo) > 2 || r.distanceTo(this.po) > 2;
        }
        yo() {
            const t = this.getMap();
            this.bo = {}, this.fo = new r.Point(t.width / 2, t.height / 3), this.po = new r.Point(t.width / 2, 2 * t.height / 3), 
            delete this.lo, this.do || (this.do = {
                tags: {}
            }), this.so = {
                layer: this.layer,
                renderer: this.layer.getRenderer(),
                frameTimestamp: this.layer.getRenderer().getFrameTimestamp(),
                map: this.getMap(),
                zoom: t.getZoom(),
                collisionTags: this.do.tags,
                isEnableUniquePlacement: this.isEnableUniquePlacement()
            };
        }
        vo() {
            this.xo = this.isEnableCollision();
        }
        wo(t, e) {
            const n = this.do;
            return n.tags[t] && n.tags[t][e];
        }
        ko(t, e, n) {
            const i = this.do;
            i.tags[t] = i.tags[t] || [], i.tags[t][e] = n;
        }
        uo() {
            const t = this.getMap();
            if (!t.isInteracting()) return !0;
            const e = this.layer.options.collisionFrameLimit;
            return t.collisionFrameTime <= e;
        }
        mo(t) {
            const e = "__meshAnchorKey".trim(), n = this.do.tags[t];
            if (n && n.anchor0) {
                const {anchor0: t, anchor1: i} = n, r = t[e] = t[e] || t.x + "," + t.y, o = i[e] = i[e] || i.x + "," + i.y;
                let s = this.bo[r], a = this.bo[o];
                if (!s || !a) {
                    const e = this.getMap();
                    s = this.bo[r] = e.coordToContainerPoint(t), a = this.bo[o] = e.coordToContainerPoint(i);
                }
                return s.z = t.z, Wc[0] = s, Wc[1] = a, s.width = t.width, s.height = t.height, 
                Wc;
            }
            return Wc[0] = Wc[1] = null, Wc;
        }
        updateBoxCollisionFading(t, e, n, i, r) {
            const {layer: o, renderer: s, zoom: a, collisionTags: l, isEnableUniquePlacement: u} = this.so, {meshKey: c, isForeground: h} = e.properties;
            if (u && this.Ao(c, r)) return !1;
            const d = n.length;
            let f = l[c] && l[c][r];
            const p = f, m = this._o && f;
            if (!(m && 0 !== f.collides) && t) {
                const t = m && 0 === f.collides;
                if (this.lo || t) if ((this.co || f && f.z !== a) && (f = null), f) {
                    if (f.boxes && f.boxes.length) {
                        const {boxes: t, isAllowOverlap: e} = f;
                        let n = 0;
                        if (!e) {
                            let e = 0;
                            for (let i = 0; i < t.length; i++) if (!n) {
                                const r = this.isCollides(t[i]);
                                if (-1 === r) e++; else if (1 === r) {
                                    n = 1;
                                    break;
                                }
                            }
                            e === t.length && (n = -1);
                        }
                        f.collides = n;
                    }
                } else {
                    f = p || {
                        collides: 0,
                        boxes: []
                    }, f.boxes.length = 0, f.z = a;
                    let t = 0;
                    for (let e = 0; e < d; e++) {
                        const {mesh: o, allElements: s, boxCount: a, start: l, end: u} = n[e], c = this.To(o, s, a, l, u, i, r);
                        c.isAllowOverlap && (f.isAllowOverlap = 1), 0 === t && (t = c.collides), c.boxes && f.boxes.push(...c.boxes);
                    }
                    f.collides = t, this.ko(c, r, f);
                }
            }
            let y = t && f && 0 === f.collides, g = 1, b = !1;
            if (this.sceneConfig.fading) {
                const t = this.So(e);
                if (this.Mo) t[r] = y ? 1 : -1; else if (h && delete e.Po, g = this.Io(h, y, t, r), 
                h ? (g > 0 && (y = !0), b = this.isBoxFading(e, r), b && this.setToRedraw()) : y || (this.jo(t, r), 
                g = 0), y) {
                    const n = e.Po;
                    if (n && 1 === g && t[r] > 0) {
                        let {fadeOutDelay: t, fadingDuration: e} = this.sceneConfig;
                        Vu(e) && (e = qc), Vu(t) && (t = $c);
                        const i = Uu(1 - (s.getFrameTimestamp() - n - t) / e, 0, 1);
                        g *= i, i > 0 && this.setToRedraw();
                    }
                }
            }
            if (f && o.options.debugCollision && this.addCollisionDebugBox(f.boxes, f.collides ? 0 : 1), 
            y || b) {
                const {mesh: t, start: e} = n[0], i = this.getSymbol(t.properties.symbolIndex);
                !this.zo(i, t, e) && f && f.boxes && this.Fo(f.boxes, t);
            }
            if (y) {
                const t = Gc[0] = 255 * g;
                for (let e = 0; e < d; e++) {
                    const {mesh: i, allElements: r, start: o, end: s, boxIndex: a} = n[e];
                    this.setCollisionOpacity(i, r, t, o, s, a);
                }
            }
            return y && g > 0;
        }
        isMeshIterable() {
            return !0;
        }
        setCollisionOpacity(t, e, n, i, r) {
            const o = e[i], s = e[r - 1];
            this.Oo(t, n, o, s);
        }
        Oo(t, e, n, i) {
            const {aOpacity: r} = t.geometry.properties;
            if (!r) return;
            const o = n;
            if (r[o] !== e) {
                const t = i;
                for (let n = o; n <= t; n++) r[n] = e;
                r.dirty = !0;
            }
        }
        isBoxFading(t, e) {
            const {frameTimestamp: n} = this.so;
            let i = this.sceneConfig.fadingDuration;
            Vu(i) && (i = qc);
            return n - Math.abs(this.So(t)[e]) < i;
        }
        To(t, e, n, i, r, o, s) {
            const a = this.getSymbol(t.properties.symbolIndex), l = this.zo(a, t, e[i]), u = this.Co(a, t, e[i]);
            if (!this.isEnableCollision() || l && u) return Bc;
            const c = this.isBoxCollides(t, e, n, i, r, o, s);
            return u && (c.collides = 0, c.isAllowOverlap = 1), c;
        }
        zo(t, e, n) {
            if (!this.isEnableCollision()) return !0;
            const i = e.geometry.properties.aOverlap;
            if (!i) return 1 == +t[this.propIgnorePlacement];
            const r = i[n], o = r % 8;
            return r < 2 ? 1 == +t[this.propIgnorePlacement] : o % 2;
        }
        Co(t, e, n) {
            if (!this.isEnableCollision()) return !0;
            const i = e.geometry.properties.aOverlap;
            if (!i) return 1 == +t[this.propAllowOverlap];
            const r = i[n], o = r >> 2;
            return r < 2 ? 1 == +t[this.propAllowOverlap] : o % 2;
        }
        Fo(t) {
            if (Array.isArray(t[0])) for (let e = 0; e < t.length; e++) this.insertCollisionBox(t[e]); else this.insertCollisionBox(t);
        }
        Io(t, e, n, i) {
            let {fadingDuration: r, fadeInDelay: o, fadeOutDelay: s} = this.sceneConfig;
            Vu(r) && (r = qc), Vu(o) && (o = Vc), Vu(s) && (s = $c);
            const {frameTimestamp: a} = this.so;
            let l = n[i], u = e ? 1 : 0;
            if (!l) return e && t && (n[i] = a + o), 0;
            if (a < Math.abs(l) && (!e && l > 0 || e && l < 0)) {
                const t = a - r;
                n[i] = l = e ? t : -t;
            }
            return a - Math.abs(l) < r ? u = l > 0 ? (a - l) / r : 1 - (a + l) / r : e ? (l < 0 && (n[i] = l = a + o), 
            u = (a - l) / r) : (l > 0 && (n[i] = l = -(a + s)), u = 1 - (a + l) / r), (u < 0 || u > 1) && (u = Uu(u, 0, 1)), 
            u;
        }
        So(t) {
            this.Eo || (this.Eo = {});
            const {meshKey: e} = t.properties;
            if (!this.Eo[e]) {
                const {frameTimestamp: t} = this.so;
                this.Eo[e] = {
                    timestamp: t
                };
            }
            return this.Eo[e];
        }
        Ro(t) {
            if (!this.No) return void (this.No = t);
            const e = this.scene.getMeshes();
            if (e && e.length) {
                for (let n = 0; n < e.length; n++) {
                    const i = this.So(e[n]);
                    i.timestamp < this.No ? delete e[n]._fading_timestamps : i.timestamp = t;
                }
                this.No = t;
            }
        }
        jo(t, e) {
            if (!t) return;
            const {frameTimestamp: n} = this.so;
            let {fadingDuration: i} = this.sceneConfig;
            Vu(i) && (i = qc), t[e] = -(n - i - 1);
        }
        deleteMesh(t, e) {
            if (t) {
                if (Array.isArray(t)) for (let e = 0; e < t.length; e++) {
                    const n = t[e].properties.meshKey;
                    this.do && delete this.do.tags[n], this.Eo && delete this.Eo[n];
                } else {
                    const e = t.properties.meshKey;
                    this.do && delete this.do.tags[e], this.Eo && delete this.Eo[e];
                }
                super.deleteMesh(t, e);
            }
        }
        delete(t) {
            this.Do && (this.Do.geometry.dispose(), this.Lo.dispose(), this.Do.dispose(), delete this.Do, 
            delete this.Lo, delete this.Ho), delete this.do, super.delete(t);
        }
        isCollides(t) {
            const e = this.layer;
            if (e.getMap().isOffscreen(t)) return -1;
            return +e.getCollisionIndex().collides(t);
        }
        insertCollisionBox(t) {
            this.layer.getCollisionIndex().insertBox(t);
        }
        addCollisionDebugBox(t, e) {
            if (t && t.length) if (Array.isArray(t[0])) for (let n = 0; n < t.length; n++) {
                const i = t[n];
                this.Uo(i, e);
            } else this.Uo(t, e);
        }
        Uo(t, e) {
            if (!t) return;
            const n = this.qo = this.qo || {
                aPosition: [],
                aVisible: [],
                indices: []
            };
            if (this.getMap().isOffscreen(t)) return;
            const i = n.aPosition.length / 2;
            n.aPosition.push(t[0], t[1], t[2], t[1], t[2], t[3], t[0], t[3]), n.aVisible.push(e, e, e, e), 
            n.indices.push(i, i + 1, i + 1, i + 2, i + 2, i + 3, i + 3, i);
        }
        Vo() {
            return this.isEnableCollision() || this.xo;
        }
        updateCollision(t) {
            super.updateCollision(t), this.yo(), this.$o(), this.Go && this.Go.length && (this.Wo(), 
            this.Go && (this.setToRedraw(), this.scene.addMesh(this.Go)));
            (this.getMap().isZooming() || this.Go && this.Go.length) && (this.Bo(), this.Jo(this.scene.getMeshes()));
        }
        paint(t) {
            const e = super.paint(t);
            return this.Xo(t), !1 === this.lo && this.setToRedraw(), e;
        }
        shouldIgnoreBackground() {
            return !this.getMap().isZooming() && !this.Go;
        }
        $o() {
            const t = this.getMap(), e = t.isZooming();
            if (!e && this._o) {
                const t = this.layer.getRenderer();
                this.Go = this.scene.getMeshes().filter(e => !t.isForeground(e) && !e.properties.isLinePlacement);
            } else e && !this._o && (this.Yo = t.getResolution());
            if (e) this.Zo && (clearTimeout(this.Zo), delete this.Mo, delete this.Zo), this.Mo = this.Yo && t.getResolution() > this.Yo; else if (this._o && !this.Zo) {
                let {fadeOutDelay: t, fadingDuration: e} = this.sceneConfig;
                Vu(t) && (t = $c), Vu(e) && (e = qc), this.Zo = setTimeout(() => {
                    delete this.Mo, delete this.Zo;
                }, t + e + 1);
            }
            this._o = e;
        }
        Xo(t) {
            if (!this.qo || !this.layer.options.debugCollision) return;
            this.Ho || this.Ko();
            const {aPosition: e, aVisible: i, indices: r} = this.qo;
            if (!this.Do) {
                const t = new n.reshader.Geometry({
                    aPosition: [],
                    aVisible: []
                }, [], 0, {
                    positionSize: 2,
                    primitive: "lines"
                });
                this.Do = new n.reshader.Mesh(t), this.Qo = new n.reshader.Scene, this.Qo.addMesh(this.Do);
            }
            const o = this.Do.geometry;
            o.updateData("aPosition", new Float32Array(e)), o.updateData("aVisible", new Uint8Array(i)), 
            o.setElements(r), this.Ho.render(this.Lo, {
                size: [ this.canvas.width, this.canvas.height ]
            }, this.Qo, this.getRenderFBO(t)), delete this.qo;
        }
        Ko() {
            const t = this.regl;
            this.Ho = new n.reshader.Renderer(t);
            const e = this.canvas, i = {
                x: 0,
                y: 0,
                width: () => e ? e.width : 1,
                height: () => e ? e.height : 1
            };
            this.Lo = new n.reshader.MeshShader({
                vert: "attribute vec2 aPosition;\nattribute float aVisible;\nuniform vec2 size;\nvarying vec4 vColor;\nvoid main() {\n  vec2 c = (aPosition / size - .5) * 2. * vec2(1., -1.);\n  gl_Position = vec4(c, .0, 1.);\n  vColor = mix(vec4(1., .0, .0, 1.5) * .5, vec4(.0, 1., .0, 1.) * .4, aVisible);\n}",
                frag: "precision mediump float;\nvarying vec4 vColor;\nvoid main() {\n  gl_FragColor = vec4(vColor.rgb, .5);\n}",
                uniforms: [ "size" ],
                extraCommandProps: {
                    viewport: i,
                    depth: {
                        enable: !1
                    },
                    blend: {
                        enable: !0,
                        func: {
                            src: "src alpha",
                            dst: "one minus src alpha"
                        },
                        equation: "add"
                    }
                }
            });
        }
        Wo() {
            let {fadeOutDelay: t, fadingDuration: e} = this.sceneConfig;
            Vu(t) && (t = $c), Vu(e) && (e = qc);
            const n = this.layer.getRenderer(), i = n.getCurrentTileZoom(), r = n.getFrameTimestamp(), o = [];
            for (let s = 0; s < this.Go.length; s++) {
                const a = this.Go[s], l = a.properties.tile;
                !a.Po && n.isBackTile(l.id) && (a.Po = r);
                const u = l.z - i > 0 ? 2 * (l.z - i) - 1 : 2 * (i - l.z);
                a.properties.level = u, n.isForeground(a) || a.Po && r - a.Po > t + e ? delete a.Po : o.push(a);
            }
            delete this.Go, o.length && (this.Go = o);
        }
        isEnableCollision() {
            return this.layer.options.collision && !!this.sceneConfig.collision;
        }
        isEnableUniquePlacement() {
            return this.isEnableCollision() && this.sceneConfig.uniquePlacement;
        }
        isMeshUniquePlaced(t) {
            return this.isMeshIterable(t);
        }
        Bo() {
            if (!this.isEnableUniquePlacement()) return;
            const t = this.scene.getMeshes(), e = (t, e, n, i) => {
                const {start: r, end: o} = e[0], s = t.geometry.properties, a = s.elements;
                let l = s.uniquePlacements;
                if (l || (l = s.uniquePlacements = []), void 0 === l[i]) {
                    const e = this.getUniqueEntryKey(t, a[r], i);
                    l[i] = e ? {
                        key: e,
                        index: i,
                        start: a[r],
                        end: a[o - 1]
                    } : null;
                }
            };
            for (let n = 0; n < t.length; n++) {
                const i = t[n];
                this.isMeshUniquePlaced(i) && this.forEachBox(i, e);
            }
        }
        Jo(t) {
            if (!this.isEnableUniquePlacement()) return;
            const e = this.getMap().getZoom();
            let n = !this.ts || this.es !== e;
            if (!n) for (let e = 0; e < t.length; e++) if (!this.ts[t[e].properties.meshKey]) {
                n = !0;
                break;
            }
            if (!n) return;
            this.es = e, this.ns = {}, this.ts = {}, t = t.sort(Yc);
            const i = this.getMap().getGLScale(), r = {};
            for (let e = 0; e < t.length; e++) {
                const n = t[e];
                if (!n.geometry) continue;
                const {meshKey: o} = n.properties;
                this.ts[o] = 1;
                const {uniquePlacements: s} = n.geometry.properties;
                if (s) for (let t = 0; t < s.length; t++) {
                    if (!s[t]) continue;
                    const {key: e, index: o} = s[t], a = this.So(n), l = Xc(e, i), u = r[l];
                    if (u) {
                        const t = u.length, e = u[t - 3].properties.meshKey, i = u[t - 2], r = u[t - 1];
                        this.ns[e] = this.ns[e] || {}, this.ns[e][r] = 1, this.rs(a, o, i, r), u.push(n, a, o);
                    } else r[l] = [ n, a, o ];
                }
            }
            for (const t in r) {
                const e = r[t];
                if (e.length <= 6) continue;
                const n = e.length, i = e[n - 2][e[n - 1]];
                if (e[1][e[2]] !== i) for (let t = 0; t < n - 6; t += 3) {
                    e[t + 1][e[t + 2]] = i;
                }
            }
        }
        rs(t, e, n, i) {
            if (void 0 !== n[i]) if (void 0 === t[e]) t[e] = n[i]; else {
                let r = t[e];
                Math.abs(n[i]) > Math.abs(r) ? t[e] = n[i] : n[i] = t[e];
            } else void 0 !== t[e] && (n[i] = t[e]);
        }
        Ao(t, e) {
            return this.ns && this.ns[t] && this.ns[t][e];
        }
        os(t, e) {
            const {symbolIndex: n} = t.properties, i = n.type || 0;
            let r = t.properties._collidesBoxes;
            r || (r = t.properties._collidesBoxes = []);
            let o = r[n.index];
            o || (o = t.properties._collidesBoxes = []), o[i] || (o[i] = []), o = o[i];
            const s = e / 6;
            if (!o[s]) {
                const t = [];
                o[s] = {
                    boxes: t,
                    collision: {
                        boxes: t
                    }
                };
            }
            return o[s];
        }
        ss(t) {
            let e = this.as;
            if (e || (e = this.as = []), !e[t]) {
                e[t] = [];
                for (let n = 0; n < t; n++) e[t][n] = {};
            }
            return e[t];
        }
        ls(t) {
            if (!t || !t.geometry) return !0;
            if (!t.geometry.properties.glyphAtlas || !t.material.get("isHalo") || t.geometry.data.aTextHaloRadius && t.geometry.properties.hasHalo) return !1;
            if (t.geometry.data.aTextHaloRadius && !t.geometry.properties.hasHalo) return !0;
            return !this.getSymbol(t.geometry.properties.symbolIndex).textHaloRadius;
        }
    }
    function Xc(t, e) {
        return Math.round(t[0] / e / 10) * Math.round(t[1] / e / 10) * (t[2] ? Math.round(t[2] / 10) : 1) + "-" + t[3];
    }
    function Yc(t, e) {
        const n = e.properties.level - t.properties.level;
        return 0 === n ? t.properties.meshKey - e.properties.meshKey : n;
    }
    var Zc = "#include <gl2_vert>\n#define SHADER_NAME MARKER\n#define RAD 0.0174532925\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\nattribute vec2 aShape;\nattribute vec2 aTexCoord;\n#ifdef ENABLE_COLLISION\nattribute float aOpacity;\n#endif\n#ifdef HAS_OPACITY\nattribute float aColorOpacity;\n#endif\n#ifdef HAS_MARKER_WIDTH\nattribute float aMarkerWidth;\n#else\nuniform float markerWidth;\n#endif\n#ifdef HAS_MARKER_HEIGHT\nattribute float aMarkerHeight;\n#else\nuniform float markerHeight;\n#endif\n#ifdef HAS_MARKER_DX\nattribute float aMarkerDx;\n#else\nuniform float markerDx;\n#endif\n#ifdef HAS_MARKER_DY\nattribute float aMarkerDy;\n#else\nuniform float markerDy;\n#endif\n#if defined(HAS_PITCH_ALIGN)\nattribute float aPitchAlign;\n#else\nuniform float pitchWithMap;\n#endif\n#if defined(HAS_ROTATION_ALIGN)\nattribute float aRotationAlign;\n#else\nuniform float rotateWithMap;\n#endif\nuniform float flipY;\n#ifdef HAS_ROTATION\nattribute float aRotation;\n#else\nuniform float markerRotation;\n#endif\n#ifdef HAS_PAD_OFFSET\nattribute float aPadOffsetX;\nattribute float aPadOffsetY;\n#endif\nuniform float cameraToCenterDistance;\nuniform mat4 positionMatrix;\nuniform mat4 projViewModelMatrix;\nuniform float markerPerspectiveRatio;\nuniform vec2 iconSize;\nuniform vec2 texSize;\nuniform vec2 canvasSize;\nuniform float mapPitch;\nuniform float mapRotation;\nuniform float zoomScale;\nuniform float tileRatio;\nuniform float layerScale;\nuniform float isRenderingTerrain;\n#include <vt_position_vert>\n#ifndef PICKING_MODE\nvarying vec2 vTexCoord;\nvarying float vOpacity;\n#include <highlight_vert>\n#else\n#include <fbo_picking_vert>\n#endif\nvoid main() {\n  vec3 c = unpackVTPosition();\n#ifdef HAS_MARKER_WIDTH\nfloat d = aMarkerWidth;\n#else\nfloat d = markerWidth;\n#endif\n#ifdef HAS_MARKER_HEIGHT\nfloat e = aMarkerHeight;\n#else\nfloat e = markerHeight;\n#endif\n#ifdef HAS_MARKER_DX\nfloat f = aMarkerDx;\n#else\nfloat f = markerDx;\n#endif\n#ifdef HAS_MARKER_DY\nfloat h = aMarkerDy;\n#else\nfloat h = markerDy;\n#endif\n#if defined(HAS_PITCH_ALIGN)\nfloat i = aPitchAlign;\n#else\nfloat i = pitchWithMap;\n#endif\n#if defined(HAS_ROTATION_ALIGN)\nfloat j = aRotationAlign;\n#else\nfloat j = rotateWithMap;\n#endif\ngl_Position = projViewModelMatrix * positionMatrix * vec4(c, 1.);\n  float k = gl_Position.w;\n  float l;\n  if(isRenderingTerrain == 1.) {\n    l = 1.;\n  } else {\n    float m = (1. - cameraToCenterDistance / k) * markerPerspectiveRatio;\n    l = clamp(.5 + .5 * (1. - m), .0, 4.);\n  }\n#ifdef HAS_ROTATION\nfloat n = -aRotation / 9362. - mapRotation * j;\n#else\nfloat n = -markerRotation - mapRotation * j;\n#endif\nif(i == 1.) {\n    n += mapRotation;\n  }\n  float o = sin(n);\n  float u = cos(n);\n  mat2 v = mat2(u, -1. * o, o, u);\n  vec2 A = (aShape / 10.0);\n  if(i == 1. && flipY == .0) {\n    A *= vec2(1., -1.);\n  }\n#ifdef HAS_PAD_OFFSET\nA = (A / iconSize * vec2(d, e) + vec2(aPadOffsetX - 1., aPadOffsetY)) * layerScale;\n#else\nA = A / iconSize * vec2(d, e) * layerScale;\n#endif\nA = v * A;\n  if(i == .0) {\n    vec2 B = A * 2. / canvasSize;\n    gl_Position.xy += B * l * k;\n  } else {\n    float C;\n    if(isRenderingTerrain == 1.) {\n      C = 1.;\n    } else {\n      C = k / cameraToCenterDistance;\n    }\n    vec2 B = A;\n    gl_Position = projViewModelMatrix * positionMatrix * vec4(c + vec3(B, .0) * tileRatio / zoomScale * C * l, 1.);\n  }\n  gl_Position.xy += vec2(f, -h) * 2. / canvasSize * k;\n#ifndef PICKING_MODE\nvTexCoord = aTexCoord / texSize;\n#ifdef ENABLE_COLLISION\nvOpacity = aOpacity / 255.;\n#else\nvOpacity = 1.;\n#endif\n#ifdef HAS_OPACITY\nvOpacity *= aColorOpacity / 255.;\n#endif\nhighlight_setVarying();\n#else\n#ifdef ENABLE_COLLISION\nbool D = aOpacity == 255.;\n#else\nbool D = true;\n#endif\nfbo_picking_setData(gl_Position.w, D);\n#endif\n}";
    const Kc = [];
    function Qc(t, e, i, r, o) {
        return n.vec4.set(Kc, e[0], e[1], e[2], 1), n.vec4.transformMat4(Kc, Kc, i), t[2] = Kc[3], 
        n.vec4.scale(Kc, Kc, 1 / Kc[3]), t[0] = (Kc[0] + 1) * r / 2, t[1] = (1 - Kc[1]) * o / 2, 
        t;
    }
    const th = [], eh = [], nh = [], ih = [], rh = [], oh = [];
    function sh(t, e, i, r, o, s, a, l, u, c, h, d, f, p) {
        const {tileRatio: m, tileResolution: y} = u, g = m / (y / c.getResolution()) * (h / c.cameraToCenterDistance) * d;
        n.vec2.scale(i, i, g), n.vec2.scale(r, r, g), n.vec2.scale(o, o, g), n.vec2.scale(s, s, g), 
        n.vec3.set(th, i[0], i[1], f ? i[2] / p : 0), n.vec3.set(eh, r[0], r[1], f ? r[2] / p : 0), 
        n.vec3.set(nh, o[0], o[1], f ? o[2] / p : 0), n.vec3.set(ih, s[0], s[1], f ? s[2] / p : 0), 
        n.vec3.add(th, th, e), n.vec3.add(eh, eh, e), n.vec3.add(nh, nh, e), n.vec3.add(ih, ih, e), 
        Qc(i, th, a, c.width, c.height), Qc(r, eh, a, c.width, c.height), Qc(o, nh, a, c.width, c.height), 
        Qc(s, ih, a, c.width, c.height), n.vec2.set(rh, Math.min(i[0], r[0], o[0], s[0]), Math.min(i[1], r[1], o[1], s[1])), 
        n.vec2.set(oh, Math.max(i[0], r[0], o[0], s[0]), Math.max(i[1], r[1], o[1], s[1])), 
        n.vec4.set(t, rh[0] + l[0], rh[1] + l[1], oh[0] + l[0], oh[1] + l[1]);
    }
    function ah(t, e, i, r, o, s, a, l) {
        1 !== l && (n.vec2.scale(i, i, l), n.vec2.scale(r, r, l), n.vec2.scale(o, o, l), 
        n.vec2.scale(s, s, l)), n.vec2.set(rh, Math.min(i[0], r[0], o[0], s[0]), Math.min(i[1], r[1], o[1], s[1])), 
        n.vec2.set(oh, Math.max(i[0], r[0], o[0], s[0]), Math.max(i[1], r[1], o[1], s[1])), 
        n.vec4.set(t, e[0] + rh[0] + a[0], e[1] + rh[1] - a[1], e[0] + oh[0] + a[0], e[1] + oh[1] - a[1]);
    }
    function lh(t, e, i, r, o) {
        e -= i * r, 1 === o && (e += i);
        const s = Math.sin(e), a = Math.cos(e);
        return n.mat2.set(t, a, -s, s, a);
    }
    const uh = [], ch = [], hh = [], dh = [], fh = [], ph = [], mh = [], yh = [], gh = [ 1, -1 ], bh = [ 1, 1 ];
    function vh(t, e, i, r, o) {
        const s = e.material.uniforms, a = o.cameraToCenterDistance, l = e.geometry.properties, u = this.getSymbol(l.symbolIndex), c = e.geometry.desc.positionSize, h = l.aAnchor, d = n.vec3.set(uh, h[i * c], h[i * c + 1], 2 === c ? 0 : h[i * c + 2]);
        let f = Qc(ch, d, r, o.width, o.height);
        const p = f[2];
        let m = 1;
        if (s.markerPerspectiveRatio) {
            m = Uu(.5 + .5 * (1 - (1 - a / p) * s.markerPerspectiveRatio), 0, 4);
        }
        const {aShape: y, aMarkerDx: g, aMarkerDy: b, aMarkerWidth: v, aMarkerHeight: x, aPitchAlign: w, aRotationAlign: k, aRotation: A} = l, _ = g ? g[i] : u.markerDx, T = b ? b[i] : u.markerDy, S = w ? w[i] : s.pitchWithMap, M = k ? k[i] : s.rotateWithMap, P = n.vec2.set(yh, _ || 0, -(T || 0));
        let I = n.vec2.set(dh, y[2 * i] / 10, y[2 * i + 1] / 10), j = n.vec2.set(fh, y[2 * i + 2] / 10, y[2 * i + 3] / 10), z = n.vec2.set(ph, y[2 * i + 4] / 10, y[2 * i + 5] / 10), F = n.vec2.set(mh, y[2 * i + 6] / 10, y[2 * i + 7] / 10);
        0 === s.flipY && 1 === S && (n.vec2.multiply(I, I, gh), n.vec2.multiply(j, j, gh), 
        n.vec2.multiply(z, z, gh), n.vec2.multiply(F, F, gh));
        let O = v ? v[i] : u.markerWidth;
        Vu(O) && (O = 15);
        let C = x ? x[i] : u.markerHeight;
        Vu(C) && (C = 15);
        const E = n.vec2.set(bh, O / 2048, C / 2048);
        n.vec2.mul(I, I, E), n.vec2.mul(j, j, E), n.vec2.mul(z, z, E), n.vec2.mul(F, F, E);
        const R = -(A ? A[i] / 9362 : -(u.markerRotation || 0) * Math.PI / 180), N = o.getBearing() * Math.PI / 180;
        if (N * M || R) {
            const t = lh(hh, R, N, M, S);
            I = n.vec2.transformMat2(I, I, t), j = n.vec2.transformMat2(j, j, t), z = n.vec2.transformMat2(z, z, t), 
            F = n.vec2.transformMat2(F, F, t);
        }
        return 1 === S ? sh(t, d, I, j, z, F, r, P, s, o, p, m) : (n.vec2.multiply(I, I, gh), 
        n.vec2.multiply(j, j, gh), n.vec2.multiply(z, z, gh), n.vec2.multiply(F, F, gh), 
        ah(t, f, I, j, z, F, P, m)), t;
    }
    const xh = [], wh = [], kh = [], Ah = [], _h = [], Th = [], Sh = [ 1, -1 ];
    function Mh(t, e, i, r, o, s, a, l, u) {
        const c = r.material.uniforms, h = u.cameraToCenterDistance, d = r.geometry.properties, f = this.getSymbol(d.symbolIndex), p = "line" === f.textPlacement && !Ku(f), m = i[2];
        let y = 1;
        if (c.textPerspectiveRatio) {
            y = Uu(.5 + .5 * (1 - (1 - h / m) * c.textPerspectiveRatio), 0, 4);
        }
        const {aTextDx: g, aTextDy: b, aPitchAlign: v, aRotationAlign: x, aRotation: w} = r.geometry.properties, k = g ? g[a] : f.textDx, A = b ? b[a] : f.textDy, _ = v ? v[a] : c.pitchWithMap, T = x ? x[a] : c.rotateWithMap, S = n.vec2.set(Th, k || 0, -(A || 0));
        if (p) {
            const {aOffset: r, aShape: o} = d, s = r.length !== o.length;
            let h, f, p, g;
            if (s ? (h = n.vec3.set(wh, r[3 * a] / 10, r[3 * a + 1] / 10, r[3 * a + 2] / 10), 
            f = n.vec3.set(kh, r[3 * a + 3] / 10, r[3 * a + 4] / 10, r[3 * a + 5] / 10), p = n.vec3.set(Ah, r[3 * a + 6] / 10, r[3 * a + 7] / 10, r[3 * a + 8] / 10), 
            g = n.vec3.set(_h, r[3 * a + 9] / 10, r[3 * a + 10] / 10, r[3 * a + 11] / 10)) : (h = n.vec2.set(wh, r[2 * a] / 10, r[2 * a + 1] / 10), 
            f = n.vec2.set(kh, r[2 * a + 2] / 10, r[2 * a + 3] / 10), p = n.vec2.set(Ah, r[2 * a + 4] / 10, r[2 * a + 5] / 10), 
            g = n.vec2.set(_h, r[2 * a + 6] / 10, r[2 * a + 7] / 10)), 1 === _) {
                const n = O(u.getResolution(), u);
                sh(t, e, h, f, p, g, l, S, c, u, m, y, s, n);
            } else n.vec2.multiply(h, h, Sh), n.vec2.multiply(f, f, Sh), n.vec2.multiply(p, p, Sh), 
            n.vec2.multiply(g, g, Sh), ah(t, i, h, f, p, g, S, y);
        } else {
            const {aShape: r} = d;
            let s = n.vec2.set(wh, r[2 * a] / 10, r[2 * a + 1] / 10), h = n.vec2.set(kh, r[2 * a + 2] / 10, r[2 * a + 3] / 10), g = n.vec2.set(Ah, r[2 * a + 4] / 10, r[2 * a + 5] / 10), b = n.vec2.set(_h, r[2 * a + 6] / 10, r[2 * a + 7] / 10);
            0 === c.flipY && 1 === _ && (n.vec2.multiply(s, s, Sh), n.vec2.multiply(h, h, Sh), 
            n.vec2.multiply(g, g, Sh), n.vec2.multiply(b, b, Sh));
            const v = w ? w[a] / 9362 : (f.textRotation || 0) * Math.PI / 180, x = p ? 0 : u.getBearing() * Math.PI / 180;
            if (v || x) {
                const t = lh(xh, v, x, T, _);
                s = n.vec2.transformMat2(s, s, t), h = n.vec2.transformMat2(h, h, t), g = n.vec2.transformMat2(g, g, t), 
                b = n.vec2.transformMat2(b, b, t);
            }
            const k = o / 24;
            n.vec2.scale(s, s, k), n.vec2.scale(h, h, k), n.vec2.scale(g, g, k), n.vec2.scale(b, b, k), 
            1 === _ ? sh(t, e, s, h, g, b, l, S, c, u, m, y) : ah(t, i, s, h, g, b, S, y);
        }
        return s = s || 0, t[0] -= s + 1, t[1] -= s + 1, t[2] += s + 1, t[3] += s + 1, t;
    }
    function Ph(t, e, i) {
        const r = e.geometry.desc.positionSize, {aAnchor: o, aAltitude: s} = e.geometry.properties, a = i * r;
        return s ? n.vec3.set(t, o[a], o[a + 1], s[i]) : 3 === r ? Ia.unpackPosition(t, o[a], o[a + 1], o[a + 2]) : n.vec3.set(t, o[a], o[a + 1], 0);
    }
    const Ih = {
        textFill: [ 0, 0, 0, 1 ],
        textOpacity: 1,
        textPitchAlignment: 0,
        textRotationAlignment: 0,
        textHaloRadius: 0,
        textHaloFill: [ 1, 1, 1, 1 ],
        textHaloBlur: 0,
        textHaloOpacity: 1,
        textPerspectiveRatio: 0,
        textSize: 14,
        textDx: 0,
        textDy: 0,
        textRotation: 0
    };
    function jh(t, e, i, r, o, s, a, l, u) {
        const c = [];
        if (e.isDisposed() || 0 === e.data.aPosition.length) return c;
        const h = e.properties.glyphAtlas;
        if (!h) return c;
        if (0 === r.textSize || 0 === r.textOpacity) return c;
        if (ic(e, r, s), !e.properties.aCount) {
            zh.call(this, e, a || u, l);
            const {aTextSize: t, aTextDx: n, aTextDy: i, aPitchAlign: r, aRotationAlign: o, aRotation: s, aOverlap: c, aAltitude: h} = e.data;
            if (t) {
                const n = (nc + "aTextSize").trim();
                e.properties.aTextSize = e.properties[n] || new t.constructor(t);
            }
            if (n) {
                const t = (nc + "aTextDx").trim();
                e.properties.aTextDx = e.properties[t] || new n.constructor(n);
            }
            if (i) {
                const t = (nc + "aTextDy").trim();
                e.properties.aTextDy = e.properties[t] || new i.constructor(i);
            }
            if (r) {
                const t = (nc + "aPitchAlign").trim();
                e.properties.aPitchAlign = e.properties[t] || new r.constructor(r);
            }
            if (o) {
                const t = (nc + "aRotationAlign").trim();
                e.properties.aRotationAlign = e.properties[t] || new o.constructor(o);
            }
            if (s) {
                const t = (nc + "aRotation").trim();
                e.properties.aRotation = e.properties[t] || new s.constructor(s);
            }
            if (c) {
                const t = (nc + "aOverlap").trim();
                e.properties.aOverlap = e.properties[t] || new c.constructor(c);
            }
            if (h) {
                const t = (nc + "aAltitude").trim();
                e.properties.aAltitude = e.properties[t] || new h.constructor(h);
            }
        }
        const d = Ic(t, h, !1), f = {
            flipY: 0,
            tileResolution: e.properties.tileResolution,
            tileRatio: e.properties.tileRatio,
            texture: d,
            texSize: [ h.width, h.height ]
        };
        Fh(e, f, o);
        let p = !1;
        o.textOpacity < 1 && (p = !0), e.properties.memorySize = e.getMemorySize(), e.generateBuffers(t, {
            excludeElementsInVAO: !0
        });
        const m = new n.reshader.Material(f, Ih), y = new n.reshader.Mesh(e, m, {
            disableVAO: !0,
            transparent: p,
            castShadow: !1,
            picking: !0
        });
        if (y.setLocalTransform(i), f.isHalo && (y.properties.isHalo = !0), a && y.setDefines({
            ENABLE_COLLISION: 1
        }), c.push(y), f.isHalo) {
            const t = {
                flipY: 0,
                tileResolution: e.properties.tileResolution,
                tileRatio: e.properties.tileRatio,
                texture: d,
                texSize: [ h.width, h.height ],
                isHalo: 0
            };
            Fh(e, t, o);
            const r = new n.reshader.Material(t, Ih), s = new n.reshader.Mesh(e, r, {
                disableVAO: !0,
                transparent: p,
                castShadow: !1,
                picking: !0
            });
            Object.defineProperty(s.properties, "textSize", {
                enumerable: !0,
                get: function() {
                    return t.textSize;
                }
            }), a && s.setDefines({
                ENABLE_COLLISION: 1
            }), s.setLocalTransform(i), c.push(s);
        }
        return c.forEach(t => {
            const n = t.defines || {};
            e.data.aTextFill && (n.HAS_TEXT_FILL = 1), e.data.aTextSize && (n.HAS_TEXT_SIZE = 1), 
            e.data.aColorOpacity && (n.HAS_OPACITY = 1), e.data.aTextHaloFill && t.material.uniforms.isHalo && (n.HAS_TEXT_HALO_FILL = 1), 
            e.data.aTextHaloRadius && t.material.uniforms.isHalo && (n.HAS_TEXT_HALO_RADIUS = 1), 
            e.data.aTextHaloOpacity && t.material.uniforms.isHalo && (n.HAS_TEXT_HALO_OPACITY = 1), 
            e.data.aTextDx && (n.HAS_TEXT_DX = 1), e.data.aTextDy && (n.HAS_TEXT_DY = 1), e.data.aPitchAlign && (n.HAS_PITCH_ALIGN = 1), 
            e.data.aRotationAlign && (n.HAS_ROTATION_ALIGN = 1), e.data.aRotation && (n.HAS_ROTATION = 1), 
            e.data.aAltitude && (n.HAS_ALTITUDE = 1), e.properties.aOffset && e.properties.aShape && e.properties.aOffset.length !== e.properties.aShape.length && (n.HAS_OFFSET_Z = 1), 
            t.setDefines(n), t.properties.symbolIndex = e.properties.symbolIndex;
        }), c;
    }
    function zh(t, e, n) {
        const i = this.getSymbol(t.properties.symbolIndex), r = "line" === t.properties.textPlacement && !Ku(i), {aPosition: o, aShape: s} = t.data, a = o.length / t.desc.positionSize;
        if (t.properties.aPickingId = t.data.aPickingId, t.properties.aCount = t.data.aCount, 
        delete t.data.aCount, (e || r) && (t.properties.aAnchor = o, t.properties.aShape = s), 
        t.properties.visElemts || (t.properties.elements = t.elements, t.properties.visElemts = new t.elements.constructor(t.elements.length)), 
        r) {
            const {aVertical: e, aSegment: n, aGlyphOffset: i, aPitchRotation: r} = t.data, o = !!r;
            t.properties.aGlyphOffset = i, t.properties.aPitchRotation = r, t.properties.aSegment = n, 
            t.properties.aVertical = e, delete t.data.aSegment, delete t.data.aVertical, delete t.data.aGlyphOffset, 
            delete t.data.aPitchRotation;
            const a = s.length / 2 * (o ? 3 : 2);
            t.data.aOffset = {
                usage: "dynamic",
                data: new Int16Array(a)
            }, t.properties.aOffset = new Int16Array(a);
        }
        if (e) {
            t.data.aOpacity = {
                usage: "dynamic",
                data: new Uint8Array(a)
            }, t.properties.aOpacity = new Uint8Array(a), n && (t.properties.aOpacity.fill(255, 0), 
            t.data.aOpacity.data.fill(255, 0));
            const {aTextHaloRadius: e} = t.data;
            if (e && !t.properties.aTextHaloRadius) {
                const n = (nc + "aTextHaloRadius").trim();
                t.properties.aTextHaloRadius = t.properties[n] || new e.constructor(e);
            }
        }
    }
    function Fh(t, e, n) {
        void 0 === e.isHalo && (e.isHalo = 1), Gu(e, "textOpacity", n, "textOpacity", Ih.textOpacity), 
        Gu(e, "textFill", n, "textFill", Ih.textFill, Ju()), Gu(e, "textHaloFill", n, "textHaloFill", Ih.textHaloFill, Ju()), 
        Gu(e, "textHaloBlur", n, "textHaloBlur", Ih.textHaloBlur), Gu(e, "textHaloRadius", n, "textHaloRadius", Ih.textHaloRadius), 
        Gu(e, "textHaloOpacity", n, "textHaloOpacity", Ih.textHaloOpacity), Gu(e, "textPerspectiveRatio", n, "textPerspectiveRatio", Ih.textPerspectiveRatio, e => "line" === t.properties.textPlacement ? 1 : e), 
        Gu(e, "rotateWithMap", n, "textRotationAlignment", Ih.textRotationAlignment, t => +("map" === t)), 
        Gu(e, "pitchWithMap", n, "textPitchAlignment", Ih.textPitchAlignment, t => +("map" === t)), 
        Gu(e, "textSize", n, "textSize", Ih.textSize), Gu(e, "textDx", n, "textDx", Ih.textDx), 
        Gu(e, "textDy", n, "textDy", Ih.textDy), Gu(e, "textRotation", n, "textRotation", Ih.textRotation, t => t * Math.PI / 180);
    }
    function Oh(t, e) {
        const i = [];
        return {
            uniforms: [ {
                name: "projViewModelMatrix",
                type: "function",
                fn: function(t, e) {
                    return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix);
                }
            }, {
                name: "zoomScale",
                type: "function",
                fn: function(t, e) {
                    return e.tileResolution / e.resolution;
                }
            } ],
            extraCommandProps: {
                viewport: {
                    x: 0,
                    y: 0,
                    width: () => t ? t.width : 1,
                    height: () => t ? t.height : 1
                },
                stencil: {
                    enable: !1,
                    mask: 255,
                    func: {
                        cmp: "<",
                        ref: (t, e) => 2 * e.level + (e.isHalo || 0) + 1,
                        mask: 255
                    },
                    op: {
                        fail: "keep",
                        zfail: "keep",
                        zpass: "replace"
                    }
                },
                blend: {
                    enable: !0,
                    func: {
                        src: "one",
                        dst: "one minus src alpha"
                    },
                    equation: "add"
                },
                depth: {
                    enable: !0,
                    range: e.depthRange || [ 0, 1 ],
                    func: e.depthFunc || "always",
                    mask: !1
                },
                polygonOffset: {
                    enable: !0,
                    offset: this.getPolygonOffset()
                }
            }
        };
    }
    function Ch(t, e) {
        const n = x(e.textFill), i = x(e.textSize), r = x(e.textHaloFill), o = x(e.textHaloRadius), s = x(e.textHaloOpacity), a = x(e.textDx), l = x(e.textDy), u = x(e.textOpacity), c = w(e.textPitchAlignment), h = w(e.textRotationAlignment), d = x(e.textRotation), f = w(e.textAllowOverlapFn), p = w(e.textIgnorePlacement), m = {}, y = new Int16Array(1), g = new Uint16Array(1);
        return [ {
            attrName: "aTextFill",
            symbolName: "textFill",
            define: "HAS_TEXT_FILL",
            type: Uint8Array,
            width: 4,
            evaluate: (e, i) => {
                let r = n(t.getZoom(), e);
                return v(r) && (r = this.evaluateInFnTypeConfig(r, i, t, e, !0)), Array.isArray(r) || (r = m[r] = m[r] || Pt(r).unitArray()), 
                r = Bu(r), r;
            }
        }, {
            attrName: "aTextSize",
            symbolName: "textSize",
            define: "HAS_TEXT_SIZE",
            type: Uint8Array,
            width: 1,
            evaluate: (e, n) => {
                let r = i(t.getZoom(), e) || Ih.textSize;
                return v(r) && (r = this.evaluateInFnTypeConfig(r, n, t, e)), y[0] = r, y[0];
            }
        }, {
            attrName: "aTextHaloFill",
            symbolName: "textHaloFill",
            define: "HAS_TEXT_HALO_FILL",
            type: Uint8Array,
            width: 4,
            evaluate: e => {
                let n = r(t.getZoom(), e);
                return Array.isArray(n) || (n = m[n] = m[n] || Pt(n).unitArray()), n = Bu(n), n;
            }
        }, {
            attrName: "aTextHaloRadius",
            symbolName: "textHaloRadius",
            define: "HAS_TEXT_HALO_RADIUS",
            type: Uint8Array,
            width: 1,
            evaluate: e => {
                const n = o(t.getZoom(), e);
                return y[0] = n, y[0];
            }
        }, {
            attrName: "aTextHaloOpacity",
            symbolName: "textHaloOpacity",
            define: "HAS_TEXT_HALO_OPACITY",
            type: Uint8Array,
            width: 1,
            evaluate: e => {
                const n = s(t.getZoom(), e);
                return y[0] = n, y[0];
            }
        }, {
            attrName: "aTextDx",
            symbolName: "textDx",
            define: "HAS_TEXT_DX",
            type: Uint8Array,
            width: 1,
            evaluate: e => {
                const n = a(t.getZoom(), e);
                return y[0] = n, y[0];
            }
        }, {
            attrName: "aTextDy",
            symbolName: "textDy",
            define: "HAS_TEXT_DY",
            type: Uint8Array,
            width: 1,
            evaluate: e => {
                const n = l(t.getZoom(), e);
                return y[0] = n, y[0];
            }
        }, {
            attrName: "aColorOpacity",
            symbolName: "textOpacity",
            define: "HAS_OPACITY",
            type: Uint8Array,
            width: 1,
            evaluate: (e, n) => {
                let i = u(t.getZoom(), e);
                return v(i) && (i = this.evaluateInFnTypeConfig(i, n, t, e)), y[0] = 255 * i, y[0];
            }
        }, {
            attrName: "aPitchAlign",
            symbolName: "textPitchAlignment",
            type: Uint8Array,
            width: 1,
            define: "HAS_PITCH_ALIGN",
            evaluate: e => +("map" === c(t.getZoom(), e))
        }, {
            attrName: "aRotationAlign",
            symbolName: "textRotationAlignment",
            type: Uint8Array,
            width: 1,
            define: "HAS_ROTATION_ALIGN",
            evaluate: e => +("map" === h(t.getZoom(), e))
        }, {
            attrName: "aRotation",
            symbolName: "textRotation",
            type: Uint16Array,
            width: 1,
            define: "HAS_ROTATION",
            evaluate: e => {
                const n = qu(d(t.getZoom(), e), 0, 360) * Math.PI / 180;
                return g[0] = 9362 * n, g[0];
            }
        }, {
            attrName: "aOverlap",
            symbolName: "textAllowOverlap",
            type: Uint8Array,
            width: 1,
            evaluate: n => {
                let i = f(t.getZoom(), n) || 0, r = (p ? p(t.getZoom(), n) : e.textIgnorePlacement) || 0;
                return i = 1 << 3 + 4 * i, r = (p ? 2 : 0) + r, i + r;
            }
        }, {
            attrName: "aOverlap",
            symbolName: "textIgnorePlacement",
            type: Uint8Array,
            width: 1,
            evaluate: n => {
                let i = (f ? f(t.getZoom(), n) : e.textAllowOverlap) || 0, r = p(t.getZoom(), n) || 0;
                return i = (f ? 8 : 0) + 4 * i, r = 1 << 1 + r, i + r;
            }
        } ];
    }
    const Eh = [], Rh = [], Nh = [], Dh = [];
    function Lh(t, e, n, i, r, o, s) {
        t = 1 === t ? 1 : 0;
        const a = this.getMap(), l = e.geometry.properties, u = this.getSymbol(l.symbolIndex), c = "line" === l.textPlacement && !Ku(u), {aTextSize: h, aTextHaloRadius: d, aShape: f} = l;
        let p = h ? h[n[r]] : e.properties.textSize;
        null == p && (p = Ih.textSize);
        const m = d ? d[n[r]] : e.properties.textHaloRadius, y = Ph(Nh, e, n[r]), g = Qc(Dh, y, s, a.width, a.height), b = i, {boxes: v, collision: x} = this.os(e, r);
        let w = 0;
        if (c || 1 === e.material.uniforms.rotateWithMap || u.textRotation) {
            let i = 0;
            for (let o = r; o < r + 6 * b; o += 6) {
                const r = v[w] = v[w] || [];
                w++;
                const l = Mh.call(this, r, y, g, e, p, m, n[o], s, a);
                if (!t) {
                    const e = this.isCollides(l);
                    1 === e ? t = 1 : -1 === e && i++;
                }
            }
            i === b && (t = -1);
        } else {
            let i = n[r], l = f[2 * i + 1];
            for (let u = r; u < o; u += 6) {
                const r = f[2 * n[u] + 1];
                if (l !== r || u === o - 6) {
                    const c = n[u === o - 6 ? u : u - 6], h = Mh.call(this, Eh, y, g, e, p, m, i, s, a), d = Mh.call(this, Rh, y, g, e, p, m, c, s, a), f = v[w] = v[w] || [];
                    w++, f[0] = Math.min(h[0], d[0]), f[1] = Math.min(h[1], d[1]), f[2] = Math.max(h[2], d[2]), 
                    f[3] = Math.max(h[3], d[3]), i = n[u], l = r, !t && this.isCollides(f) && (t = 1);
                }
            }
        }
        return x.collides = t, x;
    }
    function Hh(t, e) {
        const i = function(t, e) {
            const {aPickingId: n, features: i} = t.geometry.properties, r = n[e];
            return (i && i[r] && i[r].feature).label;
        }(t, e);
        return i ? function(t, e, i) {
            if (!i) return null;
            const r = t.localTransform, o = Ph(Uh, t, e);
            n.vec4.set(qh, o[0], o[1], o[2], 1);
            const s = n.vec4.transformMat4(qh, qh, r);
            let a = 0;
            for (let t = 0; t < i.length; t++) a += i.charCodeAt(t);
            return [ Math.floor(s[0]), Math.floor(s[1]), Math.floor(s[2]), a ];
        }(t, e, i) : null;
    }
    const Uh = [], qh = [];
    var Vh = "#define SHADER_NAME TEXT\n#define RAD 0.0174532925\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\nattribute vec2 aShape;\nattribute vec2 aTexCoord;\n#ifdef ENABLE_COLLISION\nattribute float aOpacity;\n#endif\n#ifdef HAS_OPACITY\nattribute float aColorOpacity;\n#endif\n#ifdef HAS_TEXT_SIZE\nattribute float aTextSize;\n#else\nuniform float textSize;\n#endif\n#ifdef HAS_TEXT_DX\nattribute float aTextDx;\n#else\nuniform float textDx;\n#endif\n#ifdef HAS_TEXT_DY\nattribute float aTextDy;\n#else\nuniform float textDy;\n#endif\n#if defined(HAS_PITCH_ALIGN)\nattribute float aPitchAlign;\n#else\nuniform float pitchWithMap;\n#endif\n#if defined(HAS_ROTATION_ALIGN)\nattribute float aRotationAlign;\n#else\nuniform float rotateWithMap;\n#endif\nuniform float flipY;\n#if defined(HAS_ROTATION)\nattribute float aRotation;\n#else\nuniform float textRotation;\n#endif\nuniform float cameraToCenterDistance;\nuniform mat4 positionMatrix;\nuniform mat4 projViewModelMatrix;\nuniform float textPerspectiveRatio;\nuniform vec2 texSize;\nuniform vec2 canvasSize;\nuniform float glyphSize;\nuniform float mapPitch;\nuniform float mapRotation;\nuniform float zoomScale;\nuniform float tileRatio;\nuniform float layerScale;\nuniform float isRenderingTerrain;\n#ifndef PICKING_MODE\nvarying vec2 vTexCoord;\nvarying float vGammaScale;\nvarying float vSize;\nvarying float vOpacity;\n#ifdef HAS_TEXT_FILL\nattribute vec4 aTextFill;\nvarying vec4 vTextFill;\n#endif\n#ifdef HAS_TEXT_HALO_FILL\nattribute vec4 aTextHaloFill;\nvarying vec4 vTextHaloFill;\n#endif\n#ifdef HAS_TEXT_HALO_RADIUS\nattribute float aTextHaloRadius;\nvarying float vTextHaloRadius;\n#endif\n#ifdef HAS_TEXT_HALO_OPACITY\nattribute float aTextHaloOpacity;\nvarying float vTextHaloOpacity;\n#endif\n#include <highlight_vert>\n#else\n#include <fbo_picking_vert>\n#endif\n#include <vt_position_vert>\nvoid main() {\n  vec3 c = unpackVTPosition();\n#ifdef HAS_TEXT_SIZE\nfloat d = aTextSize * layerScale;\n#else\nfloat d = textSize * layerScale;\n#endif\n#ifdef HAS_TEXT_DX\nfloat e = aTextDx;\n#else\nfloat e = textDx;\n#endif\n#ifdef HAS_TEXT_DY\nfloat f = aTextDy;\n#else\nfloat f = textDy;\n#endif\n#if defined(HAS_PITCH_ALIGN)\nfloat h = aPitchAlign;\n#else\nfloat h = pitchWithMap;\n#endif\n#if defined(HAS_ROTATION_ALIGN)\nfloat i = aRotationAlign;\n#else\nfloat i = rotateWithMap;\n#endif\nvec2 j = aShape / 10.0;\n  if(h == 1. && flipY == .0) {\n    j = j * vec2(1., -1.);\n  }\n  vec2 k = aTexCoord;\n  gl_Position = projViewModelMatrix * positionMatrix * vec4(c, 1.);\n  float l = gl_Position.w;\n  float m;\n  if(isRenderingTerrain == 1.) {\n    m = 1.;\n  } else {\n    float n = (1. - cameraToCenterDistance / l) * textPerspectiveRatio;\n    m = clamp(.5 + .5 * (1. - n), .0, 4.);\n  }\n#ifdef HAS_ROTATION\nfloat o = -aRotation / 9362. - mapRotation * i;\n#else\nfloat o = -textRotation - mapRotation * i;\n#endif\nif(h == 1.) {\n    \n#ifdef REVERSE_MAP_ROTATION_ON_PITCH\no += mapRotation;\n#else\no -= mapRotation;\n#endif\n  }\n  float u = sin(o);\n  float v = cos(o);\n  mat2 A = mat2(v, -1. * u, u, v);\n  j = A * (j / glyphSize * d);\n  float B;\n  if(isRenderingTerrain == 1.) {\n    B = 1.;\n  } else {\n    B = l / cameraToCenterDistance;\n  }\n  if(h == .0) {\n    vec2 C = j * 2. / canvasSize;\n    gl_Position.xy += C * m * l;\n  } else {\n    float D;\n    if(isRenderingTerrain == 1.) {\n      D = tileRatio;\n    } else {\n      D = tileRatio / zoomScale * B * m;\n    }\n    vec2 C = j;\n    gl_Position = projViewModelMatrix * positionMatrix * vec4(c + vec3(C, .0) * D, 1.);\n  }\n  gl_Position.xy += vec2(e, -f) * 2. / canvasSize * l;\n#ifndef PICKING_MODE\nif(h == .0) {\n    vGammaScale = mix(1., B, textPerspectiveRatio);\n  } else {\n    vGammaScale = B + mapPitch / 4.;\n  }\n  vTexCoord = k / texSize;\n  vGammaScale = clamp(vGammaScale, .0, 1.);\n  vSize = d;\n#ifdef ENABLE_COLLISION\nvOpacity = aOpacity / 255.;\n#else\nvOpacity = 1.;\n#endif\n#ifdef HAS_OPACITY\nvOpacity *= aColorOpacity / 255.;\n#endif\n#ifdef HAS_TEXT_FILL\nvTextFill = aTextFill / 255.;\n#endif\n#ifdef HAS_TEXT_HALO_FILL\nvTextHaloFill = aTextHaloFill / 255.;\n#endif\n#ifdef HAS_TEXT_HALO_RADIUS\nvTextHaloRadius = aTextHaloRadius;\n#endif\n#ifdef HAS_TEXT_HALO_OPACITY\nvTextHaloOpacity = aTextHaloOpacity;\n#endif\nhighlight_setVarying();\n#else\n#ifdef ENABLE_COLLISION\nbool E = aOpacity == 255.;\n#else\nbool E = true;\n#endif\nfbo_picking_setData(gl_Position.w, E);\n#endif\n}", $h = "#define SHADER_NAME TEXT\n#define HAS_HIGHLIGHT_COLOR_POINT 1\n#define SDF_PX 8.0\n#define DEVICE_PIXEL_RATIO 1.0\n#define EDGE_GAMMA 0.105 / DEVICE_PIXEL_RATIO\nprecision mediump float;\nuniform sampler2D texture;\nuniform float textOpacity;\nuniform highp float gammaScale;\nuniform int isHalo;\nuniform highp float textHaloBlur;\n#ifdef HAS_TEXT_HALO_OPACITY\nvarying float vTextHaloOpacity;\n#else\nuniform float textHaloOpacity;\n#endif\nvarying vec2 vTexCoord;\nvarying float vSize;\nvarying float vGammaScale;\nvarying float vOpacity;\n#ifdef HAS_TEXT_FILL\nvarying vec4 vTextFill;\n#else\nuniform vec4 textFill;\n#endif\n#ifdef HAS_TEXT_HALO_FILL\nvarying vec4 vTextHaloFill;\n#else\nuniform vec4 textHaloFill;\n#endif\n#ifdef HAS_TEXT_HALO_RADIUS\nvarying float vTextHaloRadius;\n#else\nuniform highp float textHaloRadius;\n#endif\n#include <highlight_frag>\nvoid main() {\n  \n#ifdef HAS_TEXT_FILL\nvec4 c = vTextFill;\n#else\nvec4 c = textFill;\n#endif\nfloat d = vSize / 24.;\n  lowp vec4 e = c;\n  highp float f = EDGE_GAMMA / (d * gammaScale);\n  lowp float h = 185. / 256.;\n  if(isHalo == 1) {\n    \n#ifdef HAS_TEXT_HALO_FILL\nvec4 i = vTextHaloFill;\n#else\nvec4 i = textHaloFill;\n#endif\n#ifdef HAS_TEXT_HALO_RADIUS\nfloat j = vTextHaloRadius;\n#else\nfloat j = textHaloRadius;\n#endif\ne = i;\n    f = (textHaloBlur * 1.19 / SDF_PX + EDGE_GAMMA) / (d * gammaScale);\n    h = (6. - j / d) / SDF_PX;\n#ifdef HAS_TEXT_HALO_OPACITY\nfloat k = vTextHaloOpacity / 255.;\n#else\nfloat k = textHaloOpacity;\n#endif\ne *= k * 1.25;\n  }\n  float l = texture2D(texture, vTexCoord).a;\n  highp float m = f * vGammaScale * .7;\n  float n = clamp(smoothstep(h - m, h + m, l), .0, 1.);\n  gl_FragColor = e * (n * textOpacity * vOpacity);\n  gl_FragColor = highlight_blendColor(gl_FragColor);\n}";
    const Gh = new Uint16Array(1), Wh = new Int8Array(1);
    function Bh(t, e, n) {
        ic(t, e, n), function(t) {
            const {aMarkerWidth: e, aMarkerHeight: n, aMarkerDx: i, aMarkerDy: r, aPitchAlign: o, aRotationAlign: s, aRotation: a, aOverlap: l} = t.data;
            if (e) {
                const n = (nc + "aMarkerWidth").trim();
                t.properties.aMarkerWidth = t.properties[n] || new e.constructor(e);
            }
            if (n) {
                const e = (nc + "aMarkerHeight").trim();
                t.properties.aMarkerHeight = t.properties[e] || new n.constructor(n);
            }
            if (i) {
                const e = (nc + "aMarkerDx").trim();
                t.properties.aMarkerDx = t.properties[e] || new i.constructor(i);
            }
            if (r) {
                const e = (nc + "aMarkerDy").trim();
                t.properties.aMarkerDy = t.properties[e] || new r.constructor(r);
            }
            if (o) {
                const e = (nc + "aPitchAlign").trim();
                t.properties.aPitchAlign = t.properties[e] || new o.constructor(o);
            }
            if (s) {
                const e = (nc + "aRotationAlign").trim();
                t.properties.aRotationAlign = t.properties[e] || new s.constructor(s);
            }
            if (a) {
                const e = (nc + "aRotation").trim();
                t.properties.aRotation = t.properties[e] || new a.constructor(a);
            }
            if (l) {
                const e = (nc + "aOverlap").trim();
                t.properties.aOverlap = t.properties[e] || new l.constructor(l);
            }
        }(t);
    }
    function Jh(t, e) {
        const n = x(e.markerWidth), i = x(e.markerHeight), r = x(e.markerDx), o = x(e.markerDy), s = x(e.markerOpacity), a = x(e.markerTextFit), l = w(e.markerPitchAlignment), u = w(e.markerRotationAlignment), c = x(e.markerRotation), h = w(e.markerAllowOverlapFn), d = w(e.markerIgnorePlacement), f = new Int16Array(1), p = new Uint16Array(1);
        return [ {
            attrName: "aMarkerWidth",
            symbolName: "markerWidth",
            type: Uint8Array,
            width: 1,
            define: "HAS_MARKER_WIDTH",
            evaluate: (i, r, o, s) => {
                const l = o[s], u = e.markerTextFit, c = a ? a(t.getZoom(), i) : u;
                if ("both" === c || "width" === c) return l;
                let h = n(t.getZoom(), i);
                return v(h) && (h = this.evaluateInFnTypeConfig(h, r, t, i)), f[0] = h, f[0];
            }
        }, {
            attrName: "aMarkerHeight",
            symbolName: "markerHeight",
            type: Uint8Array,
            width: 1,
            define: "HAS_MARKER_HEIGHT",
            evaluate: (n, r, o, s) => {
                const l = o[s], u = e.markerTextFit, c = a ? a(t.getZoom(), n) : u;
                if ("both" === c || "height" === c) return l;
                let h = i(t.getZoom(), n);
                return v(h) && (h = this.evaluateInFnTypeConfig(h, r, t, n)), f[0] = h, f[0];
            }
        }, {
            attrName: "aMarkerDx",
            symbolName: "markerDx",
            type: Uint8Array,
            width: 1,
            define: "HAS_MARKER_DX",
            evaluate: (e, n) => {
                let i = r(t.getZoom(), e);
                return v(i) && (i = this.evaluateInFnTypeConfig(i, n, t, e)), f[0] = i, f[0];
            }
        }, {
            attrName: "aMarkerDy",
            symbolName: "markerDy",
            type: Uint8Array,
            width: 1,
            define: "HAS_MARKER_DY",
            evaluate: (e, n) => {
                let i = o(t.getZoom(), e);
                return v(i) && (i = this.evaluateInFnTypeConfig(i, n, t, e)), f[0] = i, f[0];
            }
        }, {
            attrName: "aColorOpacity",
            symbolName: "markerOpacity",
            type: Uint8Array,
            width: 1,
            define: "HAS_OPACITY",
            evaluate: (e, n) => {
                let i = s(t.getZoom(), e);
                return v(i) && (i = this.evaluateInFnTypeConfig(i, n, t, e)), f[0] = 255 * i, f[0];
            }
        }, {
            attrName: "aPitchAlign",
            symbolName: "markerPitchAlignment",
            type: Uint8Array,
            width: 1,
            define: "HAS_PITCH_ALIGN",
            evaluate: e => +("map" === l(t.getZoom(), e))
        }, {
            attrName: "aRotationAlign",
            symbolName: "markerRotationAlignment",
            type: Uint8Array,
            width: 1,
            define: "HAS_ROTATION_ALIGN",
            evaluate: e => +("map" === u(t.getZoom(), e))
        }, {
            attrName: "aRotation",
            symbolName: "markerRotation",
            type: Uint16Array,
            width: 1,
            define: "HAS_ROTATION",
            evaluate: e => {
                const n = qu(c(t.getZoom(), e), 0, 360) * Math.PI / 180;
                return p[0] = 9362 * n, p[0];
            }
        }, {
            attrName: "aOverlap",
            symbolName: "markerAllowOverlap",
            type: Uint8Array,
            width: 1,
            evaluate: n => {
                let i = h(t.getZoom(), n) || 0, r = (d ? d(t.getZoom(), n) : e.markerIgnorePlacement) || 0;
                return i = 1 << 3 + 4 * i, r = (d ? 2 : 0) + r, i + r;
            }
        }, {
            attrName: "aOverlap",
            symbolName: "markerIgnorePlacement",
            type: Uint8Array,
            width: 1,
            evaluate: n => {
                let i = (h ? h(t.getZoom(), n) : e.markerAllowOverlap) || 0, r = d(t.getZoom(), n) || 0;
                return i = (h ? 8 : 0) + 4 * i, r = 2 + r, i + r;
            }
        } ];
    }
    function Xh(t, e, n, i) {
        if (!n || !i || "none" === i) return;
        const r = function(t, e, n) {
            let i = t.properties.textFitFn;
            v(n) && (i = t.properties.textFitFn = w(n));
            const r = "none" !== n, o = [], s = t.getElements(), a = t.data.aPickingId;
            let l, u, c;
            e && (l = e.getElements(), u = e.data.aPickingId, c = e.data.aCount);
            const h = t.properties.features;
            let d;
            if (e) {
                let t = l[0];
                d = {
                    pickingId: u[t],
                    start: 0,
                    end: 6 * c[t]
                };
            }
            let f = !1, p = !1, m = 0;
            const y = [];
            for (let t = 0; t < s.length; t += 6) {
                const e = s[t], g = a[e];
                if (!f && d) for (;d.pickingId < g && d.end < l.length; ) {
                    const t = d.end, e = l[t];
                    d.start = t, d.end = t + 6 * c[e], d.pickingId = u[e];
                }
                if (!f && d && d.pickingId < g && (f = !0, !r)) {
                    if (!p) return [];
                    for (let e = t; e < s.length; e += 6) o[m++] = [ -1, -1 ];
                    return o;
                }
                const b = h[g] && h[g].feature, v = b && b.properties || {};
                v.$layer = b && b.layer, v.$type = b && b.type;
                const x = i ? i(null, v) : n;
                if (delete v.$layer, delete v.$type, d && g === d.pickingId) {
                    o[m++] = [ d.start, d.end ];
                    const t = d.end, e = l[t];
                    d.start = t, d.end = t + 6 * c[e], d.pickingId = u[e], p = !0;
                } else if (x && "none" !== x) for (let e = t; e < t + 6; e++) y.push(e); else o[m++] = [ -1, -1 ];
            }
            if (y.length) if (y.length === s.length) t.setElements([]); else {
                const e = [];
                let n = 0, i = y[n];
                for (let t = 0; t < s.length; t++) t < i ? e.push(s[t]) : t === i && (n++, i = y[n]);
                t.setElements(new s.constructor(e));
            }
            if (!p) return [];
            return o;
        }(e, n, i);
        if (!e.getElements().length) return;
        if (!r.length) return;
        e.properties.labelIndex = r;
        if (r.length && i && "none" !== i && n) {
            const i = function(t, e) {
                const n = [], i = t.properties.labelIndex, {aShape: r} = e.data;
                let o = !1;
                for (let t = 0; t < i.length; t++) {
                    const [s, a] = i[t];
                    if (-1 === s) n.push(0, 0, 0, 0); else {
                        o = !0;
                        let t = 1 / 0, i = 1 / 0, l = -1 / 0, u = -1 / 0;
                        const c = e.elements;
                        for (let e = s; e < a; e++) {
                            const n = c[e], o = r[2 * n], s = r[2 * n + 1];
                            o < t && (t = o), o > l && (l = o), s < i && (i = s), s > u && (u = s);
                        }
                        n.push(t, i, l, u);
                    }
                }
                if (!o) return [];
                return n;
            }(e, n);
            i.length && (e.properties.labelShape = i, Yh.call(this, t, e, n));
        }
    }
    function Yh(t, e) {
        const n = this.getSymbolDef(e.properties.symbolIndex), i = n.markerTextFit, r = e.properties;
        let o = "both" === i || "width" === i, s = "both" === i || "height" === i;
        if (v(n.markerTextFit)) {
            let t = e.properties.textFitFn;
            t || (t = e.properties.textFitFn = x(n.markerTextFit));
            const {features: i} = e.properties, a = e.properties.elements || e.elements, {aPickingId: l} = e.data, u = [], c = [];
            let h = !0;
            for (let e = 0; e < a.length; e += 6) {
                const n = i[l[a[e]]], r = n && n.feature || {}, o = r.properties || {};
                o.$layer = r.layer, o.$type = r.type;
                let s = t(null, o);
                if (v(s)) {
                    s = (o.textFitFn = o.textFitFn || x(s))(null, o);
                }
                delete o.$layer, delete o.$type, "both" === s ? (u.push(e / 6), c.push(e / 6)) : "width" === s ? (h = !1, 
                u.push(e / 6)) : "height" === s && (h = !1, c.push(e / 6));
            }
            h ? (r.fitIcons = u, o = !0, s = !0) : (u.length && (r.fitWidthIcons = u, o = !0), 
            c.length && (r.fitHeightIcons = c, s = !0));
        }
        r.aPickingId || (r.aPickingId = new e.data.aPickingId.constructor(e.data.aPickingId));
        const {aMarkerWidth: a, aMarkerHeight: l, aPickingId: u} = r, c = u.length;
        if (o) if (a) {
            const t = e.data.aMarkerWidth;
            e.data.aMarkerWidth = new Uint16Array(t), r.aMarkerWidth = new Uint16Array(t);
            const n = (nc + "aMarkerWidth").trim();
            r[n] && (r[n] = r.aMarkerWidth);
        } else {
            const t = this.getSymbol(e.properties.symbolIndex).markerWidth || 0;
            r.aMarkerWidth = new Uint16Array(c), r.aMarkerWidth.fill(t), t && (r.aMarkerWidth.dirty = !0), 
            e.data.aMarkerWidth = new Uint16Array(c);
        }
        if (s) if (l) {
            const t = e.data.aMarkerHeight;
            e.data.aMarkerHeight = new Uint16Array(t), r.aMarkerHeight = new Uint16Array(t);
            const n = (nc + "aMarkerHeight").trim();
            r[n] && (r[n] = r.aMarkerHeight);
        } else {
            const t = this.getSymbol(e.properties.symbolIndex).markerHeight || 0;
            r.aMarkerHeight = new Uint16Array(c), r.aMarkerHeight.fill(t), t && (r.aMarkerHeight.dirty = !0), 
            e.data.aMarkerHeight = new Uint16Array(c);
        }
        const h = this.getSymbolDef(e.properties.textGeo.properties.symbolIndex), d = x(h.textSize);
        Kh.call(this, t, e), (!v(h.textSize) || d.isZoomConstant && d.isFeatureConstant) && (r.isFitConstant = !0);
    }
    const Zh = [ 0, 0, 0, 0 ];
    function Kh(t, e) {
        const n = e.properties.textGeo;
        if (!n) return;
        const i = n.properties, r = e.properties;
        if (r.isFitConstant || !r.labelShape || !r.labelShape.length) return;
        const o = this.getSymbolDef(e.properties.symbolIndex), s = this.getSymbolDef(n.properties.symbolIndex).textSize;
        let a;
        v(s) && (a = i.us ? i.us : i.us = x(s));
        const l = o.markerTextFitPadding || Zh;
        let u;
        v(l) && (u = r.cs ? r.cs : r.cs = w(l));
        const c = t.getZoom(), {fitIcons: h, fitWidthIcons: d, fitHeightIcons: f} = r, {aMarkerWidth: p, aMarkerHeight: m, labelShape: y} = r, g = r.elements || e.elements, {features: b, aPickingId: k} = r, A = (t, e, n, i) => {
            const o = y[4 * e], h = y[4 * e + 1], d = y[4 * e + 2], f = y[4 * e + 3];
            if (!(o || h || d || f)) return;
            const g = k[t], A = b[g] && b[g].feature, _ = A && A.properties || {};
            _.$layer = A && A.layer, _.$type = A && A.type;
            let T = a ? a(c, _) : s;
            if (v(T)) {
                T = (_.textSizeFn = _.textSizeFn || x(T))(c, _);
            }
            T /= 24;
            let S, M, P = u && u(c, _) || l;
            if (v(P)) {
                P = (_.fitPaddingFn = _.fitPaddingFn || w(P))(c, _);
            }
            if (P = P || Zh, P[0] === P[2] && P[1] === P[3] || (S = r.aPadOffsetX, M = r.aPadOffsetY, 
            S || (S = r.aPadOffsetX = new Int8Array(p.length), M = r.aPadOffsetY = new Int8Array(p.length))), 
            delete _.$layer, delete _.$type, p && n) {
                const e = Math.abs((d - o) / 10 * T) + (P[1] + P[3] || 0);
                if (Gh[0] = e, p[t] !== Gh[0] && (Yu(p, Gh[0], t, t + 4), p.dirty = !0), S) {
                    const e = (P[1] + P[3]) / 2 - P[3];
                    Wh[0] = e, S[t] !== Wh[0] && (Yu(S, e, t, t + 4), S.dirty = !0);
                }
            }
            if (m && i) {
                const e = Math.abs((f - h) / 10 * T) + (P[0] + P[2] || 0);
                if (Gh[0] = e, m[t] !== Gh[0] && (Yu(m, Gh[0], t, t + 4), m.dirty = !0), M) {
                    const e = P[0] - (P[0] + P[2]) / 2;
                    Wh[0] = e, M[t] !== Wh[0] && (Yu(M, e, t, t + 4), M.dirty = !0);
                }
            }
        };
        if (h || d || f) {
            if (h) for (let t = 0; t < h.length; t++) {
                const e = h[t];
                A(g[6 * e], e, !0, !0);
            } else if (d || f) {
                if (d) for (let t = 0; t < d.length; t++) {
                    const e = d[t];
                    A(g[6 * e], e, !0, !1);
                }
                if (f) for (let t = 0; t < f.length; t++) {
                    const e = f[t];
                    A(g[6 * e], e, !1, !0);
                }
            }
        } else for (let t = 0; t < g.length; t += 6) {
            const e = t / 6;
            A(g[t], e, !0, !0);
        }
        const {aPadOffsetX: _, aPadOffsetY: T} = r;
        _ && (e.data.aPadOffsetX = _, e.data.aPadOffsetY = T);
    }
    const Qh = function(t) {
        const e = this.layer.getRenderer();
        return !this.ls(t) && e.isForeground(t) && !!t.geometry.properties.iconAtlas && !t.geometry.properties.isEmpty;
    }, td = function(t) {
        const e = this.layer.getRenderer();
        return !(this.ls(t) || e.isForeground(t) || !t.geometry.properties.iconAtlas || t.geometry.properties.isEmpty);
    }, ed = function(t) {
        const e = this.layer.getRenderer();
        return !this.ls(t) && e.isForeground(t) && !!t.geometry.properties.glyphAtlas;
    }, nd = function(t) {
        const e = this.layer.getRenderer();
        return !this.ls(t) && !e.isForeground(t) && !!t.geometry.properties.glyphAtlas;
    }, id = [], rd = {
        colliides: -1
    }, od = [ 2048, 2048 ], sd = n.mat4.identity([]), ad = [];
    class ld extends Jc {
        constructor(t, e, n, i, r, o) {
            super(t, e, n, i, r, o), this.propAllowOverlap = "markerAllowOverlap", this.propIgnorePlacement = "markerIgnorePlacement", 
            this.Dr = {}, this.isLabelCollides = Lh.bind(this), this.hs = Qh.bind(this), this.ds = td.bind(this), 
            this.fs = ed.bind(this), this.ps = nd.bind(this), this.ms = [];
        }
        needToRefreshTerrainTile() {
            for (let t = 0; t < this.symbolDef.length; t++) {
                const e = this.symbolDef[t].markerPitchAlignment;
                if ("map" === e || v(e) || Co.isExpression(e)) return !0;
            }
            return !1;
        }
        isTerrainVector() {
            return this.layer.options.awareOfTerrain && !this.needToRefreshTerrainTile();
        }
        isTerrainSkin() {
            return super.isTerrainSkin() && this.needToRefreshTerrainTile();
        }
        setTextShaderDefines(t) {
            this.ys = t;
        }
        createFnTypeConfig(t, e) {
            return {
                icon: Jh.call(this, t, e),
                text: Ch.call(this, t, e)
            };
        }
        startFrame(...t) {
            return this.ms.length = 0, super.startFrame(...t);
        }
        createGeometry(t, e) {
            return t && t.empty && (t.data = {
                aPosition: new Uint8Array(t.data.aPosition),
                aPickingId: t.data.aPickingId
            }), super.createGeometry(t, e);
        }
        postCreateGeometry(t, e) {
            const {geometry: n, symbolIndex: i} = t, r = this.getSymbolDef(i), o = this.getFnTypeConfig(i);
            if (this.gs(n)) n.properties.iconAtlas ? this.drawDebugAtlas(n.properties.iconAtlas) : n.properties.isEmpty = !0, 
            Bh(n, r, o.icon); else if (this.bs(n) && Ku(r)) {
                const t = e[e.length - 1];
                if (t) {
                    const {geometry: e, symbolIndex: o} = t;
                    if (e && o.index === i.index) {
                        const t = this.getMap(), i = r.markerTextFit;
                        e.properties.textGeo = n, Xh.call(this, t, e, n, i);
                    }
                }
            }
        }
        vs(t) {
            if (!this.layer.options.collision) return;
            const {collideIds: e, elements: n, aCount: i} = t.properties;
            if (!e) return;
            const r = e, o = {};
            if (!n) return void (t.properties.collideBoxIndex = o);
            let s = 0, a = n[0], l = 0, u = r[a], c = 1;
            i && (c = i[n[l]]);
            for (let t = 0; t <= n.length; t += 6) a = n[t], r[a] === u && t !== n.length || (o[u] = [ l, t, (t - l) / (6 * c), s++ ], 
            u = r[a], l = t, i && (c = i[n[l]]));
            t.properties.collideBoxIndex = o;
        }
        createMesh(t, e, i, r) {
            const o = this.isEnableCollision(), s = this.layer, {geometry: a, symbolIndex: l} = t;
            a.properties.symbolIndex = l;
            const u = this.getSymbolDef(l), c = this.getSymbol(l), h = this.getFnTypeConfig(l), d = [];
            if (this.gs(a)) {
                const t = function(t, e, i, r, o, s, a, l, u) {
                    if (e.isDisposed() || 0 === e.data.aPosition.length) return null;
                    const c = e.properties.iconAtlas;
                    if (!c && !e.properties.isEmpty) return null;
                    const h = {
                        flipY: 0,
                        tileResolution: e.properties.tileResolution,
                        tileRatio: e.properties.tileRatio
                    };
                    //!geometry.properties.aAnchor 以避免重复创建collision数据
                                        if ((a || u) && !e.properties.aShape) {
                        const {aPosition: t, aShape: n} = e.data, i = e.data.aPosition.length / e.desc.positionSize, r = new Uint8Array(i);
                        l && r.fill(255, 0), e.data.aOpacity = {
                            usage: "dynamic",
                            data: r
                        }, e.properties.aOpacity = new Uint8Array(i), l && e.properties.aOpacity.fill(255, 0), 
                        e.properties.aAnchor = t, e.properties.aShape = n;
                    }
                    e.properties.visElemts || (e.properties.elements = e.elements, e.properties.visElemts = new e.elements.constructor(e.elements.length)), 
                    Gu(h, "markerOpacity", o, "markerOpacity", 1), Gu(h, "markerPerspectiveRatio", o, "markerPerspectiveRatio", o.markerTextFit ? 0 : 1), 
                    Gu(h, "markerWidth", o, "markerWidth", 15), Gu(h, "markerHeight", o, "markerHeight", 15), 
                    Gu(h, "markerDx", o, "markerDx", 0), Gu(h, "markerDy", o, "markerDy", 0), Gu(h, "markerRotation", o, "markerRotation", 0, t => t * Math.PI / 180), 
                    Gu(h, "pitchWithMap", o, "markerPitchAlignment", 0, t => "map" === t ? 1 : 0), Gu(h, "rotateWithMap", o, "markerRotationAlignment", 0, t => "map" === t ? 1 : 0), 
                    h.iconTex = c ? Ic(t, c, !1) : null, h.texSize = c ? [ c.width, c.height ] : [ 0, 0 ], 
                    e.generateBuffers(t, {
                        excludeElementsInVAO: !0
                    });
                    const d = new n.reshader.Material(h), f = new n.reshader.Mesh(e, d, {
                        disableVAO: !0,
                        transparent: !0,
                        castShadow: !1,
                        picking: !0
                    }), p = {};
                    return a && (p.ENABLE_COLLISION = 1), e.data.aMarkerWidth && (p.HAS_MARKER_WIDTH = 1), 
                    e.data.aMarkerHeight && (p.HAS_MARKER_HEIGHT = 1), e.data.aColorOpacity && (p.HAS_OPACITY = 1), 
                    e.data.aMarkerDx && (p.HAS_MARKER_DX = 1), e.data.aMarkerDy && (p.HAS_MARKER_DY = 1), 
                    e.data.aPitchAlign && (p.HAS_PITCH_ALIGN = 1), e.data.aRotationAlign && (p.HAS_ROTATION_ALIGN = 1), 
                    e.data.aRotation && (p.HAS_ROTATION = 1), e.data.aPadOffsetX && (p.HAS_PAD_OFFSET = 1), 
                    e.data.aAltitude && (p.HAS_ALTITUDE = 1), f.setDefines(p), f.setLocalTransform(i), 
                    f.properties.symbolIndex = e.properties.symbolIndex, f;
                }(this.regl, a, e, 0, c, h.icon, s.options.collision, !o, this.isEnableUniquePlacement());
                t && (t.positionMatrix = this.getAltitudeOffsetMatrix(), delete t.geometry.properties.glyphAtlas, 
                d.push(t));
            } else if (this.bs(a)) {
                const t = jh.call(this, this.regl, a, e, u, c, h.text, s.options.collision, !o, this.isEnableUniquePlacement());
                t.length && (t.forEach(t => {
                    t.positionMatrix = this.getAltitudeOffsetMatrix(), delete t.geometry.properties.iconAtlas;
                }), d.push(...t));
            }
            return "line" === a.properties.markerPlacement && this.xs(a, r), "line" === a.properties.markerPlacement && d.forEach(t => t.properties.isLinePlacement = !0), 
            this.vs(a), d;
        }
        xs(t, e) {
            const {collideIds: n} = t.properties, i = new Uint16Array(n.length);
            if (this.gs(t)) {
                let r = 0;
                for (let t = 0; t < n.length; t += 4) i.fill(r++, t, t + 4);
                t.properties.collideIds = i, t.properties.uniqueCollideIds = tc(i), e.markerCollideMap = {
                    old: n,
                    new: i
                };
            } else if (this.bs(t)) {
                const {collideIds: n, aCount: i} = t.properties;
                if (!i) return;
                if (e.markerCollideMap) {
                    const {markerCollideMap: r} = e;
                    let o = r.new[r.new.length - 1], s = 0, a = n[0], l = e.markerCollideMap.old.indexOf(a), u = i[0];
                    for (let t = 0; t < n.length; ) {
                        const r = n[t];
                        a !== r && (a = r, l = e.markerCollideMap.old.indexOf(a), s = 0);
                        const c = -1 === l ? ++o : e.markerCollideMap.new[l + 4 * s], h = t + 4 * u;
                        n.fill(c, t, h), t += 4 * u, s++, h < n.length && (u = i[h]);
                    }
                    t.properties.uniqueCollideIds = tc(n);
                } else {
                    let e = 0, r = i[0];
                    for (let t = 0; t < n.length; ) {
                        const o = t + 4 * r;
                        n.fill(e++, t, o), t += 4 * r, o < n.length && (r = i[o]);
                    }
                    t.properties.uniqueCollideIds = tc(n);
                }
            }
        }
        addMesh(t) {
            if (this.Vo() && t.length > 0) {
                const e = new Uc(t);
                e.properties.uniqueCollideIds = t[0].geometry.properties.uniqueCollideIds, e.properties.meshKey = t[0].properties.meshKey, 
                e.properties.level = t[0].properties.level, this.ms.push(e);
            }
            for (let e = 0; e < t.length; e++) {
                if (!this.isMeshIterable(t[e])) continue;
                const n = t[e].geometry, {symbolIndex: i} = n.properties;
                Ku(this.getSymbolDef(i)) && Kh.call(this, this.getMap(), n);
            }
            const e = this.getMap().getZoom();
            for (let n = 0; n < t.length; n++) {
                if (!this.isMeshIterable(t[n])) continue;
                const i = t[n].geometry, {symbolIndex: r} = i.properties, o = this.getSymbolDef(r), s = this.getFnTypeConfig(r);
                ac(this.regl, o, 0 === r.type ? s.icon : s.text, t[n], e);
                const {aMarkerWidth: a, aMarkerHeight: l, aPadOffsetX: u, aPadOffsetY: c} = i.properties;
                a && a.dirty && (i.updateData("aMarkerWidth", a), a.dirty = !1), l && l.dirty && (i.updateData("aMarkerHeight", l), 
                l.dirty = !1), u && u.dirty && (i.updateData("aPadOffsetX", u), u.dirty = !1), c && c.dirty && (i.updateData("aPadOffsetY", c), 
                c.dirty = !1);
            }
            super.addMesh(...arguments);
        }
        updateCollision(t) {
            if (!this.Vo()) return;
            super.updateCollision(t);
            const e = this.scene.getMeshes();
            e && e.length ? (this.ws(t.timestamp), this.ms = [], this.vo()) : this.vo();
        }
        callCurrentTileShader(t, e) {
            this.shader.filter = e.sceneFilter ? [ this.hs, e.sceneFilter ] : this.hs, this.callRenderer(this.shader, t, e), 
            this.ks.filter = e.sceneFilter ? [ this.fs, e.sceneFilter ] : this.fs, this.callRenderer(this.ks, t, e);
        }
        callBackgroundTileShader(t, e) {
            this.shader.filter = e.sceneFilter ? [ this.ds, e.sceneFilter ] : this.ds, this.callRenderer(this.shader, t, e), 
            this.ks.filter = e.sceneFilter ? [ this.ps, e.sceneFilter ] : this.ps, this.callRenderer(this.ks, t, e);
        }
        isMeshIterable(t) {
            return t && t.geometry && !t.geometry.properties.isEmpty && t.material && !t.material.get("isHalo") && this.isMeshVisible(t) && !(this.shouldIgnoreBackground() && !this.layer.getRenderer().isForeground(t));
        }
        ws() {
            if (!this.Vo()) return;
            let t = this.ms;
            t && t.length && this.As(t);
        }
        _s(t, e, n, i) {
            return this.updateBoxCollisionFading(!0, t, e, n, i);
        }
        isEnableUniquePlacement() {
            return this.isEnableCollision() && !0 === this.sceneConfig.uniquePlacement;
        }
        As(t) {
            const e = this.layer.getRenderer();
            t = t.sort(ud);
            for (let n = 0; n < t.length; n++) {
                const i = t[n];
                if (!i || !i.meshes.length) continue;
                let r = !1;
                if (1 === i.meshes.length) r = this.isMeshIterable(i.meshes[0]); else for (let t = 0; t < i.meshes.length; t++) if (this.isMeshIterable(i.meshes[t])) {
                    r = !0;
                    break;
                }
                if (!r) continue;
                const o = e.isForeground(i.meshes[0]);
                if (this.shouldIgnoreBackground() && !o) continue;
                const s = i.properties.meshKey;
                this.startMeshCollision(i), this.Ts(i), this.forEachBox(i, this._s), this.Ss(i), 
                this.endMeshCollision(s);
                for (let t = 0; t < i.meshes.length; t++) this.Ms(i.meshes[t]);
            }
        }
        Ms(t) {
            const e = t && t.geometry && t.geometry.properties.aOpacity;
            e && e.dirty && (t.geometry.updateData("aOpacity", e), e.dirty = !1);
        }
        forEachBox(t, e) {
            const n = t.properties.uniqueCollideIds;
            if (!n) return;
            const i = {
                boxIndex: 0
            }, r = n.length;
            for (let o = 0; o < r; o++) this.Ps(t, n[o], e, i);
        }
        Ps(t, e, i, r) {
            const o = this.getMap(), {collideBoxIndex: s} = t.meshes[0].geometry.properties;
            if (!(s && s[e])) return !1;
            const a = n.mat4.multiply(id, o.projViewMatrix, t.meshes[0].localTransform);
            let l, u = !1;
            const c = t.meshes;
            let h = 0;
            for (let t = 0; t < c.length; t++) {
                if (!this.isMeshIterable(c[t])) continue;
                const {collideBoxIndex: n} = c[t].geometry.properties;
                n[e] && h++;
            }
            if (!h) return !1;
            l = this.ss(h);
            let d = 0;
            for (let t = 0; t < c.length; t++) {
                const n = c[t];
                if (!this.isMeshIterable(n)) continue;
                u = !0;
                const i = c[t].geometry.properties, {elements: r, aCount: o, collideBoxIndex: s} = i, a = s[e];
                if (!a) continue;
                const [h, f, p] = a;
                let m = 1;
                o && (m = o[r[h]]);
                const y = h + 0 * m * 6;
                l[d].mesh = c[t], l[d].start = y, l[d].end = f, l[d].boxCount = i.glyphAtlas ? m : p, 
                l[d].allElements = r, d++;
            }
            if (!u) return !1;
            return i.call(this, t, l, a, r.boxIndex++) && this.Is(t, e), !0;
        }
        Ts(t) {
            const e = t.meshes;
            for (let t = 0; t < e.length; t++) {
                const n = e[t], i = n && n.geometry;
                i && (i.properties.visElemts.count = 0);
            }
        }
        Is(t, e) {
            const n = t.meshes;
            for (let t = 0; t < n.length; t++) {
                const i = n[t];
                if (i.properties.isHalo) continue;
                const r = i && i.geometry;
                if (!r || r.properties.isEmpty) continue;
                const {collideBoxIndex: o, elements: s, visElemts: a} = r.properties, l = o[e];
                if (!l) continue;
                const [u, c] = l;
                let h = a.count;
                for (let t = u; t < c; t++) a[h++] = s[t];
                a.count = h;
            }
        }
        Ss(t) {
            const e = t.meshes;
            for (let t = 0; t < e.length; t++) {
                const n = e[t], i = n && n.geometry;
                if (!i) continue;
                const {visElemts: r} = i.properties;
                i.setElements(r, r.count);
            }
        }
        isBoxCollides(t, e, n, i, r, o) {
            if (this.bs(t.geometry)) return Lh.call(this, 0, t, e, n, i, r, o);
            if (t.geometry.properties.isEmpty) return rd;
            const s = this.getMap(), {boxes: a, collision: l} = this.os(t, i);
            let u = 0, c = 0, h = 0;
            for (let n = i; n < r; n += 6) {
                const i = a[h] = a[h] || [];
                h++;
                const r = vh.call(this, i, t, e[n], o, s);
                if (!u) {
                    const t = this.isCollides(r);
                    1 === t ? u = 1 : -1 === t && c++;
                }
            }
            return c === n && (u = -1), l.collides = u, l;
        }
        deleteMesh(t, e) {
            t && (t instanceof Uc && (t = t.meshes), e && (Array.isArray(t) ? t.forEach(t => {
                t && t.material && delete t.material.uniforms.iconTex;
            }) : t.material && delete t.material.uniforms.iconTex), super.deleteMesh(t, e));
        }
        isBloom(t) {
            const e = t && t.material && !Vu(t.material.get("markerOpacity")), n = this.getSymbol(t.properties.symbolIndex);
            return !!(e ? n.markerBloom : n.textBloom);
        }
        init() {
            const t = this.regl, e = this.canvas;
            this.renderer = new n.reshader.Renderer(t);
            const i = {
                viewport: {
                    x: (t, e) => e.viewport ? e.viewport.x : 0,
                    y: (t, e) => e.viewport ? e.viewport.y : 0,
                    width: (t, n) => n.viewport ? n.viewport.width : e ? e.width : 1,
                    height: (t, n) => n.viewport ? n.viewport.height : e ? e.height : 1
                },
                blend: {
                    enable: !0,
                    func: this.getBlendFunc(),
                    equation: "add"
                },
                depth: {
                    enable: !0,
                    range: () => this.sceneConfig.depthRange || [ 0, 1 ],
                    func: () => this.sceneConfig.depthFunc || "always",
                    mask: !!Vu(this.sceneConfig.depthMask) || this.sceneConfig.depthMask
                },
                polygonOffset: {
                    enable: !0,
                    offset: this.getPolygonOffset()
                }
            };
            this.shader = new n.reshader.MeshShader({
                vert: Zc,
                frag: "#define SHADER_NAME MARKER\n#define HAS_HIGHLIGHT_COLOR_POINT 1\nprecision mediump float;\n#include <gl2_frag>\nuniform sampler2D iconTex;\nuniform lowp float markerOpacity;\nuniform lowp float blendSrcIsOne;\n#include <highlight_frag>\nvarying vec2 vTexCoord;\nvarying float vOpacity;\nvoid main() {\n  vec4 c = texture2D(iconTex, vTexCoord) * markerOpacity * vOpacity;\n  if(c.a < .05) {\n    discard;\n  }\n  glFragColor = c;\n  glFragColor = highlight_blendColor(glFragColor);\n#if __VERSION__ == 100\ngl_FragColor = glFragColor;\n#endif\n}",
                uniforms: [ {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: function(t, e) {
                        return n.mat4.multiply([], e.projViewMatrix, e.modelMatrix);
                    }
                }, {
                    name: "zoomScale",
                    type: "function",
                    fn: function(t, e) {
                        return e.tileResolution / e.resolution;
                    }
                } ],
                extraCommandProps: i
            }), this.shader.version = 300;
            const {uniforms: r, extraCommandProps: o} = Oh.call(this, e, this.sceneConfig), s = this.ys || {};
            if (this.ks = new n.reshader.MeshShader({
                vert: Vh,
                frag: $h,
                uniforms: r,
                extraCommandProps: o,
                defines: s
            }), this.pickingFBO) {
                const t = new n.reshader.FBORayPicking(this.renderer, {
                    vert: "#define PICKING_MODE 1\n" + Zc,
                    uniforms: [ {
                        name: "projViewModelMatrix",
                        type: "function",
                        fn: function(t, e) {
                            return n.mat4.multiply([], e.projViewMatrix, e.modelMatrix);
                        }
                    }, {
                        name: "zoomScale",
                        type: "function",
                        fn: function(t, e) {
                            return e.tileResolution / e.resolution;
                        }
                    } ],
                    extraCommandProps: i
                }, this.pickingFBO, this.getMap());
                t.filter = t => !!t.geometry.properties.iconAtlas;
                const e = new n.reshader.FBORayPicking(this.renderer, {
                    vert: "#define PICKING_MODE 1\n" + Vh,
                    uniforms: r,
                    extraCommandProps: o
                }, this.pickingFBO, this.getMap());
                e.filter = t => !!t.geometry.properties.glyphAtlas, this.picking = [ t, e ];
            }
        }
        getBlendFunc() {
            return {
                src: () => this.sceneConfig.blendSrc || 1,
                dst: () => this.sceneConfig.blendDst || "one minus src alpha"
            };
        }
        getUniformValues(t, e) {
            const i = e && e.isRenderingTerrainSkin, o = this.layer.options.tileSize, s = i ? sd : t.projViewMatrix, a = t.cameraToCenterDistance, l = n.vec2.set(ad, t.width, t.height);
            i && n.vec2.set(l, o, o);
            const u = this.getBlendFunc(), c = r.Util.isFunction(u.src) ? u.src() : u.src;
            return {
                layerScale: this.layer.options.styleScale || 1,
                mapPitch: t.getPitch() * Math.PI / 180,
                mapRotation: t.getBearing() * Math.PI / 180,
                projViewMatrix: s,
                cameraToCenterDistance: a,
                canvasSize: l,
                iconSize: od,
                resolution: t.getResolution(),
                glyphSize: 24,
                gammaScale: 1,
                blendSrcIsOne: +!("one" !== c && 1 !== c),
                viewport: i && e && e.viewport,
                isRenderingTerrain: +!!i
            };
        }
        getUniqueEntryKey(t, e) {
            if (!this.bs(t.geometry)) return null;
            const {elements: n} = t.geometry.properties;
            return Hh(t, n[e]);
        }
        gs(t) {
            const {symbolIndex: e} = t.properties;
            return 0 === e.type;
        }
        bs(t) {
            const {symbolIndex: e} = t.properties;
            return 1 === e.type;
        }
    }
    function ud(t, e) {
        return t.properties.level - e.properties.level || t.properties.meshKey - e.properties.meshKey;
    }
    const cd = [], hd = [], dd = [];
    const fd = new r.Point(0, 0), pd = [];
    function md(t, e, i, r, o) {
        const s = r.getMap(), {res: a, extent: l, extent2d: u} = e.properties.tile, {xmin: c, ymax: h} = u, d = fd.set(c, h), f = r.queryTilePointTerrain(i, d, l, a)[0] || 0;
        if (f) {
            let e = n.vec3.set(pd, i.x, i.y, 0);
            return e[2] += 100 * f, e = Qc(t, e, o, s.width, s.height), e;
        }
        return t[0] = i.x, t[1] = i.y, t;
    }
    const yd = [], gd = [], bd = [];
    function vd(t, e, i, r, o, s, a, l, u, c, h, d, f) {
        const {aGlyphOffset: p, aSegment: m, aTextDx: y, aTextDy: g, symbolIndex: b} = e.geometry.properties, v = this.getSymbol(b), x = y ? y[o] : v.textDx, w = g ? g[o] : v.textDy, k = n.vec2.set(bd, x || 0, w || 0), A = n.vec2.set(yd, p[2 * o], p[2 * o + 1]), _ = n.vec3.set(gd, m[3 * o], m[3 * o + 1], m[3 * o + 2]);
        return function(t, e, n, i, r, o, s, a, l, u, c, h, d, f, p, m, y, g) {
            p || (p = i);
            const b = e.geometry.properties.line, v = o[0] * h, x = d ? v - s : v + s;
            let w = x > 0 ? 1 : -1, k = 0;
            d && (w *= -1, k = Math.PI), w < 0 && (k += Math.PI);
            const A = u + c, _ = Math.abs(x);
            let T = w > 0 ? l : l + 1, S = C.convert(i), M = C.convert(i), P = C.convert(r), I = C.convert(r), j = 0, z = 0;
            for (;j + z <= _; ) {
                if (T += w, T < u || T >= A) return null;
                M.x = S.x, M.y = S.y, I.x = P.x, I.y = P.y, S.x = n[3 * T], S.y = n[3 * T + 1], 
                P.x = b[3 * T], P.y = b[3 * T + 1], j += z, z = M.dist(S) / f;
            }
            const F = (_ - j) / z, O = m && m.getRenderer(), E = O && O.getTerrainHelper();
            if (!g && E) {
                let n = P.sub(I).mult(F).s(I);
                S = md(cd, e, P, m, y), M = md(hd, e, I, m, y), n = md(dd, e, n, m, y);
                const i = k + Math.atan2(S[1] - M[1], S[0] - M[0]);
                return t[0] = (n[0] - p[0]) / f, t[1] = (n[1] - p[1]) / f, t[2] = i, t;
            }
            const R = S.sub(M), N = R.mult(F).s(M);
            N.s(R.P().I().A(a * w));
            const D = k + Math.atan2(S.y - M.y, S.x - M.x);
            return t[0] = (N.x - i[0]) / f, t[1] = (N.y - i[1]) / f, t[2] = D, t;
        }(t, e, r, s, a, A, k[0], k[1], _[0], _[1], _[2], i / 24, u, l, c, h, d, f);
    }
    const xd = [], wd = [];
    function kd(t, e, i, r, o, s, a, l, u, c, h, d) {
        const {aVertical: f} = i.geometry.properties, p = f[s];
        let m, y, g = vd.call(this, xd, i, r, o, s, l, u, c, !1);
        if (!g) return null;
        if (n.vec3.copy(t, g), g = vd.call(this, wd, i, r, o, a, l, u, c, !1), !g) return null;
        if (n.vec3.copy(e, g), d && (n.vec2.transformMat2(xd, xd, d), n.vec2.transformMat2(wd, wd, d)), 
        p) {
            const t = Math.abs(wd[1] - xd[1]), e = Math.abs(wd[0] - xd[0]) * h;
            y = xd[0] > wd[0] ? 1 : 0, t > e ? (m = 1, y = xd[1] < wd[1] ? 0 : 1) : m = 0;
        } else m = 0, y = xd[0] > wd[0] ? 1 : 0;
        return 2 * y + m;
    }
    var Ad = "#define SHADER_NAME TEXT_LINE\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\nattribute vec2 aTexCoord;\n#ifdef HAS_OFFSET_Z\nattribute vec3 aOffset;\nuniform float altitudeScale;\n#else\nattribute vec2 aOffset;\n#endif\n#ifdef ENABLE_COLLISION\nattribute float aOpacity;\n#endif\n#ifdef HAS_OPACITY\nattribute float aColorOpacity;\n#endif\n#ifdef HAS_TEXT_SIZE\nattribute float aTextSize;\n#else\nuniform float textSize;\n#endif\n#ifdef HAS_TEXT_DX\nattribute float aTextDx;\n#else\nuniform float textDx;\n#endif\n#ifdef HAS_TEXT_DY\nattribute float aTextDy;\n#else\nuniform float textDy;\n#endif\n#if defined(HAS_PITCH_ALIGN)\nattribute float aPitchAlign;\n#else\nuniform float pitchWithMap;\n#endif\nuniform float zoomScale;\nuniform float cameraToCenterDistance;\nuniform mat4 projViewModelMatrix;\nuniform float textPerspectiveRatio;\nuniform float mapPitch;\nuniform vec2 texSize;\nuniform vec2 canvasSize;\nuniform float tileRatio;\nuniform float layerScale;\nuniform float isRenderingTerrain;\nuniform float textPitchFilter;\n#ifndef PICKING_MODE\nvarying vec2 vTexCoord;\nvarying float vGammaScale;\nvarying float vSize;\nvarying float vOpacity;\n#ifdef HAS_TEXT_FILL\nattribute vec4 aTextFill;\nvarying vec4 vTextFill;\n#endif\n#ifdef HAS_TEXT_HALO_FILL\nattribute vec4 aTextHaloFill;\nvarying vec4 vTextHaloFill;\n#endif\n#ifdef HAS_TEXT_HALO_RADIUS\nattribute float aTextHaloRadius;\nvarying float vTextHaloRadius;\n#endif\n#ifdef HAS_TEXT_HALO_OPACITY\nattribute float aTextHaloOpacity;\nvarying float vTextHaloOpacity;\n#endif\n#include <highlight_vert>\n#else\n#include <fbo_picking_vert>\n#endif\n#include <vt_position_vert>\nvoid main() {\n  vec3 c = unpackVTPosition();\n#ifdef HAS_TEXT_DX\nfloat d = aTextDx;\n#else\nfloat d = textDx;\n#endif\n#ifdef HAS_TEXT_DY\nfloat e = aTextDy;\n#else\nfloat e = textDy;\n#endif\n#ifdef HAS_TEXT_SIZE\nfloat f = aTextSize * layerScale;\n#else\nfloat f = textSize * layerScale;\n#endif\n#ifdef HAS_PITCH_ALIGN\nfloat h = aPitchAlign;\n#else\nfloat h = pitchWithMap;\n#endif\ngl_Position = projViewModelMatrix * vec4(c, 1.);\n  float i = gl_Position.w;\n  float j = i / cameraToCenterDistance;\n  float k;\n  if(isRenderingTerrain == 1.) {\n    k = 1.;\n  } else {\n    float l = (1. - cameraToCenterDistance / i) * textPerspectiveRatio;\n    k = clamp(.5 + .5 * (1. - l), .0, 4.);\n  }\n#ifdef HAS_OFFSET_Z\nvec3 m = aOffset / 10.0;\n  m[2] /= altitudeScale;\n#else\nvec3 m = vec3(aOffset / 10.0, .0);\n#endif\nvec2 n = aTexCoord;\n  if(h == 1.) {\n    float o;\n    if(isRenderingTerrain == 1.) {\n      o = tileRatio;\n    } else {\n      o = tileRatio / zoomScale * j * k;\n    }\n    m.xy *= o;\n    gl_Position = projViewModelMatrix * vec4(c + m, 1.);\n  } else {\n    gl_Position.xy += m.xy * 2. / canvasSize * k * i;\n  }\n  gl_Position.xy += vec2(d, -e) * 2. / canvasSize * i;\n  if(textPitchFilter > .0) {\n    if(textPitchFilter == 1. && h == .0 || textPitchFilter == 2. && h == 1.) {\n      gl_Position = vec4(-9999., -9999., .0, 1.);\n    }\n  }\n#ifndef PICKING_MODE\nif(h == 1.) {\n    vGammaScale = j + mapPitch / 4.;\n  } else {\n    vGammaScale = mix(1., j, textPerspectiveRatio);\n  }\n  vGammaScale = clamp(vGammaScale, .0, 1.);\n  vTexCoord = n / texSize;\n  vSize = f;\n#ifdef ENABLE_COLLISION\nvOpacity = aOpacity / 255.;\n#else\nvOpacity = 1.;\n#endif\n#ifdef HAS_OPACITY\nvOpacity *= aColorOpacity / 255.;\n#endif\n#ifdef HAS_TEXT_FILL\nvTextFill = aTextFill / 255.;\n#endif\n#ifdef HAS_TEXT_HALO_FILL\nvTextHaloFill = aTextHaloFill / 255.;\n#endif\n#ifdef HAS_TEXT_HALO_RADIUS\nvTextHaloRadius = aTextHaloRadius;\n#endif\n#ifdef HAS_TEXT_HALO_OPACITY\nvTextHaloOpacity = aTextHaloOpacity;\n#endif\nhighlight_setVarying();\n#else\n#ifdef ENABLE_COLLISION\nbool u = aOpacity == 255.;\n#else\nbool u = true;\n#endif\nfbo_picking_setData(gl_Position.w, u);\n#endif\n}";
    const _d = function(t) {
        const e = this.layer.getRenderer();
        return !this.ls(t) && e.isTileNearCamera(t) && "line" !== t.geometry.properties.textPlacement;
    }, Td = function(t) {
        const e = this.layer.getRenderer();
        return !this.ls(t) && !e.isForeground(t) && "line" !== t.geometry.properties.textPlacement;
    }, Sd = function(t) {
        const e = this.layer.getRenderer();
        return !this.ls(t) && e.isTileNearCamera(t) && "line" === t.geometry.properties.textPlacement;
    }, Md = function(t) {
        const e = this.layer.getRenderer(), n = t.properties.tile.z, i = e.getCurrentTileZoom();
        return !this.ls(t) && !e.isForeground(t) && "line" === t.geometry.properties.textPlacement && n < i;
    }, Pd = [ 0, 0, 3 ], Id = [], jd = [], zd = [], Fd = [], Od = [], Cd = [], Ed = [], Rd = [], Nd = [], Dd = [ 1, -1 ], Ld = new Int16Array(3), Hd = [], Ud = [], qd = [], Vd = [], $d = [], Gd = [], Wd = [], Bd = {}, Jd = {}, Xd = {}, Yd = [], Zd = [], Kd = n.mat4.identity([]);
    class Qd extends Jc {
        constructor(t, e, n, i, r, o) {
            super(t, e, n, i, r, o), this.propAllowOverlap = "textAllowOverlap", this.propIgnorePlacement = "textIgnorePlacement", 
            this.colorCache = {}, this.zs = _d.bind(this), this.Fs = Td.bind(this), this.Os = Sd.bind(this), 
            this.Cs = Md.bind(this), this.isLabelCollides = Lh.bind(this), this.Es();
        }
        needToRefreshTerrainTile() {
            for (let t = 0; t < this.symbolDef.length; t++) {
                const e = this.symbolDef[t].textPitchAlignment;
                if ("map" === e || v(e) || Co.isExpression(e)) return !0;
            }
            return !1;
        }
        isTerrainVector() {
            return this.dataConfig.awareOfTerrain && !this.needToRefreshTerrainTile();
        }
        isTerrainSkin() {
            return super.isTerrainSkin() && this.needToRefreshTerrainTile();
        }
        Es() {
            this.Rs = [];
            for (let t = 0; t < this.symbolDef.length; t++) {
                const e = this.symbolDef[t];
                if (Co.isExpression(e.textName)) {
                    const n = Co.createExpression(e.textName, "string");
                    this.Rs[t] = (t, e) => {
                        let i;
                        Bd.zoom = t, Jd.properties = e;
                        try {
                            i = n.evaluateWithoutErrorHandling(Bd, Jd, Xd, null, Yd);
                        } catch (t) {
                            i = null;
                        }
                        return i;
                    };
                } else v(e.textName) && (this.Rs[t] = x(e.textName));
            }
        }
        updateSymbol(...t) {
            const e = super.updateSymbol(...t);
            return this.Es(), e;
        }
        shouldDeleteMeshOnUpdateSymbol(t) {
            if (!Array.isArray(t)) return (0 === t.textHaloRadius || 0 === this.symbolDef[0].textHaloRadius) && t.textHaloRadius !== this.symbolDef[0].textHaloRadius;
            for (let e = 0; e < t.length; e++) if (t[e] && (0 === t[e].textHaloRadius || 0 === this.symbolDef[e].textHaloRadius) && t[e].textHaloRadius !== this.symbolDef[e].textHaloRadius) return !0;
            return !1;
        }
        createFnTypeConfig(t, e) {
            return Ch(t, e);
        }
        isBloom(t) {
            return !!this.getSymbol(t.properties.symbolIndex).textBloom;
        }
        createGeometry(t, e, n) {
            const i = t;
            if (!i.glyphAtlas) return null;
            const r = super.createGeometry(i, e);
            if (!r || !r.geometry) return null;
            const {geometry: o} = r;
            return o.properties.glyphAtlas && this.drawDebugAtlas(o.properties.glyphAtlas), 
            o && i.lineVertex && (o.properties.line = i.lineVertex, o.properties.line.id = n), 
            r;
        }
        createMesh(t, e, {tileVectorTransform: n}) {
            const i = this.isEnableCollision(), r = this.isEnableUniquePlacement(), {geometry: o, symbolIndex: s} = t;
            o.properties.symbolIndex = s;
            const a = this.getSymbol(s), l = this.getSymbolDef(s), u = this.getFnTypeConfig(s), c = jh.call(this, this.regl, o, e, l, a, u, this.layer.options.collision, !i, r);
            if (c.length) {
                "line" === o.properties.textPlacement ? this.Ns = !0 : this.Ds = !0;
            }
            return c.forEach(t => {
                t.positionMatrix = this.getAltitudeOffsetMatrix(), t.properties.tileVectorTransform = n;
            }), c;
        }
        updateCollision(t) {
            super.updateCollision(t);
            const e = this.scene.getMeshes();
            e && e.length ? (this.Ls = {}, this.Hs(t.timestamp), this.vo()) : this.vo();
        }
        callCurrentTileShader(t, e) {
            this.shader.filter = e.sceneFilter ? [ this.zs, e.sceneFilter ] : this.zs, this.callRenderer(this.shader, t, e), 
            this.Us.filter = e.sceneFilter ? [ this.Os, e.sceneFilter ] : this.Os, this.callRenderer(this.Us, t, e);
        }
        callBackgroundTileShader(t, e) {
            this.shader.filter = e.sceneFilter ? [ this.Fs, e.sceneFilter ] : this.Fs, this.callRenderer(this.shader, t, e), 
            this.Us.filter = e.sceneFilter ? [ this.Cs, e.sceneFilter ] : this.Cs, this.callRenderer(this.Us, t, e);
        }
        callRenderer(t, e, n) {
            n && n.isRenderingTerrain && v(this.symbolDef.textPitchAlignment) && (n.isRenderingTerrainSkin ? e.textPitchFilter = 1 : e.textPitchFilter = 2), 
            super.callRenderer(t, e, n);
        }
        Hs() {
            let t = this.scene.getMeshes();
            if (!t || !t.length) return;
            const e = -this.getMap().getBearing() * Math.PI / 180, i = n.mat2.fromRotation(zd, e), r = (t, e, n, i) => {
                const {start: r, end: o, mesh: s, allElements: a} = e[0];
                if (this.updateBoxCollisionFading(!0, s, e, n, i)) {
                    let e = t.count;
                    for (let n = r; n < o; n++) t[e++] = a[n];
                    t.count = e;
                }
            }, o = this.Vo(), s = this.layer.getRenderer();
            t = t.sort(ef);
            for (let e = 0; e < t.length; e++) {
                const n = t[e];
                if (!this.isMeshIterable(n)) continue;
                if (!s.isTileNearCamera(n)) {
                    const {visElemts: t} = n.geometry.properties;
                    t && (t.count = 0), n.geometry.setElements(t, 0);
                    continue;
                }
                const a = n.geometry, l = this.getSymbol(n.properties.symbolIndex);
                n.properties.textHaloRadius = Vu(l.textHaloRadius) ? Ih.textHaloRadius : l.textHaloRadius;
                const u = n.properties.meshKey;
                if ("line" === a.properties.textPlacement) {
                    if (!a.properties.line) continue;
                    o && this.startMeshCollision(n), this.qs(n, i);
                    const {aOffset: t, aOpacity: e} = a.properties;
                    t.dirty && (a.updateData("aOffset", t), t.dirty = !1), e && e.dirty && (a.updateData("aOpacity", e), 
                    e.dirty = !1), o && this.endMeshCollision(u);
                } else if (o) {
                    this.startMeshCollision(n);
                    const {elements: t, aOpacity: e, visElemts: i} = a.properties;
                    i.count = 0, this.forEachBox(n, (t, e, n, o, s) => {
                        r(i, e, n, o);
                    }), e && e.dirty && a.updateData("aOpacity", e);
                    const o = i.count === t.length && a.count === t.length, s = !i.count && !a.count;
                    o || s || a.setElements(i, i.count), this.endMeshCollision(u);
                }
            }
        }
        isMeshIterable(t) {
            return t.isValid() && t.material && !t.material.get("isHalo") && !(this.shouldIgnoreBackground() && !this.layer.getRenderer().isForeground(t));
        }
        isMeshUniquePlaced(t) {
            if (!this.isMeshIterable(t)) return !1;
            return "line" !== this.getSymbol(t.properties.symbolIndex).textPlacement;
        }
        getUniqueEntryKey(t, e) {
            return Hh(t, e);
        }
        qs(t, e) {
            const i = this.getMap(), r = t.geometry, o = r.properties;
            let s = o.line;
            if (!s) return;
            const a = 1 === t.material.uniforms.pitchWithMap, l = o.elements;
            if (!a) {
                const e = n.mat4.multiply(Id, i.projViewMatrix, t.localTransform), r = s.id + "-" + e.join();
                let a;
                this.Ls[r] ? s = this.Ls[r] : (a = o.projectedLine = o.projectedLine || new Array(s.length), 
                s = this.Vs(a, s, e, i.width, i.height), this.Ls[r] = a);
            }
            const u = this.Vo(), c = r.properties.visElemts = r.properties.visElemts || new l.constructor(l.length);
            u && (c.count = 0), this.forEachBox(t, (t, n, i, r) => {
                const {start: o, end: h} = n[0];
                let d = this.$s(t, l, o, h, s, i, a ? e : null, r);
                if (u && (d = this.updateBoxCollisionFading(d, t, n, i, r), d)) {
                    let t = c.count;
                    for (let e = o; e < h; e++) c[t++] = l[e];
                    c.count = t;
                }
            });
            const h = t.geometry.properties.aAltitude;
            h && h.dirty && (r.updateData("aAltitude", h), h.dirty = !1), !u || c.count === l.length && r.count === c.count || r.setElements(c, c.count);
        }
        Vs(t, e, i, r, o) {
            return function(t, e, i, r, o) {
                const s = [];
                for (let a = 0; a < e.length; a += 3) n.vec4.set(s, e[a], e[a + 1], e[a + 2], 1), 
                Qc(s, s, i, r, o), t[a] = s[0], t[a + 1] = s[1], t[a + 2] = e[a + 2];
                return t;
            }(t, e, i, r, o);
        }
        forEachBox(t, e) {
            const i = this.getMap(), r = n.mat4.multiply(Id, i.projViewMatrix, t.properties.tileVectorTransform), {collideIds: o, aCount: s, features: a, elements: l} = t.geometry.properties, u = o;
            if (!u) return;
            const c = this.isEnableUniquePlacement(), h = this.ss(1);
            h[0].allElements = l, h[0].mesh = t;
            let d = 0, f = l[0], p = 0, m = u[f];
            for (let n = 0; n <= l.length; n += 6) if (f = l[n], u[f] !== m || n === l.length) {
                const i = a[m] && a[m].feature;
                if (c && this.isMeshUniquePlaced(t) && i && !i.label) {
                    const e = i.properties || {};
                    e.$layer = i.layer, e.$type = i.type;
                    const {symbolIndex: n} = t.properties, r = n && this.Rs[n.index] ? this.Rs[n.index](t.properties.z, e) : this.getSymbol(t.properties.symbolIndex).textName, o = Jo.resolveText(r, e);
                    delete e.$layer, delete e.$type, i.label = o;
                }
                const o = n, y = s[l[p]];
                for (let n = p; n < o; n += 6 * y) h[0].start = n, h[0].end = n + 6 * y, h[0].boxCount = y, 
                e.call(this, t, h, r, d++);
                m = u[f], p = n;
            }
        }
        $s(t, e, i, r, o, s, a) {
            const l = this.layer.getRenderer(), u = t.material.uniforms, c = 1 === u.pitchWithMap, h = !c && l.getTerrainHelper && l.getTerrainHelper(), d = this.Vo(), f = this.getMap(), p = t.geometry, m = p.desc.positionSize, {aShape: y, aOffset: g, aAnchor: b, aAltitude: v, aPitchRotation: x} = p.properties, w = p.properties.aTextSize, k = !a, A = e[i], _ = A * m;
            let T;
            T = p.data.aAltitude ? n.vec3.set(Fd, b[_], b[_ + 1], v[A]) : Ia.unpackPosition(Fd, b[_], b[_ + 1], b[_ + 2]);
            const S = Qc(Od, T, s, f.width, f.height);
            n.vec4.set(Cd, S[0], S[1]);
            const M = p.properties.aTerrainAltitude;
            let P;
            if (M) {
                const t = 100 * M[A];
                t ? (P = n.vec3.set(Zd, ...T), P[2] = t, P = Qc(P, P, s, f.width, f.height)) : P = Cd;
            } else P = Cd;
            if (f.isOffscreen(P)) return d || tf(g, e, i, r), !1;
            k && (T = S);
            const I = k ? 1 : p.properties.tileExtent / this.layer.options.tileSize;
            let j = !0;
            const z = e[i], F = e[r - 1], O = w ? w[z] : t.properties.textSize, C = this.Gs(t, O, o, z, F, T, Fd, I, a);
            if (null === C) return tf(g, e, i, r), !1;
            const E = F - z <= 3, R = Math.floor(C / 2), N = C % 2;
            for (let a = i; a < r; a += 6) {
                const l = e[a];
                let f;
                if (f = R || a !== i || E || h ? R || a !== r - 6 || E || h ? vd.call(this, jd, t, O, o, l, T, Fd, I, R, P, this.layer, s, c) : Wd : Gd, 
                !f) {
                    j = !1, d || tf(g, e, i, r);
                    break;
                }
                let p = f[2];
                N && (p -= Math.PI / 2);
                const m = lh(Ed, p, 0, u.rotateWithMap, u.pitchWithMap), b = g.length > y.length;
                let v;
                if (b) {
                    n.vec3.set(Vd, x[3 * l], x[3 * l + 1], 0);
                    const t = n.vec3.normalize(Vd, Vd), e = -x[3 * l + 2];
                    if (e) {
                        const i = n.quat.setAxisAngle(Hd, t, e);
                        n.mat4.fromTranslation(Ud, Pd), n.mat4.fromQuat(qd, i), v = n.mat4.multiply(qd, qd, Ud);
                    }
                }
                for (let t = 0; t < 4; t++) {
                    const e = 2 * (l + t);
                    n.vec2.set(Rd, y[e] / 10, y[e + 1] / 10), n.vec2.scale(Rd, Rd, O / 24), n.vec2.transformMat2(Rd, Rd, m), 
                    c ? (n.vec2.multiply(Rd, Rd, Dd), n.vec2.add(Nd, Rd, f), b && (Nd[2] = 0, v && n.vec3.transformMat4(Nd, Nd, v))) : (n.vec2.multiply(Nd, f, Dd), 
                    n.vec2.add(Nd, Rd, Nd)), Ld[0] = 10 * Nd[0], Ld[1] = 10 * Nd[1], b && (Ld[2] = 10 * Nd[2]);
                    const i = (b ? 3 : 2) * (l + t);
                    (g[i] !== Ld[0] || g[i + 1] !== Ld[1] || b && g[i + 2] !== Ld[2]) && (g.dirty = !0, 
                    g[i] = Ld[0], g[i + 1] = Ld[1], b && (g[i + 2] = Ld[2]));
                }
            }
            return j;
        }
        Gs(t, e, n, i, r, o, s, a, l) {
            const u = r - i <= 3, c = this.getMap();
            return u ? 0 : kd.call(this, Gd, Wd, t, e, n, i, r, o, s, a, c.width / c.height, l);
        }
        isBoxCollides(t, e, n, i, r, o) {
            return this.isLabelCollides(0, t, e, n, i, r, o);
        }
        deleteMesh(t, e) {
            t && (e && (Array.isArray(t) ? t.forEach(t => {
                t && t.material && delete t.material.uniforms.texture;
            }) : t.material && delete t.material.uniforms.texture), super.deleteMesh(t, e));
        }
        delete() {
            super.delete(), this.Us.dispose(), delete this.Ls, this.Ws && this.Ws.dispose();
        }
        needClearStencil() {
            return !0;
        }
        init() {
            const t = this.regl;
            this.renderer = new n.reshader.Renderer(t);
            const {uniforms: e, extraCommandProps: i} = Oh.call(this, this.canvas, this.sceneConfig), r = this.canvas, o = {
                x: (t, e) => e.viewport ? e.viewport.x : 0,
                y: (t, e) => e.viewport ? e.viewport.y : 0,
                width: (t, e) => e.viewport ? e.viewport.width : r ? r.width : 1,
                height: (t, e) => e.viewport ? e.viewport.height : r ? r.height : 1
            };
            i.viewport = o, this.shader = new n.reshader.MeshShader({
                vert: Vh,
                frag: $h,
                uniforms: e,
                extraCommandProps: i
            });
            let s = i;
            if (this.layer.getRenderer().isEnableWorkAround("win-intel-gpu-crash") && (s = Hu({}, i), 
            s.stencil = Hu({}, i.stencil), s.stencil.enable = !0), this.Us = new n.reshader.MeshShader({
                vert: Ad,
                frag: $h,
                uniforms: e,
                extraCommandProps: s
            }), this.pickingFBO) {
                const t = new n.reshader.FBORayPicking(this.renderer, {
                    vert: "#define PICKING_MODE 1\n" + Vh,
                    uniforms: e,
                    extraCommandProps: {
                        viewport: this.pickingViewport
                    }
                }, this.pickingFBO, this.getMap());
                t.filter = t => {
                    const e = t.properties.symbolIndex;
                    return "line" !== this.getSymbol(e).textPlacement;
                };
                const i = new n.reshader.FBORayPicking(this.renderer, {
                    vert: "#define PICKING_MODE 1\n" + Ad,
                    uniforms: e,
                    extraCommandProps: {
                        viewport: this.pickingViewport
                    }
                }, this.pickingFBO, this.getMap());
                i.filter = t => "line" === t.geometry.properties.textPlacement, this.picking = [ t, i ];
            }
        }
        getUniformValues(t, e) {
            const i = e && e.isRenderingTerrainSkin, r = this.layer.options.tileSize, o = i ? Kd : t.projViewMatrix, s = t.cameraToCenterDistance, a = n.vec2.set($d, t.width, t.height);
            i && n.vec2.set(a, r, r);
            const l = O(t.getResolution(), t);
            return {
                layerScale: this.layer.options.styleScale || 1,
                mapPitch: t.getPitch() * Math.PI / 180,
                mapRotation: t.getBearing() * Math.PI / 180,
                projViewMatrix: o,
                viewMatrix: t.viewMatrix,
                cameraToCenterDistance: s,
                canvasSize: a,
                glyphSize: 24,
                gammaScale: 1 * (this.layer.options.textGamma || 1),
                resolution: t.getResolution(),
                altitudeScale: l,
                viewport: i && e && e.viewport,
                textPitchFilter: 0,
                isRenderingTerrain: +!!i
            };
        }
    }
    function tf(t, e, n, i) {
        for (let r = n; r < i; r += 6) {
            const n = e[r];
            for (let e = 0; e < 4; e++) {
                const i = 3 * (n + e);
                (t[i] || t[i + 1] || t[i + 2]) && (t.dirty = !0, t[i] = 0, t[i + 1] = 0, t[i + 2] = 0);
            }
        }
    }
    function ef(t, e) {
        const n = t.properties.level - e.properties.level;
        return 0 === n ? t.properties.meshKey - e.properties.meshKey : n;
    }
    var nf = "#define SHADER_NAME NATIVE_POINT\n#include <gl2_vert>\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\nuniform mat4 positionMatrix;\nuniform mat4 projViewModelMatrix;\nuniform float markerSize;\n#ifdef PICKING_MODE\n#include <fbo_picking_vert>\n#endif\n#include <vt_position_vert>\nvoid main() {\n  vec3 c = unpackVTPosition();\n  gl_Position = projViewModelMatrix * positionMatrix * vec4(c, 1.);\n  gl_PointSize = markerSize;\n#ifdef PICKING_MODE\nfbo_picking_setData(gl_Position.w, true);\n#endif\n}";
    const rf = {
        markerFill: [ 0, 0, 0 ],
        markerOpacity: 1,
        markerSize: 10
    };
    class of extends Mc {
        getPrimitive() {
            return "points";
        }
        isTerrainSkin() {
            return !1;
        }
        isTerrainVector() {
            return this.layer.options.awareOfTerrain;
        }
        createMesh(t, e) {
            const {geometry: i, symbolIndex: r, ref: o} = t, s = this.getSymbol(r);
            void 0 === o && i.generateBuffers(this.regl);
            const a = {};
            Gu(a, "markerOpacity", s, "markerOpacity", 1), Gu(a, "markerSize", s, "markerSize", 10), 
            Gu(a, "markerFill", s, "markerFill", "#000", Ju(this.colorCache, 3));
            const l = new n.reshader.Material(a, rf);
            l.createDefines = () => "square" !== s.markerType ? {
                USE_CIRCLE: 1
            } : null, l.appendDefines = t => ("square" !== s.markerType && (t.USE_CIRCLE = 1), 
            t);
            const u = new n.reshader.Mesh(i, l, {
                castShadow: !1,
                picking: !0
            }), c = {};
            return u.geometry.data.aAltitude && (c.HAS_ALTITUDE = 1), u.setDefines(c), u.positionMatrix = this.getAltitudeOffsetMatrix(), 
            u.setLocalTransform(e), u.properties.symbolIndex = r, u;
        }
        init() {
            const t = this.regl;
            this.renderer = new n.reshader.Renderer(t);
            const e = [], i = {
                vert: nf,
                frag: "#define SHADER_NAME NATIVE_POINT\nprecision mediump float;\n#include <gl2_frag>\n#ifdef USE_CIRCLE\n#if __VERSION__ == 100\n#ifdef GL_OES_standard_derivatives\n#define STANDARD_DERIVATIVES_ENABLED 1\n#extension GL_OES_standard_derivatives : enable\n#endif\n#else\n#define STANDARD_DERIVATIVES_ENABLED 1\n#endif\n#endif\nuniform vec3 markerFill;\nuniform float markerOpacity;\nvoid main() {\n  float c = 1.;\n#ifdef USE_CIRCLE\nfloat r = .0, d = .0;\n  vec2 e = 2. * gl_PointCoord - 1.;\n  r = dot(e, e);\n  if(r > 1.) {\n    discard;\n  }\n#ifdef STANDARD_DERIVATIVES_ENABLED\nd = fwidth(r);\n  c = 1. - smoothstep(1. - d, 1. + d, r);\n#endif\n#endif\nglFragColor = vec4(markerFill, 1.) * markerOpacity * c;\n#if __VERSION__ == 100\ngl_FragColor = glFragColor;\n#endif\n}",
                uniforms: [ {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: function(t, i) {
                        return n.mat4.multiply(e, i.projViewMatrix, i.modelMatrix), e;
                    }
                } ],
                defines: null,
                extraCommandProps: {
                    viewport: {
                        x: 0,
                        y: 0,
                        width: () => this.canvas ? this.canvas.width : 1,
                        height: () => this.canvas ? this.canvas.height : 1
                    },
                    depth: {
                        enable: !0,
                        mask: !1,
                        range: this.sceneConfig.depthRange || [ 0, 1 ],
                        func: this.sceneConfig.depthFunc || "always"
                    },
                    blend: {
                        enable: !0,
                        func: this.getBlendFunc(),
                        equation: "add"
                    }
                }
            };
            if (this.shader = new n.reshader.MeshShader(i), this.shader.version = 300, this.pickingFBO) {
                const t = [];
                this.picking = [ new n.reshader.FBORayPicking(this.renderer, {
                    vert: "#define PICKING_MODE 1\n" + nf,
                    uniforms: [ {
                        name: "projViewModelMatrix",
                        type: "function",
                        fn: function(e, i) {
                            return n.mat4.multiply(t, i.projViewMatrix, i.modelMatrix), t;
                        }
                    } ],
                    extraCommandProps: {
                        viewport: this.pickingViewport
                    }
                }, this.pickingFBO, this.getMap()) ];
            }
        }
        getUniformValues(t) {
            return {
                projViewMatrix: t.projViewMatrix
            };
        }
    }
    var sf = "#define SHADER_NAME NATIVE_LINE\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\nuniform mat4 projViewModelMatrix;\n#ifndef PICKING_MODE\n#if defined(HAS_COLOR)\nattribute vec4 aColor;\nvarying vec4 vColor;\n#endif\n#else\n#include <fbo_picking_vert>\n#endif\n#include <vt_position_vert>\nvoid main() {\n  vec3 c = unpackVTPosition();\n  gl_Position = projViewModelMatrix * vec4(c, 1.);\n#ifndef PICKING_MODE\n#if defined(HAS_COLOR)\nvColor = aColor / 255.;\n#endif\n#else\nfbo_picking_setData(gl_Position.w, true);\n#endif\n}";
    const af = n.mat4.identity([]);
    class lf extends Mc {
        constructor(t, e, n, i, r, o) {
            if (super(t, e, n, i, r, o), this.primitive = "lines", v(this.symbolDef.lineColor)) {
                const t = e.getMap(), n = w(this.symbolDef.lineColor);
                this.colorSymbol = e => n(t.getZoom(), e);
            }
        }
        needPolygonOffset() {
            return !0;
        }
        createMesh(t, e) {
            const {geometry: i, symbolIndex: r, ref: o} = t, s = this.getSymbol(r), a = this.getMeshUniforms(i, s);
            void 0 === o && i.generateBuffers(this.regl);
            const l = new n.reshader.Material(a), u = new n.reshader.Mesh(i, l, {
                castShadow: !1,
                picking: !0
            });
            u.setLocalTransform(e), u.properties.symbolIndex = r;
            const c = {};
            return u.geometry.data.aAltitude && (c.HAS_ALTITUDE = 1), u.setDefines(c), u;
        }
        getMeshUniforms(t, e) {
            const n = {};
            return Gu(n, "lineColor", e, "lineColor", "#000", Ju(this.colorCache)), Gu(n, "lineOpacity", e, "lineOpacity", 1), 
            n;
        }
        init(t) {
            const e = this.layer.getRenderer().isEnableTileStencil() && (!t || !t.isRenderingTerrain || !this.isTerrainSkin()), i = this.regl;
            this.renderer = new n.reshader.Renderer(i);
            const r = this.canvas, o = {
                x: (t, e) => e.viewport ? e.viewport.x : 0,
                y: (t, e) => e.viewport ? e.viewport.y : 0,
                width: (t, e) => e.viewport ? e.viewport.width : r ? r.width : 1,
                height: (t, e) => e.viewport ? e.viewport.height : r ? r.height : 1
            }, s = [ {
                name: "projViewModelMatrix",
                type: "function",
                fn: function(t, e) {
                    const i = [];
                    return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                }
            } ], a = this.sceneConfig.depthRange, l = {
                vert: sf,
                frag: "#define SHADER_NAME NATIVE_LINE\nprecision mediump float;\nuniform float lineOpacity;\nuniform vec4 lineColor;\n#if defined(HAS_COLOR)\nvarying vec4 vColor;\n#endif\nvoid main() {\n  gl_FragColor = lineColor * lineOpacity;\n#if defined(HAS_COLOR)\ngl_FragColor *= vColor;\n#endif\n}",
                uniforms: s,
                defines: null,
                extraCommandProps: {
                    viewport: o,
                    stencil: {
                        enable: !0,
                        mask: 255,
                        func: {
                            cmp: () => e ? "=" : "<=",
                            ref: (t, n) => e ? n.stencilRef : n.level,
                            mask: 255
                        },
                        op: {
                            fail: "keep",
                            zfail: "keep",
                            zpass: "replace"
                        }
                    },
                    depth: {
                        enable: !0,
                        range: a || [ 0, 1 ],
                        func: this.sceneConfig.depthFunc || "<="
                    },
                    blend: {
                        enable: !0,
                        func: this.getBlendFunc(),
                        equation: "add"
                    },
                    polygonOffset: {
                        enable: !0,
                        offset: this.getPolygonOffset()
                    }
                }
            };
            this.shader = new n.reshader.MeshShader(l), this.pickingFBO && (this.picking = [ new n.reshader.FBORayPicking(this.renderer, {
                vert: "#define PICKING_MODE 1\n" + sf,
                uniforms: s,
                extraCommandProps: {
                    viewport: this.pickingViewport
                }
            }, this.pickingFBO, this.getMap()) ]);
        }
        getUniformValues(t, e) {
            const n = e && e.isRenderingTerrainSkin;
            return {
                projViewMatrix: n ? af : t.projViewMatrix,
                viewport: n && e && e.viewport
            };
        }
        getPrimitive() {
            return "lines";
        }
    }
    const uf = [ 0, 0 ], cf = [ 1, 1, 1 ], hf = [ 1, 1, 1, 1 ], df = [ 0, 0 ], ff = [];
    class pf extends _c {
        supportRenderMode(t) {
            return this.isAnimating() ? "fxaa" === t || "fxaaAfterTaa" === t : "taa" === t || "fxaa" === t;
        }
        isAnimating() {
            return !1;
        }
        createMesh(t, e, {tilePoint: i, tileZoom: r}) {
            if (!this.material) return this.setToRedraw(), null;
            const {geometry: o, symbolIndex: s} = t, a = new n.reshader.Mesh(o, this.material);
            if (this.sceneConfig.animation) {
                cf[2] = .01;
                const t = [];
                n.mat4.fromScaling(t, cf), n.mat4.multiply(t, e, t), e = t;
            }
            const l = this.getSymbolDef(s), u = this.getFnTypeConfig(s);
            ic(o, l, u);
            const c = this.getShader(), h = c.getGeometryDefines ? c.getGeometryDefines(o) : {}, d = this.getSymbol(s);
            if (o.data.aExtrude) {
                h.IS_LINE_EXTRUSION = 1;
                const {tileResolution: t, tileRatio: e} = o.properties, n = this.getMap();
                Object.defineProperty(a.uniforms, "linePixelScale", {
                    enumerable: !0,
                    get: function() {
                        return e * n.getResolution() / t;
                    }
                }), Gu(a.uniforms, "lineWidth", d, "lineWidth", 4), Gu(a.uniforms, "lineOpacity", d, "lineOpacity", 1), 
                Gu(a.uniforms, "lineColor", d, "lineColor", "#fff", Ju(this.colorCache)), Object.defineProperty(a.uniforms, "lineHeight", {
                    enumerable: !0,
                    get: () => {
                        const t = this.dataConfig.defaultAltitude * (this.dataConfig.altitudeScale || 1);
                        return Zu(t) ? t : 0;
                    }
                });
            } else Gu(a.uniforms, "polygonFill", d, "polygonFill", hf, Ju(this.colorCache)), 
            Gu(a.uniforms, "polygonOpacity", d, "polygonOpacity", 1);
            if (o.data.aColor && (h.HAS_COLOR = 1), o.data.aLineWidth && (h.HAS_LINE_WIDTH = 1), 
            o.data.aLineHeight && (h.HAS_LINE_HEIGHT = 1), o.data.aOpacity) {
                const t = o.data.aOpacity;
                for (let e = 0; e < t.length; e++) if (t[e] < 255) {
                    o.properties.hasAlpha = !0;
                    break;
                }
            }
            o.generateBuffers(this.regl), a.setDefines(h), a.setPositionMatrix(this.getAltitudeOffsetMatrix()), 
            a.setLocalTransform(e), (o.properties.maxAltitude <= 0 || a.properties.level >= 3) && (a.castShadow = !1), 
            a.setUniform("maxAltitude", a.geometry.properties.maxAltitude);
            const f = this.getMap(), p = f.getGLRes(), m = this.layer.getSpatialReference && this.layer.getSpatialReference(), y = (m ? m.getResolution(r) : f.getResolution(r)) / p;
            return Object.defineProperty(a.uniforms, "uvOrigin", {
                enumerable: !0,
                get: () => {
                    if (this.dataConfig.side) return uf;
                    const t = this.getSymbol(s).material.uvScale || [ 1, 1 ], e = this.dataConfig.dataUVScale || [ 1, 1 ], n = t[0] * i[0] * y, r = t[1] * i[1] * y;
                    return [ n / (.5 * e[0]), r / (.5 * e[1]) ];
                }
            }), Object.defineProperty(a.uniforms, "uvOffset", {
                enumerable: !0,
                get: () => {
                    const t = this.getUVOffsetAnim(), e = this.getUVOffset(t);
                    return this.material && this.material.get("noiseTexture") && (e[0] *= -1), e;
                }
            }), Object.defineProperty(a.uniforms, "hasAlpha", {
                enumerable: !0,
                get: () => {
                    const t = this.getSymbol(s);
                    return o.properties.hasAlpha || t.polygonOpacity < 1 || t.lineOpacity < 1;
                }
            }), a.properties.symbolIndex = s, a;
        }
        getShadowMeshes() {
            if (!this.isVisible()) return ff;
            this.shadowCount = this.scene.getMeshes().length;
            const t = this.scene.getMeshes().filter(t => 0 === t.properties.level);
            for (let e = 0; e < t.length; e++) {
                const n = t[e];
                n.material !== this.material && n.setMaterial(this.material);
            }
            return t;
        }
        getUVOffsetAnim() {
            const t = this.getSymbols()[0];
            return t.material && t.material.uvOffsetAnim;
        }
        getUVOffset(t) {
            const e = this.getSymbols()[0], n = e.material && e.material.uvOffset || df, i = this.layer.getRenderer().getFrameTimestamp(), r = [ n[0], n[1] ], o = !!e.material && e.material.noiseTexture, s = o ? 5e5 : 1e3, a = o ? 256 : 1;
            return t && t[0] && (r[0] = i * t[0] % s / s * a), t && t[1] && (r[1] = i * t[1] % s / s * a), 
            r;
        }
        needPolygonOffset() {
            return this.Bs;
        }
        startFrame(...t) {
            return delete this.Bs, super.startFrame(...t);
        }
        addMesh(t, e) {
            t.forEach(t => {
                this.ro(t, e);
            }), super.addMesh(...arguments);
        }
        ro(t, e) {
            if (null !== e) {
                const i = t.localTransform;
                0 === e && (e = .01), cf[2] = e, n.mat4.fromScaling(i, cf), n.mat4.multiply(i, t.properties.tileTransform, i), 
                t.setLocalTransform(i);
            } else t.setLocalTransform(t.properties.tileTransform);
            t.material !== this.material && t.setMaterial(this.material), t.geometry.properties.maxAltitude <= 0 && (this.Bs = !0), 
            this.getSymbol(t.properties.symbolIndex).ssr ? t.ssr = 1 : t.ssr = 0;
        }
        deleteMesh(t, e) {
            if (t) if (this.scene.removeMesh(t), Array.isArray(t)) for (let n = 0; n < t.length; n++) e || t[n].geometry.dispose(), 
            t[n].dispose(); else e || t.geometry.dispose(), t.dispose();
        }
        updateDataConfig(t, e) {
            return !("line-extrusion" === this.dataConfig.type && !t.altitudeProperty && !e.altitudeProperty);
        }
        createFnTypeConfig(t, e) {
            const n = w(e.polygonFill || e.lineColor), i = x(e.polygonOpacity || e.lineOpacity), r = x(e.lineWidth), o = new Uint8Array(1), s = new Uint16Array(1), a = e.polygonFill ? "polygonFill" : e.lineColor ? "lineColor" : "polygonFill", l = e.polygonOpacity ? "polygonOpacity" : e.lineOpacity ? "lineOpacity" : "polygonOpacity";
            return [ {
                attrName: "aColor",
                type: Uint8Array,
                width: 4,
                symbolName: a,
                define: "HAS_COLOR",
                evaluate: e => {
                    let i = n(t.getZoom(), e);
                    return Array.isArray(i) || (i = this.colorCache[i] = this.colorCache[i] || Pt(i).unitArray()), 
                    i = Bu(i), i;
                }
            }, {
                attrName: "aOpacity",
                type: Uint8Array,
                width: 1,
                symbolName: l,
                evaluate: (e, n) => {
                    const r = i(t.getZoom(), e);
                    return o[0] = 255 * r, o[0] < 255 && (n.properties.hasAlpha = !0), o[0];
                }
            }, {
                attrName: "aLineWidth",
                type: Uint8Array,
                width: 1,
                symbolName: "lineWidth",
                define: "HAS_LINE_WIDTH",
                evaluate: e => {
                    const n = r(t.getZoom(), e);
                    return s[0] = Math.round(2 * n), s[0];
                }
            } ];
        }
        getPolygonOffset() {
            return {
                enable: (t, e) => 0 === e.maxAltitude,
                offset: super.getPolygonOffset()
            };
        }
        updateSymbol(t, e) {
            let n = !1;
            t && t.material && (n = function(t, e) {
                for (const n in e) if (yf[n] && e[n] !== t[n] && (!t[n] || !e[n])) return !0;
                return !1;
            }(this.symbolDef[0].material || {}, t.material));
            const i = super.updateSymbol(t, e);
            return t && t.material && this.Js(t.material), n || i;
        }
        Lr(t, e) {
            return mf(t) !== mf(e);
        }
    }
    function mf(t) {
        if (!t || !t.material) return !1;
        for (const e in t.material) if (e.indexOf("Texture") > 0 && t.material[e]) return !0;
        return !1;
    }
    const yf = {
        normalTexture: 1,
        bumpTexture: 1
    };
    class gf extends pf {
        createGeometry(t) {
            const e = t.data, i = this.getSymbols()[0];
            if (i.material && i.material.extrusionOpacity) {
                const t = new Uint8Array(e.aPosition.length / 3);
                for (let n = 0; n < e.aPosition.length; n += 3) e.aPosition[n + 2] > 0 ? t[n / 3] = 0 : t[n / 3] = 1;
                e.aExtrusionOpacity = t;
            }
            const r = new n.reshader.Geometry(e, t.indices);
            return Hu(r.properties, t.properties), this.Kr(r, t), {
                geometry: r,
                symbolIndex: {
                    index: 0
                }
            };
        }
        updateSceneConfig(t) {
            let e;
            if (this.sceneConfig.cullFace !== t.cullFace && (e = !0), Hu(this.sceneConfig, t), 
            e) {
                const t = this.getShaderConfig();
                this.shader.dispose(), this.shader = new n.reshader.PhongShader(t);
            }
            this.setToRedraw();
        }
        getShader() {
            return this.shader;
        }
        delete(t) {
            this.getMap().off("updatelights", this.Xs, this), super.delete(t), this.material.dispose();
        }
        init() {
            this.getMap().on("updatelights", this.Xs, this);
            const t = this.regl;
            this.renderer = new n.reshader.Renderer(t);
            const e = this.getShaderConfig();
            this.shader = new n.reshader.PhongShader(e), this.Js();
            const i = {
                vert: this.getPickingVert(),
                uniforms: [ "projViewMatrix", "modelMatrix", "positionMatrix", {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: function(t, e) {
                        return n.mat4.multiply([], e.projViewMatrix, e.modelMatrix);
                    }
                } ],
                extraCommandProps: {
                    viewport: this.pickingViewport
                }
            };
            this.picking = [ new n.reshader.FBORayPicking(this.renderer, i, this.layer.getRenderer().pickingFBO, this.getMap()) ];
        }
        Xs() {
            this.setToRedraw();
        }
        getShaderConfig() {
            const t = this.canvas, e = {
                x: 0,
                y: 0,
                width: () => t ? t.width : 1,
                height: () => t ? t.height : 1
            };
            return {
                extraCommandProps: {
                    cull: {
                        enable: () => void 0 === this.sceneConfig.cullFace || !!this.sceneConfig.cullFace,
                        face: () => {
                            let t = this.sceneConfig.cullFace;
                            return !0 === t && (t = "back"), t || "back";
                        }
                    },
                    stencil: {
                        enable: !0,
                        func: {
                            cmp: "<=",
                            ref: (t, e) => e.level
                        },
                        op: {
                            fail: "keep",
                            zfail: "keep",
                            zpass: "replace"
                        }
                    },
                    depth: {
                        enable: !0,
                        range: this.sceneConfig.depthRange || [ 0, 1 ],
                        func: this.sceneConfig.depthFunc || "<="
                    },
                    blend: {
                        enable: !0,
                        func: {
                            src: "src alpha",
                            dst: "one minus src alpha"
                        },
                        equation: "add"
                    },
                    viewport: e,
                    polygonOffset: this.getPolygonOffset()
                }
            };
        }
        Js() {
            this.material && this.material.dispose();
            const t = this.getSymbols()[0].material, e = {};
            for (const n in t) Qu(t, n) && (e[n] = t[n]);
            this.material = new n.reshader.PhongMaterial(e);
        }
        getUniformValues(t, e) {
            const n = t.viewMatrix, i = t.projMatrix, r = t.cameraPosition, o = this.Ys(), s = Hu({
                viewMatrix: n,
                projMatrix: i,
                cameraPosition: r,
                projViewMatrix: t.projViewMatrix
            }, o);
            e && e.jitter ? s.halton = e.jitter : s.halton = [ 0, 0 ];
            const a = this.layer.getRenderer().canvas;
            return s.outSize = [ a.width, a.height ], s;
        }
        getPickingVert() {
            return "\n            attribute vec3 aPosition;\n            uniform mat4 projViewModelMatrix;\n            uniform mat4 modelMatrix;\n            uniform mat4 positionMatrix;\n            //引入fbo picking的vert相关函数\n            #include <fbo_picking_vert>\n            #include <get_output>\n            void main()\n            {\n                mat4 localPositionMatrix = getPositionMatrix();\n                vec4 localPosition = getPosition(aPosition);\n\n                gl_Position = projViewModelMatrix * localPositionMatrix * localPosition;\n                //传入gl_Position的depth值\n                fbo_picking_setData(gl_Position.w, true);\n            }\n        ";
        }
        Ys() {
            const t = this.getMap().getLightManager(), e = t && t.getAmbientLight() || {}, n = t && t.getDirectionalLight() || {};
            return {
                ambientColor: e.color || [ .2, .2, .2 ],
                light0_diffuse: [ ...n.color || [ .1, .1, .1 ], 1 ],
                lightSpecular: n.specular || [ .8, .8, .8 ],
                light0_viewDirection: n.direction || [ 1, 1, -1 ]
            };
        }
    }
    const bf = [ 1, 1, 1 ];
    class vf extends _c {
        createGeometry(t) {
            const {data: e, indices: i} = t, r = new n.reshader.Geometry(e, i, 0, {
                primitive: "lines"
            });
            return r.generateBuffers(this.regl), {
                geometry: r,
                symbolIndex: {
                    index: 0
                }
            };
        }
        createMesh(t, e) {
            const {geometry: i} = t, r = new n.reshader.Mesh(i);
            if (r.castShadow = !1, this.sceneConfig.animation) {
                bf[2] = .01;
                const t = [];
                n.mat4.fromScaling(t, bf), n.mat4.multiply(t, e, t), e = t;
            }
            return r.setLocalTransform(e), r.properties.symbolIndex = {
                index: 0
            }, r;
        }
        addMesh(t, e) {
            if (!t.length) return this;
            let i;
            null !== e ? (0 === e && (e = .01), i = t[0].localTransform, bf[2] = e, n.mat4.fromScaling(i, bf), 
            n.mat4.multiply(i, t[0].properties.tileTransform, i)) : i = t[0].properties.tileTransform;
            for (let e = 0; e < t.length; e++) t[e].setLocalTransform(i);
            return this.scene.addMesh(t), this;
        }
        init() {
            const t = this.regl;
            this.scene = new n.reshader.Scene, this.renderer = new n.reshader.Renderer(t);
            const e = {
                x: 0,
                y: 0,
                width: () => this.canvas ? this.canvas.width : 1,
                height: () => this.canvas ? this.canvas.height : 1
            }, i = {
                vert: "\n    attribute vec3 aPosition;\n    attribute vec4 aColor;\n\n    uniform mat4 projViewModelMatrix;\n    uniform vec2 outSize;\n\n    varying vec4 vColor;\n\n    void main()\n    {\n        gl_Position = projViewModelMatrix * vec4(aPosition, 1.0);\n        vColor = aColor / 255.0;\n    }\n",
                frag: "\n    #ifdef GL_ES\n        precision lowp float;\n    #endif\n\n    uniform float opacity;\n\n    varying vec4 vColor;\n\n    void main()\n    {\n        gl_FragColor = vColor * opacity;\n    }\n",
                uniforms: [ {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: function(t, e) {
                        const i = [];
                        return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                    }
                } ],
                extraCommandProps: {
                    stencil: {
                        enable: !0,
                        func: {
                            cmp: "<=",
                            ref: (t, e) => e.level
                        },
                        op: {
                            fail: "keep",
                            zfail: "keep",
                            zpass: "replace"
                        }
                    },
                    blend: {
                        enable: !0,
                        func: this.getBlendFunc(),
                        equation: "add"
                    },
                    viewport: e
                }
            };
            this.shader = new n.reshader.MeshShader(i);
        }
        getUniformValues(t) {
            const e = this.sceneConfig.opacity || .3, n = this.layer.getRenderer().canvas;
            return {
                projViewMatrix: t.projViewMatrix,
                outSize: [ n.width, n.height ],
                opacity: e
            };
        }
    }
    const {getPBRUniforms: xf} = n.reshader.pbr.PBRUtils;
    class wf extends pf {
        constructor(...t) {
            super(...t), this.Zs = new n.reshader.ResourceLoader, this.scene.sortFunction = this.sortByCommandKey;
        }
        supportRenderMode(t) {
            return this.getSymbols()[0].ssr ? "fxaa" === t || "fxaaAfterTaa" === t : super.supportRenderMode(t);
        }
        isAnimating() {
            const t = this.Ks();
            if (t && (t[0] || t[1])) return !0;
        }
        needToRedraw() {
            const t = this.Ks();
            return !(!t || !t[0] && !t[1]) || super.needToRedraw();
        }
        Ks() {
            const t = this.getSymbols()[0];
            return t.material && t.material.uvOffsetAnim;
        }
        createGeometry(t) {
            if (!t.data || !t.data.aPosition || !t.data.aPosition.length) return null;
            const e = new n.reshader.Geometry(t.data, t.indices, 0, {
                uv0Attribute: "aTexCoord0"
            });
            return Hu(e.properties, t.properties), this.Kr(e, t), {
                geometry: e,
                symbolIndex: {
                    index: 0
                }
            };
        }
        paint(t) {
            const e = !!t.shadow;
            t.states && t.states.includesChanged && (this.shader.dispose(), delete this.shader, 
            this.Qs.dispose(), delete this.Qs, this.eo(t));
            let n = !!t.ssr && this.getSymbols()[0].ssr;
            const i = this.shader, r = i.shaderDefines;
            if (n) {
                const e = Hu({}, r, t.ssr.defines);
                i.shaderDefines = e;
            }
            if (t.onlyUpdateDepthInTaa && (this.shader = this.Qs, !n && this.ta && (this.shader = i, 
            this.setToRedraw(!0))), this.updateIBLDefines(i), super.paint(t), void 0 !== this.shadowCount && e) {
                const t = this.scene.getMeshes().length;
                this.shadowCount !== t && this.setToRedraw();
            }
            this.shader = i, n && (i.shaderDefines = r), delete this.shadowCount;
            const o = this.Ks();
            if (o && (o[0] || o[1])) this.material.set("uvOffset", [ 0, 0 ]); else {
                const t = this.getUVOffset(o);
                this.material.set("uvOffset", t);
            }
            this.ta = n;
        }
        updateSceneConfig(t) {
            Hu(this.sceneConfig, t), this.setToRedraw();
        }
        delete() {
            super.delete(), this.disposeIBLTextures(), this.material.dispose(), this.Qs && (this.Qs.dispose(), 
            delete this.Qs);
        }
        init(t) {
            this.getMap().on("updatelights", this.ea, this), this.createIBLTextures(), this.oo = this.oo || t;
            const e = this.regl;
            this.renderer = new n.reshader.Renderer(e), this.na = this.ia.bind(this), this.ra = this.disposeCachedTexture.bind(this), 
            this.oa = this.sa.bind(this), this.Js(), this.eo(t);
            const i = {
                vert: "\n                #include <gl2_vert>\n                attribute vec3 aPosition;\n                uniform mat4 projViewModelMatrix;\n                uniform mat4 positionMatrix;\n                //引入fbo picking的vert相关函数\n                #include <line_extrusion_vert>\n                #include <get_output>\n                #include <fbo_picking_vert>\n                void main() {\n                    mat4 localPositionMatrix = getPositionMatrix();\n                    #ifdef IS_LINE_EXTRUSION\n                        vec3 linePosition = getLineExtrudePosition(aPosition);\n                        vec4 localVertex = getPosition(linePosition);\n                    #else\n                        vec4 localVertex = getPosition(aPosition);\n                    #endif\n\n                    gl_Position = projViewModelMatrix * localPositionMatrix * localVertex;\n                    fbo_picking_setData(gl_Position.w, true);\n                }\n            ",
                uniforms: [ {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: (t, e) => n.mat4.multiply([], e.projViewMatrix, e.modelMatrix)
                } ],
                extraCommandProps: {
                    viewport: this.pickingViewport,
                    depth: {
                        enable: !0,
                        range: this.sceneConfig.depthRange || [ 0, 1 ],
                        func: this.sceneConfig.depthFunc || "<="
                    }
                }
            };
            this.picking = [ new n.reshader.FBORayPicking(this.renderer, i, this.layer.getRenderer().pickingFBO, this.getMap()) ];
        }
        eo(t) {
            const e = {
                x: 0,
                y: 0,
                width: () => this.canvas ? this.canvas.width : 1,
                height: () => this.canvas ? this.canvas.height : 1
            }, i = {}, r = [];
            r.push(...n.reshader.SsrPass.getUniformDeclares()), this.fillIncludes(i, r, t);
            const o = {
                cull: {
                    enable: () => void 0 === this.sceneConfig.cullFace || !!this.sceneConfig.cullFace,
                    face: this.sceneConfig.cullFace || "back"
                },
                stencil: {
                    enable: (t, e) => void 0 === e.hasAlpha || !!e.hasAlpha,
                    func: {
                        cmp: "<=",
                        ref: (t, e) => e.level
                    },
                    op: {
                        fail: "keep",
                        zfail: "keep",
                        zpass: "replace"
                    }
                },
                viewport: e,
                depth: {
                    enable: !0,
                    range: this.sceneConfig.depthRange || [ 0, 1 ],
                    func: this.sceneConfig.depthFunc || "<="
                },
                blend: {
                    enable: (t, e) => void 0 === e.hasAlpha || !!e.hasAlpha,
                    func: {
                        src: "src alpha",
                        dst: "one minus src alpha"
                    },
                    equation: "add"
                },
                polygonOffset: this.getPolygonOffset()
            }, s = {
                uniforms: r,
                defines: this.aa(i),
                extraCommandProps: o
            };
            this.shader = new n.reshader.pbr.StandardShader(s), s.frag = "\n            precision mediump float;\n            #include <gl2_frag>\n            void main() {\n                glFragColor = vec4(0.0);\n                #if __VERSION__ == 100\n                    gl_FragColor = glFragColor;\n                #endif\n            }\n        ", 
            this.Qs = new n.reshader.pbr.StandardShader(s);
        }
        ia({resources: t}) {
            for (let e = 0; e < t.length; e++) this.addCachedTexture(t[e].url, t[e].data);
            this.setToRedraw(!0);
        }
        sa() {
            this.setToRedraw(!0);
        }
        Js(t) {
            const e = this.dataConfig, i = t || this.getSymbols()[0].material, r = {};
            let o = !1;
            for (const t in i) if (Qu(i, t)) if (t.indexOf("Texture") > 0) {
                let s = i[t];
                if (!s) {
                    r[t] = void 0;
                    continue;
                }
                const a = "string" == typeof s ? s : s.url, l = this.getCachedTexture(a);
                l ? l.then ? a === s ? s = {
                    promise: l,
                    wrap: "repeat"
                } : s.promise = l : a === s ? s = {
                    data: l,
                    wrap: "repeat"
                } : s.data = l : a === s && (s = {
                    url: a,
                    wrap: "repeat"
                }), s.flipY = !e.side || "bottom" === this.dataConfig.textureYOrigin, r[t] = new n.reshader.Texture2D(s, this.Zs), 
                r[t].once("complete", this.na), r[t].once("disposed", this.ra), r[t].promise && this.addCachedTexture(a, r[t].promise), 
                o = !0;
            } else r[t] = i[t];
            if (this.material) {
                for (let t in r) this.material.set(t, r[t]);
                this.setToRedraw(!0);
            } else this.material = new n.reshader.pbr.StandardMaterial(r), this.material.once("complete", this.oa);
            o || this.sa();
        }
        getShader() {
            return this.shader;
        }
        getUniformValues(t, e) {
            const {iblTexes: n, dfgLUT: i} = this.getIBLRes(), r = xf(t, n, i, e && e.ssr, e && e.jitter);
            return this.setIncludeUniformValues(r, e), r;
        }
        aa(t) {
            return this.hasIBL() ? t.HAS_IBL_LIGHTING = 1 : delete t.HAS_IBL_LIGHTING, t;
        }
        ea() {
            if (!this.shader) return;
            const t = this.shader.shaderDefines;
            this.aa(t), this.shader.shaderDefines = t;
        }
    }
    var kf = "#include <gl2_vert>\n#define EXTRUDE_SCALE 63.0\n#define EXTRUDE_MOD 64.0\n#define MAX_LINE_DISTANCE 65535.0\nuniform mat4 projViewModelMatrix;\nuniform vec2 centiMeterToLocal;\n#ifdef HAS_ALTITUDE\nattribute vec2 aPosition;\nattribute float aAltitude;\n#else\nattribute vec3 aPosition;\n#endif\nattribute vec4 aTubeNormal;\n#ifdef HAS_LINE_WIDTH\nattribute float aLineWidth;\n#else\nuniform float lineWidth;\n#endif\n#include <vt_position_vert>\n#ifdef PICKING_MODE\n#include <fbo_picking_vert>\n#else\nuniform mat4 modelViewMatrix;\nuniform mat3 modelNormalMatrix;\nuniform mat4 modelMatrix;\n#if defined(HAS_PATTERN)\nuniform float resolution;\nuniform float tileResolution;\nuniform float tileRatio;\nattribute float aLinesofar;\nvarying highp float vLinesofar;\nattribute vec4 aTexInfo;\nvarying vec4 vTexInfo;\nvarying float vNormalY;\nvarying float vPatternHeight;\nattribute float aNormalDistance;\n#if defined(HAS_PATTERN_ANIM)\nattribute float aLinePatternAnimSpeed;\nvarying float vLinePatternAnimSpeed;\n#endif\n#if defined(HAS_PATTERN_GAP)\nattribute float aLinePatternGap;\nvarying float vLinePatternGap;\n#endif\n#endif\n#ifdef HAS_COLOR\nattribute vec4 aColor;\nvarying vec4 vColor;\n#endif\n#ifdef HAS_OPACITY\nattribute float aOpacity;\nvarying float vOpacity;\n#endif\nvarying vec3 vModelNormal;\nvarying vec4 vViewVertex;\nvarying vec3 vModelVertex;\n#endif\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\n#include <vsm_shadow_vert>\n#endif\n#include <highlight_vert>\nvoid main() {\n  \n#ifdef HAS_LINE_WIDTH\nfloat c = aLineWidth;\n#else\nfloat c = lineWidth;\n#endif\nfloat d = c / 2.;\n  vec3 e = aTubeNormal.xyz / EXTRUDE_SCALE;\n  vec3 f = unpackVTPosition();\n  vec4 h = vec4(f, 1.);\n  h.xy += e.xy * d * centiMeterToLocal;\n  h.z += e.z * d;\n  gl_Position = projViewModelMatrix * h;\n#ifdef PICKING_MODE\nfbo_picking_setData(gl_Position.w, true);\n#else\nvViewVertex = modelViewMatrix * h;\n  vec3 i = normalize(e);\n  vModelNormal = modelNormalMatrix * i;\n  vModelVertex = (modelMatrix * h).xyz;\n#if defined(HAS_SHADOWING) && !defined(HAS_BLOOM)\nshadow_computeShadowPars(h);\n#endif\n#ifdef HAS_COLOR\nvColor = aColor / 255.;\n#endif\n#ifdef HAS_PATTERN\nfloat j = tileResolution / resolution;\n  float k = aLinesofar - d * centiMeterToLocal.y * aNormalDistance / EXTRUDE_SCALE;\n  vLinesofar = k / tileRatio * j;\n  vTexInfo = vec4(aTexInfo.xy, aTexInfo.zw + 1.);\n  vPatternHeight = c * centiMeterToLocal.x / tileRatio * j;\n  vNormalY = aTubeNormal.w / EXTRUDE_SCALE;\n#if defined(HAS_PATTERN_ANIM)\nvLinePatternAnimSpeed = aLinePatternAnimSpeed / 127.;\n#endif\n#if defined(HAS_PATTERN_GAP)\nvLinePatternGap = aLinePatternGap / 10.0;\n#endif\n#endif\nhighlight_setVarying();\n#endif\n}";
    const {getPBRUniforms: Af} = n.reshader.pbr.PBRUtils;
    class _f extends Mc {
        needToRedraw() {
            return super.needToRedraw() || this.isAnimating();
        }
        supportRenderMode(t) {
            return this.isAnimating() ? "fxaa" === t || "fxaaAfterTaa" === t : "taa" === t || "fxaa" === t;
        }
        isAnimating() {
            if (this.no) return !0;
            const t = this.getSymbols();
            for (let e = 0; e < t.length; e++) if (t[e].linePatternFile && t[e].linePatternAnimSpeed) return !0;
            return !1;
        }
        isBloom(t) {
            return !!this.getSymbol(t.properties.symbolIndex).lineBloom;
        }
        createMesh(t, e) {
            if (!t.geometry) return null;
            const i = this.getMap(), {geometry: r, symbolIndex: o, ref: s} = t, a = this.getSymbolDef(o);
            if (void 0 === s) {
                ic(r, a, this.getFnTypeConfig(o));
            }
            const l = this.getSymbol(o), {tileResolution: u, tileRatio: c} = r.properties, h = {
                tileResolution: u,
                tileRatio: c
            };
            Gu(h, "lineColor", l, "lineColor", "#fff", Ju(this.colorCache)), Gu(h, "linePatternGapColor", l, "linePatternGapColor", [ 1, 1, 1, 1 ], Ju(this.colorCache)), 
            Gu(h, "lineWidth", l, "lineWidth", 2, t => rn.getTubeSizeScale(this.dataConfig.metric) * t), 
            Gu(h, "lineOpacity", l, "lineOpacity", 1), Gu(h, "linePatternAnimSpeed", l, "linePatternAnimSpeed", 0), 
            Gu(h, "linePatternGap", l, "linePatternGap", 0), Gu(h, "metallicFactor", l, "metallicFactor", 0), 
            Gu(h, "roughnessFactor", l, "roughnessFactor", .4), Gu(h, "emissiveFactor", l, "emissiveFactor", [ 0, 0, 0 ]), 
            Gu(h, "uvScale", l, "uvScale", [ 1, 1 ]);
            const d = r.properties.iconAtlas, f = r.data.aPosition instanceof Int16Array;
            d && (h.linePatternFile = Ic(this.regl, d, !1), h.atlasSize = d ? [ d.width, d.height ] : [ 0, 0 ], 
            h.flipY = f ? -1 : 1, this.drawDebugAtlas(d)), void 0 === s && r.generateBuffers(this.regl);
            const p = new n.reshader.pbr.StandardMaterial(h), m = new n.reshader.Mesh(r, p, {
                castShadow: !1,
                picking: !0
            }), y = i.distanceToPointAtRes(100, 100, r.properties.tileResolution)._multi(c / 1e4).toArray();
            m.setUniform("centiMeterToLocal", y), m.setLocalTransform(e);
            const g = {
                IS_LINE_EXTRUSION: 1
            };
            return "square-tube" === this.dataConfig.type && (g.IS_SQUARE_TUBE = 1), d && (g.HAS_PATTERN = 1), 
            m.properties.symbolIndex = o, r.data.aColor && (g.HAS_COLOR = 1), this.setMeshDefines(g, r, a), 
            r.data.aAltitude && (g.HAS_ALTITUDE = 1), m.setDefines(g), m;
        }
        setMeshDefines(t, e, n) {
            e.data.aOpacity && (t.HAS_OPACITY = 1), e.data.aLineWidth && (t.HAS_LINE_WIDTH = 1), 
            fc(n.linePatternAnimSpeed) && (t.HAS_PATTERN_ANIM = 1), fc(n.linePatternGap) && (t.HAS_PATTERN_GAP = 1);
        }
        paint(t) {
            t.states && t.states.includesChanged.shadow && (this.shader.dispose(), this.createShader(t)), 
            super.paint(t);
        }
        init(t) {
            this.getMap().on("updatelights", this.ea, this), this.createIBLTextures();
            const e = this.regl;
            if (this.renderer = new n.reshader.Renderer(e), this.createShader(t), this.pickingFBO) {
                const t = [];
                this.picking = [ new n.reshader.FBORayPicking(this.renderer, {
                    vert: "#define PICKING_MODE 1\n" + kf,
                    uniforms: [ {
                        name: "projViewModelMatrix",
                        type: "function",
                        fn: function(t, e) {
                            const i = [];
                            return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                        }
                    }, {
                        name: "modelNormalMatrix",
                        type: "function",
                        fn: (e, i) => n.mat3.fromMat4(t, i.modelMatrix)
                    } ],
                    extraCommandProps: this.getExtraCommandProps()
                }, this.pickingFBO, this.getMap()) ];
            }
        }
        createShader(t) {
            this.oo = t;
            const e = [], i = {};
            this.fillIncludes(i, e, t), e.push({
                name: "projViewModelMatrix",
                type: "function",
                fn: function(t, e) {
                    const i = [];
                    return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                }
            }), this.shader = new n.reshader.pbr.StandardShader({
                vert: kf,
                uniforms: e,
                defines: this.aa(i),
                extraCommandProps: this.getExtraCommandProps()
            });
        }
        getExtraCommandProps() {
            const t = this.canvas, e = {
                x: 0,
                y: 0,
                width: () => t ? t.width : 1,
                height: () => t ? t.height : 1
            }, n = this.sceneConfig.depthRange;
            return {
                viewport: e,
                stencil: {
                    enable: !0,
                    func: {
                        cmp: () => "<=",
                        ref: (t, e) => e.level
                    },
                    op: {
                        fail: "keep",
                        zfail: "keep",
                        zpass: "replace"
                    }
                },
                cull: {
                    enable: () => !!this.sceneConfig.cullFace,
                    face: this.sceneConfig.cullFace || "back"
                },
                depth: {
                    enable: !0,
                    range: n || [ 0, 1 ],
                    mask: this.sceneConfig.depthMask || !0,
                    func: this.sceneConfig.depthFunc || "<="
                },
                blend: {
                    enable: !0,
                    func: this.getBlendFunc(),
                    equation: "add"
                },
                polygonOffset: {
                    enable: !0,
                    offset: this.getPolygonOffset()
                }
            };
        }
        getUniformValues(t, e) {
            const {iblTexes: n, dfgLUT: i} = this.getIBLRes(), r = Af(t, n, i, null, e && e.jitter), o = t.projViewMatrix, s = t.viewMatrix;
            return r.projViewMatrix = o, r.viewMatrix = s, r.resolution = t.getResolution(), 
            r.currentTime = this.layer.getRenderer().getFrameTimestamp() || 0, this.setIncludeUniformValues(r, e), 
            r;
        }
        createFnTypeConfig(t, e) {
            const n = w(e.lineColor), i = w(e.aLinePatternAnimSpeed), r = w(e.aLinePatternGap), o = this.createShapeFnTypeConfigs(t, e), s = new Int8Array(2);
            return [ {
                attrName: "aColor",
                symbolName: "lineColor",
                type: Uint8Array,
                width: 4,
                define: "HAS_COLOR",
                evaluate: (e, i) => {
                    let r = n(t.getZoom(), e);
                    return v(r) && (r = this.evaluateInFnTypeConfig(r, i, t, e, !0)), Array.isArray(r) || (r = this.colorCache[r] = this.colorCache[r] || Pt(r).unitArray()), 
                    r = Bu(r), r;
                }
            }, {
                attrName: "aLinePattern",
                symbolName: "linePatternAnimSpeed",
                type: Int8Array,
                width: 2,
                related: [ "linePatternGap" ],
                define: "HAS_LINE_PATTERN",
                evaluate: (e, n, r, o) => {
                    let a = i(t.getZoom(), e);
                    return Vu(a) && (a = 0), 0 !== a && (n.properties.hasPatternAnim = 1), s[0] = a / 127, 
                    s[1] = r[o + 1], s[0];
                }
            }, {
                attrName: "aLinePattern",
                symbolName: "linePatternGap",
                type: Int8Array,
                width: 2,
                related: [ "linePatternAnimSpeed" ],
                define: "HAS_LINE_PATTERN",
                evaluate: (e, n, i, o) => {
                    let a = r(t.getZoom(), e);
                    return Vu(a) && (a = 0), s[1] = 10 * a, s[0] = i[o], s[0];
                }
            } ].concat(o);
        }
        createShapeFnTypeConfigs(t, e) {
            const n = x(e.lineWidth), i = x(e.lineOpacity), r = new Uint16Array(1);
            return [ {
                attrName: "aLineWidth",
                symbolName: "lineWidth",
                type: Uint8Array,
                width: 1,
                define: "HAS_LINE_WIDTH",
                evaluate: (e, i) => {
                    let o = n(t.getZoom(), e);
                    return v(o) && (o = this.evaluateInFnTypeConfig(o, i, t, e)), r[0] = Math.round(2 * o), 
                    r[0];
                }
            }, {
                attrName: "aOpacity",
                symbolName: "lineOpacity",
                type: Uint8Array,
                width: 1,
                define: "HAS_OPACITY",
                evaluate: (e, n) => {
                    let o = i(t.getZoom(), e);
                    return v(o) && (o = this.evaluateInFnTypeConfig(o, n, t, e)), r[0] = 255 * o, r[0];
                }
            } ];
        }
        aa(t) {
            return this.hasIBL() ? t.HAS_IBL_LIGHTING = 1 : delete t.HAS_IBL_LIGHTING, t;
        }
        ea() {
            if (!this.shader) return;
            const t = this.shader.shaderDefines;
            this.aa(t), this.shader.shaderDefines = t;
        }
        delete() {
            super.delete(), this.disposeIBLTextures(), this.shader && (this.shader.dispose(), 
            delete this.shader);
        }
    }
    const Tf = [], Sf = [], Mf = [], Pf = [], If = [], jf = [ 0, 0, 0 ], zf = [ 0, 0, 0 ], Ff = [ 1, 1, 1 ], Of = [], Cf = [ 1, 1, 1, 1 ], Ef = [], Rf = [ 1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1 ], Nf = t => class extends t {
        constructor(t, e, i, r, o, s) {
            super(t, e, i, r, o, s), this.la = !1, this.scene.sortFunction = this.sortByCommandKey, 
            this.ua = [], this.ca = new n.reshader.GLTFManager(t), this.ha(), this.da();
        }
        isAnimating() {
            const t = this.getSymbols();
            for (let e = 0; e < t.length; e++) {
                if (t[e] && this.fa[e] && this.pa(e)) return !0;
            }
            return !1;
        }
        createGeometry(t, e) {
            const {data: n, positionSize: i} = t;
            return {
                geometry: {
                    properties: Hu({}, t.properties),
                    data: n,
                    positionSize: i,
                    features: e
                },
                symbolIndex: t.symbolIndex
            };
        }
        getFnTypeConfig() {
            return Of;
        }
        createMesh(t, e, {tileTranslationMatrix: i, tileExtent: r}) {
            if (!this.la) return null;
            const o = this.getMap(), {geometry: s} = t, {positionSize: a, features: l} = s, {aPosition: u, aPickingId: c} = s.data, h = u.length / a;
            if (0 === h) return null;
            const d = {
                instance_vectorA: new Float32Array(4 * h),
                instance_vectorB: new Float32Array(4 * h),
                instance_vectorC: new Float32Array(4 * h),
                aPickingId: []
            }, f = this.ma(d, i, r, s.properties.z, u, a, c, l), p = {};
            for (const t in d) p[t] = {
                buffer: this.regl.buffer({
                    dimension: d[t].length / h,
                    data: d[t]
                }),
                divisor: 1
            };
            const m = this.ya(), y = [], g = this.getSymbols();
            for (let t = 0; t < g.length; t++) {
                const e = g[t], r = this.ua[t];
                if (!r) continue;
                const {fixSizeOnZoom: s} = e;
                let a = n.mat4.identity([]);
                m || (a = this.ga(a));
                let u = 0;
                r.forEach(t => {
                    const {geometry: i, nodeMatrix: r} = t, o = n.mat4.multiply(Ef, a, r), s = i.boundingBox.copy();
                    s.transform(o);
                    const l = this.ba(s, e);
                    l > u && (u = l);
                });
                const c = [ 0, 0, u ], b = r.map(r => {
                    const {geometry: u, nodeMatrix: m, materialInfo: y, skin: g, morphWeights: b, extraInfo: v} = r, x = new (this.getMaterialClazz(y))(y), w = {}, k = new n.reshader.InstancedMesh(p, h, u, x, {
                        transparent: !1,
                        picking: !0
                    });
                    g && (k.setUniform("jointTexture", g.jointTexture), k.setUniform("jointTextureSize", g.jointTextureSize), 
                    k.setUniform("numJoints", g.numJoints), k.setUniform("skinAnimation", 0), w.HAS_SKIN = 1), 
                    b && (k.setUniform("morphWeights", b), w.HAS_MORPH = 1), k.setUniform("hasAlpha", v.alphaMode && "BLEND" === v.alphaMode.toUpperCase()), 
                    Gu(k.uniforms, "polygonFill", e, "polygonFill", Cf, Ju(this.colorCache)), Gu(k.uniforms, "polygonOpacity", e, "polygonOpacity", 1);
                    const A = n.mat4.multiply([], Rf, m);
                    n.mat4.multiply(A, a, A);
                    const _ = [];
                    n.mat4.fromTranslation(_, c), n.mat4.multiply(A, _, A), k.setPositionMatrix(() => {
                        if (Zu(s)) {
                            const t = o.getGLScale() / o.getGLScale(s);
                            return n.vec3.set(Tf, t, t, t), n.mat4.fromScaling(_, Tf), n.mat4.multiply(_, _, A);
                        }
                        return A;
                    });
                    const T = n.mat4.translate([], i, f);
                    return k.setLocalTransform(T), u.generateBuffers(this.regl, {
                        excludeElementsInVAO: !0
                    }), d.instance_color && (w.HAS_INSTANCE_COLOR = 1), k.properties.features = l, k.setDefines(w), 
                    k.properties.symbolIndex = {
                        index: t
                    }, k;
                });
                y.push(...b);
            }
            return y.insContext = {
                instanceData: d,
                tileTranslationMatrix: i,
                tileExtent: r,
                aPosition: u,
                positionSize: a
            }, y;
        }
        ba(t, e) {
            const n = e.anchorZ || "bottom";
            let i = 0;
            return "bottom" === n ? i = -t.min[2] : "top" === n ? i = -t.max[2] : "center" === n && (i = -(t.min[2] + t.max[2]) / 2), 
            i;
        }
        addMesh(t) {
            if (!t) return null;
            if (t[0].properties.level > 2) return null;
            for (let e = 0; e < t.length; e++) {
                if (!t[e] || !t[e].geometry) continue;
                const n = this.pa(t[e].properties.symbolIndex.index);
                t[e].setUniform("skinAnimation", +n);
            }
            return this.scene.addMesh(t), this;
        }
        prepareRender(t) {
            const e = this.getSymbols();
            let n = !1;
            for (let i = 0; i < e.length; i++) {
                const r = e[i];
                if (!r || !this.fa[i]) continue;
                if (this.pa(i) && this.fa[i]) {
                    n || (n = !0);
                    let e = r.speed;
                    const o = !!r.loop;
                    Vu(e) && (e = 1), this.fa[i].updateAnimation(t.timestamp, o, e);
                }
            }
            n && this.setToRedraw(!0), super.prepareRender(t);
        }
        getShadowMeshes() {
            if (!this.isVisible()) return Of;
            this.shadowCount = this.scene.getMeshes().length;
            return this.scene.getMeshes().filter(t => 0 === t.properties.level);
        }
        pa(t) {
            const e = this.getSymbols()[t];
            return e && e.animation && this.fa[t] && this.fa[t].hasSkinAnimation();
        }
        ma(t, e, i, r, o, s, a, l) {
            function u(e, n, i, r) {
                t[e][4 * n] = i[r], t[e][4 * n + 1] = i[r + 4], t[e][4 * n + 2] = i[r + 8], t[e][4 * n + 3] = i[r + 12];
            }
            const c = o.length / s, h = this.layer.options.tileSize / i * this.layer.getRenderer().getTileGLScale(r), d = this.layer.getRenderer().getZScale(), f = 100 * (this.dataConfig.altitudeOffset || 0);
            let p = 1 / 0, m = 1 / 0, y = 1 / 0, g = -1 / 0, b = -1 / 0, v = -1 / 0;
            const x = [];
            for (let t = 0; t < c; t++) {
                const e = n.vec3.set(x, o[t * s] * h, -o[t * s + 1] * h, 2 === s ? 0 : (o[t * s + 2] + f) * d);
                e[0] < p && (p = e[0]), e[0] > g && (g = e[0]), e[1] < m && (m = e[1]), e[1] > b && (b = e[1]), 
                e[2] < y && (y = e[2]), e[2] > v && (v = e[2]);
            }
            const w = p + g / 2, k = m + b / 2, A = y + v / 2, _ = [], T = this.ya();
            for (let e = 0; e < c; e++) {
                const i = n.vec3.set(x, o[e * s] * h - w, -o[e * s + 1] * h - k, 2 === s ? 0 : (o[e * s + 2] + f) * d - A);
                if (n.mat4.fromTranslation(_, i), T) {
                    const t = this.ga(Ef, l, a, e);
                    n.mat4.multiply(_, _, t);
                }
                u("instance_vectorA", e, _, 0), u("instance_vectorB", e, _, 1), u("instance_vectorC", e, _, 2), 
                t.aPickingId[e] = e;
            }
            return n.vec3.set(x, w, k, A), x;
        }
        va() {
            if (!this.xa) {
                const t = this.getMap();
                this.xa = 100 * O(t.getGLRes(), t);
            }
            return this.xa;
        }
        ga(t, e, i, r) {
            const o = this.getMap(), s = this.symbolDef[0], a = this.va();
            let l = s.translationX || 0, u = s.translationY || 0, c = s.translationZ || 0, h = s.rotationX || 0, d = s.rotationY || 0, f = s.rotationZ || 0, p = s.scaleX || 0, m = s.scaleY || 0, y = s.scaleZ || 0;
            const g = i && i[r], b = e && e[g], v = o.getZoom(), x = b && b.feature && b.feature.properties;
            this.wa && (l = this.wa(v, x)), this.ka && (u = this.ka(v, x)), this.Aa && (c = this.Aa(v, x));
            const w = n.vec3.set(Sf, l * a, u * a, c * a);
            this._a && (h = this._a(v, x)), this.Ta && (d = this.Ta(v, x)), this.Sa && (f = this.Sa(v, x));
            const k = n.vec3.set(Mf, h, d, f);
            this.Ma && (p = this.Ma(v, x)), this.Pa && (m = this.Pa(v, x)), this.Ia && (y = this.Ia(v, x));
            const A = n.vec3.set(Pf, p, m, y);
            return this.ja(t, w, k, A);
        }
        getShaderConfig() {
            const t = super.getShaderConfig();
            return t.positionAttribute = "POSITION", t.normalAttribute = "NORMAL", t;
        }
        init(t) {
            super.init(t), this.da();
        }
        ha() {
            const t = this.symbolDef[0];
            v(t.translationX) && (this.wa = x(t.translationX)), v(t.translationY) && (this.ka = x(t.translationY)), 
            v(t.translationZ) && (this.Aa = x(t.translationZ)), v(t.rotationX) && (this._a = x(t.rotationX)), 
            v(t.rotationY) && (this.Ta = x(t.rotationY)), v(t.rotationZ) && (this.Sa = x(t.rotationZ)), 
            v(t.scaleX) && (this.Ma = x(t.scaleX)), v(t.scaleY) && (this.Pa = x(t.scaleY)), 
            v(t.scaleZ) && (this.Ia = x(t.scaleZ));
        }
        ya() {
            return !!(this.wa && !this.wa.isFeatureConstant || this.ka && !this.ka.isFeatureConstant || this.Aa && !this.Aa.isFeatureConstant || this._a && !this._a.isFeatureConstant || this.Ta && !this.Ta.isFeatureConstant || this.Sa && !this.Sa.isFeatureConstant || this.Ma && !this.Ma.isFeatureConstant || this.Pa && !this.Pa.isFeatureConstant || this.Ia && !this.Ia.isFeatureConstant);
        }
        da() {
            if (this.fa) return;
            this.fa = [];
            const t = this.getSymbols();
            this.za = 0;
            for (let e = 0; e < t.length; e++) {
                const n = t[e].url || "pyramid";
                this.ca.loginGLTF(n);
                const i = this.ca.getGLTF(n);
                if (i.then) i.then(n => {
                    if (!n.gltfPack) return this.za++, void (this.za >= t.length && (this.la = !0, this.setToRedraw(!0)));
                    const {gltfPack: i} = n;
                    this.fa[e] = [ i ], this.ua[e] = i.getMeshesInfo(), this.za++, this.za >= t.length && (this.la = !0), 
                    this.setToRedraw(!0);
                }); else {
                    const {gltfPack: t} = i;
                    t && (this.fa[e] = [ t ], this.ua[e] = t.getMeshesInfo(), this.za++);
                }
            }
            this.za >= t.length && (this.la = !0);
        }
        getPickingVert() {
            return "\n    attribute vec3 aPosition;\n    uniform mat4 projViewModelMatrix;\n    uniform mat4 modelMatrix;\n    uniform mat4 positionMatrix;\n    //引入fbo picking的vert相关函数\n    #include <fbo_picking_vert>\n    #include <get_output>\n    void main()\n    {\n        mat4 localPositionMatrix = getPositionMatrix();\n        vec4 localPosition = getPosition(aPosition);\n\n        gl_Position = projViewModelMatrix * localPositionMatrix * localPosition;\n        //传入gl_Position的depth值\n        fbo_picking_setData(gl_Position.w, true);\n    }";
        }
        deleteMesh(t) {
            if (t) {
                this.scene.removeMesh(t);
                for (let e = 0; e < t.length; e++) t[e].disposeInstanceData(), t[e].dispose();
            }
        }
        delete() {
            super.delete();
            const t = this.getSymbols();
            for (let e = 0; e < t.length; e++) {
                const n = t[e].url || "pyramid";
                this.ca.logoutGLTF(n);
            }
        }
        ja(t, e, i, r) {
            const o = n.vec3.set(Tf, ...e || jf), s = i || zf, a = r || Ff, l = n.quat.fromEuler(If, s[0], s[1], s[2]);
            return n.mat4.fromRotationTranslationScale(t, l, o, a);
        }
    };
    class Df extends(Nf(gf)){
        getMaterialClazz(t) {
            return t.diffuseFactor ? n.reshader.PhongSpecularGlossinessMaterial : n.reshader.PhongMaterial;
        }
    }
    class Lf extends(Nf(wf)){
        getMaterialClazz(t) {
            return t.specularGlossinessTexture || t.diffuseTexture ? n.reshader.pbr.StandardSpecularGlossinessMaterial : n.reshader.pbr.StandardMaterial;
        }
    }
    const {getPBRUniforms: Hf} = n.reshader.pbr.PBRUtils, Uf = {
        color: [ 2.0303, 2.028, 2.028 ],
        direction: [ 0, -.2717, -1 ]
    }, qf = {
        index: 0
    }, Vf = [ 0, 0, 0 ], $f = [ 2, 2 ];
    class Gf extends Mc {
        supportRenderMode(t) {
            return "fxaa" === t || "fxaaBeforeTaa" === t;
        }
        needPolygonOffset() {
            return !0;
        }
        needToRedraw() {
            if (super.needToRedraw()) return !0;
            return this.getSymbol(qf).animation;
        }
        createMesh(t, e) {
            const {geometry: i} = t;
            i.generateBuffers(this.regl);
            const r = new n.reshader.Mesh(i, null, {
                castShadow: !1,
                picking: !0
            });
            return r.properties.symbolIndex = qf, r.setLocalTransform(e), r;
        }
        callShader(t, e) {
            super.callShader(t, e), this.transformWater();
            const n = this.Fa(this.getMap(), e);
            this.renderer.render(this.Oa, n, this.Ca, this.getRenderFBO(e));
        }
        addMesh(t, e) {
            this.ro(t, e), super.addMesh(...arguments);
        }
        ro(t) {
            const e = this.getSymbol(qf).ssr;
            for (let n = 0; n < t.length; n++) t[n].ssr = e ? 1 : 0;
        }
        paint(t) {
            t.states && t.states.includesChanged && (this.shader.dispose(), this.Oa.dispose(), 
            this.eo(t));
            const e = !!t.ssr && this.getSymbol(qf).ssr, n = this.Oa, i = n.shaderDefines;
            if (e) {
                const e = Hu({}, i, t.ssr.defines);
                n.shaderDefines = e;
            }
            this.updateIBLDefines(n), this.Ea.ssr = e ? 1 : 0, super.paint(t), e && (n.shaderDefines = i);
        }
        init(t) {
            this.createIBLTextures();
            const e = this.regl;
            this.renderer = new n.reshader.Renderer(e), this.createGround(), this.eo(t), this.pickingFBO && (this.picking = [ new n.reshader.FBORayPicking(this.renderer, {
                vert: Pc,
                uniforms: [ {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: function(t, e) {
                        const i = [];
                        return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                    }
                } ],
                extraCommandProps: {
                    viewport: this.pickingViewport
                }
            }, this.pickingFBO, this.getMap()) ]), this.Ra();
        }
        Ra() {
            const t = this.regl;
            this.Na || (this.Na = t.texture(2));
            const e = this.getSymbol({
                index: 0
            }), n = e.texWaveNormal, i = this.getCachedTexture(n), r = this;
            if (i) this.Da || (i.isLoading ? setTimeout(() => {
                this.shader && this.Ra();
            }, 20) : this.Da = this.La(t, i)); else {
                const e = new Image;
                e.isLoading = !0, e.onload = function() {
                    delete this.isLoading, r.Da = r.La(t, this), r.setToRedraw();
                }, e.onerror = () => {
                    console.error("invalid water wave normal texture:" + n);
                }, this.addCachedTexture(n, e), e.src = n;
            }
            const o = e.texWavePerturbation, s = this.getCachedTexture(o);
            if (s) this.Ha || (s.isLoading ? setTimeout(() => {
                this.Ra(), this.shader;
            }, 20) : this.Ha = this.La(t, s)); else {
                const e = new Image;
                e.isLoading = !0, e.onload = function() {
                    delete this.isLoading, r.Ha = r.La(t, this), r.setToRedraw();
                }, e.onerror = () => {
                    console.error("invalid water wave perturbation texture:" + o);
                }, this.addCachedTexture(o, e), e.src = o;
            }
        }
        La(t, e) {
            return this.Na ? t.texture({
                width: e.width,
                height: e.height,
                mag: "linear",
                min: "linear mipmap linear",
                wrapS: "repeat",
                wrapT: "repeat",
                flipY: !0,
                data: e
            }) : null;
        }
        eo(t) {
            const e = this.canvas, i = [], r = [ {
                name: "projViewModelMatrix",
                type: "function",
                fn: function(t, e) {
                    const i = [];
                    return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                }
            }, {
                name: "modelViewNormalMatrix",
                type: "function",
                fn: (t, e) => {
                    const i = n.mat4.multiply([], e.viewMatrix, e.modelMatrix), r = n.mat4.invert(i, i), o = n.mat4.transpose(r, r);
                    return n.mat3.fromMat4([], o);
                }
            }, {
                name: "modelViewMatrix",
                type: "function",
                fn: (t, e) => n.mat4.multiply([], e.viewMatrix, e.modelMatrix)
            }, {
                name: "uEnvironmentTransform",
                type: "function",
                fn: (t, e) => {
                    const r = e.environmentOrientation || 0;
                    return n.mat3.fromRotation(i, Math.PI * r / 180);
                }
            } ], o = {
                TIME_NOISE_TEXTURE_REPEAT: .3737
            };
            this.fillIncludes(o, r, t);
            const s = {
                x: 0,
                y: 0,
                width: () => e ? e.width : 1,
                height: () => e ? e.height : 1
            }, a = this.sceneConfig.depthRange;
            this.shader = new n.reshader.MeshShader({
                vert: "\n                attribute vec3 aPosition;\n\n                uniform mat4 projViewModelMatrix;\n\n                void main() {\n                    gl_Position = projViewModelMatrix * vec4(aPosition, 1.);\n                }\n            ",
                frag: "\n    #define SHADER_NAME WATER_STENCIL\n    precision mediump float;\n    void main() {\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n",
                uniforms: [ {
                    name: "projViewModelMatrix",
                    type: "function",
                    fn: function(t, e) {
                        const i = [];
                        return n.mat4.multiply(i, e.projViewMatrix, e.modelMatrix), i;
                    }
                } ],
                extraCommandProps: {
                    viewport: s,
                    colorMask: [ !1, !1, !1, !1 ],
                    stencil: {
                        enable: !0,
                        mask: 255,
                        func: {
                            cmp: "<=",
                            ref: 254,
                            mask: 255
                        },
                        op: {
                            fail: "keep",
                            zfail: "keep",
                            zpass: "replace"
                        }
                    },
                    depth: {
                        enable: !0,
                        range: a || [ 0, 1 ],
                        func: this.sceneConfig.depthFunc || "<="
                    },
                    polygonOffset: {
                        enable: !0,
                        offset: this.getPolygonOffset()
                    }
                }
            });
            const l = {
                viewport: s,
                stencil: {
                    enable: !0,
                    mask: 255,
                    func: {
                        cmp: "==",
                        ref: 254,
                        mask: 255
                    },
                    op: {
                        fail: "keep",
                        zfail: "keep",
                        zpass: "replace"
                    }
                },
                depth: {
                    enable: !1
                }
            };
            r.push(...n.reshader.SsrPass.getUniformDeclares()), this.Oa = new n.reshader.MeshShader({
                vert: "#define SHADER_NAME WATER\nuniform mat4 modelMatrix;\nuniform mat4 projViewModelMatrix;\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nuniform vec2 uvOffset;\nuniform vec2 noiseUvOffset;\nuniform vec2 uvScale;\nvarying vec2 vUv;\nvarying vec2 vNoiseUv;\nvarying vec3 vPos;\nvarying mat3 vTbnMatrix;\n#ifdef HAS_SSR\nuniform mat4 modelViewMatrix;\nvarying vec4 vViewVertex;\n#endif\n#include <highlight_vert>\nmat3 c(in vec3 d) {\n  vec3 t = normalize(cross(d, vec3(.0, 1., .0)));\n  vec3 e = normalize(cross(d, t));\n  return mat3(t, e, d);\n}\n#if defined(HAS_SHADOWING)\n#include <vsm_shadow_vert>\n#endif\nconst vec3 f = vec3(0., 0., 1.);\nvoid main(void) {\n  vec4 h = vec4(aPosition, 1.);\n  vec4 i = modelMatrix * h;\n  vPos = i.xyz;\n  vTbnMatrix = c(f);\n  gl_Position = projViewModelMatrix * h;\n  vUv = aTexCoord * uvScale + uvOffset;\n  vNoiseUv = aTexCoord * uvScale * TIME_NOISE_TEXTURE_REPEAT + noiseUvOffset;\n#ifdef HAS_SSR\nvec4 j = modelViewMatrix * h;\n  vViewVertex = j;\n#endif\n#if defined(HAS_SHADOWING)\nshadow_computeShadowPars(h);\n#endif\nhighlight_setVarying();\n}",
                frag: "#define SHADER_NAME WATER\nprecision highp float;\nprecision highp sampler2D;\n#include <hsv_frag>\nuniform vec3 hsv;\nuniform float contrast;\n#if defined(HAS_SHADOWING)\n#include <vsm_shadow_frag>\n#endif\n#include <highlight_frag>\n#if defined(HAS_IBL_LIGHTING)\nuniform vec3 hdrHSV;\nuniform samplerCube prefilterMap;\nuniform sampler2D brdfLUT;\nuniform float rgbmRange;\nuniform mat3 uEnvironmentTransform;\nuniform vec3 diffuseSPH[9];\nvec3 c(const in vec3 d) {\n  vec3 e = uEnvironmentTransform * d;\n  float x = e.x;\n  float y = e.y;\n  float z = e.z;\n  vec3 f = (diffuseSPH[0] + diffuseSPH[1] * x + diffuseSPH[2] * y + diffuseSPH[3] * z + diffuseSPH[4] * z * x + diffuseSPH[5] * y * z + diffuseSPH[6] * y * x + diffuseSPH[7] * (3. * z * z - 1.) + diffuseSPH[8] * (x * x - y * y));\n  if(length(hdrHSV) > .0) {\n    f = hsv_apply(f, hdrHSV);\n  }\n  return max(f, vec3(.0));\n}\nvec3 h(const in vec3 i, const in float j, const in float k, const in float l) {\n  vec4 rgba = texture2D(brdfLUT, vec2(k, j));\n  float b = (rgba[3] * 65280.0 + rgba[2] * 255.);\n  float a = (rgba[1] * 65280.0 + rgba[0] * 255.);\n  const float m = 1. / 65535.;\n  return (i * a + b * l) * m;\n}\n#else\nuniform vec3 ambientColor;\n#endif\nstruct PBRShadingWater {\n  float NdotL;\n  float NdotV;\n  float NdotH;\n  float VdotH;\n  float LdotH;\n  float VdotN;\n};\nvec3 o(const in vec4 u, const in float v) {\n  if(v <= .0)\n    return u.rgb;\n  return v * u.rgb * u.a;\n}\n#ifdef HAS_SSR\nvarying vec4 vViewVertex;\nuniform mat3 modelViewNormalMatrix;\nuniform sampler2D TextureDepth;\nuniform highp vec2 outSize;\nuniform float ssrFactor;\nuniform float ssrQuality;\nuniform sampler2D TextureReflected;\nuniform highp mat4 projMatrix;\nuniform mat4 invProjMatrix;\nuniform vec4 outputFovInfo[2];\nuniform mat4 reprojViewProjMatrix;\nuniform vec2 cameraNearFar;\nfloat A(const in vec4 B) {\n  return B.r + B.g / 255.;\n}\nfloat C(const in vec2 D, const in float E) {\n  vec3 F = vec3(.06711056, .00583715, 52.9829189);\n  return fract(F.z * fract(dot(D.xy + E * vec2(47., 17.) * .695, F.xy))) * .5;\n}\nvec3 G(const in float H, const in float I, const in vec2 J) {\n  float K = min(I - .01, H);\n  float L = floor(K);\n  float M = min(I, L + 1.);\n  float N = pow(2., M);\n  vec2 O = 2. * N / J;\n  if(K - L > .5)\n    N *= 2.;\n  return vec3(O, N);\n}\nvec2 P(const in vec2 Q, const in vec3 R) {\n  vec2 S = max(R.xy, min(1. - R.xy, Q));\n  return vec2(2. * S.x, R.z - 1. - S.y) / R.z;\n}\nvec3 T(const in mat4 U, const in vec3 V) {\n  vec4 W = U * vec4(V, 1.);\n  return vec3(.5 + .5 * W.xy / W.w, W.w);\n}\nvec3 X(const in float Y, const in vec2 S) {\n  return texture2D(TextureReflected, S).rgb;\n}\nfloat Z(float ba) {\n  highp mat4 U = projMatrix;\n  highp float z = ba * 2. - 1.;\n  return -U[3].z / (z + U[2].z);\n}\nfloat bb(const vec2 S) {\n  float ba = A(texture2D(TextureDepth, S));\n  return ba;\n}\nvec3 bc(const in float E, const in vec3 bd, const in vec3 be, const in vec3 bf, const in vec3 bg, const in float bh) {\n  vec2 bi;\n  bi.x = C(gl_FragCoord.yx, E);\n  bi.y = fract(bi.x * 52.9829189);\n  bi.y = mix(bi.y, 1., .7);\n  float bj = 2. * 3.14159 * bi.x;\n  float bk = pow(max(bi.y, .000001), bh / (2. - bh));\n  float bl = sqrt(1. - bk * bk);\n  vec3 bm = vec3(bl * cos(bj), bl * sin(bj), bk);\n  bm = bm.x * bd + bm.y * be + bm.z * bf;\n  return normalize((2. * dot(bg, bm)) * bm - bg);\n}\nfloat bn(const in float E) {\n  return (C(gl_FragCoord.xy, E) - .5);\n}\nvec3 bo(const in vec3 bp, const in float bq, const in vec3 br) {\n  vec3 bs = T(projMatrix, vViewVertex.xyz + br * bq);\n  bs.z = 1. / bs.z;\n  bs -= bp;\n  float bt = min(1., .99 * (1. - bp.x) / max(1e-5, bs.x));\n  float bu = min(1., .99 * (1. - bp.y) / max(1e-5, bs.y));\n  float bv = min(1., .99 * bp.x / max(1e-5, -bs.x));\n  float bw = min(1., .99 * bp.y / max(1e-5, -bs.y));\n  return bs * min(bt, bu) * min(bv, bw);\n}\nfloat bx(const in vec3 bp, const in vec3 bs, inout float by, inout float bz) {\n  float bA = (bz + by) * .5;\n  vec3 bB = bp + bs * bA;\n  float z = bb(bB.xy);\n  float ba = Z(z);\n  float bC = -1. / bB.z;\n  by = ba > bC ? by : bA;\n  bz = ba > bC ? bA : bz;\n  return bA;\n}\nvec4 bD(const in vec3 bp, const in float bq, in float bE, const in vec3 br, const in float j, const in float E) {\n  const int bF = 20;\n  float bG = 1. / float(bF);\n  bE *= bG;\n  vec3 bs = bo(bp, bq, br);\n  float bH = bG;\n  vec3 bI = vec3(.0, bH, 1.);\n  vec3 bB;\n  float z, ba, bC, bJ, bK, bL;\n  bool bM;\n  float bN = 1.;\n  float bA;\n  for(int bO = 0; bO < bF; bO++) {\n    bB = bp + bs * bI.y;\n    z = bb(bB.xy);\n    ba = Z(z);\n    bC = -1. / bB.z;\n    bJ = bC - ba;\n    bJ *= clamp(sign(abs(bJ) - bq * bG * bG), .0, 1.);\n    bM = abs(bJ + bE) < bE;\n    bK = clamp(bI.x / (bI.x - bJ), .0, 1.);\n    bL = bM ? bI.y + bK * bG - bG : 1.;\n    bI.z = min(bI.z, bL);\n    bI.x = bJ;\n    if(bM) {\n      float by = bI.y - bG;\n      float bz = bI.y;\n      bA = bx(bp, bs, by, bz);\n      bA = bx(bp, bs, by, bz);\n      bA = bx(bp, bs, by, bz);\n      bN = bA;\n      break;\n    }\n    bI.y += bG;\n  }\n  return vec4(bp + bs * bN, 1. - bN);\n}\nvec3 bP(in vec4 bQ, const in float bR, const in vec3 bS, const in vec3 bT, const in float j) {\n  vec4 bU = mix(outputFovInfo[0], outputFovInfo[1], bQ.x);\n  bQ.xyz = vec3(mix(bU.xy, bU.zw, bQ.y), 1.) * -1. / bQ.z;\n  bQ.xyz = (reprojViewProjMatrix * vec4(bQ.xyz, 1.)).xyw;\n  bQ.xy /= bQ.z;\n  float bV = clamp(6. - 6. * max(abs(bQ.x), abs(bQ.y)), .0, 1.);\n  bQ.xy = .5 + .5 * bQ.xy;\n  return vec3(bQ.xy, 1.);\n}\nvec3 ssr(const in vec3 bS, const in vec3 bT, const in float j, const in vec3 d, const in vec3 bg) {\n  float bW = .0;\n  vec4 f = vec4(.0);\n  float bh = j * j;\n  bh = bh * bh;\n  vec3 bX = abs(d.z) < .999 ? vec3(.0, .0, 1.) : vec3(1., .0, .0);\n  vec3 bd = normalize(cross(bX, d));\n  vec3 be = cross(d, bd);\n  float bR = ssrFactor * clamp(-4. * dot(bg, d) + 3.8, .0, 1.);\n  bR *= clamp(4.7 - j * 5., .0, 1.);\n  vec3 bp = T(projMatrix, vViewVertex.xyz);\n  bp.z = 1. / bp.z;\n  vec3 br = bc(bW, bd, be, d, bg, bh);\n  float bq = mix(cameraNearFar.y + vViewVertex.z, -vViewVertex.z - cameraNearFar.x, br.z * .5 + .5);\n  float bE = .5 * bq;\n  vec4 bQ;\n  if(dot(br, d) > .001 && bR > .0) {\n    bQ = bD(bp, bq, bE, br, j, bW);\n    if(bQ.w > .0)\n      return bP(bQ, bR, bS, bT, j);\n    \n  }\n  return vec3(.0);\n}\n#endif\nconst vec3 bY = vec3(0., 0., 1.);\nuniform mat4 viewMatrix;\nuniform sampler2D normalTexture;\nuniform sampler2D heightTexture;\nuniform vec4 waveParams;\nuniform vec2 waterDir;\nuniform vec4 waterBaseColor;\nuniform vec3 lightDirection;\nuniform vec3 lightColor;\nuniform vec3 camPos;\nuniform float timeElapsed;\nvarying vec2 vUv;\nvarying vec2 vNoiseUv;\nvarying vec3 vPos;\nvarying mat3 vTbnMatrix;\nfloat bZ(vec3 e, float ca) {\n  float cb = max(.015, ca);\n  return max((e.x + e.y) * .3303545 / cb + .3303545, .0);\n}\nconst vec2 cc = vec2(6. / 25., 5. / 24.);\nvec2 cd(sampler2D ce, vec2 S) {\n  return 2. * texture2D(ce, S).rg - 1.;\n}\nfloat cf(vec2 S) {\n  return texture2D(heightTexture, S).b;\n}\nvec3 cg(sampler2D ce, vec2 S) {\n  return 2. * texture2D(ce, S).rgb - 1.;\n}\nfloat ch(vec2 S, float ci) {\n  return fract(ci);\n}\nfloat cj(vec2 S, float ci) {\n  float ck = ch(S, ci);\n  return 1. - abs(1. - 2. * ck);\n}\nvec3 cl(sampler2D cm, vec2 S, float ci, float cn) {\n  float co = waveParams[2];\n  float cp = waveParams[3];\n  vec2 cq = cd(cm, S) * co;\n  float ck = ch(S, ci + cn);\n  float cr = cj(S, ci + cn);\n  vec2 f = S;\n  f -= cq * (ck + cp);\n  f += cn;\n  f += (ci - ck) * cc;\n  return vec3(f, cr);\n}\nconst float cs = 7.77;\nvec3 ct(sampler2D cu, sampler2D cv, vec2 cw, vec2 cx, float ci) {\n  float ca = waveParams[0];\n  vec2 cy = ci * -cx;\n  float cz = cf(vNoiseUv) * cs;\n  vec3 cA = cl(cv, cw + cy, ci + cz, .0);\n  vec3 cB = cl(cv, cw + cy, ci + cz, .5);\n  vec3 cC = cg(cu, cA.xy) * cA.z;\n  vec3 cD = cg(cu, cB.xy) * cB.z;\n  vec3 cE = normalize(cC + cD);\n  cE.xy *= ca;\n  cE.z = sqrt(1. - dot(cE.xy, cE.xy));\n  return cE;\n}\nvec4 cF(vec2 cw, float cG) {\n  float cH = waveParams[1];\n  vec3 d = ct(normalTexture, heightTexture, cw * cH, waterDir, cG);\n  float cI = bZ(d, waveParams[0]);\n  return vec4(d, cI);\n}\nconst float cJ = 3.141592653589793;\nconst float cK = 1. / cJ;\nconst float cL = .3183098861837907;\nconst float cM = 1.570796326794897;\nconst float cN = .4;\nfloat cO = 2.2;\nvec3 cP(float cQ, vec3 cR, float l) {\n  return cR + (l - cR) * pow(1. - cQ, 5.);\n}\nfloat cS(float cT, float j) {\n  float cU = j * j;\n  float cV = cT * cT;\n  float cW = pow((cV * (cU - 1.) + 1.), cO) * cJ;\n  return cU / cW;\n}\nfloat cX(float cY) {\n  return .25 / (cY * cY);\n}\nvec3 cZ(const vec3 x) {\n  return (x * (2.51 * x + .03)) / (x * (2.43 * x + .59) + .14);\n}\nconst float da = 2.2;\nconst float db = .4545454545;\nvec4 dc(vec4 u) {\n  return vec4(pow(u.rgb, vec3(db)), u.w);\n}\nvec3 dd(vec3 u) {\n  return pow(u, vec3(da));\n}\nconst vec3 de = vec3(.02, 1., 5.);\nconst vec2 df = vec2(.02, .1);\nconst float j = .06;\nconst float dg = 1.7;\nconst vec3 dh = vec3(0, .6, .9);\nconst vec3 di = vec3(.72, .92, 1.);\nconst float dj = .65;\nconst float dk = 300000.0;\nconst float dl = 500000.0;\nconst float dm = .775;\nconst float dn = .8;\nPBRShadingWater dp;\nvec3 dq(in PBRShadingWater dr, float j, vec3 ds, float dt) {\n  vec3 du = cP(dr.VdotH, ds, dt);\n  float dv = cS(dr.NdotH, j);\n  float dw = cX(dr.LdotH);\n  float dx = mix(j + .045, j + .385, 1. - dr.VdotH);\n  float dy = 1.2;\n  float dz = cS(dr.NdotH, dx) * dy;\n  return ((dv + dz) * dw) * du;\n}\nvec3 dA(float dg, float dB, vec3 dh, float dC) {\n  return dg * (.075 * dh * pow(dB, 4.) + 50. * pow(dB, 23.)) * dC;\n}\nvec3 dD(in float bk, in vec3 dE, in vec3 dF) {\n  float dG = pow((1. - bk), de[2]);\n  return mix(dF, dE, dG);\n}\nvec3 dH(in vec3 e, in vec3 dI, in float dJ, in float j) {\n  \n#ifdef HAS_IBL_LIGHTING\nvec3 dK = reflect(-dI, e);\n  vec4 dL = textureCube(prefilterMap, uEnvironmentTransform * dK);\n  float dM = clamp(1. + dot(dK, e), .0, 1.);\n  dL *= dM * dM;\n  vec3 i = o(dL, rgbmRange);\n  vec3 dN = c(e);\n  float l = clamp(50.0 * waterBaseColor.g, .0, 1.);\n  vec3 dO = h(waterBaseColor.rgb, j, dot(e, dI), l);\n  return i * dO + dN;\n#else\nvec3 dP = dd(di);\n  vec3 dQ = dd(dh);\n  vec3 di = dD(dJ, dP, dQ);\n  return di;\n#endif\n}\nvec3 dR(in vec3 e, in vec3 dI, in vec3 dS, vec3 u, in vec3 dT, in vec3 dU, in float dV, float dW, vec3 dX) {\n  float dY = 0.;\n  vec3 dZ = dd(u);\n  vec3 bm = normalize(dS + dI);\n  dp.NdotL = clamp(dot(e, dS), .0, 1.);\n  dp.NdotV = clamp(dot(e, dI), .001, 1.);\n  dp.VdotN = clamp(dot(dI, e), .001, 1.);\n  dp.NdotH = clamp(dot(e, bm), .0, 1.);\n  dp.VdotH = clamp(dot(dI, bm), .0, 1.);\n  dp.LdotH = clamp(dot(dS, bm), .0, 1.);\n  float dJ = max(dot(dU, dI), .0);\n  vec3 di = dH(e, dI, dJ, j);\n  float ea = max(dot(dU, dS), .0);\n  float eb = .1 + ea * .9;\n  di *= eb;\n  float ec = clamp(dV, .8, 1.);\n  vec3 ed = cP(dp.VdotN, vec3(de[0]), de[1]);\n  vec3 ee = ed * di * ec;\n  vec3 ef = dZ * mix(di, ea * dT * cK, 2. / 3.) * ec;\n  vec3 i = vec3(.0);\n  if(dJ > .0 && ea > .0) {\n    vec3 eg = dq(dp, j, vec3(df[0]), df[1]);\n    vec3 eh = dT * cK * dV;\n    i = dp.NdotL * eh * eg;\n  }\n  vec3 cI = vec3(.0);\n  if(dJ > .0) {\n    cI = dA(dg, dW, dh, eb);\n  }\n  vec3 ei = vec3(.0);\n#ifdef HAS_SSR\nfloat ej = smoothstep(dl, dk, -dX.z);\n  mat4 ek = viewMatrix;\n  vec4 el = vec4(dX.xyz, 1.);\n  vec3 em = normalize(el.xyz);\n  vec4 en = ek * vec4(e, .0);\n  vec3 eo = normalize(en.xyz);\n  vec4 ep = ek * vec4(dU, .0);\n  float eq = pow(max(dot(-em, ep.xyz), .0), cN);\n  vec3 er = mix(ep.xyz, eo, eq);\n  vec3 es = ssr(vec3(.0), vec3(1.), j, normalize(er), -normalize(vViewVertex.xyz));\n  if(es.z > .0) {\n    vec2 et = smoothstep(.3, .6, abs(vec2(.5) - es.xy));\n    dY = dm * clamp(1. - 1.3 * et.y, .0, 1.) * ej;\n    vec3 eu = X(.0, es.xy);\n    ei = dd(eu) * dY * ed.y * dj;\n  }\n#endif\nfloat ev = mix(dn, dn * .5, dY);\n  return cZ((1. - dY) * ee + ei + ef * ev + i + cI);\n}\nvoid main() {\n  vec3 dU = bY;\n  vec4 ew = cF(vUv, timeElapsed);\n  vec3 e = normalize(vTbnMatrix * ew.xyz);\n  vec3 dI = -normalize(vPos - camPos);\n  vec3 dS = normalize(-lightDirection);\n#if defined(HAS_SHADOWING)\nfloat dV = shadow_computeShadow();\n#else\nfloat dV = 1.;\n#endif\nvec4 ex = viewMatrix * vec4(vPos, 1.);\n  vec4 ey = vec4(dR(e, dI, dS, waterBaseColor.rgb, lightColor, dU, dV, ew.w, ex.xyz), waterBaseColor.a);\n  gl_FragColor = dc(ey);\n  if(contrast != 1.) {\n    gl_FragColor = contrastMatrix(contrast) * gl_FragColor;\n  }\n  if(length(hsv) > .0) {\n    gl_FragColor = hsv_apply(gl_FragColor, hsv);\n  }\n  gl_FragColor = highlight_blendColor(gl_FragColor);\n}",
                defines: o,
                uniforms: r,
                extraCommandProps: l
            });
        }
        needClearStencil() {
            return !0;
        }
        getUniformValues(t) {
            return {
                projViewMatrix: t.projViewMatrix
            };
        }
        Fa(t, e) {
            const {iblTexes: i, dfgLUT: r} = this.getIBLRes(), o = Hf(t, i, r, e && e.ssr, e && e.jitter), s = t.getLightManager();
            let a = s && s.getDirectionalLight() || {};
            const l = s && s.getAmbientLight() || {}, u = this.getSymbol(qf), c = this.Ua = this.Ua || [], h = this.qa = this.qa || [];
            n.vec4.set(h, .09, u.uvScale || 3, .03, -.5);
            return Hu(o, {
                ambientColor: l.color || [ .2, .2, .2 ],
                viewMatrix: t.viewMatrix,
                lightDirection: a.direction || Uf.direction,
                lightColor: a.color || Uf.color,
                camPos: t.cameraPosition,
                timeElapsed: u.animation ? (this.layer.getRenderer().getFrameTimestamp() || 0) / (1 / (u.waterSpeed || 1) * 1e4) : 0,
                normalTexture: this.Da || this.Na,
                heightTexture: this.Ha || this.Na,
                waveParams: h,
                waterDir: Wf(c, u.waterDirection || 0),
                waterBaseColor: u.waterBaseColor || [ .1451, .2588, .4863, 1 ],
                contrast: u.contrast || 1,
                hsv: u.hsv || Vf
            }), this.setIncludeUniformValues(o, e), e && e.ssr && e.ssr.renderUniforms && Hu(o, e.ssr.renderUniforms), 
            o;
        }
        delete() {
            super.delete(), this.Na && (this.Na.destroy(), delete this.Na), this.Da && this.Da.destroy(), 
            this.Ha && this.Ha.destroy(), this.shader && (this.shader.dispose(), delete this.shader), 
            this.Oa && this.Oa.dispose(), this.Ea && (this.Ea.geometry.dispose(), this.Ea.material && this.Ea.material.dispose(), 
            this.Ea.dispose(), delete this.Ea), this.disposeIBLTextures();
        }
        createGround() {
            const t = new n.reshader.Plane;
            t.data.aTexCoord = new Uint8Array([ 0, 1, 1, 1, 0, 0, 1, 0 ]), t.generateBuffers(this.renderer.regl), 
            this.Ea = new n.reshader.Mesh(t, null, {
                castShadow: !1
            }), this.Ca = new n.reshader.Scene([ this.Ea ]);
        }
        transformWater() {
            const t = this.getMap(), e = n.GroundPainter.getGroundTransform(this.Ea.localTransform, t);
            this.Ea.setLocalTransform(e);
            const i = t._get2DExtentAtRes(t.getGLRes()), r = i.getWidth(), o = i.getHeight(), s = t.cameraLookAt, a = s[0] - r, l = s[1] + o, u = a / $f[0], c = l / $f[1], h = u % 1, d = c % 1, f = .3737 * u % 1, p = .3737 * c % 1, m = r / $f[0] * 2, y = o / $f[1] * 2;
            this.Ea.setUniform("uvOffset", [ h, d ]), this.Ea.setUniform("noiseUvOffset", [ f, p ]), 
            this.Ea.setUniform("uvScale", [ m, -y ]);
        }
    }
    function Wf(t, e) {
        return e = function(t) {
            return Math.PI * t / 180;
        }(e), t[0] = Math.sin(e), t[1] = Math.cos(e), t;
    }
    const Bf = Du("fill", Fc);
    Bf.registerAt(kl);
    const Jf = Du("line", Rc);
    Jf.registerAt(kl);
    const Xf = Du("line-gradient", Nc);
    Xf.registerAt(kl);
    const Yf = Du("icon", ld);
    Yf.registerAt(kl);
    const Zf = Du("text", Qd);
    Zf.registerAt(kl);
    const Kf = Du("native-line", lf);
    Kf.registerAt(kl);
    Du("native-point", of).registerAt(kl);
    const Qf = Du("phong", gf);
    Qf.registerAt(kl);
    const tp = Du("wireframe", vf);
    tp.registerAt(kl);
    const ep = Du("lit", wf);
    ep.registerAt(kl);
    const np = Du("tube", _f);
    np.registerAt(kl);
    const ip = Du("gltf-phong", Df);
    ip.registerAt(kl);
    const rp = Du("gltf-lit", Lf);
    rp.registerAt(kl);
    const op = Du("heatmap", class extends Mc {
        createFnTypeConfig(t, e) {
            const n = x(e.heatWeight), i = new Int16Array(1);
            return [ {
                attrName: "aWeight",
                symbolName: "heatWeight",
                type: Uint8Array,
                size: 1,
                evaluate: e => {
                    const r = n(t.getZoom(), e);
                    return i[0] = r, i[0];
                }
            } ];
        }
        createMesh(t, e) {
            const {geometry: i, symbolIndex: r, ref: o} = t;
            if (void 0 === o) {
                ic(i, this.getSymbolDef(r), this.getFnTypeConfig(r));
            }
            const s = this.getSymbol(r), a = {
                tileRatio: i.properties.tileRatio,
                dataResolution: i.properties.tileResolution
            };
            Gu(a, "heatmapIntensity", s, "heatmapIntensity", 1), Gu(a, "heatmapRadius", s, "heatmapRadius", 6), 
            Gu(a, "heatmapWeight", s, "heatmapWeight", 1), Gu(a, "heatmapOpacity", s, "heatmapOpacity", 1), 
            i.generateBuffers(this.regl);
            const l = new n.reshader.Material(a), u = new n.reshader.Mesh(i, l, {
                transparent: !0,
                castShadow: !1,
                picking: !0
            }), c = {};
            return i.data.aWeight && (c.HAS_HEAT_WEIGHT = 1), u.setDefines(c), u.setLocalTransform(e), 
            u.properties.symbolIndex = r, u;
        }
        callRenderer(t, e, n) {
            const i = this.getRenderFBO(n);
            this.Va.render(this.scene, e, i);
        }
        getUniformValues(t) {
            const e = this.getSymbol({
                index: 0
            }), {projViewMatrix: n} = t;
            return {
                glScale: 1 / t.getGLScale(),
                resolution: t.getResolution(),
                projViewMatrix: n,
                heatmapOpacity: e.heatmapOpacity
            };
        }
        getHeatmapMeshes() {
            return this.scene.getMeshes();
        }
        delete() {
            super.delete(...arguments), this.Va.dispose(), delete this.Va;
        }
        init() {
            const t = this.regl;
            this.renderer = new n.reshader.Renderer(t);
            const e = this.getPolygonOffset(), i = this.getSymbols()[0];
            this.Va = new n.HeatmapProcess(this.regl, this.sceneConfig, this.layer, i.heatmapColor, null, e);
        }
    });
    op.registerAt(kl);
    const sp = Du("water", Gf);
    sp.registerAt(kl), Ol.registerPainter("lit", wf), Ol.registerPainter("icon", ld), 
    Ol.registerPainter("fill", Fc), Ol.registerPainter("line", Rc), Ol.registerPainter("line-gradient", Nc), 
    Ol.registerPainter("water", Gf), Ol.registerPainter("tube", _f), n.reshader.ShaderLib.register("vt_position_vert", "#ifdef HAS_TERRAIN_ALTITUDE\nattribute float aTerrainAltitude;\n#endif\n#ifdef HAS_ALTITUDE\n    vec3 unpackVTPosition() {\n        return vec3(aPosition, aAltitude);\n    }\n#else\n    float position_modValue = 16384.0;\n    float position_delta = 0.00001;\n    vec3 unpackVTPosition() {\n        float z = aPosition.z;\n        vec2 pos = sign(aPosition.xy + position_delta) * mod(abs(aPosition.xy), position_modValue);\n        vec2 highs = floor(abs(aPosition.xy) / position_modValue);\n        float altitude = sign(z + position_delta) * (highs.x * 2.0 + highs.y) * pow(2.0, 15.0) + z;\n        #ifdef HAS_TERRAIN_ALTITUDE\n            altitude += aTerrainAltitude * 100.0;\n        #endif\n        return vec3(pos, altitude);\n    }\n#endif"), 
    kl.VERSION = "0.79.1", Ol.VERSION = "0.79.1";
    if (o.mat4.create(), o.transcoders) {
        const t = r.Map.VERSION;
        if (t.indexOf("1.0.0-beta") >= 0 || t.indexOf("1.0.0-alpha") >= 0) {
            const t = o.transcoders.inject(s);
            r.registerWorkerAdapter("@maptalks/vt", t);
        } else r.registerWorkerAdapter("@maptalks/vt", (function() {
            return o.transcoders.inject(s);
        }));
    } else r.registerWorkerAdapter("@maptalks/vt", s);
    t.FillPainter = Fc, t.FillPlugin = Bf, t.FilterUtil = Co, t.GLTFPhongPlugin = ip, 
    t.GLTFStandardPlugin = rp, t.GeoJSONVectorTileLayer = jl, t.HeatmapPlugin = op, 
    t.IconPainter = ld, t.IconPlugin = Yf, t.LineGradientPlugin = Xf, t.LinePainter = Rc, 
    t.LinePlugin = Jf, t.LineStringLayer = ou, t.LitPlugin = ep, t.MapboxVectorTileLayer = Pl, 
    t.NativeLinePainter = lf, t.NativeLinePlugin = Kf, t.NativePointPainter = of, t.PackUtil = Ia, 
    t.PhongPainter = gf, t.PhongPlugin = Qf, t.PointLayer = ru, t.PolygonLayer = au, 
    t.SYMBOLS_NEED_REBUILD_IN_VECTOR = Ra, t.SYMBOLS_NEED_REBUILD_IN_VT = Ea, t.TextPainter = Qd, 
    t.TextPlugin = Zf, t.TubePlugin = np, t.Vector3DLayer = Ol, t.VectorTileLayer = kl, 
    t.VectorTileLayerRenderer = ol, t.WaterPlugin = sp, t.WireframePainter = vf, t.WireframePlugin = tp, 
    Object.defineProperty(t, "t", {
        value: !0
    }), "undefined" != typeof console && console.log("@maptalks/vt v0.79.1");
}));
